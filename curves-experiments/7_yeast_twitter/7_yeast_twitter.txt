Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Run: 1
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.713
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048768;  // std dev = 4.71e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7194734122109547;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283916;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5553664367462845;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360632;  // std dev = 4.17e-09, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.37905204569677153;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else return -0.1015963294878362;  // std dev = 3.94e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.27465644130116706;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.10159632948783627;  // std dev = 1.32e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3022946406770668;  // std dev = 0.990, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926105;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else return -0.09269127618926096;  // std dev = 1.32e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2701735194174189;  // std dev = 0.046, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 2.08e-09, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22031556908264316;  // std dev = 0.040, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.0787767547310917;  // std dev = 2.79e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.18481176818513054;  // std dev = 0.035, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333704;  // std dev = 1.29e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15857803558710165;  // std dev = 0.006, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420271;  // std dev = 1.05e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1385496249704192;  // std dev = 0.005, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.537', 'seconds']
Parameter learned model CLL:-0.085411 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.06e-07, 0, 31], 'false,true': [4.71e-08, 45, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.0, 0, 31], 'false,true': [0.0, 61, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.0, 0, 31], 'false,true': [0.0, 0, 0], 'false,false': [4.17e-09, 49, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.981, 1, 25], 'true,false': [3.94e-08, 60, 0], 'false,true,true': [0.35, 1, 6], 'false,true,false': [1.32e-09, 6, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.99, 1, 31], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 47, 0], 'false,false,false': [1.32e-09, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.046, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.08e-09, 64, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.04, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.79e-08, 63, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.035, 0, 31], 'true,false': [0.0, 0, 0], 'false,true': [1.29e-08, 45, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.63e-09, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.006, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.05e-08, 46, 0], 'false,false,false': [0.0, 9, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.005, 0, 31], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 83, 0]}]
{'': [1.375244004696968e-15, 4.9343245538895844e-17], 'false': [4.9343245538895844e-17, nan]}
{'': [-4.584146682323227e-16, -4.186086814160426e-17], 'false': [-4.186086814160426e-17, nan]}
{'': [-5.730183352904034e-17, 1.586032892321652e-17], 'false': [nan, 1.586032892321652e-17]}
{'': [0.05990913604350592, 0.10111618543766886], 'false': [0.10111618543766886, nan], 'false,true': [0.12244897959183679, 0.0], 'true': [0.03698224852071001, 2.590520390792032e-17]}
{'': [0.030631987958931392, -1.820037745287142e-18], 'true': [0.030631987958931392, nan], 'false': [nan, -1.820037745287142e-18], 'false,false': [-3.543264972207946e-18, 3.96508223080413e-18], 'false,false,true': [nan, -3.543264972207946e-18]}
{'': [6.804941596695278e-05, 4.336808689942018e-18], 'false': [nan, 4.336808689942018e-18], 'false,false': [nan, 4.336808689942018e-18]}
{'': [5.197625810519689e-05, 1.2335811384723961e-17], 'false': [nan, 1.2335811384723961e-17], 'false,false': [nan, 1.2335811384723961e-17], 'false,false,false': [1.2335811384723961e-17, nan]}
{'': [4.0163383222754475e-05, 2.0185873175002845e-18], 'true': [4.0163383222754475e-05, nan], 'false': [3.7007434154171884e-18, 6.938893903907229e-19], 'false,false': [nan, 6.938893903907229e-19]}
{'': [3.161048034257487e-05, 4.037174635000569e-18], 'false': [nan, 4.037174635000569e-18], 'false,false': [2.413528314402514e-18, 0.0], 'false,false,true': [nan, 2.413528314402514e-18]}
{'': [2.535741604063747e-05, -1.070094481566416e-17], 'false': [nan, -1.070094481566416e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 9.364
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return -0.14185106490048766;  // std dev = 5.96e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.7229264970645288;  // std dev = 0.060, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(E, A) )
%   | | then return 0.5194734122109544;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.7263795819181033;  // std dev = 0.059, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.1254446385283916;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then return 0.5545135885609768;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.3864116606049558;  // std dev = 0.934, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.5645835114736993;  // std dev = 0.089, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return -0.11231637819360626;  // std dev = 5.05e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.436652201218117;  // std dev = 0.183, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.10159632948783626;  // std dev = 2.98e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.41443551026234526;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.09723462095235151;  // std dev = 0.775, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.23140623799576102;  // std dev = 0.266, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.327999092322345;  // std dev = 0.074, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.3672080573772512;  // std dev = 0.136, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926105;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.26822489188887944;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.3169240970781082;  // std dev = 0.060, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return 0.2876433913753027;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.24497653723547913;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.27036280634077764;  // std dev = 0.064, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, H) )
%   | then if ( tweets(A, I) )
%   | | then if ( follows(H, A) )
%   | | | then return -0.08518475138839683;  // std dev = 1.29e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.08518475138839686;  // std dev = 2.28e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return -0.08518475138839687;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.21893690481485795;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.23245498359556993;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, F), follows(G, A) )
%   | | | then return 0.21376511570868248;  // std dev = 0.030, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2044715362044549;  // std dev = 6.04e-05, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.25707958705673134;  // std dev = 0.050, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2199912342041424;  // std dev = 0.060, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(I, A) )
%   | then if ( follows(A, I) )
%   | | then return -0.07877675473109176;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.07877675473109175;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.18595902324735208;  // std dev = 0.018, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.17285177779084712;  // std dev = 0.001, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.19656615676797085;  // std dev = 0.039, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, G) )
%   | | then return -0.05419668751189885;  // std dev = 0.788, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.19203629900438615;  // std dev = 0.066, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, A) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.07324622576333704;  // std dev = 9.13e-09, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.07324622576333704;  // std dev = 9.31e-10, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.07324622576333704;  // std dev = 9.31e-10, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), follows(F, D) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.15752387627096243;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.14959029094531126;  // std dev = 0.000899, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.16378666299836894;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.15352401615806796;  // std dev = 0.049, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.18620907788316987;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.18238234291861055;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.06842697784420275;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.06842697784420276;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), follows(F, E) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.13772774874335103;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.13154026490737655;  // std dev = 0.000807, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.14257793509336145;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.15761156100738186;  // std dev = 0.033, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.135889273959795;  // std dev = 0.035, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.15674211900352097;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, J) )
%   | then return -0.06419184008202623;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( tweets(A, K) )
%   | | then return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.06419184008202618;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '5.078', 'seconds']
Refined model CLL: -0.082653


******************************************
Best model found
******************************************
Results 

CLL : -0.092746 

AUC ROC : 0.994771 

AUC PR : 0.457621 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 9.364 

Total Inference Time : 1.8894524574279785 

Total revision time: 17.15812120628357
Best scored revision CLL: -0.082653


Results 

CLL : -0.092746 

AUC ROC : 0.994771 

AUC PR : 0.457621 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 18.603443958282472 

Total Inference Time : 1.8894524574279785 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.548
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8268989350995126;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048796;  // std dev = 0.000, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7257371741022826;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839105;  // std dev = 8.02e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5153737124230974;  // std dev = 0.210, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360617;  // std dev = 8.64e-09, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.43339574601089725;  // std dev = 4.21e-08, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return -0.10159632948783623;  // std dev = 4.83e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4333957460108974;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.10159632948783634;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3315006690962519;  // std dev = 1.30e-07, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0926912761892609;  // std dev = 6.14e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else return -0.09269127618926104;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23127105762971573;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 5.89e-09, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22025563248788288;  // std dev = 5.16e-08, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109153;  // std dev = 7.60e-08, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15498126193375844;  // std dev = 1.328, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333707;  // std dev = 4.28e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333707;  // std dev = 8.33e-09, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14667177389949754;  // std dev = 0.125, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420267;  // std dev = 4.71e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else return -0.06842697784420274;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.09739942044554496;  // std dev = 0.210, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.225', 'seconds']
Parameter learned model CLL:-0.087525 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.392, 2, 62], 'false,true': [0.0, 137, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.0, 0, 62], 'false,true': [8.02e-08, 120, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.21, 3, 62], 'false,true': [0.0, 0, 0], 'false,false': [8.64e-09, 134, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [4.21e-08, 0, 44], 'true,false': [4.83e-08, 92, 0], 'false,true,true': [0.0, 0, 18], 'false,true,false': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.3e-07, 0, 62], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.14e-08, 109, 0], 'false,false,false': [0.0, 22, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.392, 2, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 122, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [5.16e-08, 0, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.6e-08, 135, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.328, 2, 62], 'true,false': [0.0, 0, 0], 'false,true': [4.28e-08, 93, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [8.33e-09, 22, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.125, 1, 62], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.71e-08, 95, 0], 'false,false,false': [0.0, 17, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.21, 3, 62], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 138, 0]}]
{'': [0.030273437499999334, -6.807206866314829e-17], 'false': [-6.807206866314829e-17, nan]}
{'': [-1.7190550058712102e-15, 5.3660779523549233e-17], 'false': [5.3660779523549233e-17, nan]}
{'': [0.0440236686390531, 7.622426736232418e-17], 'false': [nan, 7.622426736232418e-17]}
{'': [0.0626408129534171, 0.07113073299142361], 'false': [0.07113073299142361, nan], 'false,true': [-9.868649107779169e-17, -2.64338815386942e-18], 'true': [4.0371746350005693e-17, 2.5342047301226398e-17]}
{'': [2.721837092629416e-16, 4.57649185723347e-17], 'true': [2.721837092629416e-16, nan], 'false': [nan, 4.57649185723347e-17], 'false,false': [3.463080994243608e-17, -8.831319514063745e-18], 'false,false,true': [nan, 3.463080994243608e-17]}
{'': [0.03027343750000009, 3.45807171604557e-17], 'false': [nan, 3.45807171604557e-17], 'false,false': [nan, 3.45807171604557e-17]}
{'': [4.297637514678025e-17, 4.2764146133709734e-17], 'false': [nan, 4.2764146133709734e-17], 'false,false': [nan, 4.2764146133709734e-17], 'false,false,false': [4.2764146133709734e-17, nan]}
{'': [0.02755710996053541, 7.723290606088046e-18], 'true': [0.02755710996053541, nan], 'false': [1.9697505275607617e-17, 3.1540426835941946e-18], 'false,false': [nan, 3.1540426835941946e-18]}
{'': [0.015621063240110913, 2.676430505792788e-17], 'false': [nan, 2.676430505792788e-17], 'false,false': [2.337311630789803e-17, -8.163404592832033e-19], 'false,false,true': [nan, 2.337311630789803e-17]}
{'': [0.044023668639053236, -1.2872151010146743e-17], 'false': [nan, -1.2872151010146743e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 19.36
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.8581489350995121;  // std dev = 2.06e-07, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.14185106490048768;  // std dev = 6.66e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.21947341221095445;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.7236405389580786;  // std dev = 0.073, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   else return -0.12544463852839127;  // std dev = 0.000, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.5553664367462846;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.22203310341295115;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5548122286665139;  // std dev = 0.002, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.5678514886911874;  // std dev = 0.179, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else return -0.11231637819360617;  // std dev = 1.00e-07, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.42714949658276663;  // std dev = 0.160, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.1649193589703958;  // std dev = 0.772, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3613974668693428;  // std dev = 0.981, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return -0.10159632948783631;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.41346948938760364;  // std dev = 2.11e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.32700505697640503;  // std dev = 0.161, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then return 0.19032430506646952;  // std dev = 0.776, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.34052162247056167;  // std dev = 0.172, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else return -0.09269127618926104;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | | then return 0.2628013553105235;  // std dev = 0.115, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.15447116950551704;  // std dev = 0.960, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.2967604863461287;  // std dev = 0.821, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.2574469294805302;  // std dev = 0.024, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.29489795555242165;  // std dev = 0.089, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.2515965278978893;  // std dev = 2.11e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.2490599717954809;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( tweets(A, I) )
%   | then return -0.08518475138839682;  // std dev = 5.51e-09, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return -0.08518475138839689;  // std dev = 5.27e-09, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), recursion_accounttype(D, B) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.2058884763733218;  // std dev = 8.60e-05, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.12315298359483663;  // std dev = 0.943, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.2753878832696651;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2113759377521515;  // std dev = 0.029, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(A, G), follows(G, H) )
%   | | | then return 0.299788273325725;  // std dev = 0.229, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2510698329921595;  // std dev = 0.086, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.2143340980065104;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2054306036385949;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109158;  // std dev = 5.89e-09, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(F, A), follows(E, F) )
%   | | | then return 0.18180882664870104;  // std dev = 0.047, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.1938930804601167;  // std dev = 0.065, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(D, G), follows(A, G) )
%   | | | then return 0.23024139424620546;  // std dev = 0.216, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.20501742170587586;  // std dev = 0.051, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.17464071606238676;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.07635926611606736;  // std dev = 0.865, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.17391619958483984;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, J) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else return -0.07324622576333707;  // std dev = 6.45e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.15652264832238774;  // std dev = 0.040, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.17364833549675587;  // std dev = 0.037, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2517194636808588;  // std dev = 0.131, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.1544541475886748;  // std dev = 0.038, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.1837292718004658;  // std dev = 0.021, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.14562811069363668;  // std dev = 0.031, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.15048450611512232;  // std dev = 0.000659, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, I) )
%   | then return -0.06842697784420264;  // std dev = 5.10e-09, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | else return -0.06842697784420276;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.06914812391061813;  // std dev = 0.972, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.1616758860523918;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.14256138500803064;  // std dev = 0.022, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1377387018523109;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.13945822446066014;  // std dev = 0.035, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1319123596538299;  // std dev = 0.003, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.16193748239553374;  // std dev = 0.160, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.14241933652000346;  // std dev = 0.038, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06419184008202626;  // std dev = 0.000, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.326', 'seconds']
Refined model CLL: -0.084741


******************************************
Best model found
******************************************
Results 

CLL : -0.091721 

AUC ROC : 0.994761 

AUC PR : 0.44236 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 19.36 

Total Inference Time : 4.089938402175903 

Total revision time: 33.181964881896974
Best scored revision CLL: -0.084741


Results 

CLL : -0.091721 

AUC ROC : 0.994761 

AUC PR : 0.44236 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 34.627287633895875 

Total Inference Time : 4.089938402175903 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.664
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8169118216974496;  // std dev = 1.958, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048838;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7066679168928373;  // std dev = 1.399, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839174;  // std dev = 0.000, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5374183857250986;  // std dev = 0.174, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936065;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3684516963141746;  // std dev = 2.160, 75.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=70 */
%   | else return -0.10159632948783644;  // std dev = 0.000, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43511836298084183;  // std dev = 1.39e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.10159632948783627;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.33317704815328214;  // std dev = 1.008, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926071;  // std dev = 7.15e-08, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.26250124314191425;  // std dev = 0.993, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.43e-09, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.203080880184442;  // std dev = 1.404, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109147;  // std dev = 7.74e-08, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.13030229687613054;  // std dev = 2.373, 99.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333673;  // std dev = 9.94e-08, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333702;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.16092981328499875;  // std dev = 0.102, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 4.34e-08, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | | else return -0.06842697784420265;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.139251365343054;  // std dev = 0.102, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.369', 'seconds']
Parameter learned model CLL:-0.086834 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.958, 4, 93], 'false,true': [0.0, 197, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.399, 2, 93], 'false,true': [0.0, 217, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.174, 3, 93], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 184, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [2.16, 5, 70], 'true,false': [0.0, 146, 0], 'false,true,true': [1.39e-08, 0, 23], 'false,true,false': [0.0, 37, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.008, 1, 93], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.15e-08, 143, 0], 'false,false,false': [0.0, 38, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.993, 1, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.43e-09, 196, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.404, 2, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.74e-08, 183, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [2.373, 6, 93], 'true,false': [0.0, 0, 0], 'false,true': [9.94e-08, 174, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 26, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.102, 1, 93], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.34e-08, 147, 0], 'false,false,false': [0.0, 27, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.102, 1, 93], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 175, 0]}]
{'': [0.03953661388032838, -2.366972945901349e-16], 'false': [-2.366972945901349e-16, nan]}
{'': [0.020609418282545876, -4.502286920138884e-17], 'false': [-4.502286920138884e-17, nan]}
{'': [0.03027343750000085, -2.172175482962263e-17], 'false': [nan, -2.172175482962263e-17]}
{'': [0.07065135210518565, 0.06809481239058275], 'true': [0.0622222222222225, -6.387584525240626e-17], 'false': [0.06809481239058275, nan], 'false,true': [1.9308226515220113e-16, -1.800361661554308e-17]}
{'': [0.010804738494037527, 4.171003628426002e-17], 'true': [0.010804738494037527, nan], 'false': [nan, 4.171003628426002e-17], 'false,false': [3.5713467925005034e-17, -1.8990657000167152e-17], 'false,false,true': [nan, 3.5713467925005034e-17]}
{'': [0.010488630551993613, 2.945489657168783e-17], 'false': [nan, 2.945489657168783e-17], 'false,false': [nan, 2.945489657168783e-17]}
{'': [0.020753961201217686, 3.276067941516855e-17], 'false': [nan, 3.276067941516855e-17], 'false,false': [nan, 3.276067941516855e-17], 'false,false,false': [3.276067941516855e-17, nan]}
{'': [0.056858481055697116, 7.105427357601002e-17], 'true': [0.056858481055697116, nan], 'false': [5.67872696503672e-17, -4.270088556250602e-18], 'false,false': [nan, -4.270088556250602e-18]}
{'': [0.010492573278313102, 1.7865657867531254e-17], 'false': [nan, 1.7865657867531254e-17], 'false,false': [1.2839313890222899e-17, 0.0], 'false,false,true': [nan, 1.2839313890222899e-17]}
{'': [0.010494450237344471, -6.3441315692866086e-18], 'false': [nan, -6.3441315692866086e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 17.358
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.8581489350995118;  // std dev = 2.06e-07, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   else return -0.14185106490048827;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(E, D), follows(A, E) )
%   | | | then return 0.7258308047606767;  // std dev = 0.023, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.6093714110283706;  // std dev = 0.934, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.21947341221095443;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   else return -0.1254446385283915;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5630505114395725;  // std dev = 0.068, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( follows(E, A), follows(A, F) )
%   | | then if ( follows(F, A), follows(E, F) )
%   | | | then return -0.19541876694860397;  // std dev = 0.867, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.4740210484711585;  // std dev = 0.931, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.5774471756126012;  // std dev = 0.184, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.47844335982320774;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.11231637819360651;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.42392451938632;  // std dev = 0.037, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.307130647830075;  // std dev = 1.276, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0.4272965691244512;  // std dev = 0.189, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.10159632948783646;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( tweets(A, H) )
%   | | then return 0.4230335581757492;  // std dev = 0.037, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.4225410570236435;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2934739464254606;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then return 0.3369630101498099;  // std dev = 0.303, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.319450893655446;  // std dev = 0.018, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.16602033294381457;  // std dev = 0.909, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.352033048990125;  // std dev = 0.061, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, H) )
%   | then return -0.09269127618926064;  // std dev = 8.16e-08, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | else return -0.09269127618926096;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.25512062365920884;  // std dev = 0.014, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.27138583313730114;  // std dev = 0.065, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.3027417810405287;  // std dev = 0.092, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2746633884935735;  // std dev = 0.166, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(I, H) )
%   | | | then return 0.24825928233821024;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3276657225131565;  // std dev = 0.091, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.04837290598571229;  // std dev = 1.269, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.2765680597713908;  // std dev = 0.053, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.08518475138839678;  // std dev = 5.59e-09, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(A, D), tweets(A, F) )
%   | | | then return 0.21122055723775765;  // std dev = 1.49e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.20610465587773422;  // std dev = 0.010, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.22844956496117197;  // std dev = 0.045, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.20876137610216078;  // std dev = 0.035, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.26786892108225474;  // std dev = 0.105, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.21847550193963455;  // std dev = 0.140, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.23727921104615207;  // std dev = 0.040, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( tweets(A, K) )
%   | then return -0.07877675473109151;  // std dev = 6.52e-09, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | else return -0.07877675473109177;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.1769901809260984;  // std dev = 0.016, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.11296651522064825;  // std dev = 0.949, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( follows(F, A) )
%   | | | then return -0.12538179430514237;  // std dev = 0.722, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.00120740410406886;  // std dev = 0.870, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.17703054340561053;  // std dev = 0.030, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.09126370165857212;  // std dev = 0.956, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.1836907499128576;  // std dev = 0.126, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.19705108216191292;  // std dev = 0.035, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return -0.07324622576333666;  // std dev = 8.38e-09, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | | then return 0.1526648038465126;  // std dev = 0.014, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.16570517551303887;  // std dev = 0.060, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.22638183547200708;  // std dev = 0.070, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.16151928982912928;  // std dev = 0.117, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then return 0.07040820130226141;  // std dev = 0.290, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.15351164325286648;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.16954468416492358;  // std dev = 0.013, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, I) )
%   | then return -0.06842697784420264;  // std dev = 5.43e-09, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(D, B) )
%   | | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | | then return 0.13394641492044115;  // std dev = 0.013, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.1440741842768186;  // std dev = 0.053, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.15945513108631443;  // std dev = 0.080, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.14041476546923498;  // std dev = 0.034, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.03500033969074365;  // std dev = 0.874, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.048599405448271724;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.16236907370881962;  // std dev = 0.078, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1440544094959182;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06419184008202626;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.017', 'seconds']
Refined model CLL: -0.085174


******************************************
Best model found
******************************************
Results 

CLL : -0.091372 

AUC ROC : 0.99498 

AUC PR : 0.452713 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 17.358 

Total Inference Time : 5.6548967361450195 

Total revision time: 38.431841537475584
Best scored revision CLL: -0.085174


Results 

CLL : -0.091372 

AUC ROC : 0.99498 

AUC PR : 0.452713 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 39.877164289474486 

Total Inference Time : 5.6548967361450195 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.316
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8119950889456642;  // std dev = 2.392, 130.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=124 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004885;  // std dev = 0.000, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6899339849439963;  // std dev = 2.192, 129.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=124 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839186;  // std dev = 0.000, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5278170249271419;  // std dev = 0.210, 130.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360689;  // std dev = 0.000, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.40397983803651866;  // std dev = 1.961, 103.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=99 */
%   | else return -0.1015963294878365;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.44281478949283043;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.1015963294878362;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3061444251924271;  // std dev = 2.193, 129.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926053;  // std dev = 5.96e-08, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | | else return -0.09269127618926082;  // std dev = 1.32e-09, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.27137097432829904;  // std dev = 0.995, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.82e-09, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2201225742506187;  // std dev = 0.995, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 6.32e-08, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1680412157941741;  // std dev = 1.713, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333667;  // std dev = 1.11e-07, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15899275401131321;  // std dev = 0.089, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6.50e-08, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | | else return -0.06842697784420261;  // std dev = 2.46e-09, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1301270246603585;  // std dev = 0.125, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 1.32e-09, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.720', 'seconds']
Parameter learned model CLL:-0.086839 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.392, 6, 124], 'false,true': [0.0, 222, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.192, 5, 124], 'false,true': [0.0, 244, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.21, 6, 124], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 261, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.961, 4, 99], 'true,false': [0.0, 184, 0], 'false,true,true': [0.0, 0, 25], 'false,true,false': [0.0, 47, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.193, 5, 124], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.96e-08, 201, 0], 'false,false,false': [1.32e-09, 54, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.995, 1, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.82e-09, 262, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.995, 1, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.32e-08, 245, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.713, 3, 124], 'true,false': [0.0, 0, 0], 'false,true': [1.11e-07, 190, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 47, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.089, 1, 124], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.5e-08, 219, 0], 'false,false,false': [2.46e-09, 36, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.125, 2, 124], 'false,true': [0.0, 0, 0], 'false,false': [1.32e-09, 235, 0]}]
{'': [0.044023668639057364, -2.360474178482315e-16], 'false': [-2.360474178482315e-16, nan]}
{'': [0.037257376359590755, -7.462154755677281e-17], 'false': [-7.462154755677281e-17, nan]}
{'': [0.04402366863905419, -1.0038798230327086e-16], 'false': [nan, -1.0038798230327086e-16]}
{'': [0.07220782441690153, 0.06717796549035376], 'true': [0.037326798001697636, -9.171407594729554e-17], 'false': [0.06717796549035376, nan], 'false,true': [-7.105427357601002e-17, -1.7716324861039733e-17]}
{'': [0.03726862562279943, 4.527968414157501e-17], 'true': [0.03726862562279943, nan], 'false': [nan, 4.527968414157501e-17], 'false,false': [1.7675192431843288e-17, 3.0839528461809902e-18], 'false,false,true': [nan, 1.7675192431843288e-17]}
{'': [0.007920790124501451, 3.474743817529116e-17], 'false': [nan, 3.474743817529116e-17], 'false,false': [nan, 3.474743817529116e-17]}
{'': [0.00792164398435417, 1.6313481178165567e-17], 'false': [nan, 1.6313481178165567e-17], 'false,false': [nan, 1.6313481178165567e-17], 'false,false,false': [1.6313481178165567e-17, nan]}
{'': [0.023106153740811933, 6.464589763640152e-17], 'true': [0.023106153740811933, nan], 'false': [6.427606984671959e-17, -1.299197156476247e-17], 'false,false': [nan, -1.299197156476247e-17]}
{'': [0.007923444594468719, -1.3061447348531253e-17], 'false': [nan, -1.3061447348531253e-17], 'false,false': [1.9264143806281254e-17, 6.1679056923619804e-18], 'false,false,true': [nan, 1.9264143806281254e-17]}
{'': [0.015669614463857458, 2.362176648138631e-18], 'false': [nan, 2.362176648138631e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 27.814
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.8224346493852267;  // std dev = 1.389, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return 0.8581489350995117;  // std dev = 2.92e-07, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else return -0.14185106490048838;  // std dev = 0.000, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then return 0.7256407755647961;  // std dev = 0.101, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(G, A), follows(F, G) )
%   | | | then return 0.6321252694554546;  // std dev = 0.897, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.6971363687643433;  // std dev = 0.998, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6194734122109544;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.1254446385283919;  // std dev = 0.000, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.566740641906283;  // std dev = 0.210, 124.000 (wgt'ed) examples reached here.  /* #pos=124 */
%   else return -0.11231637819360685;  // std dev = 0.000, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.4249142316245051;  // std dev = 0.182, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.44017434890030493;  // std dev = 0.029, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.29903138373254656;  // std dev = 1.269, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | else return -0.10159632948783652;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( tweets(A, H), follows(I, A) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.4132538178766282;  // std dev = 2.11e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.2534128487900385;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.4316848587700313;  // std dev = 0.041, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.10159632948783624;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), follows(A, F) )
%   | | then return 0.32607528221509735;  // std dev = 0.119, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.11840675630134415;  // std dev = 1.264, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.27270830084653835;  // std dev = 0.993, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else return 0.3385089961024997;  // std dev = 0.161, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   else if ( follows(A, H) )
%   | then return -0.09269127618926053;  // std dev = 5.96e-08, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return -0.09269127618926078;  // std dev = 2.24e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.2601633424146419;  // std dev = 0.104, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.06804321411137729;  // std dev = 0.796, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(E, G), follows(A, G) )
%   | | | then return 0.27530093046708104;  // std dev = 0.103, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.25379226110920666;  // std dev = 0.014, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(I, H) )
%   | | | then return 0.2689445857034143;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.28283911142778717;  // std dev = 0.077, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.1967380769122719;  // std dev = 0.968, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.23147991310125407;  // std dev = 0.986, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   else return -0.08518475138839678;  // std dev = 5.82e-09, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, F) )
%   | | then if ( recursion_accounttype(E, B), follows(F, E) )
%   | | | then return 0.18014258029200275;  // std dev = 0.988, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return 0.22610251349844399;  // std dev = 0.133, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.14228317111555203;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.1760201246653053;  // std dev = 1.001, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.21917732462637943;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.20708228714936297;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.23750268626341658;  // std dev = 0.052, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.22473918476308816;  // std dev = 0.008, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07877675473109143;  // std dev = 3.95e-09, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.18303819770524837;  // std dev = 0.061, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.07012595232477373;  // std dev = 0.951, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.15992762943152058;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.01936007425666851;  // std dev = 1.275, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.19224780198872532;  // std dev = 0.057, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.129697133392015;  // std dev = 0.858, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1797127711880661;  // std dev = 0.003, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.19051352731595572;  // std dev = 0.021, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.07324622576333664;  // std dev = 8.64e-09, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D), tweets(A, F) )
%   | | | then return 0.09904605824945449;  // std dev = 1.258, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | | else return 0.1683838678517068;  // std dev = 0.108, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.15807269091011647;  // std dev = 0.016, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.1816224493786111;  // std dev = 0.141, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, G) )
%   | | | then return 0.1931661104993553;  // std dev = 0.060, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.234048516472894;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.1524648076787115;  // std dev = 0.017, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.16865824293778267;  // std dev = 0.126, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else return -0.06842697784420276;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(F, D) )
%   | | then if ( follows(F, A), tweets(A, G) )
%   | | | then return 0.1439314496265079;  // std dev = 0.054, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.1377031378115927;  // std dev = 0.026, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(H, A), follows(H, D) )
%   | | | then return 0.14915721143630825;  // std dev = 0.007, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.15108106788847056;  // std dev = 0.041, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.15986117987137818;  // std dev = 1.087, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.05741527411283728;  // std dev = 0.909, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(K, A), tweets(A, L) )
%   | | | then return 0.15425993583063133;  // std dev = 0.110, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.13810597345240513;  // std dev = 0.023, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else return -0.06419184008202625;  // std dev = 1.05e-08, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.673', 'seconds']
Refined model CLL: -0.08375


******************************************
Best model found
******************************************
Results 

CLL : -0.090306 

AUC ROC : 0.994753 

AUC PR : 0.447523 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 27.814 

Total Inference Time : 7.043986082077026 

Total revision time: 52.51747382164001
Best scored revision CLL: -0.08375


Results 

CLL : -0.090306 

AUC ROC : 0.994753 

AUC PR : 0.447523 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 53.96279657363891 

Total Inference Time : 7.043986082077026 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.233
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8331489350995097;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004878;  // std dev = 1.15e-07, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6874543664644656;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839202;  // std dev = 0.000, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5383424097004988;  // std dev = 0.173, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360674;  // std dev = 0.000, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.42023827797406077;  // std dev = 1.403, 130.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=128 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4011401347379861;  // std dev = 0.182, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return -0.10159632948783617;  // std dev = 1.32e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.30613135590623314;  // std dev = 2.203, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926054;  // std dev = 9.77e-08, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | | else return -0.092691276189261;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24750280988625656;  // std dev = 1.976, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.25e-09, 358.000 (wgt'ed) examples reached here.  /* #neg=358 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.17750132646878158;  // std dev = 2.759, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 4.21e-08, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17173270916646333;  // std dev = 1.974, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333685;  // std dev = 1.13e-07, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13992185590180842;  // std dev = 0.174, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6.32e-08, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | | else return -0.06842697784420262;  // std dev = 2.46e-09, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14568867940289706;  // std dev = 0.080, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202582;  // std dev = 8.12e-09, 334.000 (wgt'ed) examples reached here.  /* #neg=334 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.057', 'seconds']
Parameter learned model CLL:-0.087233 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.975, 4, 156], 'false,true': [1.15e-07, 305, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.404, 6, 156], 'false,true': [0.0, 304, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.173, 5, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 315, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.403, 2, 128], 'true,false': [0.0, 250, 0], 'false,true,true': [0.182, 1, 28], 'false,true,false': [1.32e-09, 56, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.203, 5, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [9.77e-08, 214, 0], 'false,false,false': [0.0, 56, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.976, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.25e-09, 358, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.759, 8, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.21e-08, 289, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.974, 4, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.13e-07, 265, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 50, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.174, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.32e-08, 226, 0], 'false,false,false': [2.46e-09, 59, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.08, 1, 156], 'false,true': [0.0, 0, 0], 'false,false': [8.12e-09, 334, 0]}]
{'': [0.024375000000006076, 4.3680905886891404e-17], 'false': [4.3680905886891404e-17, nan]}
{'': [0.035665294924553885, -8.472754661613037e-17], 'false': [-8.472754661613037e-17, nan]}
{'': [0.030091431657728596, -4.5113824492704774e-17], 'false': [nan, -4.5113824492704774e-17]}
{'': [0.06647109980967644, 0.06816957014754142], 'false': [0.06816957014754142, nan], 'false,true': [0.03329369797859664, 3.96508223080413e-18], 'true': [0.015147928994082184, -6.927791673660977e-17]}
{'': [0.03014025860641716, 7.730441801093683e-17], 'true': [0.03014025860641716, nan], 'false': [nan, 7.730441801093683e-17], 'false,false': [4.46164393073661e-17, -2.874684617332995e-17], 'false,false,true': [nan, 4.46164393073661e-17]}
{'': [0.024410302858958344, 3.845465224958643e-17], 'false': [nan, 3.845465224958643e-17], 'false,false': [nan, 3.845465224958643e-17]}
{'': [0.04641955446927124, 6.146563458132355e-18], 'false': [nan, 6.146563458132355e-18], 'false,false': [nan, 6.146563458132355e-18], 'false,false,false': [6.146563458132355e-18, nan]}
{'': [0.024365948892477212, 2.4671622769447922e-17], 'true': [0.024365948892477212, nan], 'false': [4.8598441832648363e-17, -1.1102230246251566e-17], 'false,false': [nan, -1.1102230246251566e-17]}
{'': [0.030121854498069325, -4.362981710807633e-17], 'false': [nan, -4.362981710807633e-17], 'false,false': [1.768496853385205e-17, 5.645201820127915e-18], 'false,false,true': [nan, 1.768496853385205e-17]}
{'': [0.006335371619953326, 6.515081222351218e-17], 'false': [nan, 6.515081222351218e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 34.903
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), recursion_accounttype(D, B) )
%   | | | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.8318331456258279;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8025933795439567;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else return 0.8581489350995121;  // std dev = 2.06e-07, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   else return -0.14185106490048788;  // std dev = 7.30e-08, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.7241768003887851;  // std dev = 0.092, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.7194734122109545;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.7194734122109546;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.12544463852839208;  // std dev = 0.000, 333.000 (wgt'ed) examples reached here.  /* #neg=333 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.5466431991028106;  // std dev = 1.006, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | | else return 0.27506511071387874;  // std dev = 0.787, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.35596779757606317;  // std dev = 0.895, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.5581916051139161;  // std dev = 0.088, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.11231637819360668;  // std dev = 0.000, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.4229873138631823;  // std dev = 0.072, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return 0.30618820056350643;  // std dev = 1.551, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | | else return 0.4022491654241504;  // std dev = 1.016, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4161327953306929;  // std dev = 0.003, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.1015963294878362;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.2993106043656543;  // std dev = 1.664, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   | | | else return 0.332683526876934;  // std dev = 0.180, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.3361155597349809;  // std dev = 0.039, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1325734642280885;  // std dev = 0.854, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.3193739993812367;  // std dev = 2.11e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.013959333952096661;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2370639289465598;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(A, J) )
%   | then return -0.09269127618926047;  // std dev = 8.43e-08, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | else return -0.09269127618926101;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then if ( follows(A, E), follows(D, E) )
%   | | | then return 0.2617459142883151;  // std dev = 0.019, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return -0.05059499228712583;  // std dev = 0.771, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.29369708172665737;  // std dev = 0.100, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.2664498415770002;  // std dev = 0.176, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then return 0.13777875807447323;  // std dev = 0.322, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.27110753180822844;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.18179950662338484;  // std dev = 0.957, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else if ( follows(I, A) )
%   | then return -0.08518475138839678;  // std dev = 5.59e-09, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | else return -0.08518475138839678;  // std dev = 3.33e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.21404958381578057;  // std dev = 0.040, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.23174191656638568;  // std dev = 0.069, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.102370003230419;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.1708779239884869;  // std dev = 0.925, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.24981311108472998;  // std dev = 0.985, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.2207058271026665;  // std dev = 0.115, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.10984583728659508;  // std dev = 1.287, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   else return -0.07877675473109143;  // std dev = 3.33e-08, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, D) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.13433670350872529;  // std dev = 1.635, 59.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   | | | else return 0.20371287118113976;  // std dev = 0.159, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.14281883673021545;  // std dev = 0.780, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.19953333150414748;  // std dev = 0.158, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.17470396400463753;  // std dev = 0.023, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.20328355485162394;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2134572446579611;  // std dev = 0.066, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, J) )
%   | then return -0.0732462257633369;  // std dev = 6.38e-09, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
%   | else return -0.07324622576333703;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( follows(A, D), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.160684563385864;  // std dev = 0.072, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.1781172788056724;  // std dev = 0.050, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( recursion_accounttype(E, B), follows(F, D) )
%   | | | then return -0.1500643423562349;  // std dev = 0.856, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.12871368990068738;  // std dev = 0.933, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.19021266681647364;  // std dev = 0.040, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.1502545118009304;  // std dev = 1.05e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.17612290249467855;  // std dev = 0.086, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(A, J) )
%   | then return -0.06842697784420296;  // std dev = 0.000, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
%   | else return -0.06842697784420262;  // std dev = 2.95e-09, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then if ( follows(F, D) )
%   | | | then return 0.14379577921450903;  // std dev = 0.091, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.04438746397004536;  // std dev = 0.843, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.16922655546490611;  // std dev = 0.150, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.1412009243844178;  // std dev = 0.062, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then return 0.0837449310906264;  // std dev = 0.251, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.09352651248709493;  // std dev = 0.801, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.14425088776109032;  // std dev = 0.079, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(J, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else return -0.06419184008202622;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.829', 'seconds']
Refined model CLL: -0.085037


******************************************
Best model found
******************************************
Results 

CLL : -0.091207 

AUC ROC : 0.994714 

AUC PR : 0.42457 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 34.903 

Total Inference Time : 9.52343225479126 

Total revision time: 66.35188134765625
Best scored revision CLL: -0.085037


Results 

CLL : -0.091207 

AUC ROC : 0.994714 

AUC PR : 0.42457 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 67.79720409965515 

Total Inference Time : 9.52343225479126 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.455
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048768;  // std dev = 4.94e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7194734122109544;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283916;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360629;  // std dev = 5.43e-09, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4175135841583099;  // std dev = 3.65e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.10159632948783621;  // std dev = 3.80e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.32071184716014955;  // std dev = 2.11e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926105;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else return -0.09269127618926094;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.25517224256948956;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 2.46e-09, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20975771563253554;  // std dev = 1.49e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109177;  // std dev = 1.29e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17709649774527747;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333704;  // std dev = 1.29e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11428231963213237;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420271;  // std dev = 9.13e-09, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10007208147200587;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.250', 'seconds']
Parameter learned model CLL:-0.086308 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.33e-07, 0, 25], 'false,true': [4.94e-08, 47, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 65, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 0, 0], 'false,false': [5.43e-09, 57, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [3.65e-08, 0, 22], 'true,false': [3.8e-08, 59, 0], 'false,true,true': [0.0, 0, 3], 'false,true,false': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.11e-08, 0, 25], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 46, 0], 'false,false,false': [1.32e-09, 3, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.46e-09, 58, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.49e-08, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.29e-08, 54, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.0, 0, 25], 'true,false': [0.0, 0, 0], 'false,true': [1.29e-08, 46, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 6, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.192, 1, 25], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [9.13e-09, 44, 0], 'false,false,false': [0.0, 2, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 1, 25], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 55, 0]}]
{'': [7.105427357601002e-16, 5.196788625904988e-17], 'false': [5.196788625904988e-17, nan]}
{'': [-7.105427357601002e-17, -3.75767792950053e-17], 'false': [-3.75767792950053e-17, nan]}
{'': [-2.842170943040401e-16, 2.921639538487254e-17], 'false': [nan, 2.921639538487254e-17]}
{'': [0.05331179438721711, 0.06736877561142736], 'false': [0.06736877561142736, nan], 'false,true': [-3.700743415417188e-17, -1.1564823173178713e-18], 'true': [6.055761952500853e-17, 2.4462541220554296e-17]}
{'': [1.7763568394002505e-17, -5.664403186863044e-18], 'true': [1.7763568394002505e-17, nan], 'false': [nan, -5.664403186863044e-18], 'false,false': [-3.620292471603771e-18, 2.3129646346357427e-18], 'false,false,true': [nan, -3.620292471603771e-18]}
{'': [0.0, 4.785444071660158e-18], 'false': [nan, 4.785444071660158e-18], 'false,false': [nan, 4.785444071660158e-18]}
{'': [8.881784197001253e-18, 3.0839528461809902e-18], 'false': [nan, 3.0839528461809902e-18], 'false,false': [nan, 3.0839528461809902e-18], 'false,false,false': [3.0839528461809902e-18, nan]}
{'': [-3.552713678800501e-17, 1.0675221390626506e-18], 'false': [3.620292471603771e-18, 0.0], 'false,false': [nan, 0.0], 'true': [-3.552713678800501e-17, nan]}
{'': [0.03698224852071003, 2.413528314402514e-18], 'false': [nan, 2.413528314402514e-18], 'false,false': [1.8924256101565167e-18, 0.0], 'false,false,true': [nan, 1.8924256101565167e-18]}
{'': [0.03698224852071009, -3.0278809762504268e-18], 'false': [nan, -3.0278809762504268e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 5.473
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.14185106490048768;  // std dev = 5.37e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7194734122109544;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.12544463852839152;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.11231637819360629;  // std dev = 4.08e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.4175135841583098;  // std dev = 5.58e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.21751358415830996;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.10159632948783633;  // std dev = 1.49e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else if ( recursion_accounttype(F, B) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(D, E) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.19571184716014972;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.32071184716014967;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.3464467136854979;  // std dev = 0.059, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(D, A), tweets(D, E) )
%   | | | then return 0.27230444032626544;  // std dev = 0.035, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.25517224256948945;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.2896778652629567;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.2503119809191915;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F) )
%   | then if ( follows(F, A) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.0851847513883968;  // std dev = 2.24e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(F, H) )
%   | | | then return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.08518475138839687;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(D, E), follows(D, A) )
%   | | | then return 0.2281972447114029;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.209404502731188;  // std dev = 0.003, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.23386274628349257;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then return 0.20631851525566447;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.21437112168988462;  // std dev = 0.023, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07877675473109179;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(D, E), follows(D, A) )
%   | | | then return 0.19050750675659436;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.17683754046730454;  // std dev = 0.002, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.19458482658660947;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then return 0.1745698670375191;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.18049556757794596;  // std dev = 0.020, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, A) )
%   | | then if ( follows(A, H) )
%   | | | then return -0.07324622576333704;  // std dev = 1.18e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | | else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.07324622576333704;  // std dev = 9.31e-10, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then if ( tweets(D, E), tweets(A, E) )
%   | | | then return 0.03784322820088258;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.15135396145851646;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.151966529791634;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.16272638205928255;  // std dev = 0.014, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.17180211759167097;  // std dev = 0.827, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, G) )
%   | then return -0.06842697784420275;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.1548021494226718;  // std dev = 0.022, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1329535886292076;  // std dev = 0.004, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.19130448080056187;  // std dev = 0.797, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then return 0.1354253873924642;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.17695197537697152;  // std dev = 0.035, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.06419184008202625;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '5.836', 'seconds']
Refined model CLL: -0.085123


******************************************
Best model found
******************************************
Results 

CLL : -0.086455 

AUC ROC : 0.994426 

AUC PR : 0.373422 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 5.473 

Total Inference Time : 1.5929396152496338 

Total revision time: 11.462698247909547
Best scored revision CLL: -0.085123


Results 

CLL : -0.086455 

AUC ROC : 0.994426 

AUC PR : 0.373422 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 12.908020999908448 

Total Inference Time : 1.5929396152496338 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.269
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8385410919622573;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048766;  // std dev = 7.30e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6849522692547485;  // std dev = 1.387, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839133;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5490817295061776;  // std dev = 0.139, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360621;  // std dev = 7.79e-09, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4105358931339027;  // std dev = 0.989, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else return -0.10159632948783626;  // std dev = 4.21e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4322750235686851;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.10159632948783634;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3154859894885119;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0926912761892609;  // std dev = 6.41e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2491923208174793;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839682;  // std dev = 5.51e-09, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22270855032572637;  // std dev = 0.008, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109158;  // std dev = 5.96e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.14808996077970207;  // std dev = 1.386, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333707;  // std dev = 4.59e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333707;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12659443582181795;  // std dev = 0.193, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420267;  // std dev = 4.83e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else return -0.06842697784420275;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10993182331905241;  // std dev = 0.192, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.848', 'seconds']
Parameter learned model CLL:-0.092212 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.99, 1, 50], 'false,true': [7.3e-08, 114, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.387, 2, 50], 'false,true': [0.0, 107, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.139, 1, 50], 'false,true': [0.0, 0, 0], 'false,false': [7.79e-09, 94, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.989, 1, 45], 'true,false': [4.21e-08, 97, 0], 'false,true,true': [5.27e-09, 0, 5], 'false,true,false': [0.0, 10, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.99, 1, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.41e-08, 111, 0], 'false,false,false': [0.0, 5, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.99, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.51e-09, 98, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.008, 0, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.96e-08, 104, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.386, 2, 50], 'true,false': [0.0, 0, 0], 'false,true': [4.59e-08, 100, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 3, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.193, 2, 50], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.83e-08, 98, 0], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 2, 50], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 102, 0]}]
{'': [0.019223375624760057, 4.674623261579606e-17], 'false': [4.674623261579606e-17, nan]}
{'': [0.036982248520710956, -6.22554967079527e-18], 'false': [-6.22554967079527e-18, nan]}
{'': [0.019223375624760685, 6.141659285160441e-17], 'false': [nan, 6.141659285160441e-17]}
{'': [0.06407071481003938, 0.06333747146986686], 'true': [0.021266540642722067, 1.8312957107219077e-17], 'false': [0.06333747146986686, nan], 'false,true': [2.2204460492503132e-17, -5.551115123125783e-18]}
{'': [0.01920687012551149, 4.306899664494142e-17], 'true': [0.01920687012551149, nan], 'false': [nan, 4.306899664494142e-17], 'false,false': [3.700743415417188e-17, 0.0], 'false,false,true': [nan, 3.700743415417188e-17]}
{'': [0.019208616198079783, 3.172065784643304e-17], 'false': [nan, 3.172065784643304e-17], 'false,false': [nan, 3.172065784643304e-17]}
{'': [1.2622984025156824e-06, 3.416070845000482e-17], 'false': [nan, 3.416070845000482e-17], 'false,false': [nan, 3.416070845000482e-17], 'false,false,false': [3.416070845000482e-17, nan]}
{'': [0.03695891804859931, 2.0479842201823276e-17], 'true': [0.03695891804859931, nan], 'false': [2.1094237467877975e-17, 0.0], 'false,false': [nan, 0.0]}
{'': [0.037071294662659446, 2.44902137784961e-17], 'false': [nan, 2.44902137784961e-17], 'false,false': [2.3790493384824782e-17, 0.0], 'false,false,true': [nan, 2.3790493384824782e-17]}
{'': [0.036962701960503615, -1.5782582212808597e-17], 'false': [nan, -1.5782582212808597e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 13.777
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.14185106490048763;  // std dev = 8.69e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.7194734122109551;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return 0.5766162693538115;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.12544463852839133;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | | then return 0.4072182885981365;  // std dev = 1.846, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | | | else return 0.22203310341295113;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.5853155228307942;  // std dev = 0.032, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.1123163781936062;  // std dev = 8.16e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.39627623552004543;  // std dev = 0.969, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.42843579730461734;  // std dev = 0.053, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.4485394379152591;  // std dev = 0.128, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.10159632948783627;  // std dev = 3.94e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4539209613126681;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.29201069113149913;  // std dev = 0.965, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.3381221188343525;  // std dev = 0.036, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.34731055863951116;  // std dev = 0.115, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.009694367815961558;  // std dev = 1.065, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.331982936513731;  // std dev = 0.024, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.0826020614681851;  // std dev = 0.859, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, H) )
%   | then return -0.09269127618926098;  // std dev = 4.47e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), follows(E, A) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.2929836440088475;  // std dev = 0.057, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.26409701180281925;  // std dev = 0.028, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.2502089471117136;  // std dev = 0.000941, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.268822860901451;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.16112295944545496;  // std dev = 0.323, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.29859008979374624;  // std dev = 0.064, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.08518475138839682;  // std dev = 5.19e-09, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | else return -0.08518475138839689;  // std dev = 3.73e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.08518475138839693;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.17213954523791433;  // std dev = 0.966, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.21656860272241213;  // std dev = 0.019, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.25067783350976935;  // std dev = 0.067, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2148491365061019;  // std dev = 0.031, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.12044106639531502;  // std dev = 0.834, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.366503572865478;  // std dev = 0.728, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.23265740338456462;  // std dev = 0.046, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, I) )
%   | then return -0.07877675473109175;  // std dev = 2.95e-09, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return -0.0787767547310918;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1442648942571316;  // std dev = 0.966, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 4.7191979837540865E-4;  // std dev = 0.810, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(E, A), tweets(E, D) )
%   | | | then return 0.2014884815655178;  // std dev = 0.076, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.17950997275972436;  // std dev = 0.015, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.21474051548279896;  // std dev = 0.047, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1830098078760109;  // std dev = 0.023, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.22653657429380897;  // std dev = 0.033, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, I) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A), follows(F, E) )
%   | | then if ( recursion_accounttype(E, B), tweets(F, D) )
%   | | | then return 0.18505093611378085;  // std dev = 0.085, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.05710537907961639;  // std dev = 0.928, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(E, A) )
%   | | | then return -0.12859953674190486;  // std dev = 0.784, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.15688459982718939;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(H, G), follows(A, H) )
%   | | | then return 0.18082181202236594;  // std dev = 0.041, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.15722550859140977;  // std dev = 0.021, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.1893586777021354;  // std dev = 0.029, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, I) )
%   | then return -0.06842697784420265;  // std dev = 4.56e-09, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, D) )
%   | | | then return 0.15757309655247334;  // std dev = 0.018, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.14349424048253026;  // std dev = 0.028, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(F, A), tweets(F, D) )
%   | | | then return 0.22146300240255187;  // std dev = 0.044, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.14066060346597126;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.03608108029490527;  // std dev = 0.890, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.1300070108056965;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.16201650517250396;  // std dev = 0.026, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06419184008202626;  // std dev = 0.000, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.986', 'seconds']
Refined model CLL: -0.088202


******************************************
Best model found
******************************************
Results 

CLL : -0.083919 

AUC ROC : 0.996214 

AUC PR : 0.478966 

Precision : 0.335484 

Recall : 1.0 

F1 : 0.502415 

Total Learning Time : 13.777 

Total Inference Time : 3.801304340362549 

Total revision time: 25.10523557281494
Best scored revision CLL: -0.088202


Results 

CLL : -0.083919 

AUC ROC : 0.996214 

AUC PR : 0.478966 

Precision : 0.335484 

Recall : 1.0 

F1 : 0.502415 

Total Learning Time : 26.550558324813842 

Total Inference Time : 3.801304340362549 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.966
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7840748610254387;  // std dev = 2.357, 81.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=75 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004881;  // std dev = 0.000, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7082040803497468;  // std dev = 1.396, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283913;  // std dev = 4.71e-08, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5378673616886088;  // std dev = 0.192, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936062;  // std dev = 8.33e-09, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.42843033513366685;  // std dev = 0.993, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else return -0.10473900273675218;  // std dev = 0.454, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.44271604941938053;  // std dev = 9.13e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.10159632948783627;  // std dev = 1.86e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3148357954346437;  // std dev = 1.395, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09242731671054456;  // std dev = 0.000, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | | else return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22335271191221004;  // std dev = 1.948, 79.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08497213441604294;  // std dev = 4.93e-05, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19339456256476575;  // std dev = 1.698, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07860109144273529;  // std dev = 0.000747, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16071694916956186;  // std dev = 1.699, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07307735167489571;  // std dev = 7.96e-08, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07327258706738937;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13634026000284052;  // std dev = 0.192, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06827913886333356;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else return -0.06845005187291073;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1300222131505136;  // std dev = 0.159, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06406621934492475;  // std dev = 2.66e-05, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.767', 'seconds']
Parameter learned model CLL:-0.094159 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.357, 6, 75], 'false,true': [0.0, 152, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.396, 2, 75], 'false,true': [4.71e-08, 152, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 3, 75], 'false,true': [0.0, 0, 0], 'false,false': [8.33e-09, 146, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.993, 1, 69], 'true,false': [0.454, 145, 0], 'false,true,true': [9.13e-09, 0, 6], 'false,true,false': [1.86e-09, 7, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.395, 2, 75], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 133, 0], 'false,false,false': [0.0, 8, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.948, 4, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.93e-05, 137, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.698, 3, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.000747, 166, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.699, 3, 75], 'true,false': [0.0, 0, 0], 'false,true': [7.96e-08, 145, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 7, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.192, 3, 75], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 151, 0], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.159, 2, 75], 'false,true': [0.0, 0, 0], 'false,false': [2.66e-05, 156, 0]}]
{'': [0.06858710562414162, -1.2270886061646468e-16], 'false': [-1.2270886061646468e-16, nan]}
{'': [0.02529937594872622, 1.460819769243627e-17], 'false': [1.460819769243627e-17, nan]}
{'': [0.03698224852071132, 6.995925908596876e-17], 'false': [nan, 6.995925908596876e-17]}
{'': [0.06796325677473375, 0.07363071340194444], 'false': [0.07363071340194444, nan], 'false,true': [7.401486830834377e-17, 0.0], 'true': [0.014081632653060566, 0.0014222009015208406]}
{'': [0.0252871468843787, 3.728875833797848e-09], 'true': [0.0252871468843787, nan], 'false': [nan, 3.728875833797848e-09], 'false,false': [-4.507672430808906e-17, 0.0], 'false,false,true': [nan, -4.507672430808906e-17]}
{'': [0.04804798771966482, 2.434167986397362e-09], 'false': [nan, 2.434167986397362e-09], 'false,false': [nan, 2.434167986397362e-09]}
{'': [0.03696769919307737, 3.3634175939693124e-09], 'false': [nan, 3.3634175939693124e-09], 'false,false': [nan, 3.3634175939693124e-09], 'false,false,false': [3.3634175939693124e-09, nan]}
{'': [0.03702521590062694, 1.6745417421114513e-09], 'true': [0.03702521590062694, nan], 'false': [4.364324993354064e-17, -9.912705577010326e-19], 'false,false': [nan, -9.912705577010326e-19]}
{'': [0.03697040234440786, 7.343849664587948e-10], 'false': [nan, 7.343849664587948e-10], 'false,false': [-1.4704940723512008e-17, 0.0], 'false,false,true': [nan, -1.4704940723512008e-17]}
{'': [0.02529204599437325, 7.056207555577725e-10], 'false': [nan, 7.056207555577725e-10]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 13.936
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995118;  // std dev = 1.46e-07, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.14185106490048807;  // std dev = 0.000, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then return 0.7205551974388134;  // std dev = 0.047, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else if ( follows(E, D), follows(D, A) )
%   | | | then return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7274065038819156;  // std dev = 0.061, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(A, G), follows(G, H) )
%   | | | then return 0.5528067455442879;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.6083623010998434;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.12544463852839122;  // std dev = 5.96e-08, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5650756569667837;  // std dev = 0.175, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   else return -0.11231637819360621;  // std dev = 9.77e-08, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then return 0.4231551672090352;  // std dev = 0.170, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else return 0.09088971870224387;  // std dev = 1.171, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return -0.10159632948783646;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4423606585088944;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.10159632948783634;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.2793995778360262;  // std dev = 0.925, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.3171425093217887;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.3248533314538721;  // std dev = 0.115, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0.35612236127131747;  // std dev = 0.134, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(A, F) )
%   | then return -0.0926912761892608;  // std dev = 6.50e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.21877848425692437;  // std dev = 0.979, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.2575314511342323;  // std dev = 0.008, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, G), follows(H, D) )
%   | | | then return 0.2508326771503792;  // std dev = 0.006, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.2675774054343173;  // std dev = 0.029, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( tweets(A, K) )
%   | | | then return 0.27469400741561373;  // std dev = 0.093, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.24854492891471267;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.32440249615645783;  // std dev = 0.024, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, L) )
%   | then return -0.08518475138839678;  // std dev = 4.56e-09, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | else return -0.0851847513883968;  // std dev = 1.83e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, D), tweets(D, E) )
%   | | | then return 0.17904219059529386;  // std dev = 0.979, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.21343451959489868;  // std dev = 0.034, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.04041270551852668;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.20707937218519334;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return -0.11016525360552204;  // std dev = 1.119, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.23125260043326218;  // std dev = 0.033, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.15705879508636186;  // std dev = 0.891, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.017108744256468633;  // std dev = 0.846, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.07877675473109153;  // std dev = 6.45e-09, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, A), follows(A, D) )
%   | | | then return 0.19052294516597695;  // std dev = 0.030, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.1822063526512024;  // std dev = 0.036, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.1747442927065187;  // std dev = 0.000771, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.18077852015974005;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(F, H) )
%   | | | then return -0.09385230814536892;  // std dev = 1.111, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.1977191770588137;  // std dev = 0.040, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.2090080506135831;  // std dev = 0.108, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.02433542881222228;  // std dev = 0.925, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.07324622576333674;  // std dev = 7.57e-09, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.022979358828943416;  // std dev = 1.797, 28.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=24 */
%   | | | else return 0.15607110058848891;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, G), follows(H, D) )
%   | | | then return 0.15309515838083276;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.16276762517918938;  // std dev = 0.037, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(I, B), tweets(A, K) )
%   | | | then return 0.2433930070166815;  // std dev = 0.043, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.16888062045883317;  // std dev = 0.068, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.2170586263411819;  // std dev = 0.049, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, L) )
%   | then return -0.06842697784420264;  // std dev = 5.43e-09, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | else return -0.06842697784420274;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.1512439342329551;  // std dev = 0.067, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.12623753046630107;  // std dev = 1.125, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return -0.5137356405188038;  // std dev = 0.819, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.1480431901909523;  // std dev = 0.042, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A) )
%   | | then if ( tweets(A, H), recursion_accounttype(G, B) )
%   | | | then return 0.13428291747954513;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.14531309235343626;  // std dev = 0.054, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.14803720263539333;  // std dev = 0.006, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.19445963617610532;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.06419184008202626;  // std dev = 0.000, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.762', 'seconds']
Refined model CLL: -0.091837


******************************************
Best model found
******************************************
Results 

CLL : -0.085189 

AUC ROC : 0.995497 

AUC PR : 0.39812 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 13.936 

Total Inference Time : 3.3409597873687744 

Total revision time: 27.413170387268067
Best scored revision CLL: -0.091837


Results 

CLL : -0.085189 

AUC ROC : 0.995497 

AUC PR : 0.39812 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 28.85849313926697 

Total Inference Time : 3.3409597873687744 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.902
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8482479450005014;  // std dev = 0.995, 101.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=100 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004883;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6305583029867303;  // std dev = 3.015, 110.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=100 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839163;  // std dev = 0.000, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5504889374889951;  // std dev = 0.168, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360654;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.41199821108986456;  // std dev = 1.705, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | else return -0.10159632948783646;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.44292604614141134;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.10159632948783621;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3154228893908668;  // std dev = 1.706, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926054;  // std dev = 9.54e-08, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | | else return -0.09269127618926089;  // std dev = 2.28e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2575056472415575;  // std dev = 1.404, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.43e-09, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19951328804405505;  // std dev = 1.706, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109146;  // std dev = 6.99e-08, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1662385165041575;  // std dev = 1.706, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333674;  // std dev = 9.37e-08, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.16064064370189848;  // std dev = 0.099, 101.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420262;  // std dev = 7.07e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | | else return -0.0684269778442027;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11988243177048735;  // std dev = 0.168, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.191', 'seconds']
Parameter learned model CLL:-0.092885 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.995, 1, 100], 'false,true': [0.0, 179, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [3.015, 10, 100], 'false,true': [0.0, 195, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.168, 3, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 191, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.705, 3, 94], 'true,false': [0.0, 163, 0], 'false,true,true': [0.0, 0, 6], 'false,true,false': [0.0, 13, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.706, 3, 100], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [9.54e-08, 212, 0], 'false,false,false': [2.28e-09, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.404, 2, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.43e-09, 208, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.706, 3, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.99e-08, 216, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.706, 3, 100], 'true,false': [0.0, 0, 0], 'false,true': [9.37e-08, 167, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.099, 1, 100], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.07e-08, 163, 0], 'false,false,false': [0.0, 9, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.168, 3, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 206, 0]}]
{'': [0.00980296049407087, -1.9847562451399445e-16], 'false': [-1.9847562451399445e-16, nan]}
{'': [0.08264462809917454, -2.960594732333751e-17], 'false': [-2.960594732333751e-17, nan]}
{'': [0.0282778772740135, -3.022596716256971e-17], 'false': [nan, -3.022596716256971e-17]}
{'': [0.0728770950427557, 0.06406470961150053], 'true': [0.029971304070570845, -7.492302620169768e-17], 'false': [0.06406470961150053, nan], 'false,true': [-7.401486830834377e-17, 0.0]}
{'': [0.02825693131923322, 4.51949195865108e-17], 'true': [0.02825693131923322, nan], 'false': [nan, 4.51949195865108e-17], 'false,false': [4.294258868833153e-17, 3.96508223080413e-18], 'false,false,true': [nan, 4.294258868833153e-17]}
{'': [0.019329980038240775, 2.9890619893754213e-17], 'false': [nan, 2.9890619893754213e-17], 'false,false': [nan, 2.9890619893754213e-17]}
{'': [0.028261113657323027, 2.2615654205327262e-17], 'false': [nan, 2.2615654205327262e-17], 'false,false': [nan, 2.2615654205327262e-17], 'false,false,false': [2.2615654205327262e-17, nan]}
{'': [0.028262792144819505, 5.896099678800266e-17], 'true': [0.028262792144819505, nan], 'false': [5.2519532302627167e-17, -1.3877787807814458e-18], 'false,false': [nan, -1.3877787807814458e-18]}
{'': [0.00979891054546793, 3.0982968129074136e-17], 'false': [nan, 3.0982968129074136e-17], 'false,false': [3.065032890069451e-17, 7.709882115452476e-19], 'false,false,true': [nan, 3.065032890069451e-17]}
{'': [0.02826552429589056, -1.616829647512364e-18], 'false': [nan, -1.616829647512364e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 27.611
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(D, E) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.8040948810454575;  // std dev = 1.375, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | | else return 0.724815601766179;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.8581489350995117;  // std dev = 1.88e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   else return -0.14185106490048846;  // std dev = 0.000, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.7316205640070865;  // std dev = 0.065, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7194734122109543;  // std dev = 7.30e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(F, A) )
%   | | then return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5528067455442879;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.12544463852839172;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.5664822860176599;  // std dev = 0.113, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, G), follows(H, A) )
%   | | | then return 0.574639335629799;  // std dev = 0.070, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3364574514438319;  // std dev = 1.548, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | else return 0.5698972155812297;  // std dev = 0.073, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.11231637819360654;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.4106216021952074;  // std dev = 0.978, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | | else return 0.2600196012805851;  // std dev = 1.603, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else return 0.46025365984413225;  // std dev = 0.183, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.41398404957104146;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.10159632948783621;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( tweets(D, E), follows(D, A) )
%   | | | then return 0.27492211610102263;  // std dev = 1.375, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | | else return 0.34107789180256576;  // std dev = 0.080, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.3493157780680191;  // std dev = 0.191, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return 0.17546276186982013;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926058;  // std dev = 8.94e-08, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return -0.09269127618926087;  // std dev = 5.27e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.2432934686220994;  // std dev = 0.986, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | | else return 0.26365661986473604;  // std dev = 0.027, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(D, G) )
%   | | | then return 0.2723352276949418;  // std dev = 0.038, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.30304703351878537;  // std dev = 0.059, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.2454337795050637;  // std dev = 0.012, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2818994412275602;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, K), follows(L, A) )
%   | | | then return 0.1531935341414648;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.23134176732448372;  // std dev = 0.871, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   else return -0.08518475138839678;  // std dev = 5.51e-09, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( tweets(D, F), follows(E, G) )
%   | | then if ( follows(G, A), follows(A, G) )
%   | | | then return 0.10835255835761977;  // std dev = 2.647, 68.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=60 */
%   | | | else return 0.22613824433544616;  // std dev = 0.096, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.11222019748025809;  // std dev = 0.805, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(I, H), follows(I, J) )
%   | | | then return 0.23633608827951638;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.28346747614418705;  // std dev = 0.054, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.19965839395144735;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.22678067368709265;  // std dev = 0.012, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( tweets(A, M) )
%   | then return -0.0787767547310915;  // std dev = 6.52e-09, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | else return -0.07877675473109176;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.17792294784848692;  // std dev = 0.985, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | | else return 0.1967978743402802;  // std dev = 0.043, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(D, F), follows(G, A) )
%   | | | then return 0.2064048171513982;  // std dev = 0.042, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.18918725184951501;  // std dev = 0.039, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.0759740175956388;  // std dev = 1.175, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.20909953425662275;  // std dev = 0.049, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1824256210142179;  // std dev = 0.049, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.2041146976189404;  // std dev = 0.090, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.0732462257633367;  // std dev = 7.85e-09, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.17755119382431128;  // std dev = 0.030, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.14944220627028298;  // std dev = 0.995, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | else if ( follows(A, D), recursion_accounttype(D, B) )
%   | | | then return -0.18003478442151089;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.16608397549735554;  // std dev = 0.021, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return -0.24396372944554487;  // std dev = 1.105, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.18243420107387015;  // std dev = 0.051, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.04136252467535592;  // std dev = 0.845, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(A, H) )
%   | then return -0.06842697784420261;  // std dev = 4.06e-09, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | else return -0.0684269778442027;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.15309209999264142;  // std dev = 0.027, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.0847296989624678;  // std dev = 0.962, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(F, A), follows(D, F) )
%   | | | then return -0.17779463598266187;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.17355033477732562;  // std dev = 0.070, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.19312826042363487;  // std dev = 0.042, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.15503588382270891;  // std dev = 0.040, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.13975514361729194;  // std dev = 0.028, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.155262471532273;  // std dev = 0.065, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.06419184008202626;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.296', 'seconds']
Refined model CLL: -0.091404


******************************************
Best model found
******************************************
Results 

CLL : -0.085865 

AUC ROC : 0.995851 

AUC PR : 0.444897 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 27.611 

Total Inference Time : 5.926482677459717 

Total revision time: 48.42404483604432
Best scored revision CLL: -0.091404


Results 

CLL : -0.085865 

AUC ROC : 0.995851 

AUC PR : 0.444897 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 49.86936758804322 

Total Inference Time : 5.926482677459717 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.206
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.834893121146022;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048818;  // std dev = 0.000, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7008873074338162;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839183;  // std dev = 0.000, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5424174576053903;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360689;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3902452370272426;  // std dev = 2.190, 123.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=118 */
%   | else return -0.1039338696227408;  // std dev = 0.466, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43089564353130705;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783616;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3001251500784524;  // std dev = 2.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09249487707185693;  // std dev = 0.000, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
%   | | else return -0.09269127618926087;  // std dev = 1.32e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23650745265213033;  // std dev = 2.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08502776861456812;  // std dev = 3.91e-05, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.17751289278560703;  // std dev = 2.574, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07864262484677272;  // std dev = 0.000601, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17693842951757782;  // std dev = 1.711, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07312074269384572;  // std dev = 9.42e-08, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07326598929976817;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15768468411883382;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06831712896043031;  // std dev = 0.000, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | | else return -0.06844427694550435;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12865407808827278;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0641032401021432;  // std dev = 2.94e-05, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.639', 'seconds']
Parameter learned model CLL:-0.092594 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 256, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 240, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 259, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [2.19, 5, 118], 'true,false': [0.466, 200, 0], 'false,true,true': [1.05e-08, 0, 8], 'false,true,false': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.192, 5, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 251, 0], 'false,false,false': [1.32e-09, 17, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.91e-05, 240, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.574, 7, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.000601, 255, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.711, 3, 126], 'true,false': [0.0, 0, 0], 'false,true': [9.42e-08, 221, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 17, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 243, 0], 'false,false,false': [0.0, 15, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false': [2.94e-05, 229, 0]}]
{'': [0.022714981070853308, -1.0408340855860843e-16], 'false': [-1.0408340855860843e-16, nan]}
{'': [0.022714981070850387, -5.921189464667501e-17], 'false': [-5.921189464667501e-17, nan]}
{'': [0.022714981070848954, -9.7733918770091e-17], 'false': [nan, -9.7733918770091e-17]}
{'': [0.07310749883967949, 0.07088692533245504], 'true': [0.03899795095511922, 0.0010873546825753188], 'false': [0.07088692533245504, nan], 'false,true': [1.1102230246251565e-16, 0.0]}
{'': [0.036673668069680136, 2.2915646163387938e-09], 'true': [0.036673668069680136, nan], 'false': [nan, 2.2915646163387938e-09], 'false,false': [-5.3078391615545335e-17, 1.6326809185664067e-18], 'false,false,true': [nan, -5.3078391615545335e-17]}
{'': [0.03667739903546159, 1.52659410020591e-09], 'false': [nan, 1.52659410020591e-09], 'false,false': [nan, 1.52659410020591e-09]}
{'': [0.04981921062629659, 1.4177039289796656e-09], 'false': [nan, 1.4177039289796656e-09], 'false,false': [nan, 1.4177039289796656e-09], 'false,false,false': [1.4177039289796656e-09, nan]}
{'': [0.02269881932641464, 1.3992627700778397e-09], 'true': [0.02269881932641464, nan], 'false': [4.018906876471155e-17, -8.163404592832033e-19], 'false,false': [nan, -8.163404592832033e-19]}
{'': [0.015460339403850658, 8.852727130171082e-10], 'false': [nan, 8.852727130171082e-10], 'false,false': [-9.13763806275849e-18, -2.7755575615628915e-18], 'false,false,true': [nan, -9.13763806275849e-18]}
{'': [0.022701617915949903, 8.650334160766164e-10], 'false': [nan, 8.650334160766164e-10]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 21.258
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995104;  // std dev = 7.25e-07, 126.000 (wgt'ed) examples reached here.  /* #pos=126 */
%   else return -0.14185106490048813;  // std dev = 0.000, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.7006054876826528;  // std dev = 0.991, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.6606498827991899;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0.7194734122109545;  // std dev = 8.43e-08, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.3861400788776215;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.7194734122109548;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.7194734122109548;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.1254446385283919;  // std dev = 0.000, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.5110473096189393;  // std dev = 1.693, 59.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   | | | else return 0.3383741767527404;  // std dev = 1.270, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.5617804796954418;  // std dev = 0.035, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.4442553256351737;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.5553664367462848;  // std dev = 9.42e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.11231637819360688;  // std dev = 0.000, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(G, F) )
%   | | | then return 0.39799940622040186;  // std dev = 1.660, 79.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=76 */
%   | | | else return 0.44548670936295964;  // std dev = 0.190, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.4175135841583104;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.29251358415831025;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.4447570289458414;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3372767568889619;  // std dev = 0.155, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.02873136050849645;  // std dev = 1.453, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.36413337833351406;  // std dev = 0.087, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, G), follows(H, A) )
%   | | | then return 0.25865504649276727;  // std dev = 0.960, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.33266224984349907;  // std dev = 0.078, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(A, I) )
%   | then return -0.09269127618926051;  // std dev = 6.32e-08, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | else return -0.09269127618926087;  // std dev = 5.27e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, D) )
%   | | then if ( follows(F, A), tweets(F, G) )
%   | | | then return 0.26739414580513676;  // std dev = 0.017, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0.2864672369962736;  // std dev = 0.110, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.25203671426436536;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.25281019552823103;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(J, A) )
%   | | | then return -0.13156172748322678;  // std dev = 1.627, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return 0.1990941759236971;  // std dev = 0.884, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.2659029728426563;  // std dev = 0.078, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.19391248602863578;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else return -0.08518475138839678;  // std dev = 5.82e-09, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | | then return 0.1989987895815032;  // std dev = 0.989, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | | else return -0.05955572572862712;  // std dev = 1.390, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.2663554150079951;  // std dev = 0.229, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.22248765613248808;  // std dev = 0.048, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.3082133574852403;  // std dev = 0.160, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.20135456092099005;  // std dev = 0.005, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.22826841283979818;  // std dev = 0.047, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, J) )
%   | then return -0.07877675473109144;  // std dev = 4.66e-09, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else return -0.07877675473109168;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.169514042919771;  // std dev = 0.993, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | | | else return 0.19081823393815367;  // std dev = 0.083, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.02971480881878058;  // std dev = 0.934, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), tweets(G, H) )
%   | | | then return 0.3042636801728584;  // std dev = 0.033, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2190494999224981;  // std dev = 0.068, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.2003359539922208;  // std dev = 0.084, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.18462747639874919;  // std dev = 0.063, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, J) )
%   | then return -0.07324622576333684;  // std dev = 7.03e-09, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
%   | else return -0.07324622576333699;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.16269757918774055;  // std dev = 0.054, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.06176104134734195;  // std dev = 2.096, 44.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=39 */
%   | | else if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | | then return 0.1924909486944557;  // std dev = 0.083, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.15837642555006753;  // std dev = 0.020, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.20285214399756915;  // std dev = 0.102, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.15130190167369323;  // std dev = 0.028, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.17033261865242785;  // std dev = 0.022, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, I) )
%   | then return -0.06842697784420278;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
%   | else return -0.06842697784420268;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E) )
%   | | then if ( follows(A, D), tweets(A, E) )
%   | | | then return 0.12279788780081165;  // std dev = 0.996, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.1397728668023148;  // std dev = 0.058, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return 0.17500075192935402;  // std dev = 0.049, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(G, A), follows(F, A) )
%   | | | then return -0.16051747540643094;  // std dev = 0.979, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.16321163091931626;  // std dev = 0.189, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.12777921453589447;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.003921653541781677;  // std dev = 0.923, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( tweets(A, I) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else return -0.06419184008202618;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.235', 'seconds']
Refined model CLL: -0.090715


******************************************
Best model found
******************************************
Results 

CLL : -0.085723 

AUC ROC : 0.995441 

AUC PR : 0.412319 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 21.258 

Total Inference Time : 8.915648460388184 

Total revision time: 47.242671264648436
Best scored revision CLL: -0.090715


Results 

CLL : -0.085723 

AUC ROC : 0.995441 

AUC PR : 0.412319 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 48.68799401664734 

Total Inference Time : 8.915648460388184 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.661
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8268989350995116;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048766;  // std dev = 6.32e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7257371741022817;  // std dev = 1.19e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283916;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5302775585769441;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360624;  // std dev = 7.09e-09, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.42973959680945834;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return -0.1015963294878363;  // std dev = 2.24e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4297395968094582;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.10159632948783634;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3290128309978144;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926105;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else return -0.09269127618926096;  // std dev = 1.32e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.26082864760161056;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 2.63e-09, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21374545516495672;  // std dev = 3.65e-08, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109175;  // std dev = 1.97e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.11940977609153688;  // std dev = 1.371, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333704;  // std dev = 1.05e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.16305784071313303;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420268;  // std dev = 1.83e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14200843451684048;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.809', 'seconds']
Parameter learned model CLL:-0.082677 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.984, 1, 31], 'false,true': [6.32e-08, 63, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.19e-07, 0, 31], 'false,true': [0.0, 62, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.174, 1, 31], 'false,true': [0.0, 0, 0], 'false,false': [7.09e-09, 77, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 26], 'true,false': [2.24e-08, 45, 0], 'false,true,true': [0.0, 0, 5], 'false,true,false': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.0, 0, 31], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 50, 0], 'false,false,false': [1.32e-09, 13, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.63e-09, 54, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [3.65e-08, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.97e-08, 57, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.371, 2, 31], 'true,false': [0.0, 0, 0], 'false,true': [1.05e-08, 51, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.63e-09, 8, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.0, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.83e-08, 57, 0], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.0, 0, 31], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 60, 0]}]
{'': [0.030273437500001332, 6.344131569286608e-17], 'false': [6.344131569286608e-17, nan]}
{'': [4.584146682323227e-16, -4.118569284899774e-17], 'false': [-4.118569284899774e-17, nan]}
{'': [0.03027343749999989, 5.190653102143589e-17], 'false': [nan, 5.190653102143589e-17]}
{'': [0.06552507516203512, 0.06682079682229679], 'false': [0.06682079682229679, nan], 'false,true': [-4.4408920985006264e-17, -5.204170427930421e-18], 'true': [-1.3664283380001927e-16, 1.1102230246251566e-17]}
{'': [0.0, -7.04903507698512e-18], 'true': [0.0, nan], 'false': [nan, -7.04903507698512e-18], 'false,false': [-3.3306690738754695e-18, 2.135044278125301e-18], 'false,false,true': [nan, -3.3306690738754695e-18]}
{'': [0.0, 6.1679056923619804e-18], 'false': [nan, 6.1679056923619804e-18], 'false,false': [nan, 6.1679056923619804e-18]}
{'': [4.297637514678025e-17, 6.817158923136926e-18], 'false': [nan, 6.817158923136926e-18], 'false,false': [nan, 6.817158923136926e-18], 'false,false,false': [6.817158923136926e-18, nan]}
{'': [0.05693296602387513, 0.0], 'true': [0.05693296602387513, nan], 'false': [2.1769078914218755e-18, 8.673617379884035e-19], 'false,false': [nan, 8.673617379884035e-19]}
{'': [-3.581364595565021e-17, 7.280150981148568e-18], 'false': [nan, 7.280150981148568e-18], 'false,false': [5.843279076974508e-18, 0.0], 'false,false,true': [nan, 5.843279076974508e-18]}
{'': [-1.7906822977825105e-17, -3.23815048849004e-18], 'false': [nan, -3.23815048849004e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 6.554
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.8581489350995121;  // std dev = 4.21e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.14185106490048766;  // std dev = 6.50e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7194734122109543;  // std dev = 5.96e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.5170719622367217;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839158;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.3053664367462845;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.5846044411471142;  // std dev = 0.158, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.11231637819360628;  // std dev = 4.34e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.43593738985924974;  // std dev = 0.189, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return -0.10159632948783627;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.4104206303284636;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3308846491737758;  // std dev = 0.179, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(A, D) )
%   | then return -0.09269127618926105;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then return 0.24977534213787583;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.3182412633466958;  // std dev = 0.046, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.24977534213787583;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2490786764183004;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.24623347804872103;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, I) )
%   | then if ( follows(I, A) )
%   | | then return -0.0851847513883968;  // std dev = 3.73e-09, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else return -0.08518475138839683;  // std dev = 3.09e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( tweets(A, J) )
%   | | then return -0.08518475138839687;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.08518475138839687;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(F, A) )
%   | | then return 0.20593803695694923;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.22157264811115074;  // std dev = 0.038, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.2699475616560636;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.04823224899930667;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.03893215146353061;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(I, A) )
%   | then if ( follows(A, I) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.07877675473109179;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.07877675473109175;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A) )
%   | | then return 0.17428983328664754;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.18575946453621484;  // std dev = 0.034, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G) )
%   | | then return 0.21489511476372036;  // std dev = 0.013, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.1993432312966475;  // std dev = 0.000498, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, A) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.07324622576333704;  // std dev = 7.45e-09, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.07324622576333704;  // std dev = 9.31e-10, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( tweets(A, J) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), tweets(A, F) )
%   | | | then return 0.15061136819301335;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1575826956864129;  // std dev = 0.031, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.049388631806986646;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.17145018567762638;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1480353850476331;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.17993881146989452;  // std dev = 0.010, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1694194381783331;  // std dev = 0.000439, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, J) )
%   | then return -0.06842697784420268;  // std dev = 2.46e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.020874044702972;  // std dev = 0.942, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.18259665273283643;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.1584870791625675;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.14844691964385648;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.13032065527516096;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.15489970562597627;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1468947229418134;  // std dev = 0.000391, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06419184008202625;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.672', 'seconds']
Refined model CLL: -0.081657


******************************************
Best model found
******************************************
Results 

CLL : -0.092514 

AUC ROC : 0.992473 

AUC PR : 0.334549 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 6.554 

Total Inference Time : 1.6409587860107422 

Total revision time: 13.940459098815918
Best scored revision CLL: -0.081657


Results 

CLL : -0.092514 

AUC ROC : 0.992473 

AUC PR : 0.334549 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 13.980737295150757 

Total Inference Time : 1.6409587860107422 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.676
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8268989350995126;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004877;  // std dev = 5.58e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6944871741022827;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839116;  // std dev = 7.30e-08, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5230525219405605;  // std dev = 0.210, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360621;  // std dev = 8.01e-09, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4203248869688511;  // std dev = 0.991, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | else return -0.1015963294878363;  // std dev = 2.58e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4391928114971527;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.30769521180466197;  // std dev = 1.394, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926096;  // std dev = 5.05e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | else return -0.09269127618926105;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.27378737745654935;  // std dev = 0.011, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 5.89e-09, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19159190767684556;  // std dev = 1.391, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109154;  // std dev = 7.22e-08, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16017588207857972;  // std dev = 1.391, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333707;  // std dev = 4.83e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333707;  // std dev = 5.27e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13659937866898228;  // std dev = 0.174, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420267;  // std dev = 4.83e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else return -0.06842697784420275;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10347693617864237;  // std dev = 0.210, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.269', 'seconds']
Parameter learned model CLL:-0.087449 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.392, 2, 62], 'false,true': [5.58e-08, 117, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.392, 2, 62], 'false,true': [7.3e-08, 138, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.21, 3, 62], 'false,true': [0.0, 0, 0], 'false,false': [8.01e-09, 121, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.991, 1, 52], 'true,false': [2.58e-08, 103, 0], 'false,true,true': [0.0, 0, 10], 'false,true,false': [0.0, 26, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.394, 2, 62], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.05e-08, 102, 0], 'false,false,false': [0.0, 19, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.011, 0, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 127, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.391, 2, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.22e-08, 126, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.391, 2, 62], 'true,false': [0.0, 0, 0], 'false,true': [4.83e-08, 106, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.27e-09, 17, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.174, 2, 62], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.83e-08, 98, 0], 'false,false,false': [0.0, 21, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.21, 3, 62], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 117, 0]}]
{'': [0.030273437499999334, 2.6569439905559303e-17], 'false': [2.6569439905559303e-17, nan]}
{'': [0.030273437499998224, 3.8616453030440226e-17], 'false': [3.8616453030440226e-17, nan]}
{'': [0.044023668639053916, 6.422777828409996e-17], 'false': [nan, 6.422777828409996e-17]}
{'': [0.06739389344189059, 0.058671105479856066], 'true': [0.018511925952295935, 6.467318590049456e-18], 'false': [0.058671105479856066, nan], 'false,true': [-4.4408920985006264e-17, -2.135044278125301e-18]}
{'': [0.030362495274309842, 4.404190510909712e-17], 'true': [0.030362495274309842, nan], 'false': [nan, 4.404190510909712e-17], 'false,false': [2.503444075135157e-17, -4.382459307730881e-18], 'false,false,true': [nan, 2.503444075135157e-17]}
{'': [1.8927683795210543e-06, 3.496765431890257e-17], 'false': [nan, 3.496765431890257e-17], 'false,false': [nan, 3.496765431890257e-17]}
{'': [0.030243039753387713, 4.1413081077287586e-17], 'false': [nan, 4.1413081077287586e-17], 'false,false': [nan, 4.1413081077287586e-17], 'false,false,false': [4.1413081077287586e-17, nan]}
{'': [0.030246147563190134, 3.6104813808948184e-18], 'true': [0.030246147563190134, nan], 'false': [2.1994984450121027e-17, 1.6326809185664067e-18], 'false,false': [nan, 1.6326809185664067e-18]}
{'': [0.03024871997628876, 2.5189934172167417e-17], 'false': [nan, 2.5189934172167417e-17], 'false,false': [2.3790493384824782e-17, -3.3042351923367752e-18], 'false,false,true': [nan, 2.3790493384824782e-17]}
{'': [0.043990474286986325, -1.8029262793058098e-17], 'false': [nan, -1.8029262793058098e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 18.829
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995126;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else return -0.14185106490048793;  // std dev = 0.000, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 8.43e-08, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else return -0.12544463852839108;  // std dev = 7.74e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.5553664367462839;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( follows(E, A) )
%   | | then return 0.5553664367462843;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0.4125092938891414;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5553664367462843;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.11231637819360617;  // std dev = 9.42e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.3758469174916433;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.29251358415830986;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.4270852703872873;  // std dev = 0.073, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.10159632948783631;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.41751358415830986;  // std dev = 3.65e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.3282658435752768;  // std dev = 0.017, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.16166544003505878;  // std dev = 0.911, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.15231046486468972;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.33271086850275144;  // std dev = 0.081, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926085;  // std dev = 7.30e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | else return -0.09269127618926104;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.2629497647376356;  // std dev = 0.024, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.25373919191445604;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.2951500355631679;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2869131320691042;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(I, A), tweets(A, J) )
%   | | then if ( follows(A, K), follows(K, I) )
%   | | | then return 0.07723607723258126;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.27723607723258126;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, L) )
%   | | | then return 0.25125824036828787;  // std dev = 0.002, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.26675270828098213;  // std dev = 0.044, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.0851847513883968;  // std dev = 6.04e-09, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.21312562590513234;  // std dev = 0.010, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.22140163487013276;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.23764195379125586;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.23194945093294525;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.07130432756580825;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.21551602905246509;  // std dev = 0.024, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.2196990473601431;  // std dev = 0.070, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.11688644898815129;  // std dev = 0.937, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.07877675473109153;  // std dev = 6.59e-09, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, A), tweets(A, F) )
%   | | | then return 0.18033280603523905;  // std dev = 0.002, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.1957780205878537;  // std dev = 0.006, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.17666800136175514;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.13845622835000856;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then if ( follows(A, J), follows(J, H) )
%   | | | then return 0.24892963642388816;  // std dev = 0.054, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.18921049249889277;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.1733987906175829;  // std dev = 0.001, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.1958176377744756;  // std dev = 0.033, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07324622576333718;  // std dev = 9.31e-10, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(D, G) )
%   | | | then return 0.15648623128978514;  // std dev = 0.017, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.1659713726258098;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.1767355674498357;  // std dev = 0.034, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(I, A), follows(A, I) )
%   | | | then return -0.15151524091386756;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.09671042927488598;  // std dev = 0.952, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.17064520841757444;  // std dev = 0.076, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.15522698291454498;  // std dev = 0.012, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, K) )
%   | then return -0.06842697784420265;  // std dev = 4.84e-09, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else return -0.06842697784420276;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(D, A), follows(E, A) )
%   | | | then return 0.13635596050877677;  // std dev = 0.011, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.14628419896358436;  // std dev = 0.011, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(E, A) )
%   | | | then return 0.20244488442816289;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.14495346090318037;  // std dev = 0.051, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then return -0.10278967635670294;  // std dev = 0.814, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.15016976538126042;  // std dev = 0.067, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.13793346638401824;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06419184008202626;  // std dev = 0.000, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.745', 'seconds']
Refined model CLL: -0.08757


******************************************
Best model found
******************************************
Results 

CLL : -0.09255 

AUC ROC : 0.992507 

AUC PR : 0.341433 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 18.829 

Total Inference Time : 3.988096237182617 

Total revision time: 32.66418874740601
Best scored revision CLL: -0.087449


Results 

CLL : -0.09255 

AUC ROC : 0.992507 

AUC PR : 0.341433 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 32.70446694374085 

Total Inference Time : 3.988096237182617 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.445
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8475106372271711;  // std dev = 0.995, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004883;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.700562901734824;  // std dev = 1.399, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5626506116704117;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360663;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3497672600539669;  // std dev = 2.358, 82.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=76 */
%   | else return -0.10159632948783644;  // std dev = 0.000, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4229379917612842;  // std dev = 1.18e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.10159632948783626;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.286792093241891;  // std dev = 2.173, 98.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926068;  // std dev = 7.45e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2661721721449541;  // std dev = 0.994, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.27e-09, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20563771150325597;  // std dev = 1.406, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109147;  // std dev = 7.45e-08, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.132157397377704;  // std dev = 2.374, 99.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.0732462257633368;  // std dev = 8.23e-08, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333702;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15200816445566134;  // std dev = 0.143, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 3.94e-08, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | | else return -0.06842697784420264;  // std dev = 1.86e-09, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1417206986405008;  // std dev = 0.102, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.093', 'seconds']
Parameter learned model CLL:-0.088292 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.995, 1, 93], 'false,true': [0.0, 182, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.399, 2, 93], 'false,true': [0.0, 187, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.0, 0, 93], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 204, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [2.358, 6, 76], 'true,false': [0.0, 146, 0], 'false,true,true': [1.18e-08, 0, 17], 'false,true,false': [0.0, 34, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.173, 5, 93], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.45e-08, 151, 0], 'false,false,false': [0.0, 38, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.994, 1, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.27e-09, 177, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.406, 2, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.45e-08, 193, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [2.374, 6, 93], 'true,false': [0.0, 0, 0], 'false,true': [8.23e-08, 155, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 38, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.143, 2, 93], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.94e-08, 138, 0], 'false,false,false': [1.86e-09, 33, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.102, 1, 93], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 196, 0]}]
{'': [0.010525124490720615, -2.049642507000289e-16], 'false': [-2.049642507000289e-16, nan]}
{'': [0.020609418282546997, -2.1373277479414777e-17], 'false': [-2.1373277479414777e-17, nan]}
{'': [-1.375244004696968e-15, -4.7891973611281265e-17], 'false': [nan, -4.7891973611281265e-17]}
{'': [0.0713093856585516, 0.061141389815172455], 'true': [0.06781677572873326, -6.387584525240626e-17], 'false': [0.061141389815172455, nan], 'false,true': [1.5673736818237505e-16, -1.469412826709766e-17]}
{'': [0.04816770769474343, 4.11193712824132e-17], 'true': [0.04816770769474343, nan], 'false': [nan, 4.11193712824132e-17], 'false,false': [3.676235180878002e-17, -1.8990657000167152e-17], 'false,false,true': [nan, 3.676235180878002e-17]}
{'': [0.010500473939572175, 2.885325374732045e-17], 'false': [nan, 2.885325374732045e-17], 'false,false': [nan, 2.885325374732045e-17]}
{'': [0.020799657723508797, 2.8762254523967783e-17], 'false': [nan, 2.8762254523967783e-17], 'false,false': [nan, 2.8762254523967783e-17], 'false,false,false': [2.8762254523967783e-17, nan]}
{'': [0.05693108958501939, 6.787892067656397e-17], 'true': [0.05693108958501939, nan], 'false': [4.369264806589326e-17, -8.034508730839949e-18], 'false,false': [nan, -8.034508730839949e-18]}
{'': [0.020547355224994686, 1.7529837230923523e-17], 'false': [nan, 1.7529837230923523e-17], 'false,false': [1.12631321338784e-17, 3.3643121958338078e-18], 'false,false,true': [nan, 1.12631321338784e-17]}
{'': [0.01050215690195339, -2.2657612747452172e-18], 'false': [nan, -2.2657612747452172e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 23.402
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.14185106490048802;  // std dev = 0.000, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.7213078005822541;  // std dev = 0.113, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.5528067455442877;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.7194734122109542;  // std dev = 4.21e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.7194734122109543;  // std dev = 4.21e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.1254446385283917;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5236634169819395;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return 0.45491341698193954;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.5617241343910717;  // std dev = 0.084, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.41381352496367;  // std dev = 0.773, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5680743207764256;  // std dev = 0.146, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.3886242667855604;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11231637819360651;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4295616825167081;  // std dev = 0.189, 76.000 (wgt'ed) examples reached here.  /* #pos=76 */
%   | else return -0.10159632948783648;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(F, A), tweets(A, G) )
%   | | then return 0.262617486469856;  // std dev = 0.344, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0.4463071553516557;  // std dev = 0.051, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.10159632948783631;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3325538000384442;  // std dev = 0.198, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else if ( follows(A, D) )
%   | then return -0.09269127618926068;  // std dev = 7.74e-08, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   | else return -0.09269127618926092;  // std dev = 1.05e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.2577421175831091;  // std dev = 0.030, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.19290469643989905;  // std dev = 0.970, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return 0.2696329482485037;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.026013899662301766;  // std dev = 1.442, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | else if ( follows(G, A) )
%   | | then if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.2645054029027421;  // std dev = 0.025, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.29057576455919876;  // std dev = 0.105, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.24893847977041247;  // std dev = 0.003, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.26869450753800234;  // std dev = 0.039, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.08518475138839678;  // std dev = 5.43e-09, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, E), follows(F, E) )
%   | | | then return 0.213375643955482;  // std dev = 0.027, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return -0.06469955074390125;  // std dev = 1.177, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.21634631279672561;  // std dev = 0.022, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.22671956363615742;  // std dev = 1.05e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, H) )
%   | | then if ( tweets(A, I), recursion_accounttype(H, B) )
%   | | | then return 0.2872492656352561;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.21931050749092448;  // std dev = 0.136, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.09622737622541931;  // std dev = 0.328, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(J, A) )
%   | then return -0.07877675473109154;  // std dev = 6.11e-09, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | else return -0.07877675473109177;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | then if ( follows(E, A), follows(A, D) )
%   | | | then return 0.13899526770999046;  // std dev = 0.972, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.194311692168186;  // std dev = 0.087, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.08304346747756365;  // std dev = 1.349, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | else return -0.42336719095668757;  // std dev = 0.777, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(G, I) )
%   | | | then return 0.23218209189196504;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.21424625443582881;  // std dev = 0.000656, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.17185602077208062;  // std dev = 0.002, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.2033063500752542;  // std dev = 0.032, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07324622576333664;  // std dev = 8.54e-09, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.1677682333691001;  // std dev = 0.095, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return -0.21642479222703984;  // std dev = 1.072, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.18467323555078063;  // std dev = 0.084, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.15122276367676374;  // std dev = 0.043, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.07047587253188549;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.17708817393982598;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2017404650485445;  // std dev = 0.095, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, I) )
%   | then return -0.06842697784420262;  // std dev = 5.67e-09, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | else return -0.06842697784420275;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, D) )
%   | | | then return 0.10531686904148353;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.1515844076956669;  // std dev = 0.087, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.10900201558455214;  // std dev = 0.966, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return -0.08159291693878128;  // std dev = 0.643, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.15963992403441177;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.20614482696639402;  // std dev = 0.078, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.1359408760366973;  // std dev = 0.036, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.15250645904709303;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06419184008202626;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.274', 'seconds']
Refined model CLL: -0.085527


******************************************
Best model found
******************************************
Results 

CLL : -0.090985 

AUC ROC : 0.995196 

AUC PR : 0.493895 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 23.402 

Total Inference Time : 5.867246627807617 

Total revision time: 45.35728084754944
Best scored revision CLL: -0.085527


Results 

CLL : -0.090985 

AUC ROC : 0.995196 

AUC PR : 0.493895 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 45.39755904388428 

Total Inference Time : 5.867246627807617 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.297
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8193892451770297;  // std dev = 2.192, 129.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=124 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048813;  // std dev = 0.000, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7036073393928454;  // std dev = 1.711, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839177;  // std dev = 0.000, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5300517288023413;  // std dev = 0.193, 129.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360676;  // std dev = 0.000, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.41727136786002034;  // std dev = 1.400, 101.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=99 */
%   | else return -0.10159632948783653;  // std dev = 0.000, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.3986118095965008;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | else return -0.10159632948783624;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.2940294212611163;  // std dev = 2.348, 130.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926055;  // std dev = 9.42e-08, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2687571251196912;  // std dev = 0.997, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.51e-09, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.18011456880920398;  // std dev = 2.394, 130.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109146;  // std dev = 6.32e-08, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1883173552364013;  // std dev = 0.997, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333661;  // std dev = 1.28e-07, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1370287472243774;  // std dev = 0.174, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420262;  // std dev = 8.09e-08, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | | else return -0.06842697784420262;  // std dev = 2.79e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14199176937269992;  // std dev = 0.089, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202619;  // std dev = 3.48e-09, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.627', 'seconds']
Parameter learned model CLL:-0.088562 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.192, 5, 124], 'false,true': [0.0, 263, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.711, 3, 124], 'false,true': [0.0, 225, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.193, 5, 124], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 231, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.4, 2, 99], 'true,false': [0.0, 208, 0], 'false,true,true': [0.192, 1, 25], 'false,true,false': [0.0, 45, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.348, 6, 124], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [9.42e-08, 203, 0], 'false,false,false': [0.0, 47, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.997, 1, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.51e-09, 212, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.394, 6, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.32e-08, 232, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.997, 1, 124], 'true,false': [0.0, 0, 0], 'false,true': [1.28e-07, 214, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 41, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.174, 4, 124], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [8.09e-08, 197, 0], 'false,false,false': [2.79e-09, 56, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.089, 1, 124], 'false,true': [0.0, 0, 0], 'false,false': [3.48e-09, 261, 0]}]
{'': [0.03725737635959786, -7.767339792054327e-17], 'false': [-7.767339792054327e-17, nan]}
{'': [0.023064046128094342, -4.9343245538895844e-17], 'false': [-4.9343245538895844e-17, nan]}
{'': [0.03725737635959544, -7.689856447620132e-17], 'false': [nan, -7.689856447620132e-17]}
{'': [0.06557968182265396, 0.07161531525183566], 'false': [0.07161531525183566, nan], 'false,true': [0.036982248520710165, -1.4802973661668754e-17], 'true': [0.019409861778256647, -8.753681540313734e-17]}
{'': [0.04239972869989881, 6.217248937900877e-17], 'true': [0.04239972869989881, nan], 'false': [nan, 6.217248937900877e-17], 'false,false': [4.375263151232144e-17, -2.4802854805455624e-17], 'false,false,true': [nan, 4.375263151232144e-17]}
{'': [0.007950224650280148, 3.0374026145405226e-17], 'false': [nan, 3.0374026145405226e-17], 'false,false': [nan, 3.0374026145405226e-17]}
{'': [0.04408350793734745, 1.7227598657976568e-17], 'false': [nan, 1.7227598657976568e-17], 'false,false': [nan, 1.7227598657976568e-17], 'false,false,false': [1.7227598657976568e-17, nan]}
{'': [0.007946849103944047, 5.3987315707262513e-17], 'true': [0.007946849103944047, nan], 'false': [7.678177927314166e-17, -8.800548365931119e-18], 'false,false': [nan, -8.800548365931119e-18]}
{'': [0.030306517566126946, -4.388233298913662e-18], 'false': [nan, -4.388233298913662e-18], 'false,false': [3.325033424004276e-17, 7.93016446160826e-18], 'false,false,true': [nan, 3.325033424004276e-17]}
{'': [0.007906678171333599, 1.3611929803833336e-17], 'false': [nan, 1.3611929803833336e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 28.62
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995105;  // std dev = 7.05e-07, 124.000 (wgt'ed) examples reached here.  /* #pos=124 */
%   else return -0.1418510649004882;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then return 0.7194734122109551;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return 0.3194734122109547;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.6668418332635865;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else return 0.7194734122109547;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   else return -0.12544463852839177;  // std dev = 0.000, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then return 0.5614906076391479;  // std dev = 0.163, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then return 0.4303664367462847;  // std dev = 0.331, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.34610002607404877;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.5259546720404024;  // std dev = 0.985, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   else return -0.11231637819360674;  // std dev = 0.000, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.3916347230890956;  // std dev = 0.988, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | | else return 0.4259205079575806;  // std dev = 0.096, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.4400576454250328;  // std dev = 0.177, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.1015963294878365;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.4450552891302214;  // std dev = 0.031, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.10702072402667735;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.42468328479264134;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783626;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.32681205869160984;  // std dev = 0.083, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else if ( follows(G, A), follows(G, D) )
%   | | | then return 0.28606270107520404;  // std dev = 0.987, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.19640979825350113;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), tweets(H, I) )
%   | | | then return 0.254811067476801;  // std dev = 0.996, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.12507565696897605;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.1946018314229689;  // std dev = 1.279, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.2908206295326635;  // std dev = 0.985, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   else if ( follows(A, K) )
%   | then return -0.09269127618926054;  // std dev = 9.77e-08, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), tweets(F, D) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(F, B) )
%   | | | then return 0.2418486865563029;  // std dev = 0.999, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return 0.15591694669735176;  // std dev = 1.558, 24.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=21 */
%   | | else return 0.276003644748958;  // std dev = 0.079, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.2656491654851364;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.33904481469186204;  // std dev = 0.131, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(I, A), tweets(I, J) )
%   | | | then return 0.28897217918821744;  // std dev = 0.115, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.2639927608480885;  // std dev = 0.012, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(K, A) )
%   | then return -0.08518475138839678;  // std dev = 5.27e-09, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else return -0.08518475138839678;  // std dev = 1.05e-08, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.16846078206689732;  // std dev = 1.318, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | | else return -0.4134002402490457;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( recursion_accounttype(D, B), tweets(A, G) )
%   | | | then return 0.2162668400590524;  // std dev = 0.008, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.23806759874302502;  // std dev = 0.070, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(H, J) )
%   | | | then return 0.26762218359942425;  // std dev = 0.061, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.3164922388636121;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(K, A), tweets(K, L) )
%   | | | then return 0.23125373176486397;  // std dev = 0.108, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2200706028181329;  // std dev = 0.045, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else return -0.07877675473109146;  // std dev = 4.06e-09, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.18628319448939487;  // std dev = 0.022, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.193943148426214;  // std dev = 0.052, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.2498444000024079;  // std dev = 0.109, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.20180288620901934;  // std dev = 0.019, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.22707569301199343;  // std dev = 0.074, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.4223036247609999;  // std dev = 1.140, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.08531302891271085;  // std dev = 1.354, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return 0.18874514765467554;  // std dev = 0.104, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else return -0.07324622576333678;  // std dev = 7.51e-09, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.14385231998435957;  // std dev = 0.975, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return -0.03749497760976586;  // std dev = 0.853, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.16304308091503372;  // std dev = 0.033, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.22331685668833154;  // std dev = 0.179, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.16545637225050994;  // std dev = 0.046, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.1965027450394993;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.176203468784066;  // std dev = 0.043, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.15778611769187184;  // std dev = 0.035, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else return -0.06842697784420274;  // std dev = 0.000, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then if ( follows(A, E), follows(E, D) )
%   | | | then return 0.142805711706029;  // std dev = 0.049, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.13781155836988146;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(D, F), recursion_accounttype(D, B) )
%   | | | then return 0.1708438099001747;  // std dev = 0.167, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.14470103012629634;  // std dev = 0.159, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.15626028427005123;  // std dev = 0.008, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.13000875826609112;  // std dev = 0.778, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13591099416547758;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(I, A) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else return -0.06419184008202623;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.584', 'seconds']
Refined model CLL: -0.086357


******************************************
Best model found
******************************************
Results 

CLL : -0.091074 

AUC ROC : 0.99483 

AUC PR : 0.432528 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 28.62 

Total Inference Time : 8.558698654174805 

Total revision time: 55.20520323944092
Best scored revision CLL: -0.086357


Results 

CLL : -0.091074 

AUC ROC : 0.99483 

AUC PR : 0.432528 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 55.24548143577576 

Total Inference Time : 8.558698654174805 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.198
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8270930344783917;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048768;  // std dev = 1.74e-07, 325.000 (wgt'ed) examples reached here.  /* #neg=325 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7130403104915405;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839216;  // std dev = 0.000, 338.000 (wgt'ed) examples reached here.  /* #neg=338 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.533547611752264;  // std dev = 0.173, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360686;  // std dev = 0.000, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3944096647037531;  // std dev = 2.194, 133.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=128 */
%   | else return -0.1015963294878366;  // std dev = 0.000, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.39752089104547056;  // std dev = 0.182, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return -0.10159632948783616;  // std dev = 2.95e-09, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.31379823111411675;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926047;  // std dev = 9.88e-08, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   | | else return -0.092691276189261;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23537358494199448;  // std dev = 2.403, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.04e-09, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20331584385239315;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 2.98e-08, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17004175670731442;  // std dev = 1.932, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333684;  // std dev = 1.14e-07, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14421472389328363;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420282;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
%   | | else return -0.06842697784420262;  // std dev = 2.95e-09, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13103251195068583;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820259;  // std dev = 7.33e-09, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.302', 'seconds']
Parameter learned model CLL:-0.08726 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.201, 5, 156], 'false,true': [1.74e-07, 325, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 338, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.173, 5, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 296, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [2.194, 5, 128], 'true,false': [0.0, 275, 0], 'false,true,true': [0.182, 1, 28], 'false,true,false': [2.95e-09, 61, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.975, 4, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [9.88e-08, 248, 0], 'false,false,false': [0.0, 54, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.403, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.04e-09, 314, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.98e-08, 310, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.932, 4, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.14e-07, 261, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 70, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 265, 0], 'false,false,false': [2.95e-09, 53, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false': [7.33e-09, 313, 0]}]
{'': [0.030091431657735174, 9.29171269840131e-17], 'false': [9.29171269840131e-17, nan]}
{'': [0.012497997115844862, -1.1562085936924707e-16], 'false': [-1.1562085936924707e-16, nan]}
{'': [0.030091431657729612, -9.151838446234399e-17], 'false': [nan, -9.151838446234399e-17]}
{'': [0.0658494386512867, 0.06513411029981818], 'true': [0.036180677257053095, -6.136505445200865e-17], 'false': [0.06513411029981818, nan], 'false,true': [0.03329369797859673, 9.100188726435709e-18]}
{'': [0.024377467065492275, 8.822964434107204e-17], 'true': [0.024377467065492275, nan], 'false': [nan, 8.822964434107204e-17], 'false,false': [3.9395010551215234e-17, -2.7755575615628914e-17], 'false,false,true': [nan, 3.9395010551215234e-17]}
{'': [0.03565745791537822, 3.677171801306251e-17], 'false': [nan, 3.677171801306251e-17], 'false,false': [nan, 3.677171801306251e-17]}
{'': [0.024383606198648246, 2.865091676452017e-18], 'false': [nan, 2.865091676452017e-18], 'false,false': [nan, 2.865091676452017e-18], 'false,false,false': [2.865091676452017e-18, nan]}
{'': [0.023336263043451703, 1.9454059041770116e-17], 'true': [0.023336263043451703, nan], 'false': [5.019399115163543e-17, -1.2688263138573217e-17], 'false,false': [nan, -1.2688263138573217e-17]}
{'': [0.02438185876560141, -7.192010788452272e-17], 'false': [nan, -7.192010788452272e-17], 'false,false': [-2.3461316746795762e-17, 8.3790416952842e-18], 'false,false,true': [nan, -2.3461316746795762e-17]}
{'': [0.018509315957017818, 5.391498394345808e-17], 'false': [nan, 5.391498394345808e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 37.473
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(E, A), follows(D, E) )
%   | | | then return 0.8581489350995122;  // std dev = 1.69e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.8126943896449668;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.8581489350995121;  // std dev = 1.88e-07, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   else return -0.14185106490048777;  // std dev = 1.37e-07, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.7223903828704026;  // std dev = 0.092, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.28052658778904555;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.7194734122109544;  // std dev = 2.98e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.12544463852839194;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(D, F) )
%   | | | then return 0.5548573060365658;  // std dev = 0.011, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return 0.47521190167079547;  // std dev = 1.354, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else return 0.40059687114024134;  // std dev = 0.702, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.557788104355445;  // std dev = 0.113, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.11231637819360688;  // std dev = 0.000, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.41818788725742745;  // std dev = 0.040, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.3676499726250465;  // std dev = 1.341, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | | else return 0.4241151684434113;  // std dev = 0.086, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else return -0.1015963294878366;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.4223897390920462;  // std dev = 0.112, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.1015963294878362;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | | then return 0.32819883273696476;  // std dev = 0.116, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | | else return 0.23750560859017802;  // std dev = 1.346, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | else return 0.32566714375772576;  // std dev = 0.065, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.3286586681644517;  // std dev = 0.100, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(H, A), tweets(A, I) )
%   | | | then return -0.3481760837066011;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.31907126935402735;  // std dev = 0.000607, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, J) )
%   | then return -0.09269127618926047;  // std dev = 1.41e-07, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
%   | else return -0.092691276189261;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.23719374396892093;  // std dev = 0.965, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | | else return -0.08024010347687678;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.2887646533665099;  // std dev = 0.050, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.2634389622033353;  // std dev = 0.019, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.12769914978895186;  // std dev = 0.928, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.06490604798672757;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.25252459272248723;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.15437825231214555;  // std dev = 1.828, 36.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=32 */
%   else return -0.08518475138839678;  // std dev = 6.04e-09, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.14314651839539064;  // std dev = 1.908, 53.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=49 */
%   | | | else return 0.22930367863287068;  // std dev = 0.060, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(G, A), follows(G, E) )
%   | | | then return 0.2249809439623806;  // std dev = 0.070, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.2117664153145535;  // std dev = 0.024, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(H, A), tweets(H, I) )
%   | | then if ( follows(H, J), follows(J, A) )
%   | | | then return 0.22734343134463617;  // std dev = 0.061, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.25111922004121207;  // std dev = 0.131, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.21803303446188357;  // std dev = 0.096, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.2257393707125043;  // std dev = 0.002, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.07877675473109143;  // std dev = 2.11e-08, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D), tweets(D, F) )
%   | | | then return 0.18945681878356257;  // std dev = 0.073, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.18008363848603853;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, D), tweets(A, G) )
%   | | | then return 0.20279213728877304;  // std dev = 0.018, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.19564728876784024;  // std dev = 0.051, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.13752219004747548;  // std dev = 0.958, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.11381114026358541;  // std dev = 0.806, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.18505444417341377;  // std dev = 0.134, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.13875274540592614;  // std dev = 0.971, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   else return -0.07324622576333706;  // std dev = 4.66e-09, 326.000 (wgt'ed) examples reached here.  /* #neg=326 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.16224444077335823;  // std dev = 0.062, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return 0.08828994452774265;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.00990625149334244;  // std dev = 1.455, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return 0.15883789647992105;  // std dev = 0.121, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(A, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.17060440670527358;  // std dev = 0.069, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.1561297756183544;  // std dev = 0.018, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.19298862905493705;  // std dev = 0.035, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1685775947462583;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06842697784420311;  // std dev = 0.000, 328.000 (wgt'ed) examples reached here.  /* #neg=328 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(E, A), follows(F, E) )
%   | | | then return 0.13978506612238184;  // std dev = 0.044, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return 0.08072917276760765;  // std dev = 0.949, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return -0.004172378194456957;  // std dev = 1.534, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return 0.10161145845681112;  // std dev = 0.985, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.1478463478094357;  // std dev = 0.062, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.13664759965953793;  // std dev = 0.016, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.15644210673602246;  // std dev = 0.093, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.14461150244209298;  // std dev = 0.007, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06419184008202594;  // std dev = 6.84e-09, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.159', 'seconds']
Refined model CLL: -0.084887


******************************************
Best model found
******************************************
Results 

CLL : -0.091344 

AUC ROC : 0.995251 

AUC PR : 0.504902 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 37.473 

Total Inference Time : 9.323476314544678 

Total revision time: 68.72327613449096
Best scored revision CLL: -0.084887


Results 

CLL : -0.091344 

AUC ROC : 0.995251 

AUC PR : 0.504902 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 68.7635543308258 

Total Inference Time : 9.323476314544678 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.455
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8196873966379734;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048768;  // std dev = 5.37e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7271702392772513;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839155;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5629497920645522;  // std dev = 7.45e-09, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360625;  // std dev = 6.84e-09, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.38470020574794767;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else return -0.10159632948783624;  // std dev = 3.33e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.29456954052605405;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926107;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23263285308258908;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08583749267542848;  // std dev = 0.002, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22763565753872622;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07912511342648586;  // std dev = 0.012, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1901022861744757;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07317829890462015;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07971900657454078;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.16254019124837568;  // std dev = 1.86e-09, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06836751692975897;  // std dev = 2.79e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else return -0.07406300628351153;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10314768104170104;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06450316186024525;  // std dev = 0.001, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.879', 'seconds']
Parameter learned model CLL:-0.088583 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.981, 1, 25], 'false,true': [5.37e-08, 50, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 48, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [7.45e-09, 0, 25], 'false,true': [0.0, 0, 0], 'false,false': [6.84e-09, 71, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.981, 1, 25], 'true,false': [3.33e-08, 52, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.981, 1, 25], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 60, 0], 'false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.981, 1, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.002, 46, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.012, 53, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.83e-08, 0, 25], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 55, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 3, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [1.86e-09, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [2.79e-08, 50, 0], 'false,false,false': [0.0, 2, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 1, 25], 'false,true': [0.0, 0, 0], 'false,false': [0.001, 55, 0]}]
{'': [0.03698224852071082, 5.773159728050814e-17], 'false': [5.773159728050814e-17, nan]}
{'': [-1.4210854715202004e-16, -3.0068540250264654e-17], 'false': [-3.0068540250264654e-17, nan]}
{'': [0.0, 4.5347137625534564e-17], 'false': [nan, 4.5347137625534564e-17]}
{'': [0.0648794873251986, 0.0], 'true': [0.036982248520710186, 2.1350442781253012e-17], 'false': [0.0, nan], 'false,true': [nan, 0.0]}
{'': [0.03698224852071003, -1.8503717077085942e-18], 'true': [0.03698224852071003, nan], 'false': [nan, -1.8503717077085942e-18], 'false,false': [-1.8503717077085942e-18, nan], 'false,false,true': [nan, -1.8503717077085942e-18]}
{'': [0.03698224852071009, 4.473747471862191e-06], 'false': [nan, 4.473747471862191e-06], 'false,false': [nan, 4.473747471862191e-06]}
{'': [0.0, 2.609849197158462e-06], 'false': [nan, 2.609849197158462e-06], 'false,false': [nan, 2.609849197158462e-06], 'false,false,false': [2.609849197158462e-06, nan]}
{'': [1.3322676295501878e-17, 2.0983476146929636e-06], 'false': [-3.0278809762504268e-18, 0.0], 'true': [1.3322676295501878e-17, nan], 'false,false': [nan, 0.0]}
{'': [4.440892098500626e-18, 1.1996523291098715e-06], 'false': [nan, 1.1996523291098715e-06], 'false,false': [1.5543122344752193e-17, 0.0], 'false,false,true': [nan, 1.5543122344752193e-17]}
{'': [0.03698224852071007, 1.6873454745713889e-06], 'false': [nan, 1.6873454745713889e-06]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 5.707
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.14185106490048766;  // std dev = 5.37e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(D, E), recursion_accounttype(D, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.6083623010998434;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.7194734122109545;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.12544463852839155;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5640837382335779;  // std dev = 0.064, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.11231637819360626;  // std dev = 4.71e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), tweets(A, F) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.43353527384708374;  // std dev = 0.044, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.22083715782913096;  // std dev = 0.870, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.4153951081071512;  // std dev = 1.49e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.1015963294878363;  // std dev = 2.24e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3322082145999105;  // std dev = 0.083, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.09269127618926107;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.26307753233726056;  // std dev = 0.073, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.08518475138839679;  // std dev = 1.83e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21537223952313256;  // std dev = 0.064, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07877675473109179;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.17851784134400409;  // std dev = 0.019, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.041036730306795874;  // std dev = 0.923, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.18384800450594066;  // std dev = 0.033, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.17992783773290888;  // std dev = 0.036, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, F) )
%   | then return -0.07324622576333704;  // std dev = 1.05e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.07020177824023197;  // std dev = 0.939, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.15224216083041356;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.15967083948653316;  // std dev = 0.032, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.1571043778111374;  // std dev = 0.021, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1535982947793731;  // std dev = 0.024, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, G) )
%   | then return -0.06842697784420274;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(D, E), recursion_accounttype(D, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.1614658784977887;  // std dev = 0.025, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1511862412052911;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1415191718956816;  // std dev = 0.025, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A) )
%   | | then return 0.12903715180305608;  // std dev = 0.000489, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1298310954619649;  // std dev = 0.000457, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06419184008202625;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.668', 'seconds']
Refined model CLL: -0.088222


******************************************
Best model found
******************************************
Results 

CLL : -0.087274 

AUC ROC : 0.993175 

AUC PR : 0.289264 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 5.707 

Total Inference Time : 1.770397663116455 

Total revision time: 12.063931047439574
Best scored revision CLL: -0.088222


Results 

CLL : -0.087274 

AUC ROC : 0.993175 

AUC PR : 0.289264 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 12.104209243774413 

Total Inference Time : 1.770397663116455 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.292
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995122;  // std dev = 1.46e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048766;  // std dev = 7.74e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6998655690736998;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.521741346875215;  // std dev = 0.192, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360618;  // std dev = 8.12e-09, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3905136334450407;  // std dev = 1.386, 50.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=48 */
%   | else return -0.1015963294878363;  // std dev = 2.58e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43051363344504057;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3184797482142208;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926105;  // std dev = 2.11e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23239640857729207;  // std dev = 1.386, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 4.66e-09, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2078541895811453;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109158;  // std dev = 5.77e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.19300817449905314;  // std dev = 0.009, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333707;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14510712794314906;  // std dev = 0.139, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420265;  // std dev = 4.71e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else return -0.06842697784420275;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10725090695125926;  // std dev = 0.192, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.121', 'seconds']
Parameter learned model CLL:-0.089677 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.46e-07, 0, 50], 'false,true': [7.74e-08, 82, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.99, 1, 50], 'false,true': [0.0, 96, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 2, 50], 'false,true': [0.0, 0, 0], 'false,false': [8.12e-09, 106, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.386, 2, 48], 'true,false': [2.58e-08, 103, 0], 'false,true,true': [0.0, 0, 2], 'false,true,false': [0.0, 13, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.99, 1, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [2.11e-08, 88, 0], 'false,false,false': [0.0, 8, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.386, 2, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.66e-09, 103, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.99, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.77e-08, 104, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.009, 0, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 102, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.86e-09, 5, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.139, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.71e-08, 99, 0], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 2, 50], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 68, 0]}]
{'': [4.263256414560601e-16, 7.311224796312007e-17], 'false': [7.311224796312007e-17, nan]}
{'': [0.01922337562475929, -1.3877787807814457e-17], 'false': [-1.3877787807814457e-17, nan]}
{'': [0.03698224852070952, 6.70323335622736e-17], 'false': [nan, 6.70323335622736e-17]}
{'': [0.06582711394897948, 0.03271851701761387], 'true': [0.03840000000000007, 6.467318590049456e-18], 'false': [0.03271851701761387, nan], 'false,true': [0.0, -8.540177112501205e-18]}
{'': [0.019212675465588278, 1.850371707708594e-17], 'true': [0.019212675465588278, nan], 'false': [nan, 1.850371707708594e-17], 'false,false': [5.046468293750712e-18, 0.0], 'false,false,true': [nan, 5.046468293750712e-18]}
{'': [0.036961344149464795, 2.0479842201823276e-17], 'false': [nan, 2.0479842201823276e-17], 'false,false': [nan, 2.0479842201823276e-17]}
{'': [0.01921449908532435, 3.202566417187951e-17], 'false': [nan, 3.202566417187951e-17], 'false,false': [nan, 3.202566417187951e-17], 'false,false,false': [3.202566417187951e-17, nan]}
{'': [1.4570578915540367e-06, -3.112774835397635e-18], 'true': [1.4570578915540367e-06, nan], 'false': [-4.353815782843751e-18, 6.938893903907229e-19], 'false,false': [nan, 6.938893903907229e-19]}
{'': [0.01921612971307704, 2.3713501496848002e-17], 'false': [nan, 2.3713501496848002e-17], 'false,false': [2.2428747972225384e-17, 0.0], 'false,false,true': [nan, 2.2428747972225384e-17]}
{'': [0.036968602285684146, -5.714383214982423e-18], 'false': [nan, -5.714383214982423e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 10.014
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995122;  // std dev = 1.46e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else return -0.14185106490048766;  // std dev = 7.88e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7194734122109547;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else return -0.12544463852839133;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A), follows(E, D) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.47203310341295107;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.3053664367462843;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.5553664367462844;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return -0.11231637819360618;  // std dev = 8.82e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.4224083174603935;  // std dev = 0.044, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.3199989544418751;  // std dev = 0.936, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.42986380796492524;  // std dev = 0.096, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.10159632948783623;  // std dev = 4.83e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3307556544401849;  // std dev = 0.089, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.12452504981630685;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3180272582588101;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926096;  // std dev = 5.05e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.26231188682540046;  // std dev = 0.077, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.14467288743433487;  // std dev = 1.293, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else return 0.016948745081105887;  // std dev = 0.841, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.07926038270494722;  // std dev = 0.815, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(H, A) )
%   | | then if ( follows(A, H) )
%   | | | then return -0.08518475138839686;  // std dev = 2.36e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | | else return -0.08518475138839691;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.0851847513883969;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.0851847513883969;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.2097659320850054;  // std dev = 0.029, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.23817304517807814;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return -0.3527885482560486;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.12070897304451415;  // std dev = 0.964, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.28864309399977145;  // std dev = 0.062, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.2255299432895304;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.26123939776163907;  // std dev = 0.020, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, J) )
%   | then return -0.07877675473109162;  // std dev = 5.27e-09, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return -0.0787767547310918;  // std dev = 3.73e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | | then return 0.12316764923099568;  // std dev = 0.976, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.20745583837055132;  // std dev = 0.197, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.07806213474687514;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1868850201128333;  // std dev = 0.000366, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2014880447422743;  // std dev = 0.024, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.21405190450796754;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, I) )
%   | then return -0.07324622576333711;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.10189857242996596;  // std dev = 0.973, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.16236725172135724;  // std dev = 0.019, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0.160155989029224;  // std dev = 0.011, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.18590312641246873;  // std dev = 0.000161, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2955913676244285;  // std dev = 0.062, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.17541151103696406;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1651659189185028;  // std dev = 0.012, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, J) )
%   | then return -0.06842697784420265;  // std dev = 4.75e-09, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return -0.06842697784420275;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.08944299039080178;  // std dev = 0.962, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.141488258431768;  // std dev = 0.017, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0.1397689327857687;  // std dev = 0.010, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.1593922800757965;  // std dev = 0.000143, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.238254663649877;  // std dev = 0.054, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.15146442053938913;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.14363572704915673;  // std dev = 0.011, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06419184008202626;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.576', 'seconds']
Refined model CLL: -0.08748


******************************************
Best model found
******************************************
Results 

CLL : -0.085177 

AUC ROC : 0.9965 

AUC PR : 0.531817 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 10.014 

Total Inference Time : 3.068984270095825 

Total revision time: 20.40445972061157
Best scored revision CLL: -0.08748


Results 

CLL : -0.085177 

AUC ROC : 0.9965 

AUC PR : 0.531817 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 20.44473791694641 

Total Inference Time : 3.068984270095825 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.916
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995127;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048807;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6688405008185487;  // std dev = 1.949, 79.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=75 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839133;  // std dev = 4.21e-08, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5171989328514696;  // std dev = 0.219, 79.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360621;  // std dev = 8.12e-09, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.41108543859489977;  // std dev = 1.394, 71.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   | else return -0.10159632948783638;  // std dev = 0.000, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4392544526794067;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.10159632948783628;  // std dev = 1.32e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3153364661228427;  // std dev = 1.395, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926078;  // std dev = 6.83e-08, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | else return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24835025124203425;  // std dev = 1.395, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.10e-09, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22772567018289797;  // std dev = 0.012, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109151;  // std dev = 8.02e-08, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16420250441700418;  // std dev = 1.395, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333728;  // std dev = 0.000, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14018952990859723;  // std dev = 0.159, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420264;  // std dev = 6.14e-08, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10917931924353201;  // std dev = 0.192, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.197', 'seconds']
Parameter learned model CLL:-0.089959 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.0, 0, 75], 'false,true': [0.0, 151, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.949, 4, 75], 'false,true': [4.21e-08, 154, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.219, 4, 75], 'false,true': [0.0, 0, 0], 'false,false': [8.12e-09, 148, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.394, 2, 69], 'true,false': [0.0, 124, 0], 'false,true,true': [0.0, 0, 6], 'false,true,false': [1.32e-09, 10, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.395, 2, 75], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.83e-08, 128, 0], 'false,false,false': [0.0, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.395, 2, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.1e-09, 133, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.012, 0, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [8.02e-08, 147, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.395, 2, 75], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 145, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.73e-09, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.159, 2, 75], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.14e-08, 133, 0], 'false,false,false': [0.0, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 3, 75], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 162, 0]}]
{'': [-1.4210854715202005e-15, -1.1763952578809607e-16], 'false': [-1.1763952578809607e-16, nan]}
{'': [0.04806921967633436, 1.1534784671430199e-17], 'false': [1.1534784671430199e-17, nan]}
{'': [0.04806921967633341, 6.451295953902936e-17], 'false': [nan, 6.451295953902936e-17]}
{'': [0.0708239393489393, 0.06855927388380896], 'true': [0.027375520730013637, -3.044159906230268e-17], 'false': [0.06855927388380896, nan], 'false,true': [-7.401486830834377e-17, 1.3877787807814458e-18]}
{'': [0.025276698425235677, 3.8616453030440226e-17], 'true': [0.025276698425235677, nan], 'false': [nan, 3.8616453030440226e-17], 'false,false': [3.642919299551295e-17, 0.0], 'false,false,true': [nan, 3.642919299551295e-17]}
{'': [0.025279034319409442, 2.5877378769458534e-17], 'false': [nan, 2.5877378769458534e-17], 'false,false': [nan, 2.5877378769458534e-17]}
{'': [1.7830439544989455e-06, 4.3804717978407536e-17], 'false': [nan, 4.3804717978407536e-17], 'false,false': [nan, 4.3804717978407536e-17], 'false,false,false': [4.3804717978407536e-17, nan]}
{'': [0.02528327681320669, -1.7456336865175417e-17], 'true': [0.02528327681320669, nan], 'false': [-2.5267144698365633e-17, 9.912705577010326e-19], 'false,false': [nan, 9.912705577010326e-19]}
{'': [0.025284779875961498, 2.950243002500416e-17], 'false': [nan, 2.950243002500416e-17], 'false,false': [2.838164123101904e-17, 6.938893903907229e-19], 'false,false,true': [nan, 2.838164123101904e-17]}
{'': [0.03696232621675446, -7.538551401775754e-18], 'false': [nan, -7.538551401775754e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 19.877
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.8581489350995115;  // std dev = 2.38e-07, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), follows(I, A) )
%   | | | then return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.1418510649004879;  // std dev = 0.000, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7298717654685166;  // std dev = 0.138, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   else return -0.12544463852839122;  // std dev = 6.32e-08, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then return 0.552797268012179;  // std dev = 1.79e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( follows(E, F), follows(F, A) )
%   | | | then return 0.24181512222353754;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5786737944327289;  // std dev = 0.030, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.5834979241877994;  // std dev = 0.119, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.11231637819360622;  // std dev = 9.66e-08, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | | then return 0.38783301863243563;  // std dev = 0.986, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | | else return 0.44470709187073254;  // std dev = 0.136, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.312092079519719;  // std dev = 0.919, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.4190883100309275;  // std dev = 0.049, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10159632948783642;  // std dev = 0.000, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.4156107964102134;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.3260375923501717;  // std dev = 0.005, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.159507616578977;  // std dev = 1.290, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0.3302680325116572;  // std dev = 0.078, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.3465507774221738;  // std dev = 0.157, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926082;  // std dev = 7.45e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | else return -0.09269127618926101;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, D), recursion_accounttype(E, B) )
%   | | | then return 0.2587538205984704;  // std dev = 0.005, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.2780837398203117;  // std dev = 0.069, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.2529944149306523;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.01980031881878493;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), tweets(G, H) )
%   | | | then return -0.19634899558509492;  // std dev = 0.958, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.2657759870152262;  // std dev = 0.050, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.2798543322715455;  // std dev = 0.107, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.07302054762099963;  // std dev = 0.809, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.0851847513883968;  // std dev = 5.89e-09, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, F), follows(F, D) )
%   | | then if ( recursion_accounttype(F, B), recursion_accounttype(D, B) )
%   | | | then return 0.21191137614090216;  // std dev = 1.05e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.23121596250490284;  // std dev = 0.106, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0.20800338576824284;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.20739187100578688;  // std dev = 0.001, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, H) )
%   | | then return 0.27230194345613795;  // std dev = 0.089, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.23568775590228716;  // std dev = 0.123, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.21499700053177162;  // std dev = 0.039, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, J) )
%   | then return -0.07877675473109155;  // std dev = 6.18e-09, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | else return -0.0787767547310918;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.18573188836178928;  // std dev = 0.103, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.17554657468231336;  // std dev = 0.001, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.22208299261183276;  // std dev = 0.078, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.18343537576470895;  // std dev = 0.027, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2184386643916445;  // std dev = 0.090, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.1670380257414759;  // std dev = 0.824, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.18676127333451456;  // std dev = 0.025, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, K) )
%   | then return -0.07324622576333722;  // std dev = 0.000, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.15797186565809568;  // std dev = 0.041, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.1514559421815378;  // std dev = 0.002, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return -0.11137849514740916;  // std dev = 0.747, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1568594595659715;  // std dev = 0.065, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( tweets(A, H) )
%   | | then return 0.18627416541567313;  // std dev = 0.069, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.17126624794542858;  // std dev = 0.100, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.1600601620117088;  // std dev = 0.022, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, K) )
%   | then return -0.06842697784420264;  // std dev = 5.10e-09, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | else return -0.06842697784420274;  // std dev = 9.31e-10, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.13808354883754062;  // std dev = 0.037, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.1330008016724555;  // std dev = 0.002, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.16250769742224208;  // std dev = 0.078, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1504011818912571;  // std dev = 0.100, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.044795257196620794;  // std dev = 0.306, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.13263088307640056;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.15470006963513905;  // std dev = 0.029, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06419184008202626;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.285', 'seconds']
Refined model CLL: -0.088088


******************************************
Best model found
******************************************
Results 

CLL : -0.085254 

AUC ROC : 0.996364 

AUC PR : 0.502297 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 19.877 

Total Inference Time : 5.444980144500732 

Total revision time: 35.557708280563354
Best scored revision CLL: -0.088088


Results 

CLL : -0.085254 

AUC ROC : 0.996364 

AUC PR : 0.502297 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 35.59798647689819 

Total Inference Time : 5.444980144500732 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.511
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8385410919622563;  // std dev = 1.400, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048835;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7135128176172756;  // std dev = 0.995, 101.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=100 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839155;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.532544685753124;  // std dev = 0.168, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360635;  // std dev = 2.95e-09, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.37830632341763953;  // std dev = 2.178, 98.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=93 */
%   | else return -0.10159632948783655;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.30432673158090434;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return -0.10159632948783626;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.31210249762193737;  // std dev = 1.709, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926055;  // std dev = 9.42e-08, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | | else return -0.0926912761892609;  // std dev = 1.86e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22726154828635886;  // std dev = 2.185, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.67e-09, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21238394116087234;  // std dev = 1.402, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109147;  // std dev = 8.02e-08, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1872808892844452;  // std dev = 0.910, 101.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333668;  // std dev = 1.14e-07, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15854390844204894;  // std dev = 0.099, 101.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420262;  // std dev = 7.67e-08, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | | else return -0.0684269778442027;  // std dev = 1.32e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10890883675274014;  // std dev = 0.192, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.506', 'seconds']
Parameter learned model CLL:-0.092796 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.4, 2, 100], 'false,true': [0.0, 188, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.995, 1, 100], 'false,true': [0.0, 185, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.168, 3, 100], 'false,true': [0.0, 0, 0], 'false,false': [2.95e-09, 166, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [2.178, 5, 93], 'true,false': [0.0, 205, 0], 'false,true,true': [0.331, 1, 7], 'false,true,false': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.709, 3, 100], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [9.42e-08, 204, 0], 'false,false,false': [1.86e-09, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.185, 5, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.67e-09, 207, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.402, 2, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [8.02e-08, 186, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.91, 1, 100], 'true,false': [0.0, 0, 0], 'false,true': [1.14e-07, 189, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 13, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.099, 1, 100], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.67e-08, 181, 0], 'false,false,false': [1.32e-09, 16, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 4, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 200, 0]}]
{'': [0.019223375624761452, -2.1732025162875404e-16], 'false': [-2.1732025162875404e-16, nan]}
{'': [0.009802960494071504, -1.9203857723245952e-17], 'false': [-1.9203857723245952e-17, nan]}
{'': [0.028277877274012292, 8.025708611748119e-18], 'false': [nan, 8.025708611748119e-18]}
{'': [0.06605629945877681, 0.09252143345513485], 'false': [0.09252143345513485, nan], 'false,true': [0.10937499999999996, -1.5419764230904951e-18], 'true': [0.04841732611411898, -8.448526431293874e-17]}
{'': [0.02836222875020097, 4.5654030919165315e-17], 'true': [0.02836222875020097, nan], 'false': [nan, 4.5654030919165315e-17], 'false,false': [4.353815782843751e-17, 2.7755575615628915e-18], 'false,false,true': [nan, 4.353815782843751e-17]}
{'': [0.045460348842847255, 3.218037752536686e-17], 'false': [nan, 3.218037752536686e-17], 'false,false': [nan, 3.218037752536686e-17]}
{'': [0.01927093822052013, 3.461985775712854e-17], 'false': [nan, 3.461985775712854e-17], 'false,false': [nan, 3.461985775712854e-17], 'false,false,false': [3.461985775712854e-17, nan]}
{'': [0.008205147863414013, 7.584691950409486e-17], 'true': [0.008205147863414013, nan], 'false': [6.931551159035368e-17, -2.135044278125301e-18], 'false,false': [nan, -2.135044278125301e-18]}
{'': [0.009824705562687903, 2.9868944317326544e-17], 'false': [nan, 2.9868944317326544e-17], 'false,false': [3.250929298626149e-17, 1.734723475976807e-18], 'false,false,true': [nan, 3.250929298626149e-17]}
{'': [0.03703714138519999, -1.6653345369377347e-18], 'false': [nan, -1.6653345369377347e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 28.944
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.8093684472946338;  // std dev = 1.379, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | | else return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return 0.8581489350995121;  // std dev = 8.43e-08, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.14185106490048846;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.7285647946472404;  // std dev = 0.060, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.36207206429638983;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.7774331239367194;  // std dev = 0.038, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7264717802919164;  // std dev = 0.051, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.12544463852839172;  // std dev = 0.000, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.54438483709876;  // std dev = 0.991, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return 0.45974353905811466;  // std dev = 1.343, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else return 0.5676045274595066;  // std dev = 0.078, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.5746951462630328;  // std dev = 0.202, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.11231637819360656;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.4085391519798071;  // std dev = 0.991, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return 0.4462573843881004;  // std dev = 0.245, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.4351012017766292;  // std dev = 0.046, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.31463630012847715;  // std dev = 1.233, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | else return -0.10159632948783648;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.4106185596227183;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.10159632948783623;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(F, D), follows(A, F) )
%   | | | then return 0.30143262794945147;  // std dev = 0.984, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return 0.3254157338853895;  // std dev = 0.057, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.33302607835785375;  // std dev = 0.049, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.027887520973455666;  // std dev = 0.704, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3629235616272072;  // std dev = 0.191, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.2586195512574179;  // std dev = 0.870, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.1581249573439405;  // std dev = 1.198, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else if ( follows(A, J) )
%   | then return -0.09269127618926057;  // std dev = 4.21e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | else return -0.09269127618926087;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.23280127838136966;  // std dev = 1.271, 51.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   | | | else return 0.2737540547308688;  // std dev = 0.180, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.018718981243467048;  // std dev = 0.782, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.25650902134129655;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.2690936563152595;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.25036155114348174;  // std dev = 0.018, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.3594003013625932;  // std dev = 0.032, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.3195034014699192;  // std dev = 0.041, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.08518475138839678;  // std dev = 5.59e-09, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(D, E) )
%   | | | then return 0.22548158028582244;  // std dev = 0.027, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.17841869768479937;  // std dev = 0.973, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.2924270970946002;  // std dev = 0.126, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.22635629378793853;  // std dev = 0.129, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0.08411893353904198;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(A, F) )
%   | then if ( follows(F, A) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.07877675473109153;  // std dev = 6.05e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | | else return -0.07877675473109164;  // std dev = 1.29e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return -0.0787767547310917;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return -0.07877675473109166;  // std dev = 1.61e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(E, F), recursion_accounttype(E, B) )
%   | | then if ( follows(A, G), follows(G, D) )
%   | | | then return 0.19199141914300602;  // std dev = 0.105, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | | else return 0.1819727600992225;  // std dev = 0.056, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.21468997549463856;  // std dev = 0.061, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.24909863161639992;  // std dev = 0.077, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.17551157435077314;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.21980112356192238;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, J) )
%   | then if ( follows(K, A) )
%   | | then return -0.07324622576333678;  // std dev = 6.72e-09, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | else return -0.07324622576333703;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else return -0.07324622576333698;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, F), recursion_accounttype(E, B) )
%   | | then if ( follows(F, D), follows(F, E) )
%   | | | then return 0.16462937867798136;  // std dev = 0.090, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.15156562138141721;  // std dev = 0.040, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.17508780015648628;  // std dev = 0.017, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.2057615265246011;  // std dev = 0.068, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.15154046779274077;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.18442856214528913;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.06842697784420261;  // std dev = 3.48e-09, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | | else return -0.06842697784420264;  // std dev = 9.13e-09, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return -0.06842697784420265;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(D, F), tweets(A, F) )
%   | | | then return 0.1421955027018922;  // std dev = 0.024, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.1368717524931505;  // std dev = 0.014, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return -0.13975023630284167;  // std dev = 0.747, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.14058885593708476;  // std dev = 0.081, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(J, H) )
%   | | | then return 0.13173962445920984;  // std dev = 0.001, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1452298693913423;  // std dev = 0.001, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.1864225721656795;  // std dev = 0.049, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1447053175474065;  // std dev = 0.045, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.06419184008202625;  // std dev = 0.000, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.265', 'seconds']
Refined model CLL: -0.090876


******************************************
Best model found
******************************************
Results 

CLL : -0.085693 

AUC ROC : 0.996289 

AUC PR : 0.506305 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 28.944 

Total Inference Time : 7.3333494663238525 

Total revision time: 50.306233959197996
Best scored revision CLL: -0.090876


Results 

CLL : -0.085693 

AUC ROC : 0.996289 

AUC PR : 0.506305 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 50.346512155532835 

Total Inference Time : 7.3333494663238525 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.346
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8199809961682126;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004881;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7038561731469818;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839177;  // std dev = 0.000, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5304373018719375;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360694;  // std dev = 0.000, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3807716872126462;  // std dev = 2.571, 125.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=118 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43677168721264537;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783616;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.31482464485044437;  // std dev = 1.968, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926049;  // std dev = 7.15e-08, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | | else return -0.09269127618926089;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2335874716709681;  // std dev = 2.351, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.89e-09, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.18830136830059258;  // std dev = 2.396, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109141;  // std dev = 4.94e-08, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17852870917723623;  // std dev = 1.711, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333668;  // std dev = 1.26e-07, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.073246225763337;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.151296404240223;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6.66e-08, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | | else return -0.06842697784420267;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12304822715706454;  // std dev = 0.173, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 1.32e-09, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.653', 'seconds']
Parameter learned model CLL:-0.092435 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 265, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 225, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 275, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [2.571, 7, 118], 'true,false': [0.0, 240, 0], 'false,true,true': [1.05e-08, 0, 8], 'false,true,false': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.968, 4, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.15e-08, 231, 0], 'false,false,false': [0.0, 25, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.351, 6, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 279, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.396, 6, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.94e-08, 285, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.711, 3, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.26e-07, 231, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 20, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.66e-08, 220, 0], 'false,false,false': [0.0, 19, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.173, 4, 126], 'false,true': [0.0, 0, 0], 'false,false': [1.32e-09, 243, 0]}]
{'': [0.03671114736903867, -7.373556691850096e-17], 'false': [-7.373556691850096e-17, nan]}
{'': [0.022714981070845925, -4.9343245538895844e-17], 'false': [-4.9343245538895844e-17, nan]}
{'': [0.03671114736903172, -1.0981115007201549e-16], 'false': [nan, -1.0981115007201549e-16]}
{'': [0.07049943408569453, 0.07220930360288141], 'false': [0.07220930360288141, nan], 'false,true': [1.1102230246251565e-16, 0.0], 'true': [0.05286399999999904, -7.401486830834377e-17]}
{'': [0.029784015263609447, 5.0306980803327406e-17], 'true': [0.029784015263609447, nan], 'false': [nan, 5.0306980803327406e-17], 'false,false': [2.210833728690788e-17, -3.3306690738754695e-18], 'false,false,true': [nan, 2.210833728690788e-17]}
{'': [0.04188288071454365, 3.501778715663576e-17], 'false': [nan, 3.501778715663576e-17], 'false,false': [nan, 3.501778715663576e-17]}
{'': [0.043483299772338606, 8.570142646229279e-18], 'false': [nan, 8.570142646229279e-18], 'false,false': [nan, 8.570142646229279e-18], 'false,false,false': [8.570142646229279e-18, nan]}
{'': [0.022693939899962035, 5.57323111963226e-17], 'true': [0.022693939899962035, nan], 'false': [6.920870802858119e-17, -2.0816681711721684e-18], 'false,false': [nan, -2.0816681711721684e-18]}
{'': [0.022695745703025787, 7.432455394980127e-18], 'false': [nan, 7.432455394980127e-18], 'false,false': [2.0185873175002847e-17, -2.1912296538654404e-18], 'false,false,true': [nan, 2.0185873175002847e-17]}
{'': [0.029798315362617317, 9.13763806275849e-19], 'false': [nan, 9.13763806275849e-19]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 24.761
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then return 0.8581489350995123;  // std dev = 8.43e-08, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return 0.6842358916212513;  // std dev = 1.818, 23.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.8581489350995118;  // std dev = 2.38e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.14185106490048802;  // std dev = 0.000, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | | then return 0.7245327239276763;  // std dev = 0.076, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.6614854273293047;  // std dev = 1.379, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.32621916116658317;  // std dev = 1.077, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.6829649101222116;  // std dev = 0.957, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else return -0.12544463852839186;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( tweets(D, E), follows(D, A) )
%   | | | then return 0.4905201385861097;  // std dev = 1.662, 44.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | | else return 0.5720695127102664;  // std dev = 0.093, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.5758706866026415;  // std dev = 0.198, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return 0.4442553256351735;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.11231637819360692;  // std dev = 0.000, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.414883589405412;  // std dev = 0.994, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.45383403725014687;  // std dev = 0.068, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.16308488887664851;  // std dev = 1.797, 17.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=12 */
%   | | | else return 0.3943147894543737;  // std dev = 1.009, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else return -0.10349425153466692;  // std dev = 0.485, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.44475702894584124;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.1015963294878362;  // std dev = 1.05e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | | then return 0.3343389134636668;  // std dev = 0.045, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.27855263153560145;  // std dev = 1.361, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.03235183239198898;  // std dev = 1.043, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.317440519569397;  // std dev = 0.938, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else return 0.332129178132928;  // std dev = 0.113, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( follows(A, G) )
%   | then return -0.09253178503858127;  // std dev = 4.47e-08, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | else return -0.09269127618926087;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), recursion_accounttype(D, B) )
%   | | | then return 0.26446424009958924;  // std dev = 0.039, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.28298274220438135;  // std dev = 0.062, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.404462482954538;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.29510573986010674;  // std dev = 0.181, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.1810257388595097;  // std dev = 0.953, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.04978325773391926;  // std dev = 0.797, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.30030294536337016;  // std dev = 0.000691, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2529013981474737;  // std dev = 0.011, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.08505787242367062;  // std dev = 3.28e-05, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, F) )
%   | | | then return 0.20905626262465982;  // std dev = 0.823, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | | else return 0.24579224664975324;  // std dev = 0.091, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(G, A), tweets(G, D) )
%   | | | then return 0.2339291505814324;  // std dev = 0.157, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.20883914344736904;  // std dev = 0.001, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.07839039290757036;  // std dev = 1.285, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return 0.2242823903267832;  // std dev = 0.038, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.27037152603434084;  // std dev = 0.036, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.20909632612671086;  // std dev = 0.002, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07866663651944708;  // std dev = 2.84e-05, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(D, E) )
%   | | | then return 0.19027181903166868;  // std dev = 0.115, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | | | else return -0.041164386330168196;  // std dev = 0.878, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.14543548844173193;  // std dev = 0.792, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.24343443715942537;  // std dev = 0.023, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.19812562445509313;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(I, A), tweets(A, J) )
%   | | | then return 0.19677678354204206;  // std dev = 0.134, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.17646742180148337;  // std dev = 0.002, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(A, K) )
%   | then return -0.07314437189766758;  // std dev = 1.11e-07, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else return -0.07326231504708489;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(E, A) )
%   | | | then return 0.15841571604481136;  // std dev = 0.047, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.19764784962973672;  // std dev = 0.063, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(E, D), follows(A, D) )
%   | | | then return 0.16896611846451273;  // std dev = 0.117, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.06656400613189233;  // std dev = 0.958, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return -0.1644861812348445;  // std dev = 1.154, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.15209465042173703;  // std dev = 6.83e-05, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.06005069505147304;  // std dev = 0.911, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, I) )
%   | then return -0.06833781587936681;  // std dev = 0.000, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else return -0.06844106090000154;  // std dev = 5.27e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.14088924887021712;  // std dev = 0.069, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.06095939106036692;  // std dev = 0.943, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(A, D), tweets(A, G) )
%   | | | then return -0.1908871653744759;  // std dev = 1.148, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.16550522308993257;  // std dev = 0.055, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(A, I) )
%   | | | then return 0.16957855868261923;  // std dev = 0.011, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1912936737511589;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return 0.1495909556398746;  // std dev = 0.101, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.133972610855344;  // std dev = 0.011, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.06411770262727154;  // std dev = 1.98e-05, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.247', 'seconds']
Refined model CLL: -0.090797


******************************************
Best model found
******************************************
Results 

CLL : -0.085321 

AUC ROC : 0.996722 

AUC PR : 0.554708 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 24.761 

Total Inference Time : 8.55739426612854 

Total revision time: 48.66554558944702
Best scored revision CLL: -0.090797


Results 

CLL : -0.085321 

AUC ROC : 0.996722 

AUC PR : 0.554708 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 48.70582378578186 

Total Inference Time : 8.55739426612854 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.676
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048766;  // std dev = 6.66e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7194734122109547;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839152;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5241164367462845;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936063;  // std dev = 4.93e-09, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4251324780929426;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.10159632948783626;  // std dev = 2.98e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4251324780929425;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.2946316825518556;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926105;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else return -0.09269127618926097;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.26473474853045054;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 1.86e-09, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.18524030103272263;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109168;  // std dev = 3.73e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1867180700584849;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333704;  // std dev = 1.05e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12875430249730435;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0684269778442027;  // std dev = 1.39e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.0828409639401419;  // std dev = 0.239, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.604', 'seconds']
Parameter learned model CLL:-0.088417 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.06e-07, 0, 31], 'false,true': [6.66e-08, 66, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.0, 0, 31], 'false,true': [0.0, 74, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.174, 1, 31], 'false,true': [0.0, 0, 0], 'false,false': [4.93e-09, 53, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 22], 'true,false': [2.98e-08, 50, 0], 'false,true,true': [0.0, 0, 9], 'false,true,false': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.984, 1, 31], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 48, 0], 'false,false,false': [0.0, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.86e-09, 66, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.984, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.73e-08, 71, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.0, 0, 31], 'true,false': [0.0, 0, 0], 'false,true': [1.05e-08, 38, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.63e-09, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.174, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.39e-08, 51, 0], 'false,false,false': [0.0, 7, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.239, 2, 31], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 53, 0]}]
{'': [1.375244004696968e-15, 6.728624391667616e-17], 'false': [6.728624391667616e-17, nan]}
{'': [-4.584146682323227e-16, -2.700542492331462e-17], 'false': [-2.700542492331462e-17, nan]}
{'': [0.0302734375, 2.3042364662031552e-17], 'false': [nan, 2.3042364662031552e-17]}
{'': [0.058871057177665165, 0.06279410535580877], 'false': [0.06279410535580877, nan], 'false,true': [-7.401486830834377e-17, -4.89804275569922e-18], 'true': [-1.2111523905001707e-16, 1.7763568394002505e-17]}
{'': [0.03027343749999982, -5.551115123125783e-18], 'true': [0.03027343749999982, nan], 'false': [nan, -5.551115123125783e-18], 'false,false': [-3.469446951953614e-18, 2.3129646346357427e-18], 'false,false,true': [nan, -3.469446951953614e-18]}
{'': [-1.0027820867582059e-16, 4.20539024479226e-18], 'false': [nan, 4.20539024479226e-18], 'false,false': [nan, 4.20539024479226e-18]}
{'': [0.030273437500000014, 1.9546180011006276e-17], 'false': [nan, 1.9546180011006276e-17], 'false,false': [nan, 1.9546180011006276e-17], 'false,false,false': [1.9546180011006276e-17, nan]}
{'': [-1.4325458382260084e-17, 3.469446951953614e-18], 'false': [2.921639538487254e-18, 6.938893903907229e-19], 'false,false': [nan, 6.938893903907229e-19], 'true': [-1.4325458382260084e-17, nan]}
{'': [0.030273437499999986, 6.699621700324221e-18], 'false': [nan, 6.699621700324221e-18], 'false,false': [3.8095888099882826e-18, 9.912705577010326e-19], 'false,false,true': [nan, 3.8095888099882826e-18]}
{'': [0.05693296602387513, -3.142140635731575e-18], 'false': [nan, -3.142140635731575e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 9.289
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else return -0.14185106490048766;  // std dev = 6.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, D) )
%   | | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | | then return 0.6361400788776211;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.12544463852839155;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5767836557729413;  // std dev = 0.083, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.22203310341295115;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.39879642400262455;  // std dev = 0.858, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.11231637819360625;  // std dev = 5.58e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.4256044346501191;  // std dev = 0.038, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.3000861373182936;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.10159632948783624;  // std dev = 3.65e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else if ( recursion_accounttype(F, B) )
%   | then return 0.4571252949974529;  // std dev = 0.053, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.3276875728224372;  // std dev = 0.031, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.26637691201282304;  // std dev = 0.717, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else return 0.3647377960661675;  // std dev = 0.155, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, D), tweets(D, E) )
%   | | | then return 0.18084475337518624;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.26952946807048245;  // std dev = 0.039, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.018012890471293026;  // std dev = 0.815, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then return 0.3397340990460924;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.24442955564680643;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.28102181801240955;  // std dev = 0.064, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, I) )
%   | then if ( follows(A, J) )
%   | | then return -0.08518475138839679;  // std dev = 3.36e-09, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return -0.08518475138839687;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.08518475138839686;  // std dev = 2.28e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.12764027075941226;  // std dev = 0.946, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.2305497844026494;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, G), tweets(D, G) )
%   | | | then return 0.2322234719990205;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2017630613824454;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then return 0.2873416043539464;  // std dev = 0.109, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2176687758914181;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.22952747966319748;  // std dev = 0.059, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, K) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, E), follows(D, F) )
%   | | | then return 0.20539128901221232;  // std dev = 0.021, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.1816140165128052;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.23281270852702604;  // std dev = 0.097, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then return 0.17247036342684693;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(H, A), tweets(A, I) )
%   | | | then return 0.1934070613086064;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.18738136503545982;  // std dev = 0.055, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, J) )
%   | then if ( follows(K, A) )
%   | | then return -0.07324622576333704;  // std dev = 1.61e-09, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return -0.07324622576333704;  // std dev = 9.31e-10, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, E), follows(D, F) )
%   | | | then return 0.1738946176380072;  // std dev = 0.018, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.1561737248427194;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.19419229182212788;  // std dev = 0.086, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then return 0.14922655236285556;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.15892017917025558;  // std dev = 0.021, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.16388824627764617;  // std dev = 0.044, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.06842697784420274;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(D, F), recursion_accounttype(D, B) )
%   | | | then return 0.1478515799052408;  // std dev = 0.022, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.167071244024803;  // std dev = 0.082, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.12907240650340468;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then return -0.07293254638536717;  // std dev = 0.779, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.14269280673434756;  // std dev = 0.039, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06419184008202625;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.534', 'seconds']
Refined model CLL: -0.085384


******************************************
Best model found
******************************************
Results 

CLL : -0.090683 

AUC ROC : 0.994077 

AUC PR : 0.399834 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 9.289 

Total Inference Time : 2.3974106311798096 

Total revision time: 17.80819496154785
Best scored revision CLL: -0.085384


Results 

CLL : -0.090683 

AUC ROC : 0.994077 

AUC PR : 0.399834 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 17.83283528327942 

Total Inference Time : 2.3974106311798096 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.641
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7975428744934521;  // std dev = 1.938, 66.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=62 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048763;  // std dev = 8.43e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7156683885906251;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839127;  // std dev = 0.000, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5250559352787579;  // std dev = 0.210, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360621;  // std dev = 7.90e-09, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4407134165392574;  // std dev = 1.26e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else return -0.10159632948783626;  // std dev = 4.59e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4407134165392579;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.10159632948783634;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.30523885674961576;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926092;  // std dev = 6.05e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else return -0.09269127618926105;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24080535102853068;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 5.82e-09, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2111803683167505;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109154;  // std dev = 7.38e-08, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.160883684428958;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333707;  // std dev = 4.83e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333707;  // std dev = 9.13e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15251586215363838;  // std dev = 0.125, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420265;  // std dev = 4.94e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else return -0.06842697784420276;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14809705911023244;  // std dev = 4.17e-09, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 2.79e-09, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.096', 'seconds']
Parameter learned model CLL:-0.088663 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.938, 4, 62], 'false,true': [8.43e-08, 107, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.992, 1, 62], 'false,true': [0.0, 128, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.21, 3, 62], 'false,true': [0.0, 0, 0], 'false,false': [7.9e-09, 113, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.26e-07, 0, 49], 'true,false': [4.59e-08, 96, 0], 'false,true,true': [0.0, 0, 13], 'false,true,false': [0.0, 21, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.392, 2, 62], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.05e-08, 108, 0], 'false,false,false': [0.0, 24, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.392, 2, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.82e-09, 115, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.992, 1, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.38e-08, 131, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.392, 2, 62], 'true,false': [0.0, 0, 0], 'false,true': [4.83e-08, 108, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.13e-09, 23, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.125, 1, 62], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.94e-08, 101, 0], 'false,false,false': [0.0, 23, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [4.17e-09, 0, 62], 'false,true': [0.0, 0, 0], 'false,false': [2.79e-09, 137, 0]}]
{'': [0.05693296602387436, 6.640586315514955e-17], 'false': [6.640586315514955e-17, nan]}
{'': [0.015621063240110804, 0.0], 'false': [0.0, nan]}
{'': [0.04402366863905294, 6.287988812036285e-17], 'false': [nan, 6.287988812036285e-17]}
{'': [0.06580003540697323, 0.06945437885261266], 'false': [0.06945437885261266, nan], 'false,true': [-3.416070845000482e-17, -2.64338815386942e-18], 'true': [3.2626962356331133e-16, 2.1973164029039556e-17]}
{'': [0.030273437500000236, 4.37360585458395e-17], 'true': [0.030273437500000236, nan], 'false': [nan, 4.37360585458395e-17], 'false,false': [3.39234813079909e-17, -8.0953762212251e-18], 'false,false,true': [nan, 3.39234813079909e-17]}
{'': [0.03027343749999998, 3.2823985075874195e-17], 'false': [nan, 3.2823985075874195e-17], 'false,false': [nan, 3.2823985075874195e-17]}
{'': [0.01562106324011098, 4.152742611193334e-17], 'false': [nan, 4.152742611193334e-17], 'false,false': [nan, 4.152742611193334e-17], 'false,false,false': [4.152742611193334e-17, nan]}
{'': [0.030273437499999944, -5.084990952481633e-18], 'true': [0.030273437499999944, nan], 'false': [2.1587669923266933e-17, 3.620292471603771e-18], 'false,false': [nan, 3.620292471603771e-18]}
{'': [0.015621063240110821, 2.7755575615628914e-17], 'false': [nan, 2.7755575615628914e-17], 'false,false': [2.41830757839143e-17, -4.2236745502044e-18], 'false,false,true': [nan, 2.41830757839143e-17]}
{'': [1.7906822977825105e-17, 8.103817697993843e-18], 'false': [nan, 8.103817697993843e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 21.77
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.858148935099512;  // std dev = 2.38e-07, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.141851064900488;  // std dev = 0.000, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.6480448407823829;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, F), follows(D, F) )
%   | | | then return 0.5110635294030301;  // std dev = 1.272, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.7194734122109544;  // std dev = 2.98e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.7194734122109543;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.12544463852839105;  // std dev = 7.88e-08, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then return 0.5623909433312245;  // std dev = 0.047, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.22203310341295115;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.5772331139636916;  // std dev = 0.184, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.11231637819360617;  // std dev = 9.42e-08, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.4252217357539762;  // std dev = 0.060, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.17148249072962155;  // std dev = 1.424, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.45146608057331516;  // std dev = 0.178, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.41386737410373653;  // std dev = 0.006, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(D, F), follows(D, A) )
%   | | | then return 0.3285762328160039;  // std dev = 0.029, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.19447027570600853;  // std dev = 0.921, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.36203831325443125;  // std dev = 0.175, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then return 0.1387976070147128;  // std dev = 0.926, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.21868796614838795;  // std dev = 0.951, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.33714266661516945;  // std dev = 0.117, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, I) )
%   | then return -0.09269127618926083;  // std dev = 7.45e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | else return -0.09269127618926104;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | then if ( follows(D, E), follows(D, A) )
%   | | | then return 0.2605452274310345;  // std dev = 0.026, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.27693720218405626;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.2893966722086466;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3156270479277571;  // std dev = 0.103, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then return 0.2743688157514401;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.26725272327847893;  // std dev = 0.143, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.25840590690491183;  // std dev = 0.030, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( tweets(A, J) )
%   | then return -0.0851847513883968;  // std dev = 5.10e-09, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return -0.08518475138839689;  // std dev = 5.27e-09, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(F, A), follows(D, F) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.21573837747288574;  // std dev = 0.030, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.23982164520133217;  // std dev = 0.066, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return -0.06729203044855196;  // std dev = 0.820, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.11915469316738743;  // std dev = 0.974, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then return 0.254721234000196;  // std dev = 0.072, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.230113871108043;  // std dev = 0.081, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.21721904793715544;  // std dev = 0.033, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(I, A) )
%   | then return -0.07877675473109166;  // std dev = 4.56e-09, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return -0.0787767547310918;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, D), follows(F, A) )
%   | | | then return 0.17955933246838574;  // std dev = 0.020, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.1880611305647375;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.19213467966593806;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.18536843428741048;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.20873540235520258;  // std dev = 0.050, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.23250379311892644;  // std dev = 0.051, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.19638608581663441;  // std dev = 0.140, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.17929397689984194;  // std dev = 0.021, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.0732462257633371;  // std dev = 0.000, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E), follows(A, F) )
%   | | | then return 0.15647945934856908;  // std dev = 0.023, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.16083828329801425;  // std dev = 0.018, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0.1956607333603861;  // std dev = 0.059, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.17401315831278782;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.08539036480397344;  // std dev = 0.797, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.1578227455220374;  // std dev = 0.035, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.14647196323701897;  // std dev = 0.022, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, J) )
%   | then return -0.06842697784420267;  // std dev = 4.27e-09, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else return -0.06842697784420272;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.08008055710438995;  // std dev = 0.978, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.14076979067083045;  // std dev = 0.004, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.14285829473435682;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1382367131647427;  // std dev = 0.016, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.21962967880408268;  // std dev = 0.081, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.15259523403638073;  // std dev = 0.043, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.13464795969685653;  // std dev = 0.041, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.06419184008202626;  // std dev = 0.000, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.823', 'seconds']
Refined model CLL: -0.087407


******************************************
Best model found
******************************************
Results 

CLL : -0.092532 

AUC ROC : 0.993815 

AUC PR : 0.407766 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 21.77 

Total Inference Time : 4.359537601470947 

Total revision time: 35.97829388237
Best scored revision CLL: -0.087407


Results 

CLL : -0.092532 

AUC ROC : 0.993815 

AUC PR : 0.407766 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 36.002934204101564 

Total Inference Time : 4.359537601470947 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.27
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995116;  // std dev = 2.38e-07, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048843;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6684530040476888;  // std dev = 2.178, 98.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=93 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839155;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5366769330017364;  // std dev = 0.174, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936062;  // std dev = 6.18e-09, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.40891683466408335;  // std dev = 1.396, 78.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=76 */
%   | else return -0.10159632948783644;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4345578603051091;  // std dev = 7.45e-09, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.31593034225092237;  // std dev = 1.398, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926071;  // std dev = 7.30e-08, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | | else return -0.09269127618926094;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21933641952870483;  // std dev = 2.179, 98.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.27e-09, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20819538573990676;  // std dev = 1.405, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109148;  // std dev = 8.43e-08, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1735328783509188;  // std dev = 1.401, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.0732462257633368;  // std dev = 8.36e-08, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1276334392005507;  // std dev = 0.199, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420264;  // std dev = 6.23e-08, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | | else return -0.06842697784420264;  // std dev = 3.23e-09, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15168100257286496;  // std dev = 0.001, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.035', 'seconds']
Parameter learned model CLL:-0.087841 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.38e-07, 0, 93], 'false,true': [0.0, 210, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.178, 5, 93], 'false,true': [0.0, 181, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.174, 3, 93], 'false,true': [0.0, 0, 0], 'false,false': [6.18e-09, 151, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.396, 2, 76], 'true,false': [0.0, 143, 0], 'false,true,true': [7.45e-09, 0, 17], 'false,true,false': [0.0, 32, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.398, 2, 93], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.3e-08, 147, 0], 'false,false,false': [0.0, 29, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.179, 5, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.27e-09, 155, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.405, 2, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [8.43e-08, 167, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.401, 2, 93], 'true,false': [0.0, 0, 0], 'false,true': [8.36e-08, 152, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 29, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.199, 4, 93], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.23e-08, 137, 0], 'false,false,false': [3.23e-09, 37, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.001, 0, 93], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 192, 0]}]
{'': [6.11219557643097e-16, -2.3684757858670006e-16], 'false': [-2.3684757858670006e-16, nan]}
{'': [0.04841732611411913, -3.680297319199414e-17], 'false': [-3.680297319199414e-17, nan]}
{'': [0.030273437500001294, 3.676235180878002e-17], 'false': [nan, 3.676235180878002e-17]}
{'': [0.06833732547536052, 0.06513076030258072], 'true': [0.024983563445102296, -5.4346581625007665e-17], 'false': [0.06513076030258072, nan], 'false,true': [5.224578939412501e-17, -1.0408340855860843e-17]}
{'': [0.020571166411299843, 3.9110129276568017e-17], 'true': [0.020571166411299843, nan], 'false': [nan, 3.9110129276568017e-17], 'false,false': [3.6252180395923476e-17, 0.0], 'false,false,true': [nan, 3.6252180395923476e-17]}
{'': [0.04842952841325874, 2.721837092629416e-17], 'false': [nan, 2.721837092629416e-17], 'false,false': [nan, 2.721837092629416e-17]}
{'': [0.020764646186403928, 4.254746920719163e-17], 'false': [nan, 4.254746920719163e-17], 'false,false': [nan, 4.254746920719163e-17], 'false,false,false': [4.254746920719163e-17, nan]}
{'': [0.02066415900026894, 6.440520308598974e-17], 'true': [0.02066415900026894, nan], 'false': [4.601582273117425e-17, -5.742532885992189e-18], 'false,false': [nan, -5.742532885992189e-18]}
{'': [0.03948673471482356, 2.6798486801296883e-17], 'false': [nan, 2.6798486801296883e-17], 'false,false': [2.8363361942978454e-17, 9.751959000085835e-18], 'false,false,true': [nan, 2.8363361942978454e-17]}
{'': [1.6076966649046226e-06, -2.8912057932946786e-18], 'false': [nan, -2.8912057932946786e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 16.308
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 1.46e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.858148935099512;  // std dev = 1.19e-07, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else return -0.14185106490048827;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.7203698290112085;  // std dev = 0.038, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.7218825323616357;  // std dev = 0.065, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   else return -0.1254446385283916;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then return 0.561766787504007;  // std dev = 0.141, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.3551450694882707;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, G), follows(H, A) )
%   | | | then return 0.429771462654974;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.5547714626549742;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.11231637819360658;  // std dev = 0.000, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.4250359400736437;  // std dev = 0.150, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.3261447209373318;  // std dev = 0.916, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.4167768517514971;  // std dev = 0.003, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.10159632948783645;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4297006062801265;  // std dev = 0.062, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.10159632948783624;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.32309499822004417;  // std dev = 0.099, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.05231272352717776;  // std dev = 1.651, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | else return -0.1435893151020259;  // std dev = 1.003, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.32492239709195264;  // std dev = 0.083, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926067;  // std dev = 7.60e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | else return -0.09269127618926094;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.2519165809327747;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.2530749690668265;  // std dev = 0.000282, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.2763582267184239;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2827795675822468;  // std dev = 0.049, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.3794624922013522;  // std dev = 0.058, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3312676842294377;  // std dev = 0.022, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.292427738840515;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2533835492170468;  // std dev = 0.006, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.08518475138839678;  // std dev = 5.10e-09, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.20884709770851173;  // std dev = 0.054, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.2425130661561953;  // std dev = 0.030, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.3851824728877878;  // std dev = 0.887, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.2891084125239517;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2589326766571348;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I), follows(J, A) )
%   | | | then return 0.2267295747893649;  // std dev = 0.059, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.20829190626905175;  // std dev = 0.008, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( tweets(A, K) )
%   | then return -0.07877675473109151;  // std dev = 6.18e-09, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | else return -0.07877675473109177;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, E), follows(D, E) )
%   | | | then return 0.17513369849231653;  // std dev = 0.003, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.18962522483984895;  // std dev = 0.039, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, F), follows(A, D) )
%   | | | then return 0.2191867920005551;  // std dev = 0.026, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2999339698515675;  // std dev = 0.159, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(G, B), tweets(A, H) )
%   | | | then return -0.1384463708244513;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13299004139323095;  // std dev = 0.979, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.025072749698915753;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.008260583634417581;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.07324622576333666;  // std dev = 8.28e-09, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.1512687052009839;  // std dev = 0.002, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.05029913286089384;  // std dev = 0.923, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | | then return 0.21924623639736646;  // std dev = 0.169, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1640259924022208;  // std dev = 0.062, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.1602691033768642;  // std dev = 0.000799, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.17857548649687582;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.02688339637201425;  // std dev = 0.348, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(A, I) )
%   | then return -0.06842697784420262;  // std dev = 5.10e-09, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | else return -0.06842697784420275;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.08941883199194246;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.13697961800872155;  // std dev = 0.019, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0.13170203110850867;  // std dev = 0.007, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.14327547547825958;  // std dev = 0.026, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.19346943585943008;  // std dev = 0.132, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.14670851795938922;  // std dev = 0.080, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.16278039995602434;  // std dev = 0.024, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06419184008202626;  // std dev = 0.000, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.402', 'seconds']
Refined model CLL: -0.085141


******************************************
Best model found
******************************************
Results 

CLL : -0.090925 

AUC ROC : 0.994707 

AUC PR : 0.430112 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 16.308 

Total Inference Time : 5.362433433532715 

Total revision time: 37.02259414482117
Best scored revision CLL: -0.085141


Results 

CLL : -0.090925 

AUC ROC : 0.994707 

AUC PR : 0.430112 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 37.04723446655274 

Total Inference Time : 5.362433433532715 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.175
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8501489350995105;  // std dev = 0.996, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048827;  // std dev = 0.000, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7052122091118778;  // std dev = 1.403, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839186;  // std dev = 0.000, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5372344564862678;  // std dev = 0.152, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360678;  // std dev = 0.000, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4178447306012113;  // std dev = 0.995, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else return -0.10159632948783648;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4273685401250199;  // std dev = 1.29e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.10159632948783626;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3291627324759619;  // std dev = 0.009, 124.000 (wgt'ed) examples reached here.  /* #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926051;  // std dev = 6.66e-08, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | | else return -0.09269127618926097;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23730131793770717;  // std dev = 1.712, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.59e-09, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20194752591282703;  // std dev = 1.403, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 6.14e-08, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1695000618072577;  // std dev = 1.403, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333667;  // std dev = 1.14e-07, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10769079043913264;  // std dev = 0.225, 131.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6.75e-08, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | | else return -0.06842697784420262;  // std dev = 2.63e-09, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13909591114440353;  // std dev = 0.089, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 9.31e-10, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.584', 'seconds']
Parameter learned model CLL:-0.088391 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.996, 1, 124], 'false,true': [0.0, 248, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.403, 2, 124], 'false,true': [0.0, 246, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.152, 3, 124], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 232, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.995, 1, 104], 'true,false': [0.0, 173, 0], 'false,true,true': [1.29e-08, 0, 20], 'false,true,false': [0.0, 40, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.009, 0, 124], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.66e-08, 214, 0], 'false,false,false': [0.0, 42, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.712, 3, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.59e-09, 222, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.403, 2, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.14e-08, 247, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.403, 2, 124], 'true,false': [0.0, 0, 0], 'false,true': [1.14e-07, 194, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 48, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.225, 7, 124], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.75e-08, 204, 0], 'false,false,false': [2.63e-09, 48, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.089, 1, 124], 'false,true': [0.0, 0, 0], 'false,false': [9.31e-10, 226, 0]}]
{'': [0.007936000000004014, -1.360918546314708e-16], 'false': [-1.360918546314708e-16, nan]}
{'': [0.015621063240113003, -6.137818347521191e-17], 'false': [-6.137818347521191e-17, nan]}
{'': [0.02306404612809143, -7.848128277522658e-17], 'false': [nan, -7.848128277522658e-17]}
{'': [0.06698171402525366, 0.062178629618788096], 'true': [0.009433106575962637, -8.599415335246877e-17], 'false': [0.062178629618788096, nan], 'false,true': [1.554312234475219e-16, -2.6367796834847467e-17]}
{'': [5.969473466506079e-07, 5.551115123125783e-17], 'true': [5.969473466506079e-07, nan], 'false': [nan, 5.551115123125783e-17], 'false,false': [2.0751832235984234e-17, -2.114710523095536e-17], 'false,false,true': [nan, 2.0751832235984234e-17]}
{'': [0.023079063219804387, 3.100622861565752e-17], 'false': [nan, 3.100622861565752e-17], 'false,false': [nan, 3.100622861565752e-17]}
{'': [0.015613252096219025, 1.5282422201317944e-17], 'false': [nan, 1.5282422201317944e-17], 'false,false': [nan, 1.5282422201317944e-17], 'false,false,false': [1.5282422201317944e-17, nan]}
{'': [0.015614106032916481, 6.14751592147814e-17], 'true': [0.015614106032916481, nan], 'false': [6.752902933287034e-17, -1.0408340855860843e-17], 'false,false': [nan, -1.0408340855860843e-17]}
{'': [0.05057763000526903, -8.8112938462314e-18], 'false': [nan, -8.8112938462314e-18], 'false,false': [2.2313305887074225e-17, 7.517135062566164e-18], 'false,false,true': [nan, 2.2313305887074225e-17]}
{'': [0.00793313919090285, 1.4737473778210042e-18], 'false': [nan, 1.4737473778210042e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 26.119
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(F, A) )
%   | | then if ( follows(E, F), follows(E, A) )
%   | | | then return 0.8311219080724844;  // std dev = 0.986, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7781489350995119;  // std dev = 1.356, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | else return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else return -0.1418510649004885;  // std dev = 0.000, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.722726857630985;  // std dev = 0.021, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else return 0.5944734122109543;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.725872898072653;  // std dev = 0.059, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   else return -0.1254446385283919;  // std dev = 0.000, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, D) )
%   | | | then return 0.5045623976214647;  // std dev = 1.373, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | | else return 0.5565279091641409;  // std dev = 0.016, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.5702687703060585;  // std dev = 0.066, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.5568003497965872;  // std dev = 0.030, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.4000590550211107;  // std dev = 1.300, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return 0.5537856278235439;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.11231637819360689;  // std dev = 0.000, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.4287593193604381;  // std dev = 0.065, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return 0.37285427850826486;  // std dev = 0.988, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return 0.4387554093556097;  // std dev = 0.061, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   else if ( recursion_accounttype(F, B) )
%   | then return 0.419104818300588;  // std dev = 0.029, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.101596329487836;  // std dev = 3.33e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.3314714897750235;  // std dev = 0.074, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else if ( follows(F, A), tweets(F, G) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.3194004110819916;  // std dev = 0.027, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.3122501094523639;  // std dev = 0.830, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.33509146035705445;  // std dev = 0.065, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, H) )
%   | then return -0.09269127618926053;  // std dev = 5.96e-08, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return -0.0926912761892608;  // std dev = 1.49e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(E, A) )
%   | | | then return 0.21414735081256656;  // std dev = 0.974, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.2604758047874634;  // std dev = 0.043, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else return -0.13790165325363052;  // std dev = 1.084, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(A, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.26324569172975826;  // std dev = 0.058, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.28678921241837707;  // std dev = 0.165, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.25691578368698353;  // std dev = 0.016, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.14066163114044064;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(I, A) )
%   | then return -0.08518475138839678;  // std dev = 5.19e-09, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | else return -0.08518475138839678;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | | then return 0.22273834320786895;  // std dev = 0.070, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.21028696761455712;  // std dev = 0.031, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0.12085798026445368;  // std dev = 0.289, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(G, F) )
%   | | | then return -0.0800567457640127;  // std dev = 1.604, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.26194365894289745;  // std dev = 0.060, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(H, A), tweets(A, I) )
%   | | | then return 0.14428906969927568;  // std dev = 0.972, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.22231696810297225;  // std dev = 0.155, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( follows(A, J) )
%   | then return -0.07877675473109144;  // std dev = 5.02e-09, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else return -0.07877675473109169;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.18716526328599026;  // std dev = 0.061, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.17822307827406336;  // std dev = 0.016, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.2279867751701224;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.19815131989548088;  // std dev = 0.035, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.1363030505457195;  // std dev = 1.001, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.522331394147901;  // std dev = 0.827, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.17871418666306996;  // std dev = 0.006, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.19488559423118823;  // std dev = 0.136, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return -0.07324622576333666;  // std dev = 8.48e-09, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, D) )
%   | | | then return 0.15795886581268845;  // std dev = 0.059, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.18290685886399766;  // std dev = 0.121, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.19735194618358007;  // std dev = 0.059, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.16291375723942045;  // std dev = 0.130, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.1619223308654194;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.15624540332900072;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.05357784036628361;  // std dev = 0.316, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, I) )
%   | then return -0.06842697784420261;  // std dev = 3.84e-09, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | else return -0.06842697784420262;  // std dev = 2.46e-09, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.08305782043236688;  // std dev = 1.373, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | | else return 0.14430081433275418;  // std dev = 0.112, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.16375140155824044;  // std dev = 0.075, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.14024729814850254;  // std dev = 0.122, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then return 0.030021287760556063;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.13673473350743592;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.04634135619539856;  // std dev = 0.947, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.06419184008202625;  // std dev = 2.58e-08, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.346', 'seconds']
Refined model CLL: -0.085372


******************************************
Best model found
******************************************
Results 

CLL : -0.090851 

AUC ROC : 0.995163 

AUC PR : 0.496969 

Precision : 0.335106 

Recall : 1.0 

F1 : 0.501992 

Total Learning Time : 26.119 

Total Inference Time : 7.2932140827178955 

Total revision time: 51.78172859573364
Best scored revision CLL: -0.085372


Results 

CLL : -0.090851 

AUC ROC : 0.995163 

AUC PR : 0.496969 

Precision : 0.335106 

Recall : 1.0 

F1 : 0.501992 

Total Learning Time : 51.80636891746521 

Total Inference Time : 7.2932140827178955 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.355
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8211118980624726;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048766;  // std dev = 1.86e-07, 330.000 (wgt'ed) examples reached here.  /* #neg=330 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7080196112294986;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283921;  // std dev = 0.000, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5243613204555154;  // std dev = 0.203, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360668;  // std dev = 0.000, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4140632188461456;  // std dev = 1.712, 131.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=128 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.370297315538259;  // std dev = 0.249, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   | | else return -0.10159632948783619;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.29791711454207453;  // std dev = 2.586, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926053;  // std dev = 1.00e-07, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | | else return -0.09269127618926103;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.25243867329211467;  // std dev = 1.970, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.11e-09, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19870207542842042;  // std dev = 2.198, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 3.94e-08, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17149930175347577;  // std dev = 1.971, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333681;  // std dev = 1.16e-07, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1397202374995196;  // std dev = 0.173, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420278;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | | else return -0.06842697784420262;  // std dev = 2.79e-09, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14551074580411819;  // std dev = 0.080, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202591;  // std dev = 7.15e-09, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.468', 'seconds']
Parameter learned model CLL:-0.087247 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.404, 6, 156], 'false,true': [1.86e-07, 330, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 298, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.203, 7, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 321, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.712, 3, 128], 'true,false': [0.0, 258, 0], 'false,true,true': [0.249, 2, 28], 'false,true,false': [0.0, 54, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.586, 7, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1e-07, 226, 0], 'false,false,false': [0.0, 61, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.97, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.11e-09, 311, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.198, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.94e-08, 290, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.971, 4, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.16e-07, 257, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 66, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.173, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 255, 0], 'false,false,false': [2.79e-09, 67, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.08, 1, 156], 'false,true': [0.0, 0, 0], 'false,false': [7.15e-09, 311, 0]}]
{'': [0.03566529492456011, 1.049665405100148e-16], 'false': [1.049665405100148e-16, nan]}
{'': [0.0185119259523, -1.0729672184296815e-16], 'false': [-1.0729672184296815e-16, nan]}
{'': [0.041100530693665434, -3.873675350717057e-17], 'false': [nan, -3.873675350717057e-17]}
{'': [0.06692609894499371, 0.0733485617616133], 'false': [0.0733485617616133, nan], 'false,true': [0.062222222222222, 0.0], 'true': [0.022376318396365377, -6.540848827248985e-17]}
{'': [0.041028943129492124, 8.819890230471627e-17], 'true': [0.041028943129492124, nan], 'false': [nan, 8.819890230471627e-17], 'false,false': [4.421242133463013e-17, -2.3660490688732843e-17], 'false,false,true': [nan, 4.421242133463013e-17]}
{'': [0.02424895536897733, 3.712642911929784e-17], 'false': [nan, 3.712642911929784e-17], 'false,false': [nan, 3.712642911929784e-17]}
{'': [0.029997116628621836, 5.359697360259376e-18], 'false': [nan, 5.359697360259376e-18], 'false,false': [nan, 5.359697360259376e-18], 'false,false,false': [5.359697360259376e-18, nan]}
{'': [0.02427353345306883, 2.1998227113315797e-17], 'true': [0.02427353345306883, nan], 'false': [5.270319416508525e-17, -1.2616170734376778e-17], 'false,false': [nan, -1.2616170734376778e-17]}
{'': [0.03008948749606356, -7.033711087687327e-17], 'false': [nan, -7.033711087687327e-17], 'false,false': [-3.483052626275001e-18, 7.456721807183887e-18], 'false,false,true': [nan, -3.483052626275001e-18]}
{'': [0.006346539175997249, 5.140582493441239e-17], 'false': [nan, 5.140582493441239e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 40.511
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.8581489350995121;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.8236661764788225;  // std dev = 0.983, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, H), follows(I, A) )
%   | | | then return 0.7914822684328456;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.8581489350995121;  // std dev = 1.03e-07, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else return -0.14185106490048782;  // std dev = 1.03e-07, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.7241799815399014;  // std dev = 0.060, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.5264368663045765;  // std dev = 0.903, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.6294436753049435;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return 0.6914780780320433;  // std dev = 0.986, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.7216317713373566;  // std dev = 0.013, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.16919783410242717;  // std dev = 1.119, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.6043544410265116;  // std dev = 1.625, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   else return -0.12544463852839208;  // std dev = 0.000, 336.000 (wgt'ed) examples reached here.  /* #neg=336 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.5155486071471894;  // std dev = 1.389, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | | | else return 0.5699298401966741;  // std dev = 0.116, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.5259799482949041;  // std dev = 0.965, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.3622683035364746;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.5911328941722725;  // std dev = 0.249, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.3539700813584935;  // std dev = 0.696, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.5802651148478255;  // std dev = 0.047, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.11231637819360663;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #neg=326 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.4144259863240638;  // std dev = 0.942, 75.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=74 */
%   | | | else return 0.31987097172809137;  // std dev = 0.911, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.48399119854998707;  // std dev = 0.230, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.4022623064661308;  // std dev = 0.978, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | else return -0.1015963294878366;  // std dev = 0.000, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.4535113831472288;  // std dev = 0.089, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.1015963294878362;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.33521233143323204;  // std dev = 0.138, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.31039795610125337;  // std dev = 1.055, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return 0.22112521070902227;  // std dev = 1.637, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | | else return 0.3399820510955599;  // std dev = 0.054, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, G) )
%   | then return -0.0926912761892605;  // std dev = 1.17e-07, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | else return -0.092691276189261;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, F) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.2624896075236791;  // std dev = 0.090, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | | else return 0.15758267922298924;  // std dev = 1.393, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else return -0.0419961249905065;  // std dev = 0.803, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.2738189286950409;  // std dev = 0.075, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.2824129157570971;  // std dev = 0.018, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.2188650359018393;  // std dev = 0.956, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.2600166281522804;  // std dev = 0.032, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(K, A) )
%   | then return -0.08518475138839678;  // std dev = 5.51e-09, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return -0.08518475138839678;  // std dev = 3.16e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(D, E) )
%   | | | then return 0.2150483129786013;  // std dev = 0.052, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.1470827715913216;  // std dev = 0.972, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(D, F), follows(F, D) )
%   | | | then return -0.08086441559237617;  // std dev = 1.601, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0.2758526842497945;  // std dev = 0.049, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.21876123286351945;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.16179917209943767;  // std dev = 0.965, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.231651452554418;  // std dev = 0.088, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.218971605569917;  // std dev = 0.037, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.07877675473109143;  // std dev = 2.98e-08, 328.000 (wgt'ed) examples reached here.  /* #neg=328 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.18173777133169594;  // std dev = 0.034, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.17173511847275216;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.10930305522699889;  // std dev = 1.357, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return 0.19876392518472513;  // std dev = 0.054, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.23713861114517717;  // std dev = 0.061, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.18467432248085852;  // std dev = 0.028, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.19427634015568976;  // std dev = 0.047, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.14767844929304402;  // std dev = 1.305, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   else return -0.07324622576333702;  // std dev = 5.19e-09, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.15963261764710607;  // std dev = 0.069, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return 0.10020155409649746;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.006325231524574767;  // std dev = 1.511, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return 0.13605964868107828;  // std dev = 0.998, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.14835479186913567;  // std dev = 0.006, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.16334864498412585;  // std dev = 0.056, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.21004792493665972;  // std dev = 0.255, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.16092177008758837;  // std dev = 0.009, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06842697784420305;  // std dev = 0.000, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( follows(A, D), tweets(A, F) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.13709363406892536;  // std dev = 0.041, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.15502363550246373;  // std dev = 0.066, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.1407747581328641;  // std dev = 0.064, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.22109041804079704;  // std dev = 1.052, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(G, B), follows(H, G) )
%   | | | then return 0.25108375254038307;  // std dev = 0.134, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.14975009252479426;  // std dev = 0.053, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.15392352093645964;  // std dev = 0.037, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.13766865679697157;  // std dev = 0.019, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.06419184008202596;  // std dev = 6.72e-09, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.790', 'seconds']
Refined model CLL: -0.085213


******************************************
Best model found
******************************************
Results 

CLL : -0.091098 

AUC ROC : 0.995162 

AUC PR : 0.4865 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 40.511 

Total Inference Time : 10.778578758239746 

Total revision time: 74.17689329719543
Best scored revision CLL: -0.085213


Results 

CLL : -0.091098 

AUC ROC : 0.995162 

AUC PR : 0.4865 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 74.201533618927 

Total Inference Time : 10.778578758239746 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.469
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7840748610254378;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048768;  // std dev = 5.37e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7341781063237716;  // std dev = 1.12e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283915;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5315129416654394;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360632;  // std dev = 4.37e-09, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3224965023379163;  // std dev = 1.629, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | else return -0.10159632948783624;  // std dev = 3.33e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4378811177225318;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3586222900035917;  // std dev = 0.035, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926107;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24252963728725105;  // std dev = 0.979, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 3.48e-09, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1606693284119768;  // std dev = 1.359, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109173;  // std dev = 2.24e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.20701257948154791;  // std dev = 0.025, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333704;  // std dev = 1.05e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1750846889688326;  // std dev = 0.004, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420271;  // std dev = 7.45e-09, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15121878873025746;  // std dev = 0.004, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.489', 'seconds']
Parameter learned model CLL:-0.101483 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.361, 2, 25], 'false,true': [5.37e-08, 51, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.12e-07, 0, 25], 'false,true': [0.0, 40, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 1, 25], 'false,true': [0.0, 0, 0], 'false,false': [4.37e-09, 51, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.629, 3, 23], 'true,false': [3.33e-08, 52, 0], 'false,true,true': [0.0, 0, 2], 'false,true,false': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.035, 0, 25], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 55, 0], 'false,false,false': [0.0, 3, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.979, 1, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.48e-09, 42, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.359, 2, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.24e-08, 59, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.025, 0, 25], 'true,false': [0.0, 0, 0], 'false,true': [1.05e-08, 50, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.004, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.45e-09, 43, 0], 'false,false,false': [0.0, 1, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.004, 0, 25], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 42, 0]}]
{'': [0.06858710562414343, 5.659960517696876e-17], 'false': [5.659960517696876e-17, nan]}
{'': [4.973799150320702e-16, -2.4980018054066023e-17], 'false': [-2.4980018054066023e-17, nan]}
{'': [0.036982248520709894, 1.959217102279688e-17], 'false': [nan, 1.959217102279688e-17]}
{'': [0.07399138641816136, 0.05939508490788074], 'true': [0.10207100591715977, 2.1350442781253012e-17], 'false': [0.05939508490788074, nan], 'false,true': [0.0, 0.0]}
{'': [5.036106363087711e-05, -1.914177628664063e-18], 'true': [5.036106363087711e-05, nan], 'false': [nan, -1.914177628664063e-18], 'false,false': [-2.0185873175002845e-18, 1.1564823173178713e-18], 'false,false,true': [nan, -2.0185873175002845e-18]}
{'': [0.03688424062305757, 1.1895246692412391e-17], 'false': [nan, 1.1895246692412391e-17], 'false,false': [nan, 1.1895246692412391e-17]}
{'': [0.06839356432309397, 8.467802730191872e-18], 'false': [nan, 8.467802730191872e-18], 'false,false': [nan, 8.467802730191872e-18], 'false,false,false': [8.467802730191872e-18, nan]}
{'': [2.4921455089623735e-05, 1.02798428206033e-18], 'true': [2.4921455089623735e-05, nan], 'false': [2.220446049250313e-18, 0.0], 'false,false': [nan, 0.0]}
{'': [1.9175156238731007e-05, 1.8924256101565167e-18], 'false': [nan, 1.8924256101565167e-18], 'false,false': [1.290957005378089e-18, 0.0], 'false,false,true': [nan, 1.290957005378089e-18]}
{'': [1.507544011415618e-05, -1.982541115402065e-18], 'false': [nan, -1.982541115402065e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 5.721
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.14185106490048766;  // std dev = 5.58e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then return 0.7194734122109543;  // std dev = 5.96e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2194734122109545;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else return -0.12544463852839155;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.3331442145240624;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.5767780623136218;  // std dev = 0.151, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.11231637819360633;  // std dev = 2.36e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4429492696921208;  // std dev = 0.186, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.10159632948783624;  // std dev = 3.16e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.41231574150096517;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.33809122526244006;  // std dev = 0.098, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.24195957925858433;  // std dev = 0.298, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else if ( follows(A, E) )
%   | then return -0.09269127618926105;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else return -0.09269127618926096;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(D, E), follows(A, D) )
%   | | | then return 0.16573705516206155;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.24703337512675147;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.08753355366574274;  // std dev = 0.815, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A) )
%   | | then return 0.26211405961888234;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.30577081871969536;  // std dev = 0.114, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A) )
%   | then if ( follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.08518475138839682;  // std dev = 1.49e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.08518475138839687;  // std dev = 9.31e-10, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.08518475138839687;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(D, A) )
%   | | | then return 0.10810385441220978;  // std dev = 0.920, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.2331701168902467;  // std dev = 0.061, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.12067818480145202;  // std dev = 0.811, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.2139255722908594;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2046067463259719;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2868530103897214;  // std dev = 0.033, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, H) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then return 0.20336056139585162;  // std dev = 0.027, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.17270299024518218;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.23482384137350082;  // std dev = 0.031, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, A) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.07324622576333704;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.19443615106468987;  // std dev = 0.025, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1486732922695372;  // std dev = 0.014, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.19877784887790884;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), follows(H, A) )
%   | | | then return 0.1520374690962204;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.14896829647425433;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.19285477079351085;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D), follows(A, E) )
%   | | | then return 0.16578956470504227;  // std dev = 0.022, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1305905379201861;  // std dev = 0.012, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(F, A) )
%   | | | then return -0.032997692065690996;  // std dev = 0.912, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.15480419072965992;  // std dev = 0.031, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.13993742571755344;  // std dev = 1.062, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else return -0.06419184008202623;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '5.256', 'seconds']
Refined model CLL: -0.09738


******************************************
Best model found
******************************************
Results 

CLL : -0.084785 

AUC ROC : 0.995095 

AUC PR : 0.443851 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 5.721 

Total Inference Time : 1.4661521911621094 

Total revision time: 11.869039955139161
Best scored revision CLL: -0.09738


Results 

CLL : -0.084785 

AUC ROC : 0.995095 

AUC PR : 0.443851 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 11.893680276870729 

Total Inference Time : 1.4661521911621094 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.287
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8015451615146066;  // std dev = 1.682, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048763;  // std dev = 8.56e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7307546729966665;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839138;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4924541379871123;  // std dev = 0.262, 54.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360622;  // std dev = 7.45e-09, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.42321351190909345;  // std dev = 0.990, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | else return -0.10159632948783631;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.44404684524242705;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.10159632948783634;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.34316676834348697;  // std dev = 0.008, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.092691276189261;  // std dev = 3.94e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2704425117900638;  // std dev = 0.007, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 5.74e-09, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1638971655282944;  // std dev = 1.682, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109161;  // std dev = 5.16e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17400677932505537;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333707;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14997153287763276;  // std dev = 0.127, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420267;  // std dev = 3.73e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else return -0.06842697784420274;  // std dev = 9.31e-10, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.05706487336271971;  // std dev = 0.287, 55.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.574', 'seconds']
Parameter learned model CLL:-0.091168 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.682, 3, 50], 'false,true': [8.56e-08, 94, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.0, 0, 50], 'false,true': [0.0, 95, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.262, 4, 50], 'false,true': [0.0, 0, 0], 'false,false': [7.45e-09, 82, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.99, 1, 47], 'true,false': [0.0, 108, 0], 'false,true,true': [0.0, 0, 3], 'false,true,false': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.008, 0, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.94e-08, 95, 0], 'false,false,false': [0.0, 3, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.007, 0, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.74e-09, 93, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.682, 3, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.16e-08, 90, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.99, 1, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 86, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.86e-09, 5, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.127, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.73e-08, 80, 0], 'false,false,false': [9.31e-10, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.287, 5, 50], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 108, 0]}]
{'': [0.053399786400854646, 7.795182938857482e-17], 'false': [7.795182938857482e-17, nan]}
{'': [-1.9895196601282807e-15, -1.402386978473882e-17], 'false': [-1.402386978473882e-17, nan]}
{'': [0.06858710562414254, 5.415722071342227e-17], 'false': [nan, 5.415722071342227e-17]}
{'': [0.06494720234002051, 0.06252255956724136], 'true': [0.02039930555555584, -2.05596856412066e-18], 'false': [0.06252255956724136, nan], 'false,true': [0.0, -1.982541115402065e-18]}
{'': [1.236507924122776e-06, 2.1524732110079565e-17], 'true': [1.236507924122776e-06, nan], 'false': [nan, 2.1524732110079565e-17], 'false,false': [1.636118141552862e-17, 1.1564823173178713e-18], 'false,false,true': [nan, 1.636118141552862e-17]}
{'': [9.449104092329464e-07, 3.1038493161563513e-17], 'false': [nan, 3.1038493161563513e-17], 'false,false': [nan, 3.1038493161563513e-17]}
{'': [0.05337763673806448, 2.960594732333751e-17], 'false': [nan, 2.960594732333751e-17], 'false,false': [nan, 2.960594732333751e-17], 'false,false,false': [2.960594732333751e-17, nan]}
{'': [0.01921649377504992, -7.93016446160826e-18], 'true': [0.01921649377504992, nan], 'false': [-7.10026352957949e-18, 6.938893903907229e-19], 'false,false': [nan, 6.938893903907229e-19]}
{'': [0.01603728100001829, 2.0970879354030734e-17], 'false': [nan, 2.0970879354030734e-17], 'false,false': [1.734723475976807e-17, 0.0], 'false,false,true': [nan, 1.734723475976807e-17]}
{'': [0.08261910010890083, -1.644774851296528e-17], 'false': [nan, -1.644774851296528e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 12.261
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(D, F), tweets(E, F) )
%   | | | then return 0.8581489350995117;  // std dev = 1.69e-07, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.14185106490048763;  // std dev = 8.43e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.7246826507061588;  // std dev = 0.121, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7417903431046247;  // std dev = 0.077, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.1254446385283914;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.48741306087686515;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.5540797275435317;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.6015602015498667;  // std dev = 0.103, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(G, A), follows(F, A) )
%   | | | then return 0.08355559017842329;  // std dev = 0.945, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.48057168175516224;  // std dev = 0.974, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.5906415762363547;  // std dev = 0.114, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360618;  // std dev = 8.43e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.3987328942187417;  // std dev = 0.761, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.4571302431098028;  // std dev = 0.188, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.19800801126626447;  // std dev = 0.715, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4345149914378238;  // std dev = 0.107, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.10494541269761;  // std dev = 0.363, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.4677492007786981;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.34378153535302247;  // std dev = 0.254, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(A, D) )
%   | then return -0.09241000356913061;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(D, E), recursion_accounttype(D, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.259778343720715;  // std dev = 0.067, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.2807562848585644;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0.3045708995592981;  // std dev = 0.101, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2671192107118121;  // std dev = 0.037, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return 0.1093786641444604;  // std dev = 0.939, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.2819219573568127;  // std dev = 0.124, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, J) )
%   | then return -0.08494598612908882;  // std dev = 1.83e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else return -0.08518475138839691;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.21289785417259333;  // std dev = 0.033, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.23393205120956231;  // std dev = 0.074, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.2263059721810999;  // std dev = 0.037, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.06741279567058674;  // std dev = 0.655, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then return 0.2742013633024305;  // std dev = 0.092, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.22767793698115546;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.21255123774505277;  // std dev = 0.083, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, J) )
%   | then return -0.0785716926466477;  // std dev = 0.000, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(D, F) )
%   | | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | | then return 0.18251937441822275;  // std dev = 0.015, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.17760989915836994;  // std dev = 0.046, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.20290538123891846;  // std dev = 0.041, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then return 0.19030860463029953;  // std dev = 0.026, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.22679525496304373;  // std dev = 0.070, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.19031299529834536;  // std dev = 0.082, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, J) )
%   | then return -0.07306830592517073;  // std dev = 5.96e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | else return -0.07324622576333704;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(D, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.15444147807546135;  // std dev = 0.025, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.15913134970828602;  // std dev = 0.035, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.17211144036190257;  // std dev = 0.036, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.17737990382008992;  // std dev = 0.075, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.17246089568217263;  // std dev = 0.071, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.15338977493806566;  // std dev = 0.051, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, J) )
%   | then return -0.06827121870673046;  // std dev = 3.41e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.029260351579889172;  // std dev = 1.568, 27.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=24 */
%   | | | else return 0.14432360710616066;  // std dev = 0.051, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return -0.06170413662309169;  // std dev = 0.904, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.141239853078069;  // std dev = 0.737, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then return 0.16395838800518134;  // std dev = 0.064, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.13893493646311017;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.13305859498897332;  // std dev = 0.052, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, J) )
%   | then return -0.06405439589448664;  // std dev = 2.24e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return -0.0641918400820262;  // std dev = 2.63e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.754', 'seconds']
Refined model CLL: -0.089175


******************************************
Best model found
******************************************
Results 

CLL : -0.085795 

AUC ROC : 0.995442 

AUC PR : 0.435328 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 12.261 

Total Inference Time : 3.848332166671753 

Total revision time: 23.442490003585814
Best scored revision CLL: -0.089175


Results 

CLL : -0.085795 

AUC ROC : 0.995442 

AUC PR : 0.435328 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 23.46713032531738 

Total Inference Time : 3.848332166671753 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.922
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8321749091254866;  // std dev = 1.396, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048807;  // std dev = 0.000, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6862242416225329;  // std dev = 1.698, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839133;  // std dev = 4.21e-08, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.556780754950452;  // std dev = 0.114, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360617;  // std dev = 8.74e-09, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3775818263171457;  // std dev = 1.945, 74.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=70 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4316358803711994;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.10159632948783628;  // std dev = 1.32e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3156100132483545;  // std dev = 1.395, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0926912761892608;  // std dev = 6.50e-08, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | | else return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2374055299655786;  // std dev = 1.640, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.35e-09, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20386165463840233;  // std dev = 1.395, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109151;  // std dev = 8.23e-08, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16977231998223305;  // std dev = 1.395, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333678;  // std dev = 8.82e-08, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14441636804302224;  // std dev = 0.159, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420264;  // std dev = 6.41e-08, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   | | else return -0.06842697784420272;  // std dev = 9.31e-10, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13777262154146153;  // std dev = 0.114, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.608', 'seconds']
Parameter learned model CLL:-0.093151 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.396, 2, 75], 'false,true': [0.0, 149, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.698, 3, 75], 'false,true': [4.21e-08, 155, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.114, 1, 75], 'false,true': [0.0, 0, 0], 'false,false': [8.74e-09, 144, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.945, 4, 70], 'true,false': [0.0, 168, 0], 'false,true,true': [0.0, 0, 5], 'false,true,false': [1.32e-09, 10, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.395, 2, 75], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.5e-08, 123, 0], 'false,false,false': [0.0, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.64, 3, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.35e-09, 147, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.395, 2, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [8.23e-08, 152, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.395, 2, 75], 'true,false': [0.0, 0, 0], 'false,true': [8.82e-08, 157, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.73e-09, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.159, 2, 75], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.41e-08, 140, 0], 'false,false,false': [9.31e-10, 15, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.114, 1, 75], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 139, 0]}]
{'': [0.025299375948725576, -1.1027718633860615e-16], 'false': [-1.1027718633860615e-16, nan]}
{'': [0.03698224852070936, 1.1460366705808068e-17], 'false': [1.1460366705808068e-17, nan]}
{'': [0.012984764542935909, 7.555684473143427e-17], 'false': [nan, 7.555684473143427e-17]}
{'': [0.06437757653582281, 0.06318590880692236], 'true': [0.05113221329437515, -7.401486830834377e-17], 'false': [0.06318590880692236, nan], 'false,true': [-2.2204460492503132e-17, 1.3877787807814458e-18]}
{'': [0.02526751681265523, 3.645508439067678e-17], 'true': [0.02526751681265523, nan], 'false': [nan, 3.645508439067678e-17], 'false,false': [3.429957311850077e-17, 0.0], 'false,false,true': [nan, 3.429957311850077e-17]}
{'': [0.03449182607362594, 2.869964281343942e-17], 'false': [nan, 2.869964281343942e-17], 'false,false': [nan, 2.869964281343942e-17]}
{'': [0.025272929648178736, 4.455500296193063e-17], 'false': [nan, 4.455500296193063e-17], 'false,false': [nan, 4.455500296193063e-17], 'false,false,false': [4.455500296193063e-17, nan]}
{'': [0.02527535349777473, 5.973129723129497e-17], 'true': [0.02527535349777473, nan], 'false': [4.9500389632968764e-17, 9.912705577010326e-19], 'false,false': [nan, 9.912705577010326e-19]}
{'': [0.025277436177295613, 3.079973552185918e-17], 'false': [nan, 3.079973552185918e-17], 'false,false': [2.9341608507950566e-17, 9.251858538542971e-19], 'false,false,true': [nan, 2.9341608507950566e-17]}
{'': [0.012975821224454821, -1.2779545607196047e-17], 'false': [nan, -1.2779545607196047e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 16.912
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995127;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   else return -0.14185106490048788;  // std dev = 0.000, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.719473412210955;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else return 0.21947341221095432;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else return 0.7194734122109542;  // std dev = 5.96e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.12544463852839127;  // std dev = 5.96e-08, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), recursion_accounttype(D, B) )
%   | | | then return 0.5553664367462842;  // std dev = 4.21e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.518606600938799;  // std dev = 0.864, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.5684513190374347;  // std dev = 0.111, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.20247201299442627;  // std dev = 0.966, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return 0.5660722495299532;  // std dev = 0.159, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.11231637819360617;  // std dev = 1.00e-07, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.3854560728530247;  // std dev = 0.977, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.42320189990564433;  // std dev = 0.020, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.4404017079929018;  // std dev = 0.233, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.1051254636126774;  // std dev = 0.482, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4149122954089542;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10159632948783634;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3306552364053167;  // std dev = 0.224, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   else if ( follows(A, D) )
%   | then return -0.0923949037359697;  // std dev = 0.000, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.25898121104966404;  // std dev = 0.037, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.2644719185641956;  // std dev = 0.060, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.35079549042343605;  // std dev = 0.000442, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.2522519692691025;  // std dev = 0.024, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.3001165162280155;  // std dev = 0.050, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.252653017672172;  // std dev = 0.008, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.24698611602166595;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, J) )
%   | then return -0.08493316533196817;  // std dev = 6.66e-08, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | else return -0.08518475138839687;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.21290785351287153;  // std dev = 0.028, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.23112866337533922;  // std dev = 0.078, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.2106333443047106;  // std dev = 0.016, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.20333882541112755;  // std dev = 0.002, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.2086900647915106;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.20976244163720667;  // std dev = 0.007, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return -0.06415646592741726;  // std dev = 0.821, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2222992613012197;  // std dev = 0.064, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07857530103590762;  // std dev = 5.43e-05, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(D, F) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.08812329920833104;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return 0.18476777671997838;  // std dev = 0.112, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.10925912429335786;  // std dev = 1.144, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.17592045760387448;  // std dev = 0.017, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.20364871306515742;  // std dev = 0.037, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.17542038541987123;  // std dev = 0.006, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.17172167977263994;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, J) )
%   | then return -0.07305775855065554;  // std dev = 3.16e-08, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | else return -0.07325990186087229;  // std dev = 4.56e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.11877473366609231;  // std dev = 0.983, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.15486608081961917;  // std dev = 0.016, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( recursion_accounttype(E, B), follows(A, E) )
%   | | | then return 0.1693678646063272;  // std dev = 0.043, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1526493351824289;  // std dev = 0.051, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.1618660663568536;  // std dev = 0.087, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.23903275767298346;  // std dev = 0.113, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(I, A), follows(A, I) )
%   | | | then return 0.17267832352659906;  // std dev = 0.032, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.14877895334391694;  // std dev = 0.004, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06827277417919099;  // std dev = 4.23e-05, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(G, A) )
%   | | | then return 0.14586211843435964;  // std dev = 0.094, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.126773647945033;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2165515007217184;  // std dev = 0.061, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.13441662805215326;  // std dev = 0.019, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.14943409889563064;  // std dev = 0.029, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.13241448218815274;  // std dev = 0.005, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.13005882554119913;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, K) )
%   | then return -0.06404559877841882;  // std dev = 0.000, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | else return -0.06421238638516526;  // std dev = 4.56e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.831', 'seconds']
Refined model CLL: -0.092756


******************************************
Best model found
******************************************
Results 

CLL : -0.087199 

AUC ROC : 0.994776 

AUC PR : 0.347327 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 16.912 

Total Inference Time : 4.697684049606323 

Total revision time: 31.759740480422973
Best scored revision CLL: -0.092756


Results 

CLL : -0.087199 

AUC ROC : 0.994776 

AUC PR : 0.347327 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 31.78438080215454 

Total Inference Time : 4.697684049606323 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.59
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8385410919622563;  // std dev = 1.400, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048835;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7135128176172756;  // std dev = 0.995, 101.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=100 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839163;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.532544685753124;  // std dev = 0.168, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360667;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.40827410000195735;  // std dev = 1.399, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.42932673158090434;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.10159632948783621;  // std dev = 1.32e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.31346653030420724;  // std dev = 1.400, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926061;  // std dev = 8.56e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | | else return -0.09269127618926087;  // std dev = 1.32e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23825169101688626;  // std dev = 1.709, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.43e-09, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19426469926110354;  // std dev = 1.706, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109147;  // std dev = 7.30e-08, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1815969932089739;  // std dev = 0.995, 101.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333668;  // std dev = 1.10e-07, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333698;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13662250914037166;  // std dev = 0.164, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 5.77e-08, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | | else return -0.0684269778442027;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.09936315379195701;  // std dev = 0.213, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.895', 'seconds']
Parameter learned model CLL:-0.09265 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.4, 2, 100], 'false,true': [0.0, 188, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.995, 1, 100], 'false,true': [0.0, 196, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.168, 3, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 212, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.399, 2, 93], 'true,false': [0.0, 182, 0], 'false,true,true': [0.0, 0, 7], 'false,true,false': [1.32e-09, 12, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.4, 2, 100], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [8.56e-08, 179, 0], 'false,false,false': [1.32e-09, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.709, 3, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.43e-09, 207, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.706, 3, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.3e-08, 201, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.995, 1, 100], 'true,false': [0.0, 0, 0], 'false,true': [1.1e-07, 187, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.164, 3, 100], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.77e-08, 180, 0], 'false,false,false': [0.0, 9, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.213, 5, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 211, 0]}]
{'': [0.019223375624761452, -2.1732025162875404e-16], 'false': [-2.1732025162875404e-16, nan]}
{'': [0.009802960494071504, -2.945489657168783e-17], 'false': [-2.945489657168783e-17, nan]}
{'': [0.028277877274012292, -5.655853144316835e-17], 'false': [nan, -5.655853144316835e-17]}
{'': [0.06564898607794738, 0.06558964246278812], 'true': [0.020609418282548364, -8.90618470303697e-17], 'false': [0.06558964246278812, nan], 'false,true': [-6.344131569286608e-17, 0.0]}
{'': [0.019212217559013523, 4.11193712824132e-17], 'true': [0.019212217559013523, nan], 'false': [nan, 4.11193712824132e-17], 'false,false': [4.093559755601136e-17, 1.3877787807814458e-18], 'false,false,true': [nan, 4.093559755601136e-17]}
{'': [0.028340248465378023, 3.003501902367573e-17], 'false': [nan, 3.003501902367573e-17], 'false,false': [nan, 3.003501902367573e-17]}
{'': [0.028264327242900705, 2.6512788647764932e-17], 'false': [nan, 2.6512788647764932e-17], 'false,false': [nan, 2.6512788647764932e-17], 'false,false,false': [2.6512788647764932e-17, nan]}
{'': [0.009799189794114281, 7.029552819234659e-17], 'true': [0.009799189794114281, nan], 'false': [6.411983243824433e-17, 0.0], 'false,false': [nan, 0.0]}
{'': [0.02677539280594976, 1.997226605145784e-17], 'false': [nan, 1.997226605145784e-17], 'false,false': [1.850371707708594e-17, 7.709882115452476e-19], 'false,false,true': [nan, 1.850371707708594e-17]}
{'': [0.045335250664828144, 0.0], 'false': [nan, 0.0]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 17.325
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then return 0.8581489350995127;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.14185106490048838;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D), follows(A, E) )
%   | | | then return 0.6588673516048941;  // std dev = 1.371, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | | | else return 0.7194734122109542;  // std dev = 7.30e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.7304878128213269;  // std dev = 0.075, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.589696557502757;  // std dev = 0.924, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.7296469696601341;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.47328849625439684;  // std dev = 0.871, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.602242853131497;  // std dev = 0.945, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.12544463852839166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5675799236087573;  // std dev = 0.109, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, F) )
%   | | | then return 0.5687334934828273;  // std dev = 0.072, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.19607631438530365;  // std dev = 1.535, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | else return 0.5756072483287318;  // std dev = 0.090, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.11231637819360651;  // std dev = 0.000, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.436746150226841;  // std dev = 0.329, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   | else return -0.10159632948783653;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.41454633934098073;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.10159632948783621;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.2968724810617369;  // std dev = 0.987, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return 0.09016966050959331;  // std dev = 1.946, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | else return 0.3190540774183838;  // std dev = 0.025, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0.34830607479015396;  // std dev = 0.278, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926061;  // std dev = 8.43e-08, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | else return -0.09269127618926087;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D), follows(A, E) )
%   | | | then return 0.2120496185217725;  // std dev = 1.354, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | | | else return 0.263539905427251;  // std dev = 0.089, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.12034844537796632;  // std dev = 0.953, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.2406176545875472;  // std dev = 1.67e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, G) )
%   | | | then return 0.3043107256820453;  // std dev = 0.085, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.3831833111055328;  // std dev = 0.065, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(I, A), follows(A, I) )
%   | | | then return 0.28787466840959847;  // std dev = 0.053, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2632805376172747;  // std dev = 0.016, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.08518475138839678;  // std dev = 5.59e-09, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.20049204714825064;  // std dev = 0.993, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return 0.21301077811499927;  // std dev = 0.047, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.23670236236570183;  // std dev = 0.092, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.2036956251961173;  // std dev = 0.008, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.2596867100895871;  // std dev = 0.925, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.22050739590133211;  // std dev = 0.094, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.29088408921012376;  // std dev = 0.062, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.15255096289042314;  // std dev = 0.863, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else return -0.07877675473109146;  // std dev = 4.75e-09, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.1898991182198086;  // std dev = 0.076, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.11178486907434924;  // std dev = 1.315, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return -0.0687961949039525;  // std dev = 0.853, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.17923260806174696;  // std dev = 0.044, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return -0.038193127673289494;  // std dev = 1.649, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | | else return 0.17433262963425844;  // std dev = 0.027, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.06509757226345103;  // std dev = 0.932, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.19175770813286003;  // std dev = 0.000904, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.07324622576333664;  // std dev = 8.54e-09, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B), follows(E, D) )
%   | | | then return 0.10622474628842717;  // std dev = 1.289, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | | | else return 0.1934638224650249;  // std dev = 0.107, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( tweets(D, F), follows(D, G) )
%   | | | then return -0.3048725703571509;  // std dev = 0.935, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.19807793531446402;  // std dev = 0.101, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.21609683366345472;  // std dev = 0.065, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1629230922428959;  // std dev = 0.059, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.16393156785560795;  // std dev = 0.033, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.15154959889173586;  // std dev = 0.012, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06842697784420262;  // std dev = 5.74e-09, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.12855623610576888;  // std dev = 0.966, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return 0.14438157890290584;  // std dev = 0.095, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.16209360119364058;  // std dev = 0.053, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.14051159768807261;  // std dev = 0.035, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.39342525442952553;  // std dev = 1.053, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.1576630188189479;  // std dev = 0.093, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.19143249338427706;  // std dev = 0.046, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1425440920569629;  // std dev = 0.000713, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.06419184008202626;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.493', 'seconds']
Refined model CLL: -0.0887


******************************************
Best model found
******************************************
Results 

CLL : -0.084332 

AUC ROC : 0.9964 

AUC PR : 0.492419 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 17.325 

Total Inference Time : 4.132921934127808 

Total revision time: 35.29727009773254
Best scored revision CLL: -0.0887


Results 

CLL : -0.084332 

AUC ROC : 0.9964 

AUC PR : 0.492419 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 35.32191041946411 

Total Inference Time : 4.132921934127808 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.439
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8126943896449649;  // std dev = 2.393, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048793;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6977861707984718;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839194;  // std dev = 0.000, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5562534797100419;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360686;  // std dev = 0.000, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.39305865192693573;  // std dev = 2.190, 123.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=118 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43370905843100166;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783621;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.30938887665015735;  // std dev = 1.972, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926049;  // std dev = 7.15e-08, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | | else return -0.09269127618926087;  // std dev = 1.32e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2589167299618483;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.89e-09, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.18791640076399718;  // std dev = 2.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 5.96e-08, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17926778866987864;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333664;  // std dev = 1.29e-07, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.073246225763337;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15266556338759527;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420265;  // std dev = 3.94e-08, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | | else return -0.06842697784420268;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11039269942230114;  // std dev = 0.189, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 1.61e-09, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.917', 'seconds']
Parameter learned model CLL:-0.092831 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.393, 6, 126], 'false,true': [0.0, 288, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 270, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 251, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [2.19, 5, 118], 'true,false': [0.0, 231, 0], 'false,true,true': [0.0, 0, 8], 'false,true,false': [0.0, 13, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.972, 4, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.15e-08, 231, 0], 'false,false,false': [1.32e-09, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.403, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 265, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.96e-08, 255, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.403, 2, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.29e-07, 224, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 18, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.94e-08, 240, 0], 'false,false,false': [0.0, 16, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.189, 5, 126], 'false,true': [0.0, 0, 0], 'false,false': [1.61e-09, 238, 0]}]
{'': [0.043388429752070364, 0.0], 'false': [0.0, nan]}
{'': [0.029822485207098848, -7.237009345704725e-17], 'false': [-7.237009345704725e-17, nan]}
{'': [0.015380859374999445, -9.377182518746342e-17], 'false': [nan, -9.377182518746342e-17]}
{'': [0.0690274386732585, 0.06757685548034803], 'true': [0.038997950955120056, -7.689856447620132e-17], 'false': [0.06757685548034803, nan], 'false,true': [-2.7755575615628914e-17, 0.0]}
{'': [0.029928710114311294, 3.8064789415719653e-17], 'true': [0.029928710114311294, nan], 'false': [nan, 3.8064789415719653e-17], 'false,false': [2.210833728690788e-17, 2.9738116731030977e-18], 'false,false,true': [nan, 2.210833728690788e-17]}
{'': [0.015368953019585518, 3.435407095066522e-17], 'false': [nan, 3.435407095066522e-17], 'false,false': [nan, 3.435407095066522e-17]}
{'': [0.03668115937007035, 1.3932210505100003e-17], 'false': [nan, 1.3932210505100003e-17], 'false,false': [nan, 1.3932210505100003e-17], 'false,false,false': [1.3932210505100003e-17, nan]}
{'': [0.015370869108163349, 6.14751592147814e-17], 'true': [0.015370869108163349, nan], 'false': [7.434529182757744e-17, -7.709882115452476e-19], 'false,false': [nan, -7.709882115452476e-19]}
{'': [0.015371729900064784, -1.3877787807814457e-17], 'false': [nan, -1.3877787807814457e-17], 'false,false': [6.47630097698008e-18, -2.6020852139652106e-18], 'false,false,true': [nan, 6.47630097698008e-18]}
{'': [0.035646583322760536, 2.332401312237724e-18], 'false': [nan, 2.332401312237724e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 33.108
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.8170530446885539;  // std dev = 1.696, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H) )
%   | | then return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.14185106490048832;  // std dev = 0.000, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(D, A), tweets(D, E) )
%   | | | then return 0.6811809372681195;  // std dev = 1.381, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.7366199714694348;  // std dev = 0.116, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(D, F) )
%   | | | then return 0.656263993746524;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.45564690705972205;  // std dev = 0.777, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.7230440081706293;  // std dev = 0.057, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.1254446385283918;  // std dev = 0.000, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), follows(F, D) )
%   | | | then return 0.5218482884049447;  // std dev = 1.375, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | | else return 0.5645244019693141;  // std dev = 0.043, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.5777736639142165;  // std dev = 0.043, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(H, A), follows(G, A) )
%   | | | then return 0.15584209603374327;  // std dev = 1.092, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.5401354029589776;  // std dev = 1.031, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | else return 0.5609572860439994;  // std dev = 0.061, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360688;  // std dev = 0.000, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), tweets(A, F) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4106061283985682;  // std dev = 1.262, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   | | | else return 0.4342724796963803;  // std dev = 0.155, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.43471688229971434;  // std dev = 0.241, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.4383514048085829;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(D, E) )
%   | | | then return 0.2942503079428461;  // std dev = 1.374, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return 0.33492780780537984;  // std dev = 0.040, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.347853108514561;  // std dev = 0.074, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.42084362802495956;  // std dev = 0.162, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.2782678702526968;  // std dev = 0.909, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.15012977020099597;  // std dev = 0.910, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.32152990163866446;  // std dev = 0.046, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(A, I) )
%   | then return -0.09269127618926049;  // std dev = 7.15e-08, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | else return -0.09269127618926087;  // std dev = 3.73e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, G), follows(E, F) )
%   | | | then return 0.23861461365940168;  // std dev = 1.378, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   | | | else return 0.09232289757632675;  // std dev = 1.248, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else if ( follows(E, H), follows(A, H) )
%   | | | then return 0.27954998010469123;  // std dev = 0.146, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.25491297498397253;  // std dev = 0.019, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(I, A), follows(A, I) )
%   | | then if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.27048916500750925;  // std dev = 0.020, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.3112625083407326;  // std dev = 0.126, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.26742299566418826;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2541858674289555;  // std dev = 0.031, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839678;  // std dev = 5.74e-09, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.2334612701171957;  // std dev = 0.046, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return 0.23890613350346257;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.20887003317098646;  // std dev = 0.026, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.21900464146583704;  // std dev = 0.025, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.14331776590614625;  // std dev = 0.911, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.22086567546634106;  // std dev = 0.118, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.045004208440222605;  // std dev = 1.237, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.20978788089627898;  // std dev = 0.026, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07877675473109143;  // std dev = 4.47e-09, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.17540938704643966;  // std dev = 0.987, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.07847975573490049;  // std dev = 0.925, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(E, G), follows(G, A) )
%   | | | then return -0.1281940429643284;  // std dev = 1.016, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1384992645501158;  // std dev = 0.865, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.18519010031928837;  // std dev = 0.015, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.2579477850217287;  // std dev = 0.115, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.20632803294443255;  // std dev = 0.053, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1735873677305298;  // std dev = 0.008, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.07324622576333667;  // std dev = 8.38e-09, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, F) )
%   | | then if ( recursion_accounttype(E, B), tweets(F, D) )
%   | | | then return 0.1682541244319837;  // std dev = 0.061, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.18831292395424415;  // std dev = 0.186, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.17696373268187796;  // std dev = 0.046, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.15388603644685153;  // std dev = 0.018, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( recursion_accounttype(H, B), follows(A, H) )
%   | | | then return 0.08105158834685264;  // std dev = 0.958, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.19234689412063988;  // std dev = 0.126, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.09750129282282105;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.15283848254456;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06842697784420261;  // std dev = 4.06e-09, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, F) )
%   | | | then return 0.12763856979881374;  // std dev = 0.998, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | | else return 0.1689962910721076;  // std dev = 0.091, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(G, A), follows(E, G) )
%   | | | then return 0.08210163115886475;  // std dev = 0.902, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.1341451228941633;  // std dev = 0.014, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.1448452241405363;  // std dev = 0.025, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.17597030915614048;  // std dev = 0.095, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.1390192345069311;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.13408679812788468;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06419184008202625;  // std dev = 2.36e-08, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.840', 'seconds']
Refined model CLL: -0.091091


******************************************
Best model found
******************************************
Results 

CLL : -0.085746 

AUC ROC : 0.996032 

AUC PR : 0.434259 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 33.108 

Total Inference Time : 9.727693557739258 

Total revision time: 59.30167300415039
Best scored revision CLL: -0.091091


Results 

CLL : -0.085746 

AUC ROC : 0.996032 

AUC PR : 0.434259 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 59.326313325881955 

Total Inference Time : 9.727693557739258 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.678
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8268989350995116;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048766;  // std dev = 6.66e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7257371741022817;  // std dev = 1.19e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283915;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5302775585769441;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360626;  // std dev = 6.18e-09, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.42973959680945834;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4297395968094582;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.2977628309978144;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926105;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.092691276189261;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20629236747477364;  // std dev = 1.371, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 2.63e-09, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19726621859746984;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1956079015536689;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333704;  // std dev = 1.05e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.16664657447203302;  // std dev = 4.93e-09, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0684269778442027;  // std dev = 1.39e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1447693815321088;  // std dev = 3.23e-09, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.997', 'seconds']
Parameter learned model CLL:-0.08726 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.984, 1, 31], 'false,true': [6.66e-08, 67, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.19e-07, 0, 31], 'false,true': [0.0, 76, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.174, 1, 31], 'false,true': [0.0, 0, 0], 'false,false': [6.18e-09, 64, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 25], 'true,false': [0.0, 37, 0], 'false,true,true': [0.0, 0, 6], 'false,true,false': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.984, 1, 31], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 36, 0], 'false,false,false': [0.0, 13, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.371, 2, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.63e-09, 54, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.984, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 49, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.0, 0, 31], 'true,false': [0.0, 0, 0], 'false,true': [1.05e-08, 40, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 18, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [4.93e-09, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.39e-08, 51, 0], 'false,false,false': [0.0, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [3.23e-09, 0, 31], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 62, 0]}]
{'': [0.030273437500001332, 6.628197161941232e-17], 'false': [6.628197161941232e-17, nan]}
{'': [4.584146682323227e-16, -2.6294755846385285e-17], 'false': [-2.6294755846385285e-17, nan]}
{'': [0.03027343749999989, 3.8163916471489756e-17], 'false': [nan, 3.8163916471489756e-17]}
{'': [0.06793549078593626, 0.05599693221306517], 'true': [-1.7763568394002506e-16, 0.0], 'false': [0.05599693221306517, nan], 'false,true': [-7.401486830834377e-17, -6.938893903907228e-18]}
{'': [0.0302734375, -3.398641912117826e-18], 'true': [0.0302734375, nan], 'false': [nan, -3.398641912117826e-18], 'false,false': [-9.25185853854297e-18, -1.0675221390626506e-18], 'false,false,true': [nan, -9.25185853854297e-18]}
{'': [0.05693296602387515, 6.1679056923619804e-18], 'false': [nan, 6.1679056923619804e-18], 'false,false': [nan, 6.1679056923619804e-18]}
{'': [0.03027343749999996, -1.1328806373726086e-18], 'false': [nan, -1.1328806373726086e-18], 'false,false': [nan, -1.1328806373726086e-18], 'false,false,false': [-1.1328806373726086e-18, nan]}
{'': [-2.865091676452017e-17, 9.570888143320315e-19], 'false': [2.7755575615628915e-18, -7.709882115452476e-19], 'false,false': [nan, -7.709882115452476e-19], 'true': [-2.865091676452017e-17, nan]}
{'': [2.5069552168955147e-17, 9.394194823751325e-18], 'false': [nan, 9.394194823751325e-18], 'false,false': [3.8095888099882826e-18, 9.912705577010326e-19], 'false,false,true': [nan, 3.8095888099882826e-18]}
{'': [1.0744093786695063e-17, -3.581364595565021e-18], 'false': [nan, -3.581364595565021e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 6.547
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0.7152917922423694;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.14185106490048768;  // std dev = 5.37e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.724875448584559;  // std dev = 0.061, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else return -0.12544463852839158;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5608000639012826;  // std dev = 0.077, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else return -0.11231637819360625;  // std dev = 5.58e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.41488077317972183;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.10159632948783633;  // std dev = 1.49e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.4499265902958883;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.10159632948783634;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.3189274427812301;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.06892744278123009;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.3260856484689751;  // std dev = 0.049, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926105;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.2539542744726826;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(E, D) )
%   | | | then return 0.25260046025949534;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.25260046025949534;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.3041458635747524;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.25260046025949534;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2734915191961189;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, H) )
%   | then if ( follows(A, I) )
%   | | then return -0.0851847513883968;  // std dev = 3.84e-09, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return -0.08518475138839686;  // std dev = 2.08e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return -0.08518475138839685;  // std dev = 2.63e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(D, E) )
%   | | | then return 0.2088969882117607;  // std dev = 1.05e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.20857778574240868;  // std dev = 0.000782, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.030744009180749987;  // std dev = 0.827, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.24383302938947604;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.2079393808037046;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.22261860627058408;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07877675473109179;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(E, D) )
%   | | | then return 0.1764649371579068;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.17649586576440948;  // std dev = 3.79e-05, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.0339481370546022;  // std dev = 0.816, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return 0.2037036111160566;  // std dev = 0.032, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.17576168211171583;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.18647345367435408;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, A) )
%   | | then return -0.07324622576333704;  // std dev = 9.31e-10, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.07324622576333704;  // std dev = 9.31e-10, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(D, E) )
%   | | | then return 0.15226392152875615;  // std dev = 3.64e-06, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.15089736121516098;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.06911320904361651;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.20723664292755684;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.15173051012136052;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.15173051012136052;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15982065124933076;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, I) )
%   | then return -0.06842697784420268;  // std dev = 2.08e-09, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return -0.06842697784420272;  // std dev = 9.31e-10, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.133265212481923;  // std dev = 0.003, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.16053399682676764;  // std dev = 0.085, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.13321542695482835;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then return 0.1395078316383067;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.19382550169502663;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.06419184008202625;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.493', 'seconds']
Refined model CLL: -0.084286


******************************************
Best model found
******************************************
Results 

CLL : -0.091381 

AUC ROC : 0.994363 

AUC PR : 0.435548 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 6.547 

Total Inference Time : 1.6490066051483154 

Total revision time: 14.080530977249145
Best scored revision CLL: -0.084286


Results 

CLL : -0.091381 

AUC ROC : 0.994363 

AUC PR : 0.435548 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 19.663944816589357 

Total Inference Time : 1.6490066051483154 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.528
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995126;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048774;  // std dev = 4.21e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7036003963379384;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839108;  // std dev = 7.88e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5434094932342398;  // std dev = 0.125, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936062;  // std dev = 8.33e-09, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4242968525420178;  // std dev = 1.03e-07, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | else return -0.10159632948783667;  // std dev = 0.000, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.3576301858753516;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return -0.10159632948783638;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.29730150968211366;  // std dev = 1.397, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926107;  // std dev = 1.05e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else return -0.09269127618926104;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.25097044798962914;  // std dev = 0.983, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.02e-09, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20463672945190695;  // std dev = 0.995, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109158;  // std dev = 5.77e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17164192035777515;  // std dev = 0.985, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333703;  // std dev = 1.49e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333707;  // std dev = 7.45e-09, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14673749657113638;  // std dev = 0.125, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420264;  // std dev = 5.37e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | | else return -0.06842697784420275;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11245733003436001;  // std dev = 0.174, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.346', 'seconds']
Parameter learned model CLL:-0.085529 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.0, 0, 62], 'false,true': [4.21e-08, 120, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.992, 1, 62], 'false,true': [7.88e-08, 112, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.125, 1, 62], 'false,true': [0.0, 0, 0], 'false,false': [8.33e-09, 129, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.03e-07, 0, 48], 'true,false': [0.0, 133, 0], 'false,true,true': [0.249, 1, 14], 'false,true,false': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.397, 2, 62], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.05e-08, 83, 0], 'false,false,false': [0.0, 18, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.983, 1, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.02e-09, 117, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.995, 1, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.77e-08, 104, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.985, 1, 62], 'true,false': [0.0, 0, 0], 'false,true': [1.49e-08, 111, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [7.45e-09, 28, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.125, 1, 62], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.37e-08, 115, 0], 'false,false,false': [0.0, 20, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.174, 2, 62], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 104, 0]}]
{'': [-6.87622002348484e-16, 1.4802973661668754e-17], 'false': [1.4802973661668754e-17, nan]}
{'': [0.015621063240110917, 5.551115123125783e-17], 'false': [5.551115123125783e-17, nan]}
{'': [0.01562106324011086, 6.712976427966062e-17], 'false': [nan, 6.712976427966062e-17]}
{'': [0.05389280763018907, 0.08168296848816785], 'false': [0.08168296848816785, nan], 'false,true': [0.06222222222222209, 0.0], 'true': [2.220446049250313e-16, -3.005114953872604e-17]}
{'': [0.030513199689270423, 2.308384506646365e-17], 'true': [0.030513199689270423, nan], 'false': [nan, 2.308384506646365e-17], 'false,false': [1.33761810195802e-18, -3.0839528461809902e-18], 'false,false,true': [nan, 1.33761810195802e-18]}
{'': [0.01533442957785954, 2.4671622769447922e-17], 'false': [nan, 2.4671622769447922e-17], 'false,false': [nan, 2.4671622769447922e-17]}
{'': [0.01572589039564805, 3.202566417187951e-17], 'false': [nan, 3.202566417187951e-17], 'false,false': [nan, 3.202566417187951e-17], 'false,false,false': [3.202566417187951e-17, nan]}
{'': [0.015391865713973609, 2.5559091214392094e-17], 'true': [0.015391865713973609, nan], 'false': [2.0004018461714532e-18, 1.982541115402065e-18], 'false,false': [nan, 1.982541115402065e-18]}
{'': [0.015700496108611434, 2.7961172472040977e-17], 'false': [nan, 2.7961172472040977e-17], 'false,false': [2.5100694469786148e-17, -2.7755575615628915e-18], 'false,false,true': [nan, 2.5100694469786148e-17]}
{'': [0.030147921035095747, -1.4945309946877107e-17], 'false': [nan, -1.4945309946877107e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 16.098
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(D, A) )
%   | | then return 0.8025933795439567;  // std dev = 0.229, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else return -0.14185106490048782;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7233957979926774;  // std dev = 0.037, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.6083623010998434;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.7194734122109545;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.12544463852839105;  // std dev = 8.16e-08, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.56188232070275;  // std dev = 0.078, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else return -0.11231637819360621;  // std dev = 8.82e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.42418974527395437;  // std dev = 0.032, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.2471734898238986;  // std dev = 0.811, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.4149772456589353;  // std dev = 3.65e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.1058369121619875;  // std dev = 0.481, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.43148336047280456;  // std dev = 0.050, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | | then return 0.27032001139199985;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.3181603334208782;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.007573369370241482;  // std dev = 0.812, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.32864280270486806;  // std dev = 0.160, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(A, F) )
%   | then return -0.09233526032120574;  // std dev = 3.16e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else return -0.09269127618926104;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.22560040118233768;  // std dev = 0.189, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.25339076144476225;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2685301237988631;  // std dev = 0.020, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(G, A), tweets(G, H) )
%   | | then return 0.30755426419094994;  // std dev = 0.045, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.2676974312144353;  // std dev = 0.135, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.25104459699832654;  // std dev = 0.004, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, K) )
%   | then return -0.08488252105121313;  // std dev = 0.000, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return -0.08518475138839693;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then return 0.17555290065017776;  // std dev = 0.223, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.2272654965900358;  // std dev = 0.116, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.20730786761200298;  // std dev = 0.007, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.020052289634594045;  // std dev = 0.691, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.2175942830206392;  // std dev = 0.021, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.12333262785381499;  // std dev = 0.958, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(A, H) )
%   | then return -0.07851717304814981;  // std dev = 5.48e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), tweets(A, F) )
%   | | then if ( follows(D, A), tweets(D, F) )
%   | | | then return 0.2004419343163047;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.1773884206104073;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.2161551116670175;  // std dev = 0.114, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.17659538485178816;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.17335233807459804;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1846314579740202;  // std dev = 0.015, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.19239859344713955;  // std dev = 0.074, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, K) )
%   | then return -0.07302099271468786;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return -0.07324622576333704;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(D, E) )
%   | | then return 0.1737504857805888;  // std dev = 0.014, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tweets(D, F), follows(G, D) )
%   | | | then return 0.15771230379466705;  // std dev = 0.013, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.14947664696889032;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.014154291042276964;  // std dev = 0.836, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.15200407961287554;  // std dev = 0.014, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.16730329828628845;  // std dev = 0.062, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, J) )
%   | then return -0.06822979092656027;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return -0.06842697784420276;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(D, F), recursion_accounttype(D, B) )
%   | | then if ( tweets(A, F), follows(E, D) )
%   | | | then return 0.1444882906400413;  // std dev = 0.024, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.19850158299084486;  // std dev = 0.061, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.1335337506275089;  // std dev = 0.007, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.14928185224473683;  // std dev = 0.055, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then return -0.11798929473634334;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.13872857859590004;  // std dev = 0.012, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.0051359469702799854;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(A, K) )
%   | then return -0.06401783341511025;  // std dev = 1.67e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return -0.0641918400820262;  // std dev = 6.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.351', 'seconds']
Refined model CLL: -0.083877


******************************************
Best model found
******************************************
Results 

CLL : -0.091205 

AUC ROC : 0.993599 

AUC PR : 0.3834 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 16.098 

Total Inference Time : 4.9288012981414795 

Total revision time: 30.764337373733518
Best scored revision CLL: -0.083877


Results 

CLL : -0.091205 

AUC ROC : 0.993599 

AUC PR : 0.3834 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 36.34775121307373 

Total Inference Time : 4.9288012981414795 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.415
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8475106372271711;  // std dev = 0.995, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048832;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.700562901734824;  // std dev = 1.399, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283917;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5415979800914644;  // std dev = 0.144, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360643;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.42808428654394864;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | else return -0.1015963294878365;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.3328461913058526;  // std dev = 0.294, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3110990681900968;  // std dev = 1.408, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926065;  // std dev = 7.88e-08, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | | else return -0.09269127618926094;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23579389730196;  // std dev = 1.713, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.43e-09, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2129294598564244;  // std dev = 1.000, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109148;  // std dev = 7.88e-08, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1781547553099867;  // std dev = 0.999, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333685;  // std dev = 6.50e-08, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12182841235115728;  // std dev = 0.199, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420264;  // std dev = 6.41e-08, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | | else return -0.0684269778442027;  // std dev = 1.32e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12598859305152046;  // std dev = 0.144, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.656', 'seconds']
Parameter learned model CLL:-0.087145 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.995, 1, 93], 'false,true': [0.0, 183, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.399, 2, 93], 'false,true': [0.0, 205, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.144, 2, 93], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 176, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 74], 'true,false': [0.0, 178, 0], 'false,true,true': [0.294, 2, 19], 'false,true,false': [0.0, 30, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.408, 2, 93], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.88e-08, 161, 0], 'false,false,false': [0.0, 29, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.713, 3, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.43e-09, 203, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.0, 1, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.88e-08, 178, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.999, 1, 93], 'true,false': [0.0, 0, 0], 'false,true': [6.5e-08, 140, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 31, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.199, 4, 93], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.41e-08, 142, 0], 'false,false,false': [1.32e-09, 16, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.144, 2, 93], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 175, 0]}]
{'': [0.010525124490720615, -2.0627094446587609e-16], 'false': [-2.0627094446587609e-16, nan]}
{'': [0.020609418282546997, -3.6826910085127146e-17], 'false': [-3.6826910085127146e-17, nan]}
{'': [0.02060941828254711, -1.0092936587501423e-17], 'false': [nan, -1.0092936587501423e-17]}
{'': [0.05819407915182529, 0.08119650354712285], 'false': [0.08119650354712285, nan], 'false,true': [0.08616780045351476, -1.1102230246251566e-17], 'true': [-4.080819766189765e-16, -8.233114564635993e-17]}
{'': [0.020861707718756766, 4.324026516961136e-17], 'true': [0.020861707718756766, nan], 'false': [nan, 4.324026516961136e-17], 'false,false': [3.8616453030440226e-17, 0.0], 'false,false,true': [nan, 3.8616453030440226e-17]}
{'': [0.030563663081022707, 2.953302627081697e-17], 'false': [nan, 2.953302627081697e-17], 'false,false': [nan, 2.953302627081697e-17]}
{'': [0.010642764059957116, 3.4928364819667845e-17], 'false': [nan, 3.4928364819667845e-17], 'false,false': [nan, 3.4928364819667845e-17], 'false,false,false': [3.4928364819667845e-17, nan]}
{'': [0.01062446086927651, 5.518652461587035e-17], 'true': [0.01062446086927651, nan], 'false': [3.013462495411139e-17, -7.162729191130042e-18], 'false,false': [nan, -7.162729191130042e-18]}
{'': [0.03951746183873614, 2.8809584816222416e-17], 'false': [nan, 2.8809584816222416e-17], 'false,false': [2.892834641628929e-17, 1.734723475976807e-18], 'false,false,true': [nan, 2.892834641628929e-17]}
{'': [0.02073576690751818, -5.709718412357948e-18], 'false': [nan, -5.709718412357948e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 29.896
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then return 0.8581489350995127;  // std dev = 0.000, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.1418510649004883;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then if ( follows(F, E), tweets(E, D) )
%   | | | then return 0.6729617843039782;  // std dev = 1.381, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.46947341221095423;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.7304576929861313;  // std dev = 0.072, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.724855303161106;  // std dev = 0.050, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else return -0.1254446385283914;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.5371404321237286;  // std dev = 0.984, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.589021984194405;  // std dev = 0.067, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5724936065647818;  // std dev = 0.123, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.268322783259605;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.5540370689738907;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.5755225656282291;  // std dev = 0.023, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.11231637819360647;  // std dev = 2.98e-08, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, G) )
%   | | | then return 0.414636085876222;  // std dev = 0.960, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | | else return 0.47225347568638365;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4445003986151931;  // std dev = 0.121, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.42533378619898343;  // std dev = 0.037, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), follows(E, F) )
%   | | then if ( recursion_accounttype(E, B), tweets(F, D) )
%   | | | then return 0.3078799270390096;  // std dev = 0.989, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0.14128427153105685;  // std dev = 1.254, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.32563587150595397;  // std dev = 0.063, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, G) )
%   | | then return 0.3331160230212795;  // std dev = 0.127, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return 0.22200456623787876;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, H) )
%   | then return -0.09269127618926065;  // std dev = 8.02e-08, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), follows(E, F) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(F, B) )
%   | | | then return 0.22314152732374715;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.28758777965543575;  // std dev = 0.109, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.05987691853947445;  // std dev = 0.907, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.25730408014155454;  // std dev = 0.032, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H), follows(H, A) )
%   | | | then return 0.30386851990093977;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2537595600896599;  // std dev = 0.056, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.2737863012903376;  // std dev = 0.024, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2854949166624641;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.08518475138839678;  // std dev = 5.59e-09, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), follows(A, E) )
%   | | | then return 0.22968263581395207;  // std dev = 0.042, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.22177392182452332;  // std dev = 0.042, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, F), follows(D, F) )
%   | | | then return 0.24547942430298697;  // std dev = 0.066, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.25107931146631546;  // std dev = 0.044, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.2189752020447561;  // std dev = 0.037, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2030870970531139;  // std dev = 0.004, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.20998488064499182;  // std dev = 0.006, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.22805931728831208;  // std dev = 0.038, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.07877675473109147;  // std dev = 5.89e-09, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.18929154582204613;  // std dev = 0.041, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.20738743821831984;  // std dev = 0.057, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.17533924426292843;  // std dev = 0.012, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.1822389422805912;  // std dev = 0.037, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(J, A), follows(J, I) )
%   | | | then return 0.2041567845388205;  // std dev = 0.001, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.14825275159575924;  // std dev = 0.833, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.172464267672779;  // std dev = 0.009, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.19266468658237557;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.0732462257633367;  // std dev = 8.12e-09, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.16114001170600256;  // std dev = 0.021, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.16935272340007096;  // std dev = 0.023, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.16604164794701815;  // std dev = 0.019, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.17467430337922135;  // std dev = 0.061, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A), tweets(I, H) )
%   | | | then return 0.15074518319924968;  // std dev = 0.008, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.15680930479383323;  // std dev = 0.033, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.16126519875249978;  // std dev = 0.084, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.16445776676607574;  // std dev = 0.010, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06842697784420262;  // std dev = 5.67e-09, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.14128856516341542;  // std dev = 0.030, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.15605434975442717;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, G), follows(H, D) )
%   | | | then return 0.1335495955072653;  // std dev = 0.002, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.13086875202145434;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(I, A), tweets(A, J) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.008009922489497803;  // std dev = 1.317, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return -0.19839859259439965;  // std dev = 0.826, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.1504541513632955;  // std dev = 0.068, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.13638032471085826;  // std dev = 0.038, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.06419184008202626;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.457', 'seconds']
Refined model CLL: -0.086881


******************************************
Best model found
******************************************
Results 

CLL : -0.092953 

AUC ROC : 0.993551 

AUC PR : 0.379237 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 29.896 

Total Inference Time : 8.604183435440063 

Total revision time: 53.27801240539551
Best scored revision CLL: -0.086881


Results 

CLL : -0.092953 

AUC ROC : 0.993551 

AUC PR : 0.379237 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 58.86142624473572 

Total Inference Time : 8.604183435440063 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.569
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.834526887855416;  // std dev = 1.711, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048835;  // std dev = 0.000, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7242162740927541;  // std dev = 3.95e-07, 124.000 (wgt'ed) examples reached here.  /* #pos=124 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283918;  // std dev = 0.000, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5364013067193656;  // std dev = 0.152, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360689;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4267448850432372;  // std dev = 2.86e-07, 99.000 (wgt'ed) examples reached here.  /* #pos=99 */
%   | else return -0.10159632948783652;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.42674488504323804;  // std dev = 7.45e-09, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.10159632948783623;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.30335502287948607;  // std dev = 1.711, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926049;  // std dev = 7.15e-08, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | | else return -0.09269127618926078;  // std dev = 2.95e-09, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2403850719202234;  // std dev = 1.711, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.59e-09, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22000633636475822;  // std dev = 1.91e-07, 124.000 (wgt'ed) examples reached here.  /* #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 5.77e-08, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1765776760146798;  // std dev = 0.996, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333661;  // std dev = 1.29e-07, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12821508987953223;  // std dev = 0.174, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6.32e-08, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | | else return -0.06842697784420262;  // std dev = 2.46e-09, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11939814269700423;  // std dev = 0.152, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202614;  // std dev = 4.56e-09, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.586', 'seconds']
Parameter learned model CLL:-0.087525 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.711, 3, 124], 'false,true': [0.0, 239, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [3.95e-07, 0, 124], 'false,true': [0.0, 236, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.152, 3, 124], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 259, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [2.86e-07, 0, 99], 'true,false': [0.0, 197, 0], 'false,true,true': [7.45e-09, 0, 25], 'false,true,false': [0.0, 28, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.711, 3, 124], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.15e-08, 230, 0], 'false,false,false': [2.95e-09, 48, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.711, 3, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.59e-09, 231, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.91e-07, 0, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.77e-08, 258, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.996, 1, 124], 'true,false': [0.0, 0, 0], 'false,true': [1.29e-07, 215, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 55, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.174, 4, 124], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.32e-08, 194, 0], 'false,false,false': [2.46e-09, 42, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.152, 3, 124], 'false,true': [0.0, 0, 0], 'false,false': [4.56e-09, 269, 0]}]
{'': [0.0230640461280963, -1.7094647408454293e-16], 'false': [-1.7094647408454293e-16, nan]}
{'': [1.2606403376388875e-15, -5.645201820127914e-17], 'false': [-5.645201820127914e-17, nan]}
{'': [0.02306404612809283, -9.7733918770091e-17], 'false': [nan, -9.7733918770091e-17]}
{'': [0.062136527498108204, 0.06956251594180134], 'false': [0.06956251594180134, nan], 'false,true': [7.105427357601002e-17, -1.9825411154020653e-17], 'true': [8.253779253778941e-16, -9.467891783605396e-17]}
{'': [0.023064046128092285, 6.549517123687974e-17], 'true': [0.023064046128092285, nan], 'false': [nan, 6.549517123687974e-17], 'false,false': [2.2204460492503132e-17, 9.25185853854297e-18], 'false,false,true': [nan, 2.2204460492503132e-17]}
{'': [0.02306404612809188, 3.2681889902385563e-17], 'false': [nan, 3.2681889902385563e-17], 'false,false': [nan, 3.2681889902385563e-17]}
{'': [2.936718968363317e-16, 1.290957005378089e-17], 'false': [nan, 1.290957005378089e-17], 'false,false': [nan, 1.290957005378089e-17], 'false,false,false': [1.290957005378089e-17, nan]}
{'': [0.00793600000000011, 4.5231308410654523e-17], 'true': [0.00793600000000011, nan], 'false': [7.745742032268534e-17, -1.0092936587501423e-17], 'false,false': [nan, -1.0092936587501423e-17]}
{'': [0.030273437500000083, 1.034953667023451e-17], 'false': [nan, 1.034953667023451e-17], 'false,false': [2.0602076745621462e-17, 6.6084703846735505e-18], 'false,false,true': [nan, 2.0602076745621462e-17]}
{'': [0.023064046128092236, 2.063611569935235e-17], 'false': [nan, 2.063611569935235e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 38.303
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.858148935099512;  // std dev = 1.03e-07, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.7993254056877469;  // std dev = 1.372, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.8581489350995117;  // std dev = 2.92e-07, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else return -0.14185106490048818;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), follows(E, D) )
%   | | | then return 0.6735283330255455;  // std dev = 0.966, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.7301700255088918;  // std dev = 0.061, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return 0.6480448407823829;  // std dev = 0.258, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(F, G) )
%   | | | then return 0.6449284131542251;  // std dev = 0.955, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.10040529557005502;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.7194734122109548;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.6425503352878774;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.12544463852839194;  // std dev = 0.000, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), follows(F, E) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.5391967598542914;  // std dev = 0.986, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | | else return 0.4252808398578317;  // std dev = 1.307, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else if ( follows(E, G), follows(G, A) )
%   | | | then return 0.4944504593661805;  // std dev = 0.959, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.5759845709812942;  // std dev = 0.188, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.5664548814428361;  // std dev = 0.092, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else return -0.11231637819360682;  // std dev = 0.000, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, E), follows(F, A) )
%   | | | then return 0.40471333117507113;  // std dev = 0.985, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | | else return 0.4369659433546307;  // std dev = 0.087, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.4321383241334489;  // std dev = 0.242, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.44062070461661845;  // std dev = 0.042, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.10159632948783626;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.34333239175955577;  // std dev = 0.206, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | else if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return -0.011065734798791619;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3253733676126236;  // std dev = 0.053, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.32598086484253774;  // std dev = 0.089, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926053;  // std dev = 5.77e-08, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.26697746217776075;  // std dev = 0.081, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.2503036290554974;  // std dev = 0.013, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.27466920789531973;  // std dev = 0.009, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2715723936785104;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(A, I) )
%   | | | then return -0.04172651877087354;  // std dev = 1.175, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.1761930299026925;  // std dev = 0.972, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, J), follows(J, A) )
%   | | | then return 0.2638385509601495;  // std dev = 0.077, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.25382026001703;  // std dev = 0.036, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else return -0.08518475138839678;  // std dev = 5.67e-09, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, D), follows(E, A) )
%   | | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | | then return 0.1921759870941219;  // std dev = 0.989, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.35324327822656637;  // std dev = 0.780, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.3062185038869053;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.22093765738451338;  // std dev = 0.188, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), tweets(G, H) )
%   | | | then return 0.09389840202062169;  // std dev = 0.924, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.2643911376176836;  // std dev = 0.995, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.1611913098123743;  // std dev = 0.979, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.12535429281880847;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.07877675473109143;  // std dev = 3.36e-09, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.15107051524190554;  // std dev = 0.982, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.1854997379886823;  // std dev = 0.020, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.23296740753586315;  // std dev = 0.141, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.18911658498787862;  // std dev = 0.172, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.12560936067677003;  // std dev = 1.071, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.17788397263730657;  // std dev = 0.028, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.14607203552940842;  // std dev = 0.799, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.19398902886245012;  // std dev = 0.139, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.0732462257633367;  // std dev = 8.23e-09, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(D, G) )
%   | | | then return 0.1618938503954216;  // std dev = 0.034, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.18208067897768643;  // std dev = 0.064, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(H, A), follows(A, H) )
%   | | | then return 0.20473170497012058;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.22009331635528412;  // std dev = 0.097, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then if ( follows(J, I), follows(J, A) )
%   | | | then return 0.16270131767615886;  // std dev = 0.043, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.14998492717386314;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.09726363021092839;  // std dev = 1.330, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   | | | else return 0.15814398439738642;  // std dev = 0.031, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.06842697784420268;  // std dev = 9.31e-10, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.14651248173022166;  // std dev = 0.143, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.09629028458698653;  // std dev = 0.948, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else if ( recursion_accounttype(D, B), tweets(D, G) )
%   | | | then return 0.17072493073562509;  // std dev = 0.118, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.13819211025241546;  // std dev = 0.042, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.1401778292359239;  // std dev = 0.001, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.1539197392391184;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.11661093983588047;  // std dev = 0.865, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.1461573322481038;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06419184008202619;  // std dev = 5.37e-08, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.000', 'seconds']
Refined model CLL: -0.084316


******************************************
Best model found
******************************************
Results 

CLL : -0.090313 

AUC ROC : 0.9945 

AUC PR : 0.429235 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 38.303 

Total Inference Time : 9.739958763122559 

Total revision time: 66.60305883598328
Best scored revision CLL: -0.084316


Results 

CLL : -0.090313 

AUC ROC : 0.9945 

AUC PR : 0.429235 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 72.18647267532349 

Total Inference Time : 9.739958763122559 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.981
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8331489350995097;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048796;  // std dev = 0.000, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6874543664644656;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839202;  // std dev = 0.000, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5323612732845798;  // std dev = 0.189, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360665;  // std dev = 0.000, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4293420132282615;  // std dev = 0.996, 129.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=128 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4026111925920676;  // std dev = 0.182, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return -0.10159632948783619;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.31797081900871965;  // std dev = 1.714, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926049;  // std dev = 1.30e-07, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23347904054217583;  // std dev = 2.362, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.96e-09, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20134768173117848;  // std dev = 1.977, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 4.71e-08, 334.000 (wgt'ed) examples reached here.  /* #neg=334 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1742002267170771;  // std dev = 1.715, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333681;  // std dev = 1.17e-07, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14852410347552364;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420275;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
%   | | else return -0.06842697784420262;  // std dev = 2.08e-09, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13502553586563817;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202593;  // std dev = 7.03e-09, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.354', 'seconds']
Parameter learned model CLL:-0.087471 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 282, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.404, 6, 156], 'false,true': [0.0, 313, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.189, 6, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 322, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.996, 1, 128], 'true,false': [0.0, 256, 0], 'false,true,true': [0.182, 1, 28], 'false,true,false': [0.0, 54, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.714, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.3e-07, 255, 0], 'false,false,false': [0.0, 51, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.362, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.96e-09, 287, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.977, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.71e-08, 334, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.715, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.17e-07, 255, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 59, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 253, 0], 'false,false,false': [2.08e-09, 64, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false': [7.03e-09, 308, 0]}]
{'': [0.024375000000006076, -1.8897413185109047e-17], 'false': [-1.8897413185109047e-17, nan]}
{'': [0.035665294924553885, -8.796655274985266e-17], 'false': [-8.796655274985266e-17, nan]}
{'': [0.03566529492455353, -4.964972532485172e-17], 'false': [nan, -4.964972532485172e-17]}
{'': [0.0653825824302794, 0.0694229400331931], 'false': [0.0694229400331931, nan], 'false,true': [0.033293697978596666, 0.0], 'true': [0.007691845441980471, -6.591949208711867e-17]}
{'': [0.01848316754844686, 1.0158903493302086e-16], 'true': [0.01848316754844686, nan], 'false': [nan, 1.0158903493302086e-16], 'false,false': [6.617799989922502e-17, -2.6122894697062506e-17], 'false,false,true': [nan, 6.617799989922502e-17]}
{'': [0.03444036278048265, 3.558903075453463e-17], 'false': [nan, 3.558903075453463e-17], 'false,false': [nan, 3.558903075453463e-17]}
{'': [0.024419345771074824, 6.648042063623692e-18], 'false': [nan, 6.648042063623692e-18], 'false,false': [nan, 6.648042063623692e-18], 'false,false,false': [6.648042063623692e-18, nan]}
{'': [0.018490695149372186, 2.5457343239812507e-17], 'true': [0.018490695149372186, nan], 'false': [5.3987315707262513e-17, -1.034953667023451e-17], 'false,false': [nan, -1.034953667023451e-17]}
{'': [0.018446504798996465, -7.074607286254941e-17], 'false': [nan, -7.074607286254941e-17], 'false,false': [-1.0531759917392789e-17, 4.336808689942018e-18], 'false,false,true': [nan, -1.0531759917392789e-17]}
{'': [0.012472597140103915, 4.9743758895542726e-17], 'false': [nan, 4.9743758895542726e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 45.126
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.8295775065280829;  // std dev = 0.986, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.8581489350995122;  // std dev = 5.96e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.6706489350995123;  // std dev = 1.561, 16.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=13 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return 0.7331489350995123;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.8581489350995118;  // std dev = 1.79e-07, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else return -0.14185106490048766;  // std dev = 1.91e-07, 332.000 (wgt'ed) examples reached here.  /* #neg=332 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.7233351290341767;  // std dev = 0.018, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.615416631048769;  // std dev = 1.335, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.14868621682254277;  // std dev = 1.098, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.6910468379435551;  // std dev = 0.975, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else return 0.7249287871521165;  // std dev = 0.146, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   else return -0.12544463852839208;  // std dev = 0.000, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.5710207377181887;  // std dev = 0.227, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | | then return 0.4327225082837488;  // std dev = 0.911, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.5129869660957737;  // std dev = 1.346, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | else return 0.5610377331654172;  // std dev = 0.191, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   else return -0.11231637819360689;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.40280350599501824;  // std dev = 0.995, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.44375874924131076;  // std dev = 0.040, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.4437678130068327;  // std dev = 0.887, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.4247811239955767;  // std dev = 0.115, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( tweets(A, I) )
%   | | then return 0.41481013140614986;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.4148101314061498;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2898101314061497;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return -0.10159632948783624;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.29513530189685755;  // std dev = 1.290, 58.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=56 */
%   | | | else return 0.3277514722973373;  // std dev = 1.005, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else return -0.01132029337155734;  // std dev = 0.828, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.33043939339354944;  // std dev = 0.132, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926051;  // std dev = 1.02e-07, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | else return -0.092691276189261;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), follows(A, F) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.2648188248198041;  // std dev = 0.049, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.29283431266906923;  // std dev = 0.059, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.015344955309545013;  // std dev = 1.358, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.2424078998293352;  // std dev = 1.013, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(H, I) )
%   | | | then return 0.2652642432377434;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2823829881251093;  // std dev = 0.018, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.25093888396332137;  // std dev = 0.037, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.2638714902209087;  // std dev = 0.045, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.08518475138839678;  // std dev = 5.96e-09, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), follows(D, F) )
%   | | | then return 0.2181202091526841;  // std dev = 0.078, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | | | else return 0.01813686916989423;  // std dev = 0.897, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( recursion_accounttype(D, B), follows(G, A) )
%   | | | then return 0.3301376083919158;  // std dev = 0.116, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.22235490537685618;  // std dev = 0.174, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.15074207181531854;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.12352918997264169;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13610740651611494;  // std dev = 0.951, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else return -0.07877675473109143;  // std dev = 2.98e-08, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.14677847537784647;  // std dev = 1.384, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | | else return 0.11864707122708307;  // std dev = 0.963, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( tweets(E, G), recursion_accounttype(E, B) )
%   | | | then return -0.12468200038580883;  // std dev = 0.828, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.11773438963091089;  // std dev = 1.493, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | else if ( follows(A, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.1904020597984522;  // std dev = 0.040, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.17269111317895403;  // std dev = 0.028, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.18402022832106302;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.20146449464287475;  // std dev = 0.038, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07324622576333704;  // std dev = 4.84e-09, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.16487382210189633;  // std dev = 0.119, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | | else return 0.044811190108650756;  // std dev = 0.829, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.1661708835516485;  // std dev = 0.059, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.19635215260752328;  // std dev = 0.109, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(A, G), follows(G, H) )
%   | | | then return 0.15913579915445042;  // std dev = 0.034, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.1486383448418196;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.08353460398520793;  // std dev = 1.170, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.1674422254420848;  // std dev = 0.030, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06842697784420308;  // std dev = 0.000, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( recursion_accounttype(D, B), follows(D, E) )
%   | | then if ( tweets(A, F), follows(A, D) )
%   | | | then return 0.14421503174291952;  // std dev = 0.101, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.137133881559908;  // std dev = 0.027, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(D, E), recursion_accounttype(E, B) )
%   | | | then return 0.21161392545134214;  // std dev = 0.109, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.16472949758414007;  // std dev = 0.107, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.14901076450436754;  // std dev = 0.007, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return -0.05384206619645371;  // std dev = 1.264, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.11906676383699674;  // std dev = 0.927, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   else if ( follows(I, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else return -0.06419184008202622;  // std dev = 0.000, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.068', 'seconds']
Refined model CLL: -0.085065


******************************************
Best model found
******************************************
Results 

CLL : -0.090591 

AUC ROC : 0.99451 

AUC PR : 0.436563 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 45.126 

Total Inference Time : 10.962960481643677 

Total revision time: 81.01389086914062
Best scored revision CLL: -0.085065


Results 

CLL : -0.090591 

AUC ROC : 0.99451 

AUC PR : 0.436563 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 86.59730470848083 

Total Inference Time : 10.962960481643677 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.45
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8196873966379734;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6887087008157129;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839152;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5339272109474109;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360628;  // std dev = 5.74e-09, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4397138875767132;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.10159632948783626;  // std dev = 3.16e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.10159632948783633;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.2973452348728359;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926105;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23455280160069042;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 2.46e-09, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2290054976624498;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109179;  // std dev = 7.45e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.11701629861300836;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333704;  // std dev = 1.05e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.09957873912932226;  // std dev = 0.262, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0684269778442027;  // std dev = 1.49e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1598243244286857;  // std dev = 5.27e-09, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.921', 'seconds']
Parameter learned model CLL:-0.086721 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.981, 1, 25], 'false,true': [3.8e-08, 37, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.981, 1, 25], 'false,true': [0.0, 44, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 1, 25], 'false,true': [0.0, 0, 0], 'false,false': [5.74e-09, 60, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 25], 'true,false': [3.16e-08, 51, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.0, 2, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.981, 1, 25], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 32, 0], 'false,false,false': [0.0, 5, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.981, 1, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.46e-09, 62, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.45e-09, 52, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.361, 2, 25], 'true,false': [0.0, 0, 0], 'false,true': [1.05e-08, 40, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 2, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.262, 2, 25], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.49e-08, 52, 0], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [5.27e-09, 0, 25], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 47, 0]}]
{'': [0.03698224852071082, 3.900783600034334e-17], 'false': [3.900783600034334e-17, nan]}
{'': [0.03698224852070993, -2.7755575615628914e-17], 'false': [-2.7755575615628914e-17, nan]}
{'': [0.036982248520710304, 3.3306690738754695e-17], 'false': [nan, 3.3306690738754695e-17]}
{'': [0.06468080984254661, 0.0], 'true': [-1.0658141036401502e-16, 1.959217102279688e-17], 'false': [0.0, nan], 'false,true': [nan, 0.0]}
{'': [0.036982248520710116, -7.50150692314295e-18], 'true': [0.036982248520710116, nan], 'false': [nan, -7.50150692314295e-18], 'false,false': [-1.0408340855860843e-17, 0.0], 'false,false,true': [nan, -1.0408340855860843e-17]}
{'': [0.03698224852071001, 5.3720468933475315e-18], 'false': [nan, 5.3720468933475315e-18], 'false,false': [nan, 5.3720468933475315e-18]}
{'': [-5.329070518200751e-17, 1.0675221390626506e-18], 'false': [nan, 1.0675221390626506e-18], 'false,false': [nan, 1.0675221390626506e-18], 'false,false,false': [1.0675221390626506e-18, nan]}
{'': [0.06858710562414268, 3.3042351923367752e-18], 'true': [0.06858710562414268, nan], 'false': [2.7755575615628915e-18, 0.0], 'false,false': [nan, 0.0]}
{'': [0.06858710562414265, 4.956352788505163e-18], 'false': [nan, 4.956352788505163e-18], 'false,false': [4.270088556250602e-18, 0.0], 'false,false,true': [nan, 4.270088556250602e-18]}
{'': [2.6645352591003756e-17, -2.362176648138631e-18], 'false': [nan, -2.362176648138631e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 4.727
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.14185106490048768;  // std dev = 4.94e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7194734122109544;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.1254446385283916;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.1123163781936063;  // std dev = 3.65e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return 0.3586900547465451;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.16751358415830997;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then return -0.10159632948783633;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.2218188510762997;  // std dev = 0.416, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.10159632948783628;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.33012847563657943;  // std dev = 0.027, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.12742261766766405;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, E) )
%   | then return -0.09137841749769376;  // std dev = 0.022, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return -0.09269127618926096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), follows(A, D) )
%   | | | then return 0.26467550712390103;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.2533866538848334;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.006208867194600287;  // std dev = 0.856, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.34798118971220005;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.08509268341423187;  // std dev = 0.009, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( tweets(A, F), follows(A, D) )
%   | | | then return 0.21644872470301066;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.20849560045143167;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2522138484109594;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.023704842702865436;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, G), follows(G, H) )
%   | then return -0.07887877198852862;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( follows(A, I) )
%   | | then return -0.07057421993277017;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.07878343645310701;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( tweets(A, F), follows(A, D) )
%   | | | then return 0.18198870106951842;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.17617024118663116;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.20766574344639432;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.26901790668781134;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return -0.07333471802962245;  // std dev = 9.13e-09, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else return -0.06608298691264224;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.07325202209718612;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.15726234306793885;  // std dev = 0.005, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.03855125546093587;  // std dev = 0.905, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.030507952138724148;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then return -0.0685044311173253;  // std dev = 7.45e-09, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | else return -0.0621196953135216;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.06843205145605082;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.1375275035434391;  // std dev = 0.004, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.16914421336011815;  // std dev = 0.024, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.22476322695073014;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), follows(F, G) )
%   | then return -0.06426017277163464;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else if ( follows(A, H) )
%   | | then return -0.05859748980882963;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.0641963165149017;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.973', 'seconds']
Refined model CLL: -0.084642


******************************************
Best model found
******************************************
Results 

CLL : -0.084046 

AUC ROC : 0.995136 

AUC PR : 0.437229 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 4.727 

Total Inference Time : 1.868833303451538 

Total revision time: 11.075344278335571
Best scored revision CLL: -0.084642


Results 

CLL : -0.084046 

AUC ROC : 0.995136 

AUC PR : 0.437229 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 16.65875811767578 

Total Inference Time : 1.868833303451538 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.341
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8385410919622573;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048766;  // std dev = 7.60e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6849522692547485;  // std dev = 1.387, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839136;  // std dev = 0.000, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5686895726434326;  // std dev = 3.16e-08, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360618;  // std dev = 8.33e-09, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.40746953290658844;  // std dev = 0.990, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4274695329065882;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3318008895624173;  // std dev = 0.004, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926098;  // std dev = 4.21e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2431189804364329;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839682;  // std dev = 5.43e-09, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2184076352836599;  // std dev = 0.003, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109161;  // std dev = 5.16e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1449560771189796;  // std dev = 1.387, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333707;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14308518181123842;  // std dev = 0.139, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420265;  // std dev = 5.16e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | else return -0.06842697784420274;  // std dev = 9.31e-10, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1245211906738543;  // std dev = 0.139, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.698', 'seconds']
Parameter learned model CLL:-0.094083 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.99, 1, 50], 'false,true': [7.6e-08, 113, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.387, 2, 50], 'false,true': [0.0, 100, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [3.16e-08, 0, 50], 'false,true': [0.0, 0, 0], 'false,false': [8.33e-09, 118, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.99, 1, 49], 'true,false': [0.0, 110, 0], 'false,true,true': [0.0, 0, 1], 'false,true,false': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.004, 0, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.21e-08, 96, 0], 'false,false,false': [0.0, 9, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.99, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.43e-09, 97, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.003, 0, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.16e-08, 90, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.387, 2, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 89, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 6, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.139, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.16e-08, 109, 0], 'false,false,false': [9.31e-10, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.139, 1, 50], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 105, 0]}]
{'': [0.019223375624760057, 5.1089909097794814e-17], 'false': [5.1089909097794814e-17, nan]}
{'': [0.036982248520710956, -1.3322676295501878e-17], 'false': [-1.3322676295501878e-17, nan]}
{'': [9.947598300641404e-16, 7.150588972162025e-17], 'false': [nan, 7.150588972162025e-17]}
{'': [0.06180133935174176, 0.03887648427099392], 'true': [0.019599999999999902, -6.0557619525008536e-18], 'false': [0.03887648427099392, nan], 'false,true': [0.0, 0.0]}
{'': [3.8287328129271715e-07, 3.172065784643304e-17], 'true': [3.8287328129271715e-07, nan], 'false': [nan, 3.172065784643304e-17], 'false,false': [1.850371707708594e-17, 0.0], 'false,false,true': [nan, 1.850371707708594e-17]}
{'': [0.019220696237764436, 3.0903115118432194e-17], 'false': [nan, 3.0903115118432194e-17], 'false,false': [nan, 3.0903115118432194e-17]}
{'': [2.259962459838505e-07, 2.960594732333751e-17], 'false': [nan, 2.960594732333751e-17], 'false,false': [nan, 2.960594732333751e-17], 'false,false,false': [2.960594732333751e-17, nan]}
{'': [0.03697801143399177, -8.18059070776431e-18], 'true': [0.03697801143399177, nan], 'false': [-7.484649604214538e-18, 0.0], 'false,false': [nan, 0.0]}
{'': [0.01922143508468971, 2.6122894697062506e-17], 'false': [nan, 2.6122894697062506e-17], 'false,false': [2.4445277606425466e-17, 0.0], 'false,false,true': [nan, 2.4445277606425466e-17]}
{'': [0.01922160693200813, -1.586032892321652e-17], 'false': [nan, -1.586032892321652e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 17.995
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.7748156017661786;  // std dev = 1.354, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048763;  // std dev = 8.16e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then return 0.7306450758168441;  // std dev = 0.073, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.12544463852839138;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5678807938469617;  // std dev = 0.080, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.5730078135873825;  // std dev = 0.041, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.08689136319126546;  // std dev = 0.834, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.5584280629580017;  // std dev = 0.038, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.28261302695099105;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.1123163781936062;  // std dev = 7.74e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.43408823182876144;  // std dev = 0.263, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.47614234546199974;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.10159632948783634;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then return 0.33403311825130233;  // std dev = 0.188, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.31200485415091467;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.019295779419275367;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.22957422516606368;  // std dev = 0.950, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(A, H) )
%   | then return -0.09269127618926108;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(A, F), follows(G, A) )
%   | | | then return 0.2587389573108478;  // std dev = 0.049, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.30748548339411225;  // std dev = 0.139, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.35175771064337646;  // std dev = 0.078, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -7.783656244553239E-4;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.24922163437554468;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.28811745316254156;  // std dev = 0.044, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(J, A) )
%   | then if ( follows(A, J) )
%   | | then return -0.08518475138839683;  // std dev = 4.84e-09, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else return -0.08518475138839693;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return -0.08518475138839693;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A), follows(F, E) )
%   | | then if ( recursion_accounttype(F, B), recursion_accounttype(E, B) )
%   | | | then return 0.16276213841407147;  // std dev = 0.973, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.2112255734274509;  // std dev = 0.039, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.2731122155413082;  // std dev = 0.127, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.09328328739210168;  // std dev = 1.163, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.20554529912493769;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2328990501223275;  // std dev = 0.039, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.07877675473109166;  // std dev = 4.47e-09, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else return -0.07877675473109179;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return -0.07877675473109179;  // std dev = 5.27e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( recursion_accounttype(E, B), follows(E, F) )
%   | | | then return 0.186709923846169;  // std dev = 0.017, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.0645789293349556;  // std dev = 0.938, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( recursion_accounttype(E, B), follows(A, G) )
%   | | | then return 0.17694204774153113;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.22886673956983938;  // std dev = 0.082, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.23854694813142024;  // std dev = 0.084, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1822707030678342;  // std dev = 0.029, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.20957315525404308;  // std dev = 0.081, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.18627410714368145;  // std dev = 0.021, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07324622576333704;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F), follows(A, E) )
%   | | then if ( recursion_accounttype(D, B), tweets(D, F) )
%   | | | then return 0.1630629594324034;  // std dev = 0.018, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.1576574351045453;  // std dev = 0.031, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(E, A), follows(D, A) )
%   | | | then return 0.20851960136405875;  // std dev = 0.051, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.16176750928892092;  // std dev = 0.098, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.2081517698312804;  // std dev = 0.011, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, A) )
%   | | then if ( follows(A, H) )
%   | | | then return -0.06842697784420268;  // std dev = 1.97e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.06842697784420272;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, D) )
%   | | | then return 0.09598549077172733;  // std dev = 0.978, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.1385780149674995;  // std dev = 0.036, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.14237970286176624;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.09078350001994404;  // std dev = 0.891, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.16953942528303675;  // std dev = 0.058, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.13663774989347632;  // std dev = 0.023, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.15157022035837353;  // std dev = 0.057, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.13917673671327455;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.06419184008202626;  // std dev = 0.000, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.668', 'seconds']
Refined model CLL: -0.092175


******************************************
Best model found
******************************************
Results 

CLL : -0.08615 

AUC ROC : 0.995045 

AUC PR : 0.46583 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 17.995 

Total Inference Time : 3.44885516166687 

Total revision time: 28.94137886619568
Best scored revision CLL: -0.092175


Results 

CLL : -0.08615 

AUC ROC : 0.995045 

AUC PR : 0.46583 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 34.52479270553589 

Total Inference Time : 3.44885516166687 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.87
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8321749091254866;  // std dev = 1.396, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004881;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6987117541100454;  // std dev = 1.396, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283914;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5409011915240609;  // std dev = 0.159, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360617;  // std dev = 8.43e-09, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.41895471854361277;  // std dev = 0.993, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4324682320571266;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.10159632948783627;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.30777704878889073;  // std dev = 1.398, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926076;  // std dev = 6.83e-08, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | | else return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.25600493799070545;  // std dev = 0.993, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.27e-09, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20869882985685353;  // std dev = 0.993, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109151;  // std dev = 7.60e-08, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.13728989937571556;  // std dev = 1.949, 79.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333682;  // std dev = 7.74e-08, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14188704127138063;  // std dev = 0.159, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420264;  // std dev = 5.96e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | | else return -0.06842697784420272;  // std dev = 9.31e-10, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13580552915862162;  // std dev = 0.114, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.189', 'seconds']
Parameter learned model CLL:-0.092292 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.396, 2, 75], 'false,true': [0.0, 153, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.396, 2, 75], 'false,true': [0.0, 165, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.159, 2, 75], 'false,true': [0.0, 0, 0], 'false,false': [8.43e-09, 128, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.993, 1, 73], 'true,false': [0.0, 164, 0], 'false,true,true': [0.0, 0, 2], 'false,true,false': [1.32e-09, 8, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.398, 2, 75], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.83e-08, 130, 0], 'false,false,false': [0.0, 7, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.993, 1, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.27e-09, 154, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.993, 1, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.6e-08, 137, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.949, 4, 75], 'true,false': [0.0, 0, 0], 'false,true': [7.74e-08, 146, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.159, 2, 75], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.96e-08, 127, 0], 'false,false,false': [9.31e-10, 6, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.114, 1, 75], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 137, 0]}]
{'': [0.025299375948725576, -1.248093857748542e-16], 'false': [-1.248093857748542e-16, nan]}
{'': [0.025299375948725947, 0.0], 'false': [0.0, nan]}
{'': [0.025299375948727193, 7.112366251504909e-17], 'false': [nan, 7.112366251504909e-17]}
{'': [0.06220106081127698, 0.04563599294371416], 'true': [0.01333089846603357, -7.040438692744895e-17], 'false': [0.04563599294371416, nan], 'false,true': [0.0, 1.734723475976807e-18]}
{'': [0.025371530032187842, 3.727756141077168e-17], 'true': [0.025371530032187842, nan], 'false': [nan, 3.727756141077168e-17], 'false,false': [3.586874387250506e-17, 0.0], 'false,false,true': [nan, 3.586874387250506e-17]}
{'': [0.012983109063196429, 2.739511359464672e-17], 'false': [nan, 2.739511359464672e-17], 'false,false': [nan, 2.739511359464672e-17]}
{'': [0.012983293164340262, 4.2139852029567983e-17], 'false': [nan, 4.2139852029567983e-17], 'false,false': [nan, 4.2139852029567983e-17], 'false,false,false': [4.2139852029567983e-17, nan]}
{'': [0.04806405792213766, 4.4408920985006264e-17], 'true': [0.04806405792213766, nan], 'false': [4.1063043376546883e-17, 0.0], 'false,false': [nan, 0.0]}
{'': [0.025296929193798078, 2.921639538487254e-17], 'false': [nan, 2.921639538487254e-17], 'false,false': [2.7974123455122054e-17, 5.782411586589357e-19], 'false,false,true': [nan, 2.7974123455122054e-17]}
{'': [0.01298365800196335, -1.2966108316790149e-17], 'false': [nan, -1.2966108316790149e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 20.955
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( recursion_accounttype(D, B), follows(D, F) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.14185106490048813;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.7226608751527158;  // std dev = 0.086, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.5528067455442877;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.7194734122109543;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.014987705947960415;  // std dev = 0.850, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.6194734122109542;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.7267858271949944;  // std dev = 0.083, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.12544463852839133;  // std dev = 4.21e-08, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(F, A), recursion_accounttype(D, B) )
%   | | then if ( tweets(D, G), follows(A, F) )
%   | | | then return 0.5302899487106731;  // std dev = 0.990, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | | else return 0.22968733408399822;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5779869553796605;  // std dev = 0.183, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5779698704895324;  // std dev = 0.061, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.3013875358962232;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.05356002548795781;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.5535600254879579;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360626;  // std dev = 9.06e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.43149928909275964;  // std dev = 0.226, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.33655595189578913;  // std dev = 0.933, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.4516361886929094;  // std dev = 0.148, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.10159632948783644;  // std dev = 0.000, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.562456086271891;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.10159632948783627;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3348846576662589;  // std dev = 0.187, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return -0.17187801918211212;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.27823471743936673;  // std dev = 0.895, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.3215946569808462;  // std dev = 0.099, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926079;  // std dev = 6.66e-08, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.2437579622322567;  // std dev = 1.012, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return 0.16064448792017266;  // std dev = 0.906, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( recursion_accounttype(D, B), tweets(D, G) )
%   | | | then return 0.2572082504256526;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.04033034300949442;  // std dev = 1.206, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(H, A) )
%   | | then return 0.29444843759799255;  // std dev = 0.099, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.29141174194918595;  // std dev = 0.055, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.24708368154521373;  // std dev = 0.001, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( tweets(A, J) )
%   | then return -0.08518475138839678;  // std dev = 4.37e-09, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | else return -0.08518475138839682;  // std dev = 1.18e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(A, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.20974634188687843;  // std dev = 0.023, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.23544829757430202;  // std dev = 0.045, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.28754965952180583;  // std dev = 0.044, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.25221740169168017;  // std dev = 0.062, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.30902932245115433;  // std dev = 0.224, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.2352969029045545;  // std dev = 0.047, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2040273928384629;  // std dev = 0.001, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( tweets(A, K) )
%   | then return -0.0787767547310916;  // std dev = 5.35e-09, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return -0.07877675473109176;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), tweets(D, F) )
%   | | then if ( follows(A, G), follows(D, G) )
%   | | | then return 0.17712603029175106;  // std dev = 0.020, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.20962774969122286;  // std dev = 0.041, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.20994556133739106;  // std dev = 0.061, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2401964749006017;  // std dev = 0.193, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.19575741797756754;  // std dev = 0.041, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.04762638378147166;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | | then return 0.09433964950286915;  // std dev = 0.963, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.20354771118005516;  // std dev = 0.131, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.0732462257633368;  // std dev = 6.91e-09, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, F) )
%   | | then if ( follows(A, G), follows(D, G) )
%   | | | then return 0.15276801164805326;  // std dev = 0.018, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.1770993726137234;  // std dev = 0.036, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(D, H), follows(H, A) )
%   | | | then return 0.19036429534448077;  // std dev = 0.012, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.17904125814323185;  // std dev = 0.052, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(J, A), tweets(J, I) )
%   | | | then return 0.08897002646306486;  // std dev = 0.968, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.165435213244913;  // std dev = 0.037, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return -0.41817543375006183;  // std dev = 0.784, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.01956958291486523;  // std dev = 0.949, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.06842697784420264;  // std dev = 5.19e-09, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.11279882475364118;  // std dev = 1.012, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | | else return -0.007584077702526976;  // std dev = 1.286, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.17778130307166418;  // std dev = 0.163, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.14178728898741175;  // std dev = 0.042, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.16742805751493792;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.06419184008202626;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.953', 'seconds']
Refined model CLL: -0.088715


******************************************
Best model found
******************************************
Results 

CLL : -0.083664 

AUC ROC : 0.995679 

AUC PR : 0.418348 

Precision : 0.343612 

Recall : 1.0 

F1 : 0.511475 

Total Learning Time : 20.955 

Total Inference Time : 5.218982934951782 

Total revision time: 36.22886295318604
Best scored revision CLL: -0.088715


Results 

CLL : -0.083664 

AUC ROC : 0.995679 

AUC PR : 0.418348 

Precision : 0.343612 

Recall : 1.0 

F1 : 0.511475 

Total Learning Time : 41.81227679252625 

Total Inference Time : 5.218982934951782 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.603
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8105298874804635;  // std dev = 2.182, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048838;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.681364199327158;  // std dev = 2.182, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283917;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5568150256916657;  // std dev = 0.139, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360665;  // std dev = 0.000, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4075290110870999;  // std dev = 1.705, 98.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=95 */
%   | else return -0.1015963294878365;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43814125598505954;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.1015963294878362;  // std dev = 2.28e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3039644726073165;  // std dev = 1.904, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926057;  // std dev = 9.19e-08, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | | else return -0.09269127618926087;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23808347625627446;  // std dev = 1.961, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.35e-09, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2023916166057725;  // std dev = 1.706, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109147;  // std dev = 7.45e-08, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.19746805358028602;  // std dev = 0.010, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333667;  // std dev = 1.13e-07, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333698;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13890887631759188;  // std dev = 0.168, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420262;  // std dev = 7.60e-08, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | | else return -0.06842697784420268;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12037410319315298;  // std dev = 0.168, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.246', 'seconds']
Parameter learned model CLL:-0.093753 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.182, 5, 100], 'false,true': [0.0, 197, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.182, 5, 100], 'false,true': [0.0, 210, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.139, 2, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 208, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.705, 3, 95], 'true,false': [0.0, 185, 0], 'false,true,true': [0.0, 0, 5], 'false,true,false': [2.28e-09, 17, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.904, 4, 100], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [9.19e-08, 198, 0], 'false,false,false': [1.32e-09, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.961, 4, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.35e-09, 194, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.706, 3, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.45e-08, 194, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.01, 0, 100], 'true,false': [0.0, 0, 0], 'false,true': [1.13e-07, 192, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.63e-09, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.168, 3, 100], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.6e-08, 177, 0], 'false,false,false': [0.0, 15, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.168, 3, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 204, 0]}]
{'': [0.0453514739229045, -2.366972945901349e-16], 'false': [-2.366972945901349e-16, nan]}
{'': [0.045351473922902875, -4.017949993881519e-17], 'false': [-4.017949993881519e-17, nan]}
{'': [0.01922337562475863, -5.337610695313253e-17], 'false': [nan, -5.337610695313253e-17]}
{'': [0.06895406793911103, 0.05116098388353192], 'true': [0.029675135360266804, -9.121832418541827e-17], 'false': [0.05116098388353192, nan], 'false,true': [-2.2204460492503132e-17, 4.89804275569922e-18]}
{'': [0.03485045830190065, 4.355898948290088e-17], 'true': [0.03485045830190065, nan], 'false': [nan, 4.355898948290088e-17], 'false,false': [4.261462114722823e-17, 1.261617073437678e-18], 'false,false,true': [nan, 4.261462114722823e-17]}
{'': [0.03696143476853564, 2.8613995480029805e-17], 'false': [nan, 2.8613995480029805e-17], 'false,false': [nan, 2.8613995480029805e-17]}
{'': [0.028263940181280707, 2.8613995480029805e-17], 'false': [nan, 2.8613995480029805e-17], 'false,false': [nan, 2.8613995480029805e-17], 'false,false,false': [2.8613995480029805e-17, nan]}
{'': [1.0993382465862567e-06, 7.219184199533037e-17], 'true': [1.0993382465862567e-06, nan], 'false': [6.707597440443654e-17, 6.30808536718839e-19], 'false,false': [nan, 6.30808536718839e-19]}
{'': [0.02826671691946873, 3.122502256758253e-17], 'false': [nan, 3.122502256758253e-17], 'false,false': [3.261672162740573e-17, -2.7755575615628915e-18], 'false,false,true': [nan, 3.261672162740573e-17]}
{'': [0.02826766322856519, -1.6326809185664067e-18], 'false': [nan, -1.6326809185664067e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 26.886
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.8348931211460235;  // std dev = 0.988, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( follows(D, F), tweets(A, G) )
%   | | | then return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.14185106490048846;  // std dev = 0.000, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E) )
%   | | | then return 0.723094819327309;  // std dev = 0.014, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.6010427934534486;  // std dev = 0.943, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.6605159300264677;  // std dev = 0.976, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0.730928757760104;  // std dev = 0.087, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.1254446385283916;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.5447951563287037;  // std dev = 0.998, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | | else return 0.45362127389503243;  // std dev = 0.938, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.21920261846764413;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.57751125197768;  // std dev = 0.158, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else return -0.1123163781936065;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.43241425810410916;  // std dev = 0.173, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.46877563718978843;  // std dev = 0.058, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.35905994377678546;  // std dev = 0.936, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return -0.10159632948783652;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4501852402028536;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10159632948783621;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.3258775301856519;  // std dev = 0.082, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return -0.01115397133767885;  // std dev = 0.787, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.33816490735333343;  // std dev = 0.047, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.346379140565389;  // std dev = 0.134, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926055;  // std dev = 9.54e-08, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else return -0.09269127618926087;  // std dev = 6.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(D, A), tweets(A, F) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.2084213618454447;  // std dev = 1.652, 57.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=54 */
%   | | | else return 0.09900739109847015;  // std dev = 0.900, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.28943541729279976;  // std dev = 0.062, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.2616257331433021;  // std dev = 0.046, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.2685477496043947;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.2550176004512936;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.05920741775529189;  // std dev = 1.133, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( tweets(A, K) )
%   | then return -0.08518475138839678;  // std dev = 5.19e-09, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | else return -0.08518475138839678;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(D, F) )
%   | | | then return 0.22128997985842036;  // std dev = 0.100, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | | else return -0.0010826225200953332;  // std dev = 0.848, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( recursion_accounttype(D, B), tweets(A, G) )
%   | | | then return 0.08168296253486056;  // std dev = 0.778, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.251087134780704;  // std dev = 0.064, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.23050997671303233;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.20964847262284225;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.04144436768006976;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.09647523119803283;  // std dev = 0.819, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.07877675473109148;  // std dev = 5.96e-09, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.16243182976801088;  // std dev = 0.989, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | | else return 0.22468947567703135;  // std dev = 0.089, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return -0.11600847871266433;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.09933617020700493;  // std dev = 1.329, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.20935274739049287;  // std dev = 0.014, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1862249372788564;  // std dev = 0.044, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.20290763953933547;  // std dev = 0.044, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2602997689495288;  // std dev = 0.043, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07324622576333671;  // std dev = 7.62e-09, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.1290071674598426;  // std dev = 1.351, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | | | else return -0.15089505852224905;  // std dev = 0.775, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.18923196283060129;  // std dev = 0.064, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.1670320140436787;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.14922302296506462;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.3982204431084061;  // std dev = 1.116, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.17307273946459692;  // std dev = 0.078, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.010513740321278572;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420261;  // std dev = 4.75e-09, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then if ( tweets(D, F), follows(A, D) )
%   | | | then return 0.1428816641665406;  // std dev = 0.022, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.16147179393927533;  // std dev = 0.062, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, D), tweets(D, G) )
%   | | | then return 0.16975842251501974;  // std dev = 0.073, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1851078780451211;  // std dev = 0.052, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.10229632937933524;  // std dev = 0.934, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.530244365624041;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.20697980103798325;  // std dev = 0.167, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15130279622410822;  // std dev = 0.061, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.06419184008202626;  // std dev = 0.000, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.161', 'seconds']
Refined model CLL: -0.091104


******************************************
Best model found
******************************************
Results 

CLL : -0.084833 

AUC ROC : 0.995729 

AUC PR : 0.414416 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 26.886 

Total Inference Time : 5.660225868225098 

Total revision time: 45.8179303779602
Best scored revision CLL: -0.091104


Results 

CLL : -0.084833 

AUC ROC : 0.995729 

AUC PR : 0.414416 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 51.40134421730041 

Total Inference Time : 5.660225868225098 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.261
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8425239350995104;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048852;  // std dev = 0.000, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6629146942631988;  // std dev = 2.743, 134.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839186;  // std dev = 0.000, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.549856649492287;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936068;  // std dev = 0.000, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3958701760255455;  // std dev = 2.190, 123.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=118 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.32540947141849996;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.10159632948783616;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.30553876923687595;  // std dev = 2.196, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0926912761892605;  // std dev = 6.83e-08, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | | else return -0.09269127618926086;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24035628825238164;  // std dev = 2.189, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.89e-09, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20278492031825365;  // std dev = 1.924, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109144;  // std dev = 7.15e-08, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16786206046021804;  // std dev = 1.965, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333667;  // std dev = 1.26e-07, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333699;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1350040973605253;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 5.96e-08, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   | | else return -0.06842697784420268;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13143924894362702;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 1.32e-09, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.978', 'seconds']
Parameter learned model CLL:-0.092445 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.403, 2, 126], 'false,true': [0.0, 225, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.743, 8, 126], 'false,true': [0.0, 244, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 239, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [2.19, 5, 118], 'true,false': [0.0, 228, 0], 'false,true,true': [0.314, 1, 8], 'false,true,false': [0.0, 15, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.196, 5, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.83e-08, 220, 0], 'false,false,false': [0.0, 18, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.189, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 267, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.924, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.15e-08, 223, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.965, 4, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.26e-07, 227, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 17, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.96e-08, 233, 0], 'false,false,false': [0.0, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false': [1.32e-09, 221, 0]}]
{'': [0.015380859375004219, -2.329001189435884e-16], 'false': [-2.329001189435884e-16, nan]}
{'': [0.05613722432613191, -7.462154755677281e-17], 'false': [-7.462154755677281e-17, nan]}
{'': [0.022714981070848513, -8.547323704227147e-17], 'false': [nan, -8.547323704227147e-17]}
{'': [0.06999772096218047, 0.07977155750758268], 'false': [0.07977155750758268, nan], 'false,true': [0.09876543209876544, -1.8503717077085942e-18], 'true': [0.038997950955120056, -7.985814738531828e-17]}
{'': [0.03680069663277675, 2.7988815746852685e-17], 'true': [0.03680069663277675, nan], 'false': [nan, 2.7988815746852685e-17], 'false,false': [2.119516683375299e-17, -6.1679056923619804e-18], 'false,false,true': [nan, 2.119516683375299e-17]}
{'': [0.036580520451470554, 3.409673708586623e-17], 'false': [nan, 3.409673708586623e-17], 'false,false': [nan, 3.409673708586623e-17]}
{'': [0.028465657382156423, 2.2901461494509957e-17], 'false': [nan, 2.2901461494509957e-17], 'false,false': [nan, 2.2901461494509957e-17], 'false,false,false': [2.2901461494509957e-17, nan]}
{'': [0.029703844923068715, 5.915122672183211e-17], 'true': [0.029703844923068715, nan], 'false': [7.042824473393064e-17, 0.0], 'false,false': [nan, 0.0]}
{'': [0.036765205813155545, 9.13763806275849e-19], 'false': [nan, 9.13763806275849e-19], 'false,false': [1.5247698192276828e-17, -6.938893903907229e-19], 'false,false,true': [nan, 1.5247698192276828e-17]}
{'': [0.022747277652537957, 5.023633595588944e-19], 'false': [nan, 5.023633595588944e-19]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 28.504
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.8581489350995127;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.1418510649004882;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7232705686836005;  // std dev = 0.062, 97.000 (wgt'ed) examples reached here.  /* #pos=97 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.727760815859533;  // std dev = 0.082, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.43375912649666876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.12544463852839174;  // std dev = 0.000, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.5377619248845408;  // std dev = 0.992, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.36605813283722954;  // std dev = 0.880, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.5657055075754905;  // std dev = 0.044, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.570924453784244;  // std dev = 0.170, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.11231637819360692;  // std dev = 0.000, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( recursion_accounttype(E, B), follows(F, A) )
%   | | | then return 0.40777030434944317;  // std dev = 0.931, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | | | else return 0.43451628833188954;  // std dev = 0.172, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.2578038572533673;  // std dev = 0.899, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.4137348623323151;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.30976414178979494;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.32759528217031286;  // std dev = 0.050, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else if ( follows(D, F), tweets(D, G) )
%   | | | then return 0.24665556999133495;  // std dev = 1.329, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0.3301010602812205;  // std dev = 0.055, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.3348962831422116;  // std dev = 0.147, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else if ( follows(A, H) )
%   | then return -0.0926912761892605;  // std dev = 6.99e-08, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else return -0.09269127618926087;  // std dev = 5.27e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, F) )
%   | | then if ( tweets(A, F), follows(A, G) )
%   | | | then return 0.1977679004602976;  // std dev = 1.679, 50.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=47 */
%   | | | else return 0.15661613470403293;  // std dev = 1.327, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else if ( follows(A, D), tweets(D, H) )
%   | | | then return 0.27697407495940524;  // std dev = 0.083, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.25329218004216164;  // std dev = 0.033, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.26565497394075266;  // std dev = 0.073, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.2891348517632001;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(L, A) )
%   | | | then return 0.1408106355827158;  // std dev = 0.918, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.24907611387178866;  // std dev = 0.006, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.08518475138839678;  // std dev = 5.82e-09, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.2228077593826398;  // std dev = 0.063, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | | else return 0.2459263413056736;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return -0.06024011429692233;  // std dev = 0.815, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.21436858814210072;  // std dev = 0.050, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.2386785839438038;  // std dev = 0.081, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.171728377058352;  // std dev = 1.058, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return 0.14183405577196975;  // std dev = 0.937, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.22172106368355665;  // std dev = 0.110, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07877675473109143;  // std dev = 3.36e-09, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, E), follows(E, F) )
%   | | | then return 0.18816660242284064;  // std dev = 0.156, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | | | else return 0.20247422442983398;  // std dev = 0.006, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return -0.03261724644486316;  // std dev = 0.867, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.19859925617046398;  // std dev = 0.098, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.10992004234061115;  // std dev = 1.173, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.18336141742557424;  // std dev = 0.034, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.17140037096612648;  // std dev = 0.004, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, J) )
%   | then return -0.07324622576333661;  // std dev = 8.79e-09, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else return -0.07324622576333698;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F), follows(E, A) )
%   | | | then return 0.16522811393842393;  // std dev = 0.114, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | | else return 0.11041429212005559;  // std dev = 1.331, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | else if ( recursion_accounttype(D, B), tweets(A, G) )
%   | | | then return -0.17503033912087215;  // std dev = 0.803, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.01977325691283741;  // std dev = 0.932, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21630987269815627;  // std dev = 0.125, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.15333203709224374;  // std dev = 0.039, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.17237917476718922;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, J) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   | else return -0.06842697784420267;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.14025908533051373;  // std dev = 0.047, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.15145766801941715;  // std dev = 0.044, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.16417607488197647;  // std dev = 0.107, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.15086884370383866;  // std dev = 0.093, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.13949703056369142;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.1673927298170329;  // std dev = 0.106, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.026685948374836076;  // std dev = 1.217, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.14548194864259262;  // std dev = 0.080, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06419184008202626;  // std dev = 1.32e-09, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.230', 'seconds']
Refined model CLL: -0.091285


******************************************
Best model found
******************************************
Results 

CLL : -0.085835 

AUC ROC : 0.99565 

AUC PR : 0.433543 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 28.504 

Total Inference Time : 9.397223949432373 

Total revision time: 53.67753232955933
Best scored revision CLL: -0.091285


Results 

CLL : -0.085835 

AUC ROC : 0.99565 

AUC PR : 0.433543 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 59.26094616889954 

Total Inference Time : 9.397223949432373 

Run: 2
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.724
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8268989350995116;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048768;  // std dev = 5.37e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6114514598165673;  // std dev = 1.882, 35.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=31 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5894396981973614;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360628;  // std dev = 5.74e-09, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.40881468970297763;  // std dev = 0.983, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else return -0.10159632948783628;  // std dev = 1.83e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.44329744832366713;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3452633642465102;  // std dev = 0.013, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926103;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21129861272565922;  // std dev = 1.370, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 2.28e-09, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23210272287999215;  // std dev = 0.010, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109173;  // std dev = 2.24e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.19332086242608487;  // std dev = 0.009, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333704;  // std dev = 7.45e-09, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1649440163333368;  // std dev = 0.001, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0684269778442027;  // std dev = 1.49e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return -0.06842697784420272;  // std dev = 9.31e-10, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1122239522760743;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.029', 'seconds']
Parameter learned model CLL:-0.091772 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.984, 1, 31], 'false,true': [5.37e-08, 51, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.882, 4, 31], 'false,true': [0.0, 56, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.0, 0, 31], 'false,true': [0.0, 0, 0], 'false,false': [5.74e-09, 60, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.983, 1, 28], 'true,false': [1.83e-08, 47, 0], 'false,true,true': [0.0, 0, 3], 'false,true,false': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.013, 0, 31], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 47, 0], 'false,false,false': [0.0, 7, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.37, 2, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.28e-09, 59, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.01, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.24e-08, 59, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.009, 0, 31], 'true,false': [0.0, 0, 0], 'false,true': [7.45e-09, 53, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.63e-09, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.001, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.49e-08, 52, 0], 'false,false,false': [9.31e-10, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.174, 1, 31], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 67, 0]}]
{'': [0.030273437500001332, 5.659960517696876e-17], 'false': [5.659960517696876e-17, nan]}
{'': [0.10122448979591876, -3.766828119263924e-17], 'false': [-3.766828119263924e-17, nan]}
{'': [0.0, 3.3306690738754695e-17], 'false': [nan, 3.3306690738754695e-17]}
{'': [0.07418062052387005, 0.039478235447892585], 'true': [0.03329369797859673, 7.086529944415892e-18], 'false': [0.039478235447892585, nan], 'false,true': [0.0, -6.938893903907228e-18]}
{'': [5.265009787330262e-06, -2.2615654205327262e-17], 'true': [5.265009787330262e-06, nan], 'false': [nan, -2.2615654205327262e-17], 'false,false': [-1.8897413185109047e-17, 0.0], 'false,false,true': [nan, -1.8897413185109047e-17]}
{'': [0.056862030063445215, 5.645201820127915e-18], 'false': [nan, 5.645201820127915e-18], 'false,false': [nan, 5.645201820127915e-18]}
{'': [3.252446525615949e-06, 8.467802730191872e-18], 'false': [nan, 8.467802730191872e-18], 'false,false': [nan, 8.467802730191872e-18], 'false,false,false': [8.467802730191872e-18, nan]}
{'': [2.484684740149616e-06, -1.734723475976807e-18], 'true': [2.484684740149616e-06, nan], 'false': [1.047380211910525e-18, 6.30808536718839e-19], 'false,false': [nan, 6.30808536718839e-19]}
{'': [1.9352433325274667e-06, 9.540979117872439e-18], 'false': [nan, 9.540979117872439e-18], 'false,false': [4.270088556250602e-18, 5.782411586589357e-19], 'false,false,true': [nan, 4.270088556250602e-18]}
{'': [0.03025035108696326, -4.9711478714559245e-18], 'false': [nan, -4.9711478714559245e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 6.371
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else return -0.14185106490048766;  // std dev = 6.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.7194734122109543;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.12544463852839158;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5610873745211132;  // std dev = 0.109, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return 0.3053664367462845;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.11231637819360633;  // std dev = 2.36e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.4161229350652738;  // std dev = 2.98e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.08278960173194054;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3582459283839995;  // std dev = 0.901, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return -0.10159632948783627;  // std dev = 2.36e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4792647031913868;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.10159632948783628;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.33621879699486407;  // std dev = 0.148, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return 0.11302620675471534;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, E) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.25142033448290496;  // std dev = 1.83e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.273994186929756;  // std dev = 0.055, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.022989826024924536;  // std dev = 0.757, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.2855952415455392;  // std dev = 0.080, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2624691343823185;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.33731563892245187;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, H) )
%   | then if ( follows(H, A) )
%   | | then return -0.0851847513883968;  // std dev = 3.73e-09, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else return -0.08518475138839685;  // std dev = 2.63e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.08518475138839687;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A), follows(E, D) )
%   | | | then return 0.20643434217012643;  // std dev = 0.005, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.22332653972294056;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.2862415638706352;  // std dev = 0.047, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.21866375497751045;  // std dev = 0.056, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.266472247194775;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.07877675473109179;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.07877675473109176;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, D), follows(E, A) )
%   | | | then return 0.17524431305195365;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.17241085463741573;  // std dev = 0.000811, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.21701196982476614;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A), follows(A, G) )
%   | | | then return -0.10428121276167517;  // std dev = 0.839, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.05544259518004646;  // std dev = 0.893, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.1856452746958072;  // std dev = 0.013, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, A) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return -0.07324622576333704;  // std dev = 9.31e-10, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return -0.07324622576333704;  // std dev = 9.31e-10, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, D), follows(E, A) )
%   | | | then return 0.15133733241165215;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.1491799721843423;  // std dev = 0.000721, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.18239932003208284;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A) )
%   | | then return 0.24144033734760398;  // std dev = 0.056, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.17939423905642768;  // std dev = 0.047, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.15922518442920883;  // std dev = 0.031, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, A) )
%   | | then return -0.06842697784420275;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, D), follows(E, A) )
%   | | | then return 0.13290801712894984;  // std dev = 7.45e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.1312185885048347;  // std dev = 0.000648, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.15675490864173078;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.20021499778193544;  // std dev = 0.049, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.15455018443114238;  // std dev = 0.042, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.13906513918808397;  // std dev = 0.010, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06419184008202625;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '5.875', 'seconds']
Refined model CLL: -0.090692


******************************************
Best model found
******************************************
Results 

CLL : -0.09259 

AUC ROC : 0.99373 

AUC PR : 0.401681 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 6.371 

Total Inference Time : 2.3967862129211426 

Total revision time: 14.641087503433228
Best scored revision CLL: -0.090692


Results 

CLL : -0.09259 

AUC ROC : 0.99373 

AUC PR : 0.401681 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 14.657938928604127 

Total Inference Time : 2.3967862129211426 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.629
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8422759192264967;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048782;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6914158968615448;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839105;  // std dev = 8.02e-08, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5661863459779637;  // std dev = 1.49e-08, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360621;  // std dev = 8.01e-09, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.38855023071705547;  // std dev = 1.388, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | else return -0.10159632948783624;  // std dev = 4.71e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.42558726775409206;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.2868425610080796;  // std dev = 1.694, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926089;  // std dev = 6.66e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | | else return -0.09269127618926105;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.27265327873866835;  // std dev = 0.021, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 5.82e-09, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22203502872331288;  // std dev = 0.018, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109153;  // std dev = 7.88e-08, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1701925461575443;  // std dev = 0.991, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333707;  // std dev = 4.47e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333707;  // std dev = 9.13e-09, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1616417723349641;  // std dev = 0.002, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420265;  // std dev = 5.37e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | else return -0.06842697784420276;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12505458468560815;  // std dev = 0.125, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 1.86e-09, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.411', 'seconds']
Parameter learned model CLL:-0.089009 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.992, 1, 62], 'false,true': [0.0, 126, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.392, 2, 62], 'false,true': [8.02e-08, 119, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.49e-08, 0, 62], 'false,true': [0.0, 0, 0], 'false,false': [8.01e-09, 115, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.388, 2, 52], 'true,false': [4.71e-08, 94, 0], 'false,true,true': [0.0, 0, 10], 'false,true,false': [0.0, 24, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.694, 3, 62], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.66e-08, 113, 0], 'false,false,false': [0.0, 19, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.021, 0, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.82e-09, 113, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.018, 0, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.88e-08, 142, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.991, 1, 62], 'true,false': [0.0, 0, 0], 'false,true': [4.47e-08, 98, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.13e-09, 25, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.002, 0, 62], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.37e-08, 111, 0], 'false,false,false': [0.0, 31, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.125, 1, 62], 'false,true': [0.0, 0, 0], 'false,false': [1.86e-09, 122, 0]}]
{'': [0.015621063240110127, -1.76225876924628e-17], 'false': [-1.76225876924628e-17, nan]}
{'': [0.030273437500001055, 5.411171044391519e-17], 'false': [5.411171044391519e-17, nan]}
{'': [2.865091676452017e-16, 6.371714750022638e-17], 'false': [nan, 6.371714750022638e-17]}
{'': [0.06868671506925707, 0.05770018239465874], 'true': [0.03566529492455378, 2.362176648138631e-17], 'false': [0.05770018239465874, nan], 'false,true': [2.2204460492503132e-17, -2.3129646346357427e-18]}
{'': [0.04415719858113352, 4.37360585458395e-17], 'true': [0.04415719858113352, nan], 'false': [nan, 4.37360585458395e-17], 'false,false': [3.929993007522678e-17, -4.382459307730881e-18], 'false,false,true': [nan, 3.929993007522678e-17]}
{'': [7.214219385174017e-06, 3.3404940563942766e-17], 'false': [nan, 3.3404940563942766e-17], 'false,false': [nan, 3.3404940563942766e-17]}
{'': [5.459436613345609e-06, 4.378344322465406e-17], 'false': [nan, 4.378344322465406e-17], 'false,false': [nan, 4.378344322465406e-17], 'false,false,false': [4.378344322465406e-17, nan]}
{'': [0.015597158381497863, 1.8052406904474092e-18], 'true': [0.015597158381497863, nan], 'false': [2.0391851472706958e-17, 3.3306690738754695e-18], 'false,false': [nan, 3.3306690738754695e-18]}
{'': [3.3499580075050277e-06, 2.971019361672954e-17], 'false': [nan, 2.971019361672954e-17], 'false,false': [2.600522400022889e-17, -5.3720468933475315e-18], 'false,false,true': [nan, 2.600522400022889e-17]}
{'': [0.015601309887284963, 3.640075490574284e-18], 'false': [nan, 3.640075490574284e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 10.526
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995115;  // std dev = 2.38e-07, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(A, E), follows(E, A) )
%   | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.14185106490048768;  // std dev = 6.66e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7220846424779904;  // std dev = 0.069, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else return -0.12544463852839133;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.554721540886218;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(A, E) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.34542374402896603;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.5584217411719226;  // std dev = 0.055, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.30472154088621806;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.11231637819360618;  // std dev = 1.02e-07, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.42360865639236417;  // std dev = 0.164, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else return -0.10159632948783628;  // std dev = 3.33e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.43555701560802235;  // std dev = 0.089, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.3250417847560213;  // std dev = 0.152, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.31636833179332907;  // std dev = 1.49e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.027267512587660338;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926093;  // std dev = 5.77e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return -0.09269127618926101;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.25282430458839833;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.18957844090604964;  // std dev = 0.908, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.2524122095609989;  // std dev = 0.000874, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.27350451845546586;  // std dev = 0.119, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.25270067608017843;  // std dev = 0.000553, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.13687525084012303;  // std dev = 0.862, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.04579618283961676;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(J, A) )
%   | then return -0.08518475138839682;  // std dev = 5.43e-09, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return -0.0851847513883969;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.20810663812196634;  // std dev = 0.000110, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.20762640189192538;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.20801031203911524;  // std dev = 0.000482, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, A), follows(G, H) )
%   | | | then return 0.28962221834457125;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2184848741299508;  // std dev = 0.047, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.3513347464661843;  // std dev = 0.042, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(I, A) )
%   | then if ( follows(A, I) )
%   | | then return -0.07877675473109169;  // std dev = 4.17e-09, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.0787767547310918;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return -0.0787767547310918;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, F) )
%   | | then if ( follows(D, A), tweets(D, E) )
%   | | | then return 0.11337676826450377;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.19084514704895156;  // std dev = 0.084, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return -0.07409134833559572;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.14994708733542864;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.17566663209860034;  // std dev = 0.000572, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.1848198289870519;  // std dev = 0.072, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.19113286045462796;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.25249969178003573;  // std dev = 0.094, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07324622576333716;  // std dev = 0.000, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.15750686120701446;  // std dev = 0.020, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.18985906875830957;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.08367700047099276;  // std dev = 0.430, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.15170431442022178;  // std dev = 0.018, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.16041531115627786;  // std dev = 0.058, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.17075097068780595;  // std dev = 0.048, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.20847522617522954;  // std dev = 0.082, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, J) )
%   | then return -0.06842697784420265;  // std dev = 4.75e-09, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | else return -0.06842697784420275;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.13771711513083287;  // std dev = 0.018, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.16236237709287565;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return -0.448497230586072;  // std dev = 0.813, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.0012571427869540797;  // std dev = 0.880, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.13319755587611493;  // std dev = 0.016, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.1400325021584012;  // std dev = 0.052, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.1479608577520781;  // std dev = 0.043, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.17653526218265528;  // std dev = 0.071, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.06419184008202626;  // std dev = 0.000, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.006', 'seconds']
Refined model CLL: -0.085871


******************************************
Best model found
******************************************
Results 

CLL : -0.090284 

AUC ROC : 0.994238 

AUC PR : 0.470865 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 10.526 

Total Inference Time : 2.645838737487793 

Total revision time: 22.973178176879884
Best scored revision CLL: -0.085871


Results 

CLL : -0.090284 

AUC ROC : 0.994238 

AUC PR : 0.470865 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 22.990029602050782 

Total Inference Time : 2.645838737487793 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.532
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8169118216974496;  // std dev = 1.958, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004882;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7066679168928373;  // std dev = 1.399, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839144;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5580300878527582;  // std dev = 0.103, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360667;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.38186637884314967;  // std dev = 1.951, 83.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=79 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43005914992748645;  // std dev = 1.05e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.1015963294878363;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3277229289554662;  // std dev = 0.994, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926067;  // std dev = 7.60e-08, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   | | else return -0.09269127618926097;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2278863513801342;  // std dev = 1.965, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.43e-09, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.18556538137866332;  // std dev = 1.960, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109148;  // std dev = 8.02e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17491904846948875;  // std dev = 1.398, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333678;  // std dev = 8.49e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15921735347287225;  // std dev = 0.103, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420264;  // std dev = 6.58e-08, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | | else return -0.06842697784420265;  // std dev = 2.79e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11733858889831067;  // std dev = 0.174, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.300', 'seconds']
Parameter learned model CLL:-0.086966 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.958, 4, 93], 'false,true': [0.0, 168, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.399, 2, 93], 'false,true': [0.0, 167, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.103, 1, 93], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 205, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.951, 4, 79], 'true,false': [0.0, 168, 0], 'false,true,true': [1.05e-08, 0, 14], 'false,true,false': [0.0, 42, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.994, 1, 93], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.6e-08, 155, 0], 'false,false,false': [0.0, 36, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.965, 4, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.43e-09, 184, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.96, 4, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [8.02e-08, 175, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.398, 2, 93], 'true,false': [0.0, 0, 0], 'false,true': [8.49e-08, 158, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 37, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.103, 1, 93], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.58e-08, 147, 0], 'false,false,false': [2.79e-09, 26, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.174, 3, 93], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 175, 0]}]
{'': [0.03953661388032838, -1.691768418476429e-16], 'false': [-1.691768418476429e-16, nan]}
{'': [0.020609418282545876, -2.659216825449477e-18], 'false': [-2.659216825449477e-18, nan]}
{'': [0.010525124490720577, -3.466062125659025e-17], 'false': [nan, -3.466062125659025e-17]}
{'': [0.06690103166657926, 0.05299829039856324], 'true': [0.04587022789954989, -7.533656238527848e-17], 'false': [0.05299829039856324, nan], 'false,true': [9.516197353929913e-17, -2.64338815386942e-18]}
{'': [0.010505716705629426, 4.3013876346733816e-17], 'true': [0.010505716705629426, nan], 'false': [nan, 4.3013876346733816e-17], 'false,false': [3.724619179387622e-17, -9.25185853854297e-18], 'false,false,true': [nan, 3.724619179387622e-17]}
{'': [0.03980877614847105, 2.896233977283017e-17], 'false': [nan, 2.896233977283017e-17], 'false,false': [nan, 2.896233977283017e-17]}
{'': [0.03961163982829383, 3.679596310186233e-17], 'false': [nan, 3.679596310186233e-17], 'false,false': [nan, 3.679596310186233e-17], 'false,false,false': [3.679596310186233e-17, nan]}
{'': [0.020569884785194326, 6.832141690000964e-17], 'true': [0.020569884785194326, nan], 'false': [4.567373202571847e-17, -9.751959000085835e-18], 'false,false': [nan, -9.751959000085835e-18]}
{'': [0.010509554800259679, 2.631164393620313e-17], 'false': [nan, 2.631164393620313e-17], 'false,false': [2.945489657168783e-17, 8.006416042969878e-18], 'false,false,true': [nan, 2.945489657168783e-17]}
{'': [0.03022305415443162, -4.440892098500626e-18], 'false': [nan, -4.440892098500626e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 29.819
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | | then return 0.822434649385226;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.6763307532813305;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.14185106490048835;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.6874688766411295;  // std dev = 0.979, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.7253245981273782;  // std dev = 0.009, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.7194734122109543;  // std dev = 7.30e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7341381111135313;  // std dev = 0.060, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.6445621746501293;  // std dev = 0.935, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.5528067455442879;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.1254446385283915;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.5632004590228559;  // std dev = 0.082, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | else if ( follows(A, E) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.5747564191845372;  // std dev = 0.064, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.41753700068369515;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.5797781451889925;  // std dev = 0.045, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.11231637819360643;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.4240619118826687;  // std dev = 0.048, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.31532922883283815;  // std dev = 0.948, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.4462959823316799;  // std dev = 0.169, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.10159632948783642;  // std dev = 0.000, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   else if ( recursion_accounttype(F, B) )
%   | then return 0.4287834569334488;  // std dev = 0.071, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.3271686825308608;  // std dev = 0.034, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.0675866817701215;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.31758668177012156;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.3370832332525303;  // std dev = 0.173, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926064;  // std dev = 8.30e-08, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, F) )
%   | | then if ( follows(F, A), recursion_accounttype(E, B) )
%   | | | then return 0.26086759741867444;  // std dev = 0.022, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.269045931453136;  // std dev = 0.073, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.24252849317488767;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2562442449530278;  // std dev = 0.043, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.2633440960784777;  // std dev = 0.038, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.12699472151952024;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.26469790961215556;  // std dev = 0.035, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(J, A) )
%   | then return -0.08518475138839678;  // std dev = 4.56e-09, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | else return -0.08518475138839678;  // std dev = 1.05e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(G, A) )
%   | | | then return 0.21693841943592984;  // std dev = 0.062, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.2056222963451774;  // std dev = 0.024, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.1853609573727088;  // std dev = 1.094, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A), tweets(I, H) )
%   | | | then return 0.2082238916641445;  // std dev = 0.028, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.2162864143882881;  // std dev = 0.030, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.25796379882358134;  // std dev = 0.112, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.21651794629765747;  // std dev = 0.031, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(K, A) )
%   | then return -0.07877675473109155;  // std dev = 6.04e-09, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | else return -0.07877675473109177;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.13771358277141743;  // std dev = 0.977, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.17653581006275054;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.18533081966737314;  // std dev = 0.054, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.17368378295479422;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.18180210723187298;  // std dev = 0.061, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.21335261086852106;  // std dev = 0.124, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.17378015075992626;  // std dev = 0.020, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.189385903168421;  // std dev = 0.018, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07324622576333666;  // std dev = 8.38e-09, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, F), tweets(A, G) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.16444422345664114;  // std dev = 0.066, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.15374595259424156;  // std dev = 0.019, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, E), follows(E, A) )
%   | | | then return 0.15111250496940776;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.14799333829773684;  // std dev = 0.008, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.16365846533243605;  // std dev = 0.076, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.15062355257035107;  // std dev = 0.011, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.18143939765594194;  // std dev = 0.079, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.16561268223852404;  // std dev = 0.004, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420262;  // std dev = 5.43e-09, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), tweets(A, G) )
%   | | | then return 0.13986613047207772;  // std dev = 0.041, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.1302193423631893;  // std dev = 0.015, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.18499733660784123;  // std dev = 0.011, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return -0.201765961770588;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13156737156274534;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.13487203000492207;  // std dev = 0.026, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.0842244786113729;  // std dev = 0.937, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else return -0.06419184008202626;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.391', 'seconds']
Refined model CLL: -0.086381


******************************************
Best model found
******************************************
Results 

CLL : -0.092341 

AUC ROC : 0.993454 

AUC PR : 0.368168 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 29.819 

Total Inference Time : 7.941612482070923 

Total revision time: 52.977178979873656
Best scored revision CLL: -0.086381


Results 

CLL : -0.092341 

AUC ROC : 0.993454 

AUC PR : 0.368168 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 52.994030405044555 

Total Inference Time : 7.941612482070923 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.382
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.834526887855416;  // std dev = 1.711, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048824;  // std dev = 0.000, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7162162740927541;  // std dev = 0.996, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839188;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5461205590842674;  // std dev = 0.125, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360679;  // std dev = 0.000, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4069068753355564;  // std dev = 1.400, 103.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=101 */
%   | else return -0.10159632948783653;  // std dev = 0.000, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4263243510637107;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.10159632948783623;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.291453009254749;  // std dev = 2.191, 129.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926054;  // std dev = 5.37e-08, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23788761054017776;  // std dev = 1.971, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.82e-09, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2013775801595265;  // std dev = 1.712, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109144;  // std dev = 6.99e-08, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15303607614299547;  // std dev = 2.195, 129.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333664;  // std dev = 1.23e-07, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1533631004608888;  // std dev = 0.125, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6.14e-08, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   | | else return -0.06842697784420264;  // std dev = 1.86e-09, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12511550179497177;  // std dev = 0.152, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820261;  // std dev = 5.19e-09, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.775', 'seconds']
Parameter learned model CLL:-0.087122 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.711, 3, 124], 'false,true': [0.0, 249, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.996, 1, 124], 'false,true': [0.0, 259, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.125, 2, 124], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 237, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.4, 2, 101], 'true,false': [0.0, 210, 0], 'false,true,true': [0.0, 0, 23], 'false,true,false': [0.0, 43, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.191, 5, 124], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.37e-08, 191, 0], 'false,false,false': [0.0, 39, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.971, 4, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.82e-09, 261, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.712, 3, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.99e-08, 229, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [2.195, 5, 124], 'true,false': [0.0, 0, 0], 'false,true': [1.23e-07, 206, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 47, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.125, 2, 124], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.14e-08, 233, 0], 'false,false,false': [1.86e-09, 33, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.152, 3, 124], 'false,true': [0.0, 0, 0], 'false,false': [5.19e-09, 276, 0]}]
{'': [0.0230640461280963, -1.319783193931913e-16], 'false': [-1.319783193931913e-16, nan]}
{'': [0.007936000000001286, -6.858520615444982e-17], 'false': [-6.858520615444982e-17, nan]}
{'': [0.015621063240109957, -8.24469419130918e-17], 'false': [nan, -8.24469419130918e-17]}
{'': [0.06335507075393128, 0.0632769839897876], 'true': [0.019040437364500857, -8.881784197001253e-17], 'false': [0.0632769839897876, nan], 'false,true': [0.0, -2.1946269091427512e-17]}
{'': [0.03720083671757864, 3.185857375011319e-17], 'true': [0.03720083671757864, nan], 'false': [nan, 3.185857375011319e-17], 'false,false': [1.5112983581284854e-17, -1.9927079929169476e-17], 'false,false,true': [nan, 1.5112983581284854e-17]}
{'': [0.030348252133386606, 3.402982450958334e-17], 'false': [nan, 3.402982450958334e-17], 'false,false': [nan, 3.402982450958334e-17]}
{'': [0.023088806598906254, 2.1331796106334886e-17], 'false': [nan, 2.1331796106334886e-17], 'false,false': [nan, 2.1331796106334886e-17], 'false,false,false': [2.1331796106334886e-17, nan]}
{'': [0.03735145958092593, 5.441409290652941e-17], 'true': [0.03735145958092593, nan], 'false': [7.329627735389383e-17, -9.448706592554524e-18], 'false,false': [nan, -9.448706592554524e-18]}
{'': [0.015606410776463093, -2.5042624615605033e-17], 'false': [nan, -2.5042624615605033e-17], 'false,false': [1.620067932929413e-17, 3.3643121958338078e-18], 'false,false,true': [nan, 1.620067932929413e-17]}
{'': [0.023081660685171743, 2.5744302020293485e-17], 'false': [nan, 2.5744302020293485e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 35.791
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(E, F) )
%   | | | then return 0.7427643197148964;  // std dev = 1.629, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | | | else return 0.8581489350995118;  // std dev = 1.79e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return 0.8581489350995118;  // std dev = 2.67e-07, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else return -0.14185106490048835;  // std dev = 0.000, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(A, F) )
%   | | then return 0.7257614328178587;  // std dev = 0.106, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | | else if ( follows(A, E), follows(E, A) )
%   | | | then return 0.5641510023954033;  // std dev = 0.926, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.7227146284541304;  // std dev = 0.021, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then if ( follows(A, I), follows(G, I) )
%   | | | then return 0.73828786292589;  // std dev = 0.090, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.4816935407719701;  // std dev = 1.428, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else return 0.7205538176253464;  // std dev = 0.022, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.1254446385283919;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return 0.563837812672035;  // std dev = 0.094, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.2721424385362911;  // std dev = 1.178, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.5650591620528049;  // std dev = 0.136, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.5730410715478425;  // std dev = 0.194, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.11231637819360675;  // std dev = 0.000, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.4373900460337699;  // std dev = 0.197, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.3548610810862659;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.4360349459486352;  // std dev = 0.179, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return -0.10159632948783652;  // std dev = 0.000, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.41334184141260677;  // std dev = 0.003, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.10159632948783623;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.3299712253206728;  // std dev = 0.112, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.1014770457679608;  // std dev = 0.804, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.340448146752646;  // std dev = 0.102, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then if ( recursion_accounttype(G, B), follows(H, A) )
%   | | | then return 0.13109294664010243;  // std dev = 0.842, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.29294821915644503;  // std dev = 1.016, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return 0.31667528267830214;  // std dev = 0.026, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   else if ( follows(A, I) )
%   | then return -0.09269127618926051;  // std dev = 6.32e-08, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( follows(D, E), recursion_accounttype(D, B) )
%   | | | then return 0.2607342541252304;  // std dev = 0.099, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.27409801282882396;  // std dev = 0.090, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( recursion_accounttype(D, B), tweets(A, G) )
%   | | | then return 0.34325476009103056;  // std dev = 0.071, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.26942163674448943;  // std dev = 0.082, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1509747744605247;  // std dev = 0.311, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.290919095021586;  // std dev = 0.065, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.25199436009903353;  // std dev = 0.013, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( follows(K, A) )
%   | then return -0.08518475138839678;  // std dev = 5.35e-09, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else return -0.08518475138839678;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | | then return 0.2200723007294251;  // std dev = 0.131, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.2972026044236203;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(F, D), follows(F, A) )
%   | | | then return 0.1318639211264784;  // std dev = 0.963, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.216562094365337;  // std dev = 0.091, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( follows(G, A) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.1321196347522429;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.1248793175873764;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2085388715917984;  // std dev = 7.45e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, H) )
%   | then return -0.07877675473109144;  // std dev = 5.43e-09, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else return -0.0787767547310917;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.18373278737560186;  // std dev = 0.108, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.06032422171483574;  // std dev = 0.910, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.20108172053066103;  // std dev = 0.094, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.18882767138129383;  // std dev = 0.057, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return 0.19844559674011278;  // std dev = 0.024, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.17598271476092806;  // std dev = 0.021, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.10404166538579779;  // std dev = 0.880, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.057866470501946765;  // std dev = 0.944, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.07324622576333686;  // std dev = 6.78e-09, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.15361316334609465;  // std dev = 0.050, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.19271922155761237;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), follows(H, D) )
%   | | | then return 0.16806381126060285;  // std dev = 0.067, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.19763761208877786;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return 0.16876928506056751;  // std dev = 0.021, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.15191089935966512;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return -0.04115733708304097;  // std dev = 1.196, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.10564483475513087;  // std dev = 1.333, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   else return -0.06842697784420272;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( follows(D, F) )
%   | | then if ( follows(D, A), recursion_accounttype(F, B) )
%   | | | then return 0.12441001092987013;  // std dev = 0.977, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | | else return 0.03298517932313569;  // std dev = 0.887, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return -0.20449468962411552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.17760375799144182;  // std dev = 0.048, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.14888890877308233;  // std dev = 0.047, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.14110176448390768;  // std dev = 0.004, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.1550420749480404;  // std dev = 0.058, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06419184008202625;  // std dev = 2.58e-08, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.176', 'seconds']
Refined model CLL: -0.085819


******************************************
Best model found
******************************************
Results 

CLL : -0.091916 

AUC ROC : 0.994413 

AUC PR : 0.403391 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 35.791 

Total Inference Time : 8.629427194595337 

Total revision time: 62.57099880981445
Best scored revision CLL: -0.085819


Results 

CLL : -0.091916 

AUC ROC : 0.994413 

AUC PR : 0.403391 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 62.587850234985346 

Total Inference Time : 8.629427194595337 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.22
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8331489350995097;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048785;  // std dev = 8.94e-08, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7118331756534013;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839197;  // std dev = 0.000, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5204664013706028;  // std dev = 0.203, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360697;  // std dev = 0.000, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.41864020268036817;  // std dev = 1.403, 130.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=128 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.3995420594442935;  // std dev = 0.182, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return -0.10159632948783619;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3234748777103025;  // std dev = 1.403, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926047;  // std dev = 8.69e-08, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   | | else return -0.092691276189261;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24927449211212194;  // std dev = 1.715, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.96e-09, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.18505390412899406;  // std dev = 2.405, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109141;  // std dev = 4.71e-08, 331.000 (wgt'ed) examples reached here.  /* #neg=331 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1854319714816806;  // std dev = 0.994, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333684;  // std dev = 1.14e-07, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14579387534043345;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0684269778442027;  // std dev = 0.000, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
%   | | else return -0.06842697784420262;  // std dev = 2.79e-09, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13291961214908482;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202602;  // std dev = 5.96e-09, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.072', 'seconds']
Parameter learned model CLL:-0.08762 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.975, 4, 156], 'false,true': [8.94e-08, 298, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 281, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.203, 7, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 286, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.403, 2, 128], 'true,false': [0.0, 253, 0], 'false,true,true': [0.182, 1, 28], 'false,true,false': [0.0, 55, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.403, 2, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [8.69e-08, 241, 0], 'false,false,false': [0.0, 59, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.715, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.96e-09, 290, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.405, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.71e-08, 331, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.994, 1, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.14e-07, 261, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 47, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 245, 0], 'false,false,false': [2.79e-09, 54, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false': [5.96e-09, 288, 0]}]
{'': [0.024375000000006076, 2.682418046074204e-17], 'false': [2.682418046074204e-17, nan]}
{'': [0.012497997115846392, -7.58586550633559e-17], 'false': [-7.58586550633559e-17, nan]}
{'': [0.04110053069366822, -1.0092936587501423e-16], 'false': [nan, -1.0092936587501423e-16]}
{'': [0.06582473088957068, 0.0682640654237443], 'false': [0.0682640654237443, nan], 'false,true': [0.0332936979785967, 0.0], 'true': [0.015147928994082075, -6.670114614348766e-17]}
{'': [0.01246651958198302, 8.881784197001253e-17], 'true': [0.01246651958198302, nan], 'false': [nan, 8.881784197001253e-17], 'false,false': [3.1325794885689064e-17, -3.010774304068221e-17], 'false,false,true': [nan, 3.1325794885689064e-17]}
{'': [0.01849262485026426, 3.522086836741876e-17], 'false': [nan, 3.522086836741876e-17], 'false,false': [nan, 3.522086836741876e-17]}
{'': [0.035709251996714216, 6.70829622130004e-18], 'false': [nan, 6.70829622130004e-18], 'false,false': [nan, 6.70829622130004e-18], 'false,false,false': [6.70829622130004e-18, nan]}
{'': [0.006299326025710371, 2.8116037636611104e-17], 'true': [0.006299326025710371, nan], 'false': [5.019399115163543e-17, -9.448706592554524e-18], 'false,false': [nan, -9.448706592554524e-18]}
{'': [0.01853046446830736, -5.71820554489211e-17], 'false': [nan, -5.71820554489211e-17], 'false,false': [-9.06304509898087e-19, 8.22387425648264e-18], 'false,false,true': [nan, -9.06304509898087e-19]}
{'': [0.012509531337663912, 3.5465457731081387e-17], 'false': [nan, 3.5465457731081387e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 45.012
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else if ( recursion_accounttype(D, B), follows(A, D) )
%   | | | then return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.7672398441904211;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.8211118980624748;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   else return -0.14185106490048774;  // std dev = 1.52e-07, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then if ( tweets(A, F), follows(E, D) )
%   | | | then return 0.651055802204062;  // std dev = 1.914, 55.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=51 */
%   | | | else return 0.7330455930783697;  // std dev = 0.039, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( tweets(A, G), follows(D, A) )
%   | | | then return 0.07733094767815418;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.5263394517212514;  // std dev = 0.806, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.7219447867265705;  // std dev = 0.031, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.12544463852839205;  // std dev = 0.000, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.5744173267943755;  // std dev = 0.094, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | | else return 0.41570092356515453;  // std dev = 0.800, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.554756085769;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.5152679694866735;  // std dev = 0.990, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.2985504856102779;  // std dev = 0.676, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.5638847430765798;  // std dev = 5.16e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.4729756521674888;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.11231637819360699;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.44291097340678065;  // std dev = 0.326, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.27517540548571445;  // std dev = 0.927, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.41937938405053;  // std dev = 0.021, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return -0.1015963294878366;  // std dev = 0.000, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( tweets(A, H), follows(I, A) )
%   | | then return 0.35039439362475455;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.43787529322020086;  // std dev = 0.049, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.10159632948783623;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then return 0.33523964813156776;  // std dev = 0.315, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.3401305041764569;  // std dev = 0.021, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.05799146431523065;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(H, A), tweets(A, I) )
%   | | | then return 0.26842519140923576;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.3266790354011784;  // std dev = 0.060, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( follows(A, J) )
%   | then return -0.09269127618926049;  // std dev = 7.15e-08, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else return -0.09269127618926101;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(D, A) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.2334355427869484;  // std dev = 0.988, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return 0.2678166720630006;  // std dev = 0.194, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(G, A), follows(H, G) )
%   | | | then return 0.023043692110086916;  // std dev = 1.234, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.2281600864613048;  // std dev = 0.777, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(J, A), follows(J, I) )
%   | | | then return 0.27018108382826744;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.3355221652805978;  // std dev = 0.170, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(K, A), tweets(A, L) )
%   | | | then return 0.2781474765566331;  // std dev = 2.98e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.23108181406308093;  // std dev = 0.975, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   else return -0.08518475138839678;  // std dev = 5.96e-09, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(D, F) )
%   | | | then return 0.21386012494692225;  // std dev = 0.035, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return 0.2462426070860989;  // std dev = 0.222, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return -0.5125318050834793;  // std dev = 0.841, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.024118937437524718;  // std dev = 0.836, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, A), tweets(A, I) )
%   | | | then return 0.20727167260823226;  // std dev = 0.030, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.22197505770692247;  // std dev = 0.107, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return 0.15919692267140764;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.22359825980939313;  // std dev = 0.034, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.07877675473109141;  // std dev = 3.65e-08, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.18544218646096322;  // std dev = 0.156, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.2137353179197257;  // std dev = 0.163, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.053590124711219156;  // std dev = 0.698, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.020446121569354332;  // std dev = 1.300, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return 0.17390142042196105;  // std dev = 0.007, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.11510898493595312;  // std dev = 0.983, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.18262416019717914;  // std dev = 0.048, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( follows(A, J) )
%   | then return -0.07324622576333675;  // std dev = 7.79e-09, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | else return -0.07324622576333703;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.16179702363010653;  // std dev = 0.189, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | | else return -0.1079825986184283;  // std dev = 0.748, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.12334054699934074;  // std dev = 1.233, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | | else return 0.008824412463772276;  // std dev = 1.348, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then return 0.17024440960027315;  // std dev = 0.008, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.15071721863675624;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1631961752374504;  // std dev = 0.012, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, J) )
%   | then return -0.06842697784420286;  // std dev = 0.000, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
%   | else return -0.06842697784420262;  // std dev = 1.83e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(F, D), follows(F, E) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.13745119301531525;  // std dev = 0.117, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.15281847711706167;  // std dev = 0.163, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else return 0.1978251274206679;  // std dev = 0.067, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.08329731538031586;  // std dev = 1.140, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0.14552412539337564;  // std dev = 0.056, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.1315382808997868;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.0525696278988609;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else if ( follows(I, A) )
%   | then return -0.06419184008202626;  // std dev = 1.32e-09, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.043', 'seconds']
Refined model CLL: -0.084324


******************************************
Best model found
******************************************
Results 

CLL : -0.090758 

AUC ROC : 0.99465 

AUC PR : 0.466645 

Precision : 0.335106 

Recall : 1.0 

F1 : 0.501992 

Total Learning Time : 45.012 

Total Inference Time : 12.639669179916382 

Total revision time: 79.595778591156
Best scored revision CLL: -0.084324


Results 

CLL : -0.090758 

AUC ROC : 0.99465 

AUC PR : 0.466645 

Precision : 0.335106 

Recall : 1.0 

F1 : 0.501992 

Total Learning Time : 79.6126300163269 

Total Inference Time : 12.639669179916382 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.368
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8196873966379734;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048766;  // std dev = 5.58e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7271702392772513;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5244882536030138;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360632;  // std dev = 4.17e-09, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.43257671100341627;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4325767110034162;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.2924815728375102;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926101;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.26964899091679384;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 2.63e-09, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2199336338622696;  // std dev = 3.65e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.07738199415089267;  // std dev = 1.637, 28.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333704;  // std dev = 1.18e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13470224012844892;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420274;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15471736728983998;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.990', 'seconds']
Parameter learned model CLL:-0.090713 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.981, 1, 25], 'false,true': [5.58e-08, 54, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 54, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 1, 25], 'false,true': [0.0, 0, 0], 'false,false': [4.17e-09, 49, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 22], 'true,false': [0.0, 37, 0], 'false,true,true': [7.45e-09, 0, 3], 'false,true,false': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.981, 1, 25], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 40, 0], 'false,false,false': [0.0, 3, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.63e-09, 48, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [3.65e-08, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 35, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.637, 3, 25], 'true,false': [0.0, 0, 0], 'false,true': [1.18e-08, 44, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.192, 1, 25], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 36, 0], 'false,false,false': [0.0, 3, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 50, 0]}]
{'': [0.03698224852071082, 5.756711979537848e-17], 'false': [5.756711979537848e-17, nan]}
{'': [-1.4210854715202004e-16, -3.700743415417188e-17], 'false': [-3.700743415417188e-17, nan]}
{'': [0.03698224852071007, 1.586032892321652e-17], 'false': [nan, 1.586032892321652e-17]}
{'': [0.06672434400194284, 0.06987938869902108], 'false': [0.06987938869902108, nan], 'false,true': [3.700743415417188e-17, 0.0], 'true': [-8.074349270001139e-17, 0.0]}
{'': [0.036982248520710116, -1.6782441069915156e-17], 'true': [0.036982248520710116, nan], 'false': [nan, -1.6782441069915156e-17], 'false,false': [-1.3877787807814457e-17, 1.1564823173178713e-18], 'false,false,true': [nan, -1.3877787807814457e-17]}
{'': [-4.4408920985006264e-17, 6.938893903907228e-18], 'false': [nan, 6.938893903907228e-18], 'false,false': [nan, 6.938893903907228e-18]}
{'': [5.329070518200751e-17, 0.0], 'false': [nan, 0.0], 'false,false': [nan, 0.0], 'false,false,false': [0.0, nan]}
{'': [0.09566326530612242, 3.469446951953614e-18], 'true': [0.09566326530612242, nan], 'false': [3.1540426835941946e-18, 0.0], 'false,false': [nan, 0.0]}
{'': [0.036982248520710075, 0.0], 'false': [nan, 0.0], 'false,false': [-1.5419764230904951e-18, -5.782411586589357e-19], 'false,false,true': [nan, -1.5419764230904951e-18]}
{'': [-3.9968028886505634e-17, -2.220446049250313e-18], 'false': [nan, -2.220446049250313e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 11.405
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(E, A) )
%   | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.14185106490048766;  // std dev = 6.50e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7304715279158684;  // std dev = 0.117, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.5528067455442878;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.12544463852839158;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5728024912726593;  // std dev = 0.163, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.11231637819360633;  // std dev = 2.36e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4340221724360786;  // std dev = 0.164, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.10159632948783631;  // std dev = 7.45e-09, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.4106151525293966;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.10159632948783628;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3304311459920982;  // std dev = 0.153, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(A, D) )
%   | then return -0.09269127618926101;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else return -0.09269127618926096;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(D, F), recursion_accounttype(D, B) )
%   | | then if ( follows(D, A), follows(E, A) )
%   | | | then return 0.24921313845574736;  // std dev = 0.032, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.4676218697143715;  // std dev = 0.864, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.244922922818035;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2839448714685758;  // std dev = 0.100, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H) )
%   | | then return -0.3616449974194396;  // std dev = 0.787, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -7.224832328881492E-4;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, I) )
%   | then if ( follows(I, A) )
%   | | then return -0.08518475138839679;  // std dev = 3.48e-09, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.08518475138839687;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.20188531177482621;  // std dev = 0.000647, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.20249075505662237;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2316385613733276;  // std dev = 0.087, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.3238232098546193;  // std dev = 0.114, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.23996934123244545;  // std dev = 0.026, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, G) )
%   | then if ( follows(H, A) )
%   | | then return -0.07877675473109179;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(I, A) )
%   | | then return -0.07877675473109177;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.17130057043997626;  // std dev = 0.000570, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.17174788891850956;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1932242715546206;  // std dev = 0.076, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.2584267682610293;  // std dev = 0.098, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.19898468487806623;  // std dev = 0.023, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, A) )
%   | | then if ( follows(A, H) )
%   | | | then return -0.07324622576333704;  // std dev = 1.05e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07324622576333704;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.1483326905974312;  // std dev = 0.000508, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1486741651675645;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.16502556922730457;  // std dev = 0.067, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.21272649175691968;  // std dev = 0.085, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.16917053026304932;  // std dev = 0.020, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, A) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.06842697784420274;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.06842697784420272;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.13055381043853148;  // std dev = 0.000456, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.13082180807943355;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.14362781742612596;  // std dev = 0.060, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.17969009837220107;  // std dev = 0.074, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.14671547258080803;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, G) )
%   | then if ( follows(G, A) )
%   | | then return -0.06419184008202623;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( follows(G, H) )
%   | | | then return -0.06419184008202619;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.0641918400820262;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.06419184008202618;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.403', 'seconds']
Refined model CLL: -0.087933


******************************************
Best model found
******************************************
Results 

CLL : -0.084196 

AUC ROC : 0.995815 

AUC PR : 0.456269 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 11.405 

Total Inference Time : 2.3392746448516846 

Total revision time: 18.315567014694214
Best scored revision CLL: -0.087933


Results 

CLL : -0.084196 

AUC ROC : 0.995815 

AUC PR : 0.456269 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 18.332418439865112 

Total Inference Time : 2.3392746448516846 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.261
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8385410919622573;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048763;  // std dev = 8.16e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6668100341313812;  // std dev = 1.682, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283914;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.553526028246014;  // std dev = 0.139, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360621;  // std dev = 7.68e-09, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.41480641520279926;  // std dev = 0.990, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | else return -0.1015963294878362;  // std dev = 5.37e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4356397485361323;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.10159632948783634;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.33739390932972335;  // std dev = 0.008, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926107;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22807354599985466;  // std dev = 1.386, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839682;  // std dev = 5.51e-09, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.204763764642597;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109158;  // std dev = 6.14e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17114391173195587;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.09165435310708855;  // std dev = 0.262, 54.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420265;  // std dev = 4.34e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | else return -0.06842697784420272;  // std dev = 9.31e-10, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1534292034438198;  // std dev = 0.000639, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.712', 'seconds']
Parameter learned model CLL:-0.089018 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.99, 1, 50], 'false,true': [8.16e-08, 90, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.682, 3, 50], 'false,true': [0.0, 93, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.139, 1, 50], 'false,true': [0.0, 0, 0], 'false,false': [7.68e-09, 91, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.99, 1, 47], 'true,false': [5.37e-08, 87, 0], 'false,true,true': [0.0, 0, 3], 'false,true,false': [0.0, 10, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.008, 0, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 79, 0], 'false,false,false': [0.0, 5, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.386, 2, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.51e-09, 102, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.99, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.14e-08, 107, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.99, 1, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 88, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 2, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.262, 4, 50], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.34e-08, 90, 0], 'false,false,false': [9.31e-10, 13, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.000639, 0, 50], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 96, 0]}]
{'': [0.019223375624760057, 7.401486830834377e-17], 'false': [7.401486830834377e-17, nan]}
{'': [0.05339978640085531, -1.4325458382260084e-17], 'false': [-1.4325458382260084e-17, nan]}
{'': [0.01922337562475929, 6.100126508929432e-17], 'false': [nan, 6.100126508929432e-17]}
{'': [0.06835714209972656, 0.05123478169181818], 'true': [0.02039930555555543, 3.317907889684376e-17], 'false': [0.05123478169181818, nan], 'false,true': [0.0, -5.551115123125783e-18]}
{'': [1.2161015651024342e-06, 0.0], 'true': [1.2161015651024342e-06, nan], 'false': [nan, 0.0], 'false,false': [0.0, 0.0], 'false,false,true': [nan, 0.0]}
{'': [0.03696514599327201, 3.047671047990626e-17], 'false': [nan, 3.047671047990626e-17], 'false,false': [nan, 3.047671047990626e-17]}
{'': [0.019215774876481462, 3.5278114801173196e-17], 'false': [nan, 3.5278114801173196e-17], 'false,false': [nan, 3.5278114801173196e-17], 'false,false,false': [3.5278114801173196e-17, nan]}
{'': [0.01921656532491405, -8.018277400070574e-18], 'true': [0.01921656532491405, nan], 'false': [-7.569702440626067e-18, 0.0], 'false,false': [nan, 0.0]}
{'': [0.06856397465889694, 2.3713501496848002e-17], 'false': [nan, 2.3713501496848002e-17], 'false,false': [2.0970879354030734e-17, 5.337610695313253e-19], 'false,false,true': [nan, 2.0970879354030734e-17]}
{'': [4.0776447401746907e-07, -1.4456028966473393e-17], 'false': [nan, -1.4456028966473393e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 23.502
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.7672398441904211;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.14185106490048763;  // std dev = 8.94e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), tweets(E, D) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.65872928657471;  // std dev = 0.964, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.7328684136274516;  // std dev = 0.096, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( tweets(E, D) )
%   | | | then return 0.4739677240518402;  // std dev = 0.871, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.723068861683663;  // std dev = 0.028, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.12544463852839133;  // std dev = 0.000, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5784864605543761;  // std dev = 0.215, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else return -0.11231637819360617;  // std dev = 9.42e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4370087133646071;  // std dev = 0.217, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else return -0.10159632948783615;  // std dev = 5.67e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.41103115878503327;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.2654458009197515;  // std dev = 0.958, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.3306486143455523;  // std dev = 0.096, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.33318680323963246;  // std dev = 0.099, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), follows(A, H) )
%   | | | then return 0.20482607920488421;  // std dev = 0.876, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.33133204914072945;  // std dev = 0.080, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.14406241835486616;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, I) )
%   | then return -0.09269127618926108;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(D, A), tweets(D, F) )
%   | | then if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | | then return 0.29239877247703583;  // std dev = 0.050, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.28409288204612587;  // std dev = 0.121, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( tweets(D, E), follows(D, G) )
%   | | | then return 0.24270353872162698;  // std dev = 0.000383, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2994460104606687;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.25541272393216474;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.24417959774349107;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.28074374421926407;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, J) )
%   | then return -0.08518475138839682;  // std dev = 5.27e-09, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | else return -0.08518475138839693;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(D, A), tweets(D, F) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.23067515027811478;  // std dev = 0.074, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.2378521574119667;  // std dev = 0.087, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(D, E), follows(D, H) )
%   | | | then return 0.20090982513134273;  // std dev = 0.000334, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2406208168550695;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return 0.2099349139854668;  // std dev = 0.013, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.20196156205781124;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.22766922183162083;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, K) )
%   | then return -0.07877675473109166;  // std dev = 4.66e-09, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else return -0.0787767547310918;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(D, A), tweets(D, F) )
%   | | then if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | | then return 0.1968154209293715;  // std dev = 0.039, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.1914978239214797;  // std dev = 0.093, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( tweets(D, E), follows(D, G) )
%   | | | then return 0.17057926956372602;  // std dev = 0.000295, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.19943546728672926;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.17723109369448375;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1713569133515206;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.19012651038247752;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, J) )
%   | then return -0.07324622576333706;  // std dev = 0.000, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.1673148217398413;  // std dev = 0.083, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.15600754189621052;  // std dev = 0.029, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.14781913052651416;  // std dev = 7.03e-05, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1553749011006966;  // std dev = 0.032, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09311223566067739;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.14837570623540963;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.16255831050773883;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, J) )
%   | then return -0.06842697784420265;  // std dev = 4.56e-09, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else return -0.06842697784420275;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | | then return 0.13908011413211965;  // std dev = 0.033, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.17517856808141188;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0.13251236774962785;  // std dev = 0.010, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.14109575343473735;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), recursion_accounttype(H, B) )
%   | | | then return 0.13479627745113146;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.13016877593397289;  // std dev = 5.09e-05, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1373190275569654;  // std dev = 0.024, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1424843439978391;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06419184008202626;  // std dev = 0.000, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.086', 'seconds']
Refined model CLL: -0.089299


******************************************
Best model found
******************************************
Results 

CLL : -0.087231 

AUC ROC : 0.993771 

AUC PR : 0.33603 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 23.502 

Total Inference Time : 3.5091631412506104 

Total revision time: 34.606127012252806
Best scored revision CLL: -0.089018


Results 

CLL : -0.087231 

AUC ROC : 0.993771 

AUC PR : 0.33603 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 34.622978437423704 

Total Inference Time : 3.5091631412506104 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.837
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7956489350995126;  // std dev = 2.165, 80.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=75 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048793;  // std dev = 0.000, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6812802779874069;  // std dev = 1.949, 79.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=75 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839122;  // std dev = 6.99e-08, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5669145488758228;  // std dev = 0.114, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360615;  // std dev = 8.93e-09, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.42525482750833826;  // std dev = 0.993, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | else return -0.10159632948783642;  // std dev = 0.000, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43933933455059127;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.10159632948783634;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3125203037997052;  // std dev = 1.395, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926076;  // std dev = 8.02e-08, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.25922964799999876;  // std dev = 0.993, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 5.82e-09, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.16163576021737333;  // std dev = 2.165, 80.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109153;  // std dev = 7.74e-08, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15881820313594316;  // std dev = 1.698, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333728;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333707;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1473552775136427;  // std dev = 0.159, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420264;  // std dev = 6.23e-08, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | | else return -0.06842697784420274;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12724570604221097;  // std dev = 0.159, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.727', 'seconds']
Parameter learned model CLL:-0.091803 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.165, 5, 75], 'false,true': [0.0, 136, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.949, 4, 75], 'false,true': [6.99e-08, 141, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.114, 1, 75], 'false,true': [0.0, 0, 0], 'false,false': [8.93e-09, 141, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.993, 1, 70], 'true,false': [0.0, 137, 0], 'false,true,true': [5.27e-09, 0, 5], 'false,true,false': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.395, 2, 75], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [8.02e-08, 134, 0], 'false,false,false': [0.0, 7, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.993, 1, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.82e-09, 144, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.165, 5, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.74e-08, 139, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.698, 3, 75], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 143, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 8, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.159, 2, 75], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.23e-08, 138, 0], 'false,false,false': [0.0, 13, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.159, 2, 75], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 168, 0]}]
{'': [0.05859374999999893, -6.204187490552346e-17], 'false': [-6.204187490552346e-17, nan]}
{'': [0.048069219676335886, 3.4645257506033254e-17], 'false': [3.4645257506033254e-17, nan]}
{'': [0.012984764542937125, 7.716443717252861e-17], 'false': [nan, 7.716443717252861e-17]}
{'': [0.06714623345397526, 0.06718118708311863], 'false': [0.06718118708311863, nan], 'false,true': [2.2204460492503132e-17, -6.1679056923619804e-18], 'true': [0.013886133703629651, -4.3760615569166756e-17]}
{'': [0.025289360251243138, 4.881831739486504e-17], 'true': [0.025289360251243138, nan], 'false': [nan, 4.881831739486504e-17], 'false,false': [4.8054429424073937e-17, 0.0], 'false,false,true': [nan, 4.8054429424073937e-17]}
{'': [0.012980421441436804, 3.39234813079909e-17], 'false': [nan, 3.39234813079909e-17], 'false,false': [nan, 3.39234813079909e-17]}
{'': [0.058575029219356055, 4.313096642428666e-17], 'false': [nan, 4.313096642428666e-17], 'false,false': [nan, 4.313096642428666e-17], 'false,false,false': [4.313096642428666e-17, nan]}
{'': [0.036971587481255654, -2.7939387374672815e-17], 'true': [0.036971587481255654, nan], 'false': [-2.4067771862503392e-17, 0.0], 'false,false': [nan, 0.0]}
{'': [0.025292840901537668, 2.9409881447024017e-17], 'false': [nan, 2.9409881447024017e-17], 'false,false': [2.8157830334696e-17, 5.337610695313253e-19], 'false,false,true': [nan, 2.8157830334696e-17]}
{'': [0.025293438980436893, -6.6084703846735505e-18], 'false': [nan, -6.6084703846735505e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 19.437
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, F), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.8105298874804645;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(E, D), follows(A, E) )
%   | | | then return 0.643863220813798;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else return -0.14185106490048796;  // std dev = 0.000, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.7273583722476513;  // std dev = 0.076, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.5194734122109544;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.7364202585142515;  // std dev = 0.084, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.12544463852839133;  // std dev = 4.21e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D), follows(E, A) )
%   | | | then return 0.517536285677911;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.5683223554092246;  // std dev = 0.088, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.5763417436900377;  // std dev = 0.117, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.3034185273359843;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.5534185273359842;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.5588342698776122;  // std dev = 0.049, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.11231637819360638;  // std dev = 6.99e-08, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.3703192848585996;  // std dev = 1.694, 44.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | | else return 0.213900599453659;  // std dev = 0.896, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.4335893264751751;  // std dev = 0.125, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.10159632948783644;  // std dev = 0.000, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.24575480388505533;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.30085718905470854;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.3404073188968812;  // std dev = 0.058, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.341325342525226;  // std dev = 0.114, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return 0.3488742752476641;  // std dev = 0.139, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else if ( follows(A, F) )
%   | then return -0.0926912761892607;  // std dev = 7.74e-08, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | else return -0.09269127618926096;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.2860608106895375;  // std dev = 0.075, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.257177286668079;  // std dev = 0.001, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.27768571192673885;  // std dev = 0.036, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.061832484300373095;  // std dev = 0.867, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), tweets(A, I) )
%   | | | then return -0.11798396781316393;  // std dev = 1.104, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2809026950516719;  // std dev = 0.046, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return 0.28261240825777983;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2421661797844817;  // std dev = 0.003, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839678;  // std dev = 5.51e-09, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, D) )
%   | | then if ( follows(F, A), tweets(F, E) )
%   | | | then return 0.22832262129049635;  // std dev = 0.039, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.21432803408946088;  // std dev = 0.031, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.2544836894359577;  // std dev = 0.020, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.22308027130934316;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(H, I) )
%   | | | then return -0.19368046308690162;  // std dev = 0.965, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.2456062268988791;  // std dev = 0.104, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return 0.2289671739920593;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.20052680263665335;  // std dev = 0.003, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109151;  // std dev = 6.65e-09, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, D) )
%   | | then if ( follows(F, A), tweets(F, E) )
%   | | | then return 0.19060691515039974;  // std dev = 0.034, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.18047048174951352;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(G, D), follows(G, A) )
%   | | | then return 0.20928512020230686;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.18683223090722376;  // std dev = 0.025, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.14227058847015925;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2251125856434355;  // std dev = 0.192, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return -0.10060390173956647;  // std dev = 1.222, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.17021779559525324;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07324622576333677;  // std dev = 7.21e-09, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, D) )
%   | | then if ( follows(F, A), tweets(F, E) )
%   | | | then return 0.16292334387674107;  // std dev = 0.030, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.1553177447901423;  // std dev = 0.024, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.17675864630537963;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.16010577952358382;  // std dev = 0.022, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(H, J) )
%   | | | then return 0.2613736638666699;  // std dev = 0.067, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1891971428403138;  // std dev = 0.041, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, K), follows(L, A) )
%   | | | then return 0.17447779123760565;  // std dev = 0.066, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.14689535885059427;  // std dev = 0.006, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420264;  // std dev = 5.51e-09, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(F, D), follows(F, A) )
%   | | | then return 0.14188120194490367;  // std dev = 0.034, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.1322270516497348;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.19160736210526577;  // std dev = 0.089, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1419405213782914;  // std dev = 0.069, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.1524934062410445;  // std dev = 0.014, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.13824773896618234;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.22948740160075295;  // std dev = 1.057, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.14046573242230054;  // std dev = 0.044, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06419184008202626;  // std dev = 0.000, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.740', 'seconds']
Refined model CLL: -0.090183


******************************************
Best model found
******************************************
Results 

CLL : -0.085975 

AUC ROC : 0.996511 

AUC PR : 0.519529 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 19.437 

Total Inference Time : 5.9709553718566895 

Total revision time: 36.320107053756715
Best scored revision CLL: -0.090183


Results 

CLL : -0.085975 

AUC ROC : 0.996511 

AUC PR : 0.519529 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 36.33695847892761 

Total Inference Time : 5.9709553718566895 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.511
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8015451615146054;  // std dev = 2.379, 106.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=100 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048835;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.701628459404434;  // std dev = 1.707, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283917;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5540586729819341;  // std dev = 0.139, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360661;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.404465245592208;  // std dev = 1.704, 95.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=92 */
%   | else return -0.10159632948783645;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4360441929606286;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783623;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.32019730468824;  // std dev = 1.400, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0926912761892606;  // std dev = 8.82e-08, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | | else return -0.09269127618926087;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2720187356109532;  // std dev = 0.017, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.27e-09, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1650115890208137;  // std dev = 2.378, 106.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109147;  // std dev = 7.45e-08, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17478940028724213;  // std dev = 1.403, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333667;  // std dev = 1.14e-07, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333698;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1119271472202235;  // std dev = 0.231, 106.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420262;  // std dev = 7.60e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | | else return -0.0684269778442027;  // std dev = 9.31e-10, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13380330681161717;  // std dev = 0.139, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.099', 'seconds']
Parameter learned model CLL:-0.092073 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.379, 6, 100], 'false,true': [0.0, 192, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.707, 3, 100], 'false,true': [0.0, 206, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.139, 2, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 202, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.704, 3, 92], 'true,false': [0.0, 160, 0], 'false,true,true': [0.0, 0, 8], 'false,true,false': [0.0, 10, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.4, 2, 100], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [8.82e-08, 185, 0], 'false,false,false': [0.0, 8, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.017, 0, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.27e-09, 190, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.378, 6, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.45e-08, 197, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.403, 2, 100], 'true,false': [0.0, 0, 0], 'false,true': [1.14e-07, 193, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.63e-09, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.231, 6, 100], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.6e-08, 179, 0], 'false,false,false': [9.31e-10, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.139, 2, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 179, 0]}]
{'': [0.05339978640085639, -2.266705341943028e-16], 'false': [-2.266705341943028e-16, nan]}
{'': [0.028277877274012014, -3.8803911540296735e-17], 'false': [-3.8803911540296735e-17, nan]}
{'': [0.01922337562475922, -4.3969228698026004e-17], 'false': [nan, -4.3969228698026004e-17]}
{'': [0.07125777063291154, 0.07137218058732292], 'false': [0.07137218058732292, nan], 'false,true': [-1.1102230246251565e-16, -2.7755575615628915e-18], 'true': [0.030581717451523098, -7.216449660063518e-17]}
{'': [0.019205276361561587, 4.256813669547232e-17], 'true': [0.019205276361561587, nan], 'false': [nan, 4.256813669547232e-17], 'false,false': [4.200843876960052e-17, 0.0], 'false,false,true': [nan, 4.200843876960052e-17]}
{'': [2.843249067048248e-06, 2.804773956947764e-17], 'false': [nan, 2.804773956947764e-17], 'false,false': [nan, 2.804773956947764e-17]}
{'': [0.05335563152916875, 2.817824935596844e-17], 'false': [nan, 2.817824935596844e-17], 'false,false': [nan, 2.817824935596844e-17], 'false,false,false': [2.817824935596844e-17, nan]}
{'': [0.01930453470309319, 7.292641436263283e-17], 'true': [0.01930453470309319, nan], 'false': [6.787892067656397e-17, 6.30808536718839e-19], 'false,false': [nan, 6.30808536718839e-19]}
{'': [0.05336365641310693, 3.106323488588521e-17], 'false': [nan, 3.106323488588521e-17], 'false,false': [3.2252288983524104e-17, 9.912705577010326e-19], 'false,false,true': [nan, 3.2252288983524104e-17]}
{'': [0.019212070708455087, -4.341654286243629e-18], 'false': [nan, -4.341654286243629e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 78.456
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(D, F), follows(G, D) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.7899671169176937;  // std dev = 1.672, 44.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else return -0.14185106490048846;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(D, F) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.730634848182155;  // std dev = 0.030, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.6763720886754879;  // std dev = 0.967, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.7384005871147257;  // std dev = 0.072, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.7212567243492103;  // std dev = 0.028, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return -0.12544463852839155;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.5671713796584232;  // std dev = 0.044, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.5141871967226663;  // std dev = 0.980, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0.40529335602141964;  // std dev = 0.904, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.5571326711927128;  // std dev = 0.035, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   else return -0.11231637819360653;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then return 0.43051475738735423;  // std dev = 0.166, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.16665060223634867;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.4249154271270563;  // std dev = 0.029, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.4166506022363486;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783623;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.32565414195435993;  // std dev = 0.052, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.287065207601151;  // std dev = 0.957, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else return 0.36672486572346824;  // std dev = 0.091, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(H, G) )
%   | | | then return 0.08833729499179258;  // std dev = 1.205, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.3458504932158898;  // std dev = 0.020, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.32406610154565346;  // std dev = 0.081, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, I) )
%   | then return -0.09269127618926055;  // std dev = 9.54e-08, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else return -0.09269127618926087;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(E, D) )
%   | | | then return 0.25743731644436474;  // std dev = 0.030, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.26993081854044243;  // std dev = 0.048, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.015849418828023154;  // std dev = 0.867, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2793934228729878;  // std dev = 0.088, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(H, G) )
%   | | | then return 0.3149262474141774;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2722851821908554;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.2529426504020033;  // std dev = 0.017, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.2731680304504449;  // std dev = 0.057, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839678;  // std dev = 5.27e-09, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(D, E), follows(D, A) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.18853680721032579;  // std dev = 1.362, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | | | else return 0.05134566147692584;  // std dev = 1.280, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( recursion_accounttype(D, B), follows(G, A) )
%   | | | then return 0.2604887996552992;  // std dev = 0.026, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.21555327161106302;  // std dev = 0.064, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0.09799990341805263;  // std dev = 0.313, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( tweets(A, H) )
%   | then if ( follows(I, A) )
%   | | then if ( tweets(I, H) )
%   | | | then return -0.07877675473109154;  // std dev = 6.14e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | | else return -0.0787767547310917;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return -0.07877675473109177;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1619456336306867;  // std dev = 0.995, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0.058841728282583;  // std dev = 0.905, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(E, G) )
%   | | | then return 0.18724767937748127;  // std dev = 0.061, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.20880949688471406;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.1851100002987234;  // std dev = 0.037, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.2051468594075294;  // std dev = 0.081, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.17510675954193236;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, J) )
%   | then return -0.07324622576333671;  // std dev = 7.62e-09, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | else return -0.07324622576333699;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), recursion_accounttype(D, B) )
%   | | | then return 0.1326907407857254;  // std dev = 0.984, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.16985375334944403;  // std dev = 0.110, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else return -0.15384323756811372;  // std dev = 0.857, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return -0.02230682576603238;  // std dev = 0.846, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.1585481731942765;  // std dev = 0.035, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.017609636775433517;  // std dev = 0.912, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, A) )
%   | | then return -0.06842697784420264;  // std dev = 4.56e-09, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | | else return -0.06842697784420265;  // std dev = 2.79e-09, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return -0.0684269778442027;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.14829161459818183;  // std dev = 0.093, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | | else return 0.07489431398227894;  // std dev = 0.925, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | | then return -0.17095831807952686;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.01757171836156975;  // std dev = 0.914, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.1872017774990226;  // std dev = 0.061, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.13491214641877336;  // std dev = 0.028, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1472860693816104;  // std dev = 0.018, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.06419184008202626;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.357', 'seconds']
Refined model CLL: -0.091073


******************************************
Best model found
******************************************
Results 

CLL : -0.086149 

AUC ROC : 0.995845 

AUC PR : 0.481205 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 78.456 

Total Inference Time : 9.99464750289917 

Total revision time: 102.38744520378113
Best scored revision CLL: -0.091073


Results 

CLL : -0.086149 

AUC ROC : 0.995845 

AUC PR : 0.481205 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 102.40429662895203 

Total Inference Time : 9.99464750289917 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.21
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8199809961682126;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048827;  // std dev = 0.000, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6963427563312394;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283918;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5107457810689718;  // std dev = 0.237, 134.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360686;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.39508818196556933;  // std dev = 2.389, 124.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=118 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4434752787397632;  // std dev = 1.18e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783616;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.2968182237928454;  // std dev = 2.536, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926049;  // std dev = 7.30e-08, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   | | else return -0.09269127618926087;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2766777692544714;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.89e-09, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2083993538715153;  // std dev = 1.716, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109144;  // std dev = 6.99e-08, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15120459618220178;  // std dev = 2.395, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333661;  // std dev = 1.29e-07, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333699;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15064724252898454;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420265;  // std dev = 3.94e-08, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | | else return -0.06842697784420268;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1376838139649644;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202619;  // std dev = 3.48e-09, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.825', 'seconds']
Parameter learned model CLL:-0.092654 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 247, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 230, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.237, 8, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 254, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [2.389, 6, 118], 'true,false': [0.0, 235, 0], 'false,true,true': [1.18e-08, 0, 8], 'false,true,false': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.536, 7, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.3e-08, 233, 0], 'false,false,false': [0.0, 8, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.996, 1, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 278, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.716, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.99e-08, 228, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [2.395, 6, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.29e-07, 215, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 16, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.94e-08, 240, 0], 'false,false,false': [0.0, 13, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false': [3.48e-09, 259, 0]}]
{'': [0.03671114736903867, -1.4023869784738819e-16], 'false': [-1.4023869784738819e-16, nan]}
{'': [0.02982248520709748, -5.406303424261632e-17], 'false': [-5.406303424261632e-17, nan]}
{'': [0.056137224326129526, -9.616104937698206e-17], 'false': [nan, -9.616104937698206e-17]}
{'': [0.07168225865496404, 0.06328822539319277], 'true': [0.04604578563995904, -7.74793940589471e-17], 'false': [0.06328822539319277, nan], 'false,true': [1.3877787807814457e-16, -3.0839528461809902e-18]}
{'': [0.04836235555425628, 3.1325794885689064e-17], 'true': [0.04836235555425628, nan], 'false': [nan, 3.1325794885689064e-17], 'false,false': [2.2871547288415242e-17, 0.0], 'false,false,true': [nan, 2.2871547288415242e-17]}
{'': [0.007807956209758635, 3.5143750419789125e-17], 'false': [nan, 3.5143750419789125e-17], 'false,false': [nan, 3.5143750419789125e-17]}
{'': [0.022824082921264883, 2.1425356615573195e-17], 'false': [nan, 2.1425356615573195e-17], 'false,false': [nan, 2.1425356615573195e-17], 'false,false,false': [2.1425356615573195e-17, nan]}
{'': [0.04345962225988659, 6.920870802858119e-17], 'true': [0.04345962225988659, nan], 'false': [7.745742032268534e-17, 0.0], 'false,false': [nan, 0.0]}
{'': [0.022697940898041783, -1.0531759917392789e-17], 'false': [nan, -1.0531759917392789e-17], 'false,false': [6.47630097698008e-18, -1.6012832085939759e-18], 'false,false,true': [nan, 6.47630097698008e-18]}
{'': [0.015371015898735647, 1.200241107702872e-17], 'false': [nan, 1.200241107702872e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 31.612
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(E, A), recursion_accounttype(D, B) )
%   | | | then return 0.8211118980624753;  // std dev = 1.388, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | | else return 0.6646005480027382;  // std dev = 2.200, 31.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( tweets(A, F) )
%   | | then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.14185106490048832;  // std dev = 0.000, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.7037979257093274;  // std dev = 0.990, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.7255395132947388;  // std dev = 0.009, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.730167975735385;  // std dev = 0.082, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.506833971833546;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.7443804519593485;  // std dev = 0.068, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.5777137852926821;  // std dev = 0.900, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.6816308271010333;  // std dev = 0.986, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   else return -0.12544463852839186;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | | then return 0.5316997098935319;  // std dev = 1.362, 55.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=53 */
%   | | | else return 0.5802626836236584;  // std dev = 0.101, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.37163770605346685;  // std dev = 0.903, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.5787029885638407;  // std dev = 0.207, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.11231637819360692;  // std dev = 0.000, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.4190056913507942;  // std dev = 0.956, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.36337476619177106;  // std dev = 0.979, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0.44843046713532986;  // std dev = 0.206, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.2981502036134411;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(D, E) )
%   | | | then return 0.30608547008190057;  // std dev = 1.691, 77.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=74 */
%   | | | else return 0.10610469236588257;  // std dev = 0.853, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return -0.006251973727224007;  // std dev = 0.821, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3209176715050496;  // std dev = 0.046, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.332727526607664;  // std dev = 0.117, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926053;  // std dev = 5.96e-08, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return -0.09269127618926086;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | | then return 0.2730800226793856;  // std dev = 0.060, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.2987721289442631;  // std dev = 0.132, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( tweets(D, F), recursion_accounttype(D, B) )
%   | | | then return 0.2800703304245574;  // std dev = 0.059, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2548198319443088;  // std dev = 0.065, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.1582438621027663;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H) )
%   | | then if ( tweets(H, G) )
%   | | | then return -0.08518475138839678;  // std dev = 6.99e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | | | else return -0.08518475138839678;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.08518475138839678;  // std dev = 5.27e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return -0.08518475138839678;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(F, E), recursion_accounttype(E, B) )
%   | | | then return 0.22437300836190244;  // std dev = 0.081, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.12765332858142814;  // std dev = 1.328, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | else if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | | then return -0.025854377308348914;  // std dev = 1.216, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.1848664268587755;  // std dev = 0.870, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.23257241348136176;  // std dev = 0.060, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.21163406319645334;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.23936910303267278;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2350354008365795;  // std dev = 0.031, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07877675473109143;  // std dev = 4.17e-09, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, D) )
%   | | | then return 0.16837132834243576;  // std dev = 0.985, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.19362670939829732;  // std dev = 0.046, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.2168223279085546;  // std dev = 0.059, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.18903220159884002;  // std dev = 0.102, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.18672695078910442;  // std dev = 0.036, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.042126129899715176;  // std dev = 0.861, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, H), follows(H, A) )
%   | | | then return 0.19953700614878223;  // std dev = 0.029, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.18321935669128583;  // std dev = 0.025, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07324622576333682;  // std dev = 7.15e-09, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.16460259601988345;  // std dev = 0.089, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.05300757534185121;  // std dev = 1.636, 25.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=22 */
%   | | else return 0.017514590455860863;  // std dev = 0.937, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(G, F), follows(A, G) )
%   | | | then return 0.18121762696847496;  // std dev = 0.050, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.15917553097580117;  // std dev = 0.043, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.14979863886819816;  // std dev = 0.004, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.15804880508820965;  // std dev = 0.019, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, J) )
%   | then return -0.06842697784420262;  // std dev = 3.23e-09, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   | else return -0.06842697784420265;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(A, D) )
%   | | | then return 0.11435020462653925;  // std dev = 0.988, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.1542456017794931;  // std dev = 0.046, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(A, D), tweets(A, F) )
%   | | | then return 0.17256735604805215;  // std dev = 0.044, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.14430047569488116;  // std dev = 0.028, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(H, A), recursion_accounttype(G, B) )
%   | | | then return 0.012905074521203838;  // std dev = 0.887, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.14992486014275908;  // std dev = 0.123, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.13165456859753077;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.02369311407237879;  // std dev = 0.866, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.06419184008202625;  // std dev = 1.86e-09, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.145', 'seconds']
Refined model CLL: -0.091123


******************************************
Best model found
******************************************
Results 

CLL : -0.085534 

AUC ROC : 0.996542 

AUC PR : 0.523464 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 31.612 

Total Inference Time : 8.422371625900269 

Total revision time: 55.50470468711853
Best scored revision CLL: -0.091123


Results 

CLL : -0.085534 

AUC ROC : 0.996542 

AUC PR : 0.523464 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 55.52155611228943 

Total Inference Time : 8.422371625900269 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.674
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8268989350995116;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048766;  // std dev = 6.50e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6944871741022817;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4809710739767611;  // std dev = 0.284, 34.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360626;  // std dev = 6.04e-09, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.41509987096293;  // std dev = 0.983, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else return -0.10159632948783617;  // std dev = 5.27e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4495826295836194;  // std dev = 7.45e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.10159632948783634;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.34960446217787305;  // std dev = 0.013, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926107;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.09269127618926097;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24336300602377806;  // std dev = 0.990, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 2.28e-09, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.16847052212496702;  // std dev = 1.370, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1694223299234778;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.17485231373806034;  // std dev = 0.001, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420271;  // std dev = 7.45e-09, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.09045921029108299;  // std dev = 0.239, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.381', 'seconds']
Parameter learned model CLL:-0.091569 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.984, 1, 31], 'false,true': [6.5e-08, 64, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.984, 1, 31], 'false,true': [0.0, 55, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.284, 3, 31], 'false,true': [0.0, 0, 0], 'false,false': [6.04e-09, 62, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.983, 1, 28], 'true,false': [5.27e-08, 69, 0], 'false,true,true': [7.45e-09, 0, 3], 'false,true,false': [0.0, 8, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.013, 0, 31], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 59, 0], 'false,false,false': [0.0, 7, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.99, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.28e-09, 60, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.37, 2, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 47, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.984, 1, 31], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 63, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.73e-09, 15, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.001, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.45e-09, 43, 0], 'false,false,false': [0.0, 7, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.239, 2, 31], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 53, 0]}]
{'': [0.030273437500001332, 6.591949208711867e-17], 'false': [6.591949208711867e-17, nan]}
{'': [0.0302734375000005, -3.633457171500512e-17], 'false': [-3.633457171500512e-17, nan]}
{'': [0.08044982698961907, 3.581364595565021e-17], 'false': [nan, 3.581364595565021e-17]}
{'': [0.06547663387539045, 0.060257503125241696], 'true': [0.03329369797859664, 4.022547190670857e-17], 'false': [0.060257503125241696, nan], 'false,true': [3.700743415417188e-17, -5.204170427930421e-18]}
{'': [5.328174852709157e-06, -3.3643121958338078e-18], 'true': [5.328174852709157e-06, nan], 'false': [nan, -3.3643121958338078e-18], 'false,false': [-1.8817339400426382e-18, 0.0], 'false,false,true': [nan, -1.8817339400426382e-18]}
{'': [0.030651981457059142, 5.551115123125783e-18], 'false': [nan, 5.551115123125783e-18], 'false,false': [nan, 5.551115123125783e-18]}
{'': [0.05686939462101562, -1.1810883240693154e-18], 'false': [nan, -1.1810883240693154e-18], 'false,false': [nan, -1.1810883240693154e-18], 'false,false,false': [-1.1810883240693154e-18, nan]}
{'': [0.030243856452445272, -4.981769982292369e-18], 'true': [0.030243856452445272, nan], 'false': [-8.8112938462314e-19, 9.251858538542971e-19], 'false,false': [nan, 9.251858538542971e-19]}
{'': [2.124589928736091e-06, 3.885780586188048e-18], 'false': [nan, 3.885780586188048e-18], 'false,false': [1.290957005378089e-18, 9.912705577010326e-19], 'false,false,true': [nan, 1.290957005378089e-18]}
{'': [0.05688630002033617, -3.142140635731575e-18], 'false': [nan, -3.142140635731575e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 11.719
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else return -0.14185106490048766;  // std dev = 7.60e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | then return 0.5528067455442879;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.7194734122109545;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.12544463852839155;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5619287239620663;  // std dev = 0.083, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else return -0.11231637819360639;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.42323419200670237;  // std dev = 0.083, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.10159632948783619;  // std dev = 4.21e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.4159185313397524;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.1015963294878363;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3241940585338392;  // std dev = 0.076, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(A, D) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then return 0.2848941929412854;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, F), follows(D, F) )
%   | | | then return 0.25218751844878207;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2531089534460036;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.25218751844878207;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.25218751844878207;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.25218751844878207;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2524639489479485;  // std dev = 0.001, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, J) )
%   | then return -0.08518475138839679;  // std dev = 2.08e-09, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | else return -0.08518475138839687;  // std dev = 9.31e-10, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then return 0.23055024253143533;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.20760921409715669;  // std dev = 0.000131, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.20806870768726013;  // std dev = 0.001, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.20764710476274417;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.20764710476274417;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.20764710476274417;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.20784283217595698;  // std dev = 0.001, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, I) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(D, A) )
%   | | | then return 0.1922032474174592;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.17552657317143966;  // std dev = 8.63e-05, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(G, A), recursion_accounttype(D, B) )
%   | | | then return -0.4911161007261244;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.1755168967887926;  // std dev = 0.000153, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.07355535366884355;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, H) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else if ( tweets(A, I) )
%   | | then return -0.07324622576333704;  // std dev = 9.31e-10, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.1641099660830312;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.00582217361637607;  // std dev = 0.828, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.15157011347992455;  // std dev = 1.15e-06, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.15153708071643315;  // std dev = 0.000100, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.06256021646300092;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, A) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return -0.06842697784420275;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(H, A) )
%   | | then return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, E) )
%   | | then if ( tweets(A, F), follows(E, A) )
%   | | | then return 0.1428190856669781;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.13307493609157595;  // std dev = 6.34e-05, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0.1742499660445105;  // std dev = 0.099, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.18211397386636788;  // std dev = 0.037, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.11691881139918384;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.1330948057048309;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.14908153145329095;  // std dev = 0.056, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06419184008202625;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.391', 'seconds']
Refined model CLL: -0.090353


******************************************
Best model found
******************************************
Results 

CLL : -0.09154 

AUC ROC : 0.994683 

AUC PR : 0.442026 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 11.719 

Total Inference Time : 1.7107856273651123 

Total revision time: 19.13782250213623
Best scored revision CLL: -0.090353


Results 

CLL : -0.09154 

AUC ROC : 0.994683 

AUC PR : 0.442026 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 19.177285068511964 

Total Inference Time : 1.7107856273651123 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.523
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995126;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004877;  // std dev = 5.16e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.673319566057108;  // std dev = 1.692, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839108;  // std dev = 7.88e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5508593387406183;  // std dev = 0.125, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360621;  // std dev = 8.01e-09, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.41136464921311283;  // std dev = 0.991, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | else return -0.10159632948783662;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.42988316773163104;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.10159632948783638;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3167531927769467;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926087;  // std dev = 6.75e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else return -0.09269127618926105;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.26636894449151155;  // std dev = 0.010, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 5.82e-09, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20177113890966242;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109154;  // std dev = 7.15e-08, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16937049321272277;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333707;  // std dev = 8.33e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1297462006566395;  // std dev = 0.174, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420265;  // std dev = 5.11e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else return -0.06842697784420276;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11298154074035778;  // std dev = 0.174, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.788', 'seconds']
Parameter learned model CLL:-0.09093 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.0, 0, 62], 'false,true': [5.16e-08, 118, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.692, 3, 62], 'false,true': [7.88e-08, 111, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.125, 1, 62], 'false,true': [0.0, 0, 0], 'false,false': [8.01e-09, 118, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.991, 1, 53], 'true,false': [0.0, 91, 0], 'false,true,true': [0.0, 0, 9], 'false,true,false': [0.0, 19, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.992, 1, 62], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.75e-08, 112, 0], 'false,false,false': [0.0, 20, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.01, 0, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.82e-09, 117, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.992, 1, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.15e-08, 125, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.992, 1, 62], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 98, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [8.33e-09, 21, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.174, 2, 62], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.11e-08, 106, 0], 'false,false,false': [0.0, 24, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.174, 2, 62], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 109, 0]}]
{'': [-6.87622002348484e-16, 2.258080728051166e-17], 'false': [2.258080728051166e-17, nan]}
{'': [0.04402366863905332, 5.601125169280069e-17], 'false': [5.601125169280069e-17, nan]}
{'': [0.015621063240110014, 6.586068790149233e-17], 'false': [nan, 6.586068790149233e-17]}
{'': [0.06826780271659394, 0.06161026526780173], 'true': [0.018175582990397534, -4.7580986769649563e-17], 'false': [0.06161026526780173, nan], 'false,true': [0.0, 1.460819769243627e-18]}
{'': [0.01560452152842049, 4.710037074167331e-17], 'true': [0.01560452152842049, nan], 'false': [nan, 4.710037074167331e-17], 'false,false': [4.0642092865742335e-17, -5.551115123125783e-18], 'false,false,true': [nan, 4.0642092865742335e-17]}
{'': [1.6150637146227972e-06, 3.416070845000482e-17], 'false': [nan, 3.416070845000482e-17], 'false,false': [nan, 3.416070845000482e-17]}
{'': [0.01560802473812985, 4.085620730620576e-17], 'false': [nan, 4.085620730620576e-17], 'false,false': [nan, 4.085620730620576e-17], 'false,false,false': [4.085620730620576e-17, nan]}
{'': [0.015609389072731012, -1.0262565773845985e-17], 'true': [0.015609389072731012, nan], 'false': [-6.797283824235652e-18, 3.3042351923367752e-18], 'false,false': [nan, 3.3042351923367752e-18]}
{'': [0.030327764489229855, 2.818258447125397e-17], 'false': [nan, 2.818258447125397e-17], 'false,false': [2.461343497989734e-17, -4.04768811061255e-18], 'false,false,true': [nan, 2.461343497989734e-17]}
{'': [0.030323004737835328, -1.6806128354417508e-17], 'false': [nan, -1.6806128354417508e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 16.104
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995116;  // std dev = 2.23e-07, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.14185106490048768;  // std dev = 6.32e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7220846424779904;  // std dev = 0.069, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else return -0.12544463852839133;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.5547215408862182;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.4547215408862182;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(F, A) )
%   | | | then return -0.0712429226377006;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.5547215408862181;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.5601485013052513;  // std dev = 0.076, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else return -0.11231637819360617;  // std dev = 1.01e-07, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return 0.3256085312587395;  // std dev = 1.319, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return 0.42570276736774865;  // std dev = 0.040, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.43096144577606044;  // std dev = 0.200, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return -0.1015963294878362;  // std dev = 5.27e-08, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.2157166685224353;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.4157166685224352;  // std dev = 2.11e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3358374291197358;  // std dev = 0.220, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( follows(A, D) )
%   | then return -0.09269127618926092;  // std dev = 6.05e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | else return -0.09269127618926104;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, D), tweets(A, F) )
%   | | | then return 0.27438866800328926;  // std dev = 0.035, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.2572063330446595;  // std dev = 0.031, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.29052647175943874;  // std dev = 0.000823, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.08419488501829271;  // std dev = 0.945, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.3726434518454436;  // std dev = 0.768, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(I, A), tweets(A, J) )
%   | | | then return 0.26495377499964184;  // std dev = 0.045, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2491110793091641;  // std dev = 0.005, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(K, A) )
%   | then return -0.08518475138839682;  // std dev = 5.35e-09, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else return -0.08518475138839687;  // std dev = 1.05e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.21527313656303934;  // std dev = 0.026, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.22987755995879208;  // std dev = 0.021, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.2860523189566982;  // std dev = 0.153, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.23460969446511326;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.21423512895895155;  // std dev = 0.042, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.20484360499158671;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.20733789047370288;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(J, A) )
%   | then return -0.07877675473109164;  // std dev = 5.10e-09, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return -0.0787767547310918;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(A, F), follows(A, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.18618930925410435;  // std dev = 0.025, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.21392257540097376;  // std dev = 0.133, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(E, A), tweets(A, G) )
%   | | | then return 0.19512095820406306;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.17665284440517423;  // std dev = 0.030, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.06702657712007536;  // std dev = 0.730, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.17348375073877853;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.17531962559480008;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, J) )
%   | then return -0.07324622576333707;  // std dev = 1.97e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return -0.07324622576333706;  // std dev = 5.27e-09, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), follows(F, E) )
%   | | | then return 0.15566793508290452;  // std dev = 0.017, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.16462634019465427;  // std dev = 0.014, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.21471053509048801;  // std dev = 0.107, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then if ( follows(G, I), follows(I, A) )
%   | | | then return 0.16628432522505066;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1535792725246628;  // std dev = 0.025, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.14996402864908176;  // std dev = 0.000386, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.15135177968158867;  // std dev = 0.000148, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, K) )
%   | then return -0.06842697784420267;  // std dev = 4.75e-09, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else return -0.06842697784420275;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.1392373313817035;  // std dev = 0.022, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.14499906071693214;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.13440691866021354;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.13292524988812618;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.026639401000265232;  // std dev = 0.847, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.11715034642526803;  // std dev = 0.868, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.03964251958094685;  // std dev = 1.297, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.13367576076851376;  // std dev = 0.015, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06419184008202626;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.972', 'seconds']
Refined model CLL: -0.088553


******************************************
Best model found
******************************************
Results 

CLL : -0.090734 

AUC ROC : 0.994952 

AUC PR : 0.464533 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 16.104 

Total Inference Time : 4.873828172683716 

Total revision time: 31.213877822875975
Best scored revision CLL: -0.088553


Results 

CLL : -0.090734 

AUC ROC : 0.994952 

AUC PR : 0.464533 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 31.253340389251708 

Total Inference Time : 4.873828172683716 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.414
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8268989350995115;  // std dev = 1.705, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004882;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.725737174102283;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839147;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5404749269979956;  // std dev = 0.144, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360656;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4022424050662095;  // std dev = 1.396, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   | else return -0.10159632948783645;  // std dev = 0.000, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.42724240506620953;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3108013673430089;  // std dev = 1.406, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926064;  // std dev = 8.16e-08, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | | else return -0.09269127618926097;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2459110211828935;  // std dev = 1.398, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.59e-09, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.18146104159823379;  // std dev = 1.911, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109148;  // std dev = 8.56e-08, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.18129597308425885;  // std dev = 0.994, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333686;  // std dev = 6.75e-08, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15469781506281438;  // std dev = 0.103, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420264;  // std dev = 6.14e-08, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | | else return -0.06842697784420264;  // std dev = 3.23e-09, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11383818664629365;  // std dev = 0.174, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.667', 'seconds']
Parameter learned model CLL:-0.08949 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.705, 3, 93], 'false,true': [0.0, 167, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.0, 0, 93], 'false,true': [0.0, 172, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.144, 2, 93], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 188, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.396, 2, 78], 'true,false': [0.0, 149, 0], 'false,true,true': [0.0, 0, 15], 'false,true,false': [0.0, 36, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.406, 2, 93], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [8.16e-08, 174, 0], 'false,false,false': [0.0, 35, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.398, 2, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.59e-09, 183, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.911, 4, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [8.56e-08, 162, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.994, 1, 93], 'true,false': [0.0, 0, 0], 'false,true': [6.75e-08, 137, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 30, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.103, 1, 93], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.14e-08, 136, 0], 'false,false,false': [3.23e-09, 42, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.174, 3, 93], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 198, 0]}]
{'': [0.030273437500001037, -1.6753066000331702e-16], 'false': [-1.6753066000331702e-16, nan]}
{'': [-2.521280675277775e-15, -1.0327656043024712e-17], 'false': [-1.0327656043024712e-17, nan]}
{'': [0.02060941828254958, -1.1810883240693155e-17], 'false': [nan, -1.1810883240693155e-17]}
{'': [0.06621695558073462, 0.05806306031101555], 'true': [0.024374999999999723, -5.960928991276008e-17], 'false': [0.05806306031101555, nan], 'false,true': [0.0, -9.25185853854297e-18]}
{'': [0.020805017374145526, 4.249657510526915e-17], 'true': [0.020805017374145526, nan], 'false': [nan, 4.249657510526915e-17], 'false,false': [3.828355257328126e-17, -9.516197353929913e-18], 'false,false,true': [nan, 3.828355257328126e-17]}
{'': [0.020580180307933335, 3.154732091831046e-17], 'false': [nan, 3.154732091831046e-17], 'false,false': [nan, 3.154732091831046e-17]}
{'': [0.03763096214686003, 4.5231308410654523e-17], 'false': [nan, 4.5231308410654523e-17], 'false,false': [nan, 4.5231308410654523e-17], 'false,false,false': [4.5231308410654523e-17, nan]}
{'': [0.010514024258362668, 5.650835754080138e-17], 'true': [0.010514024258362668, nan], 'false': [3.322565256177476e-17, -6.47630097698008e-18], 'false,false': [nan, -6.47630097698008e-18]}
{'': [0.010587360334897973, 2.5572552814399674e-17], 'false': [nan, 2.5572552814399674e-17], 'false,false': [2.7755575615628914e-17, 1.057355261547768e-17], 'false,false,true': [nan, 2.7755575615628914e-17]}
{'': [0.03030686745528849, -2.2428747972225387e-18], 'false': [nan, -2.2428747972225387e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 24.636
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), tweets(E, D) )
%   | | | then return 0.8211118980624748;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( follows(F, A) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.14185106490048832;  // std dev = 0.000, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.7240527238134189;  // std dev = 0.021, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( follows(A, D), tweets(A, F) )
%   | | | then return 0.5602208690911351;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.7194734122109544;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.497251189988732;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.6177817349725823;  // std dev = 0.897, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.7265166442911557;  // std dev = 0.039, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.12544463852839133;  // std dev = 4.21e-08, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5691663774932822;  // std dev = 0.209, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else return -0.11231637819360679;  // std dev = 0.000, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.4296106027343553;  // std dev = 0.152, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.35733611161568574;  // std dev = 0.883, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.429317278253584;  // std dev = 0.016, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.10159632948783648;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4177686309604297;  // std dev = 0.031, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.10159632948783626;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | | then return 0.2861617117535767;  // std dev = 0.981, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return -0.001112509418123316;  // std dev = 0.776, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.34087683491488574;  // std dev = 0.111, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.33146955312383714;  // std dev = 0.157, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926068;  // std dev = 7.45e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, F) )
%   | | | then return 0.2671129193895342;  // std dev = 0.066, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.2512320837783153;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.29191178313966876;  // std dev = 0.034, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.12373492244227406;  // std dev = 0.911, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.2469684467043373;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.24670096819137735;  // std dev = 0.002, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2609173541645083;  // std dev = 0.064, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(K, A) )
%   | then return -0.08518475138839678;  // std dev = 4.27e-09, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | else return -0.08518475138839678;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), follows(A, E) )
%   | | | then return 0.14619006730738088;  // std dev = 0.968, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.2221887477015425;  // std dev = 0.111, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return -0.09735138338010496;  // std dev = 0.750, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.2652633825306355;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.20394559999667067;  // std dev = 0.001, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.20375542841160452;  // std dev = 0.001, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.21384582759939008;  // std dev = 0.056, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(J, A) )
%   | then return -0.07877675473109153;  // std dev = 5.96e-09, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | else return -0.07877675473109177;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.18628437206965653;  // std dev = 0.055, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.1983605117155485;  // std dev = 0.061, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.19105309514028831;  // std dev = 0.059, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1759058658615358;  // std dev = 0.051, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.18090136168261253;  // std dev = 0.014, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.23188612208505588;  // std dev = 0.958, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.1798289839369916;  // std dev = 0.006, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.1800523535460994;  // std dev = 0.010, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333675;  // std dev = 7.09e-09, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | | then return 0.16327750179525646;  // std dev = 0.044, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.15706385208358659;  // std dev = 0.032, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( tweets(A, G), follows(D, H) )
%   | | | then return 0.16221735178219482;  // std dev = 0.041, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2577773448677924;  // std dev = 0.085, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(I, A), follows(A, I) )
%   | | then if ( follows(A, J), follows(J, I) )
%   | | | then return 0.1850632631826602;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.14686051164246747;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, K), follows(A, L) )
%   | | | then return 0.1489770392659785;  // std dev = 0.001, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.15529903783888527;  // std dev = 0.044, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.06842697784420261;  // std dev = 4.27e-09, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.07092483175604643;  // std dev = 1.310, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   | | | else return 0.13969328240626044;  // std dev = 0.019, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( recursion_accounttype(D, B), tweets(D, F) )
%   | | | then return 0.16063713489222103;  // std dev = 0.134, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.13663791657912464;  // std dev = 0.056, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.14084626940596476;  // std dev = 0.034, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.1973852103665753;  // std dev = 1.130, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.13571991560762486;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06419184008202626;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.171', 'seconds']
Refined model CLL: -0.087919


******************************************
Best model found
******************************************
Results 

CLL : -0.091736 

AUC ROC : 0.994039 

AUC PR : 0.391088 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 24.636 

Total Inference Time : 6.102320909500122 

Total revision time: 45.59222464561462
Best scored revision CLL: -0.087919


Results 

CLL : -0.091736 

AUC ROC : 0.994039 

AUC PR : 0.391088 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 45.631687211990354 

Total Inference Time : 6.102320909500122 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.729
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8422759192264946;  // std dev = 1.403, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048832;  // std dev = 0.000, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6839062069390631;  // std dev = 2.192, 129.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=124 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839186;  // std dev = 0.000, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5367799462623059;  // std dev = 0.174, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360689;  // std dev = 0.000, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4249269672347142;  // std dev = 0.995, 103.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=102 */
%   | else return -0.10159632948783655;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.31463570509879174;  // std dev = 0.325, 25.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=22 */
%   | | else return -0.10159632948783617;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3077419103493265;  // std dev = 1.968, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926051;  // std dev = 6.14e-08, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | | else return -0.0926912761892608;  // std dev = 2.28e-09, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.25003724997743104;  // std dev = 1.721, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.67e-09, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22694947615577057;  // std dev = 0.084, 124.000 (wgt'ed) examples reached here.  /* #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 6.66e-08, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17369572203988634;  // std dev = 1.409, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333673;  // std dev = 9.94e-08, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14067193759667665;  // std dev = 0.152, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6.32e-08, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | | else return -0.06842697784420262;  // std dev = 2.46e-09, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.09978190426384474;  // std dev = 0.210, 130.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 1.32e-09, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.412', 'seconds']
Parameter learned model CLL:-0.088267 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.403, 2, 124], 'false,true': [0.0, 242, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.192, 5, 124], 'false,true': [0.0, 245, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.174, 4, 124], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 258, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.995, 1, 102], 'true,false': [0.0, 218, 0], 'false,true,true': [0.325, 3, 22], 'false,true,false': [0.0, 53, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.968, 4, 124], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.14e-08, 205, 0], 'false,false,false': [2.28e-09, 51, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.721, 3, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.67e-09, 224, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.084, 0, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.66e-08, 238, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.409, 2, 124], 'true,false': [0.0, 0, 0], 'false,true': [9.94e-08, 174, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 56, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.152, 3, 124], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.32e-08, 199, 0], 'false,false,false': [2.46e-09, 41, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.21, 6, 124], 'false,true': [0.0, 0, 0], 'false,false': [1.32e-09, 230, 0]}]
{'': [0.015621063240114865, -1.5781682664093133e-16], 'false': [-1.5781682664093133e-16, nan]}
{'': [0.037257376359597034, -6.162870667306991e-17], 'false': [-6.162870667306991e-17, nan]}
{'': [0.030273437500000444, -9.811273240873477e-17], 'false': [nan, -9.811273240873477e-17]}
{'': [0.06349641072956021, 0.07157709833437946], 'false': [0.07157709833437946, nan], 'false,true': [0.10559999999999993, -8.3790416952842e-18], 'true': [0.00961447827316385, -8.352136515528701e-17]}
{'': [0.030255647728814658, 4.683753385137379e-17], 'true': [0.030255647728814658, nan], 'false': [nan, 4.683753385137379e-17], 'false,false': [1.8413455042563573e-17, 5.442269728554689e-18], 'false,false,true': [nan, 1.8413455042563573e-17]}
{'': [0.023317352051941756, 3.172065784643304e-17], 'false': [nan, 3.172065784643304e-17], 'false,false': [nan, 3.172065784643304e-17]}
{'': [5.674942296736653e-05, 1.8659210497901792e-17], 'false': [nan, 1.8659210497901792e-17], 'false,false': [nan, 1.8659210497901792e-17], 'false,false,false': [1.8659210497901792e-17, nan]}
{'': [0.015760272343551606, 6.950961545479241e-17], 'true': [0.015760272343551606, nan], 'false': [5.67872696503672e-17, -1.0903976134711359e-17], 'false,false': [nan, -1.0903976134711359e-17]}
{'': [0.02322538856529408, 5.551115123125783e-18], 'false': [nan, 5.551115123125783e-18], 'false,false': [2.0084436626384742e-17, 6.0926873302600054e-18], 'false,false,true': [nan, 2.0084436626384742e-17]}
{'': [0.04406592323708218, 1.9308226515220114e-18], 'false': [nan, 1.9308226515220114e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 41.256
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995127;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.8581489350995116;  // std dev = 2.15e-07, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else return -0.14185106490048816;  // std dev = 0.000, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.7259780548283145;  // std dev = 0.133, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | | else if ( recursion_accounttype(D, B), follows(E, D) )
%   | | | then return 0.5870906652632534;  // std dev = 0.858, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.7237658215307958;  // std dev = 0.035, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0.39028667126724076;  // std dev = 0.822, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.721546708405764;  // std dev = 0.016, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.6425503352878774;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.12544463852839172;  // std dev = 0.000, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.529950118885481;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.574249834679185;  // std dev = 0.159, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.561613862800284;  // std dev = 0.037, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.38763957554968814;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.5716783063350757;  // std dev = 0.113, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.11231637819360688;  // std dev = 0.000, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.36786712963921114;  // std dev = 1.648, 48.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=45 */
%   | | | else return 0.4292493741337606;  // std dev = 0.088, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.43009798696957247;  // std dev = 0.120, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return -0.10159632948783652;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.3221401906151508;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.43164950817315345;  // std dev = 0.005, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.10159632948783626;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.33944099591018256;  // std dev = 0.156, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return -0.01159702782635911;  // std dev = 0.811, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.32757077658782136;  // std dev = 0.005, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.33106651725938036;  // std dev = 0.131, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926054;  // std dev = 5.58e-08, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E), follows(A, E) )
%   | | | then return 0.23448118344551985;  // std dev = 0.984, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.2694370141559852;  // std dev = 0.066, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return -0.06053627503835899;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.19352125014825605;  // std dev = 0.903, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.25387035476540676;  // std dev = 0.040, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2651954528662818;  // std dev = 0.058, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.2916723472828599;  // std dev = 0.059, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2645106992949254;  // std dev = 0.016, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.08518475138839678;  // std dev = 5.82e-09, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.20901824088150245;  // std dev = 1.028, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | | | else return -0.11579161657576535;  // std dev = 0.824, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.4160222076041278;  // std dev = 1.101, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then if ( follows(A, G), follows(F, G) )
%   | | | then return 0.23605673623512197;  // std dev = 0.065, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.05890801751741276;  // std dev = 0.912, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.20914044755789796;  // std dev = 0.059, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.21927631817284582;  // std dev = 0.064, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else if ( follows(A, J) )
%   | then return -0.07877675473109144;  // std dev = 5.35e-09, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else return -0.07877675473109169;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.1862414140543203;  // std dev = 0.020, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.23158786879190282;  // std dev = 0.191, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.03128667692803098;  // std dev = 1.272, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.20552114570422847;  // std dev = 0.104, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.19626067169650802;  // std dev = 0.057, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.21537960348214238;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.1766696282809883;  // std dev = 0.052, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.18407577040781226;  // std dev = 0.057, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.07324622576333675;  // std dev = 7.79e-09, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D), follows(F, E) )
%   | | | then return 0.16055523010341194;  // std dev = 0.055, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.178601022558232;  // std dev = 0.076, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.22818554369433242;  // std dev = 0.101, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.16187095913745292;  // std dev = 0.090, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.004813577755113356;  // std dev = 0.863, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.15461326193603794;  // std dev = 0.023, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.16637770060804016;  // std dev = 0.084, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.15310677238796502;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.0684269778442027;  // std dev = 0.000, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B), follows(E, F) )
%   | | | then return 0.07300769840164992;  // std dev = 1.317, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | else return 0.15243476515675716;  // std dev = 0.153, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return -0.11715025079079244;  // std dev = 0.728, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.14602945353867955;  // std dev = 0.045, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.15841790263184632;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.13239010551768815;  // std dev = 0.041, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.13809519146190208;  // std dev = 0.044, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.06419184008202626;  // std dev = 1.83e-08, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.200', 'seconds']
Refined model CLL: -0.085066


******************************************
Best model found
******************************************
Results 

CLL : -0.090082 

AUC ROC : 0.994766 

AUC PR : 0.467267 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 41.256 

Total Inference Time : 8.333043336868286 

Total revision time: 68.23823486328125
Best scored revision CLL: -0.085066


Results 

CLL : -0.090082 

AUC ROC : 0.994766 

AUC PR : 0.467267 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 68.27769742965698 

Total Inference Time : 8.333043336868286 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.091
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8517795083479174;  // std dev = 0.997, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004877;  // std dev = 1.55e-07, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6957571637434845;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839205;  // std dev = 0.000, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5564132899342428;  // std dev = 0.080, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360668;  // std dev = 0.000, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4168402292573377;  // std dev = 0.996, 129.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=128 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.424592167241835;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.10159632948783616;  // std dev = 2.95e-09, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3080509531662617;  // std dev = 1.715, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0926912761892605;  // std dev = 1.17e-07, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | | else return -0.09269127618926101;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23802740819716842;  // std dev = 1.976, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.89e-09, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19456164687688987;  // std dev = 1.974, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 2.11e-08, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.175381030708906;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333675;  // std dev = 1.21e-07, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1377149203888818;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0684269778442029;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
%   | | else return -0.06842697784420262;  // std dev = 2.79e-09, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1264258644057163;  // std dev = 0.133, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202586;  // std dev = 7.74e-09, 324.000 (wgt'ed) examples reached here.  /* #neg=324 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.454', 'seconds']
Parameter learned model CLL:-0.087617 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.997, 1, 156], 'false,true': [1.55e-07, 318, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 316, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.08, 1, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 321, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.996, 1, 128], 'true,false': [0.0, 243, 0], 'false,true,true': [0.0, 0, 28], 'false,true,false': [2.95e-09, 61, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.715, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.17e-07, 243, 0], 'false,false,false': [0.0, 55, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.976, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 273, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.974, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.11e-08, 318, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.405, 2, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.21e-07, 245, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 58, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 279, 0], 'false,false,false': [2.79e-09, 64, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.133, 3, 156], 'false,true': [0.0, 0, 0], 'false,false': [7.74e-09, 324, 0]}]
{'': [0.006328857154454536, 7.54113752575578e-17], 'false': [7.54113752575578e-17, nan]}
{'': [0.024374999999997548, -8.994211845064559e-17], 'false': [-8.994211845064559e-17, nan]}
{'': [0.0063288571544496035, -3.873675350717057e-17], 'false': [nan, -3.873675350717057e-17]}
{'': [0.06355107629009424, 0.05970222984809982], 'true': [0.007691845441981986, -7.127357688951622e-17], 'false': [0.05970222984809982, nan], 'false,true': [-1.9032394707859825e-16, 9.100188726435709e-18]}
{'': [0.018501021956474507, 9.686509610823513e-17], 'true': [0.018501021956474507, nan], 'false': [nan, 9.686509610823513e-17], 'false,false': [5.665335598910264e-17, -2.3213754151253272e-17], 'false,false,true': [nan, 5.665335598910264e-17]}
{'': [0.024398795366189097, 3.416070845000482e-17], 'false': [nan, 3.416070845000482e-17], 'false,false': [nan, 3.416070845000482e-17]}
{'': [0.02436364759334646, 1.3965069492140335e-18], 'false': [nan, 1.3965069492140335e-18], 'false,false': [nan, 1.3965069492140335e-18], 'false,false,false': [1.3965069492140335e-18, nan]}
{'': [0.012492898991705166, 3.004563961031777e-17], 'true': [0.012492898991705166, nan], 'false': [5.981609765327374e-17, -1.1485065771984378e-17], 'false,false': [nan, -1.1485065771984378e-17]}
{'': [0.024365935196992605, -8.480420771189243e-17], 'false': [nan, -8.480420771189243e-17], 'false,false': [-2.865091676452017e-17, 7.806255641895632e-18], 'false,false,true': [nan, -2.865091676452017e-17]}
{'': [0.017596414728728322, 5.962308835949915e-17], 'false': [nan, 5.962308835949915e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 27.346
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.8414822684328459;  // std dev = 0.992, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.8581489350995118;  // std dev = 2.23e-07, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( follows(G, A), tweets(G, H) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.858148935099512;  // std dev = 1.03e-07, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   else return -0.14185106490048757;  // std dev = 2.21e-07, 347.000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.6288371710139034;  // std dev = 2.305, 63.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=57 */
%   | | | else return 0.7204788681956839;  // std dev = 0.005, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.7364291686588839;  // std dev = 0.075, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.722850360384464;  // std dev = 0.109, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   else return -0.12544463852839208;  // std dev = 0.000, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5684606742332122;  // std dev = 0.227, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   else return -0.11231637819360692;  // std dev = 0.000, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, G) )
%   | | | then return 0.4222052086753393;  // std dev = 0.993, 77.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=76 */
%   | | | else return 0.13718355728076895;  // std dev = 0.797, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(H, A), tweets(A, I) )
%   | | | then return 0.2867295730927373;  // std dev = 1.600, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | | else return 0.41740607663235;  // std dev = 0.119, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return -0.10345414668082499;  // std dev = 0.484, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
%   else if ( recursion_accounttype(J, B) )
%   | then if ( follows(K, A) )
%   | | then return 0.42260282446779796;  // std dev = 0.120, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tweets(A, L) )
%   | | | then return 0.41351338314219876;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2885133831421988;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return -0.10159632948783617;  // std dev = 1.49e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then return 0.3390461016816787;  // std dev = 0.122, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return 0.3189489019145442;  // std dev = 0.031, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.07424569770081624;  // std dev = 0.871, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, G) )
%   | | | then return 0.11808614952170256;  // std dev = 1.509, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.3698038648546833;  // std dev = 0.078, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.3622054599785259;  // std dev = 0.118, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.2977234371686024;  // std dev = 0.995, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   else if ( follows(A, J) )
%   | then return -0.09253515268430589;  // std dev = 0.000, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   | else return -0.09269127618926101;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(A, D), follows(D, F) )
%   | | | then return 0.2676933584486902;  // std dev = 0.031, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.28547998097613275;  // std dev = 0.084, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(G, A), follows(G, D) )
%   | | | then return 0.25384318930595917;  // std dev = 0.015, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.26970510298148875;  // std dev = 0.070, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.16859590462184026;  // std dev = 1.269, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return -0.3564062082571689;  // std dev = 0.855, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.2651692187717764;  // std dev = 0.109, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.20519900167606836;  // std dev = 0.962, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else return -0.08507780074152814;  // std dev = 5.23e-05, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, D) )
%   | | | then return 0.1741283024381309;  // std dev = 1.382, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.21639654475379524;  // std dev = 0.091, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.2773965554520775;  // std dev = 0.167, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2180231687125381;  // std dev = 0.059, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, G), follows(H, A) )
%   | | | then return 0.2109604821211256;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.23300324312138507;  // std dev = 0.059, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.15246651062251163;  // std dev = 0.899, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.1640764313001062;  // std dev = 0.963, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   else return -0.07868666231740734;  // std dev = 5.00e-05, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.18745033597740662;  // std dev = 0.067, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | | else return 0.07289216104423982;  // std dev = 1.305, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else return -0.09135751468331027;  // std dev = 1.202, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), follows(I, A) )
%   | | | then return 0.1910425707827021;  // std dev = 0.030, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.17574326717971517;  // std dev = 0.020, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.1889575749229593;  // std dev = 0.071, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.21804632229078086;  // std dev = 0.059, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, K) )
%   | then return -0.07314415381004877;  // std dev = 1.14e-07, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | else return -0.07325960241070996;  // std dev = 1.49e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), tweets(D, F) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.16740292384454822;  // std dev = 0.146, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | | else return 0.27410256965699;  // std dev = 0.131, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.052920937668847;  // std dev = 0.743, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.17108222894926747;  // std dev = 0.000588, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.05443876329961179;  // std dev = 0.952, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.15268845096814862;  // std dev = 0.024, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.16788264078754647;  // std dev = 0.082, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(A, J) )
%   | then return -0.0683376249514605;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
%   | else return -0.06843868653754895;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.11726793309320965;  // std dev = 1.318, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   | | | else return 0.03438976404706841;  // std dev = 0.883, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.19061328562415503;  // std dev = 0.164, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.13396569206061656;  // std dev = 0.021, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( follows(H, A), tweets(H, I) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.13312941534055275;  // std dev = 0.029, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.1465248250309719;  // std dev = 1.135, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07940216232243724;  // std dev = 0.975, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.15124319784082074;  // std dev = 0.025, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06412549891755318;  // std dev = 3.10e-05, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.089', 'seconds']
Refined model CLL: -0.08468


******************************************
Best model found
******************************************
Results 

CLL : -0.09025 

AUC ROC : 0.994789 

AUC PR : 0.417888 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 27.346 

Total Inference Time : 12.03097152709961 

Total revision time: 61.51524921607971
Best scored revision CLL: -0.08468


Results 

CLL : -0.09025 

AUC ROC : 0.994789 

AUC PR : 0.417888 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 61.55471178245544 

Total Inference Time : 12.03097152709961 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.416
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7840748610254378;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048766;  // std dev = 5.96e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7341781063237716;  // std dev = 1.12e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5699744801269779;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360632;  // std dev = 4.37e-09, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3867712058803285;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else return -0.10159632948783631;  // std dev = 1.83e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.42843787254699495;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.29820533007374644;  // std dev = 0.980, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926105;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23514891026538448;  // std dev = 0.980, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 3.48e-09, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2294089480326349;  // std dev = 0.010, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109179;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15293999300663733;  // std dev = 0.980, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333704;  // std dev = 1.05e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.16882285517188175;  // std dev = 0.002, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0684269778442027;  // std dev = 1.58e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | else return -0.06842697784420272;  // std dev = 9.31e-10, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.03915590310174388;  // std dev = 0.310, 28.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.380', 'seconds']
Parameter learned model CLL:-0.095841 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.361, 2, 25], 'false,true': [5.96e-08, 57, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.12e-07, 0, 25], 'false,true': [0.0, 52, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 0, 0], 'false,false': [4.37e-09, 50, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.979, 1, 23], 'true,false': [1.83e-08, 43, 0], 'false,true,true': [0.0, 0, 2], 'false,true,false': [0.0, 5, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.98, 1, 25], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 47, 0], 'false,false,false': [0.0, 3, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.98, 1, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.48e-09, 42, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.01, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 46, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.98, 1, 25], 'true,false': [0.0, 0, 0], 'false,true': [1.05e-08, 40, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 2, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.002, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.58e-08, 53, 0], 'false,false,false': [9.31e-10, 6, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.31, 3, 25], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 49, 0]}]
{'': [0.06858710562414343, 6.232831015439475e-17], 'false': [6.232831015439475e-17, nan]}
{'': [4.973799150320702e-16, -3.416070845000482e-17], 'false': [-3.416070845000482e-17, nan]}
{'': [-2.1316282072803005e-16, 1.7763568394002505e-17], 'false': [nan, 1.7763568394002505e-17]}
{'': [0.06913416665675197, 0.05733392965851029], 'true': [0.039930555555555435, 7.745742032268534e-18], 'false': [0.05733392965851029, nan], 'false,true': [0.0, 0.0]}
{'': [0.03693358683262308, -3.3306690738754695e-18], 'true': [0.03693358683262308, nan], 'false': [nan, -3.3306690738754695e-18], 'false,false': [-3.543264972207946e-18, 1.1564823173178713e-18], 'false,false,true': [nan, -3.543264972207946e-18]}
{'': [0.036938432865264784, 1.1895246692412391e-17], 'false': [nan, 1.1895246692412391e-17], 'false,false': [nan, 1.1895246692412391e-17]}
{'': [3.917701230600201e-06, 0.0], 'false': [nan, 0.0], 'false,false': [nan, 0.0], 'false,false,false': [0.0, nan]}
{'': [0.036947395191154836, 3.3042351923367752e-18], 'true': [0.036947395191154836, nan], 'false': [2.7755575615628915e-18, 0.0], 'false,false': [nan, 0.0]}
{'': [2.458022852422914e-06, 6.586068790149234e-18], 'false': [nan, 6.586068790149234e-18], 'false,false': [4.7132109535973624e-18, 5.782411586589357e-19], 'false,false,true': [nan, 4.7132109535973624e-18]}
{'': [0.09591511204528254, -2.2657612747452172e-18], 'false': [nan, -2.2657612747452172e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 5.762
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.14185106490048768;  // std dev = 5.37e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7259492632732041;  // std dev = 0.065, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.12544463852839152;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(D, E) )
%   | | then return 0.44265564625120873;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.5537667573623197;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.5694304801411961;  // std dev = 0.071, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.1123163781936063;  // std dev = 3.49e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.43478010748207946;  // std dev = 0.060, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(F, A), tweets(A, G) )
%   | | | then return 0.16347729053311516;  // std dev = 0.867, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.4370627688967037;  // std dev = 0.045, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10159632948783631;  // std dev = 2.11e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.08299486455276166;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.33418039586734727;  // std dev = 0.044, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.07956057725230153;  // std dev = 0.854, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.35877039604461347;  // std dev = 0.091, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(D, E) )
%   | | then return 0.269784865618627;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.3062713419063272;  // std dev = 0.016, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then return 0.0649514282038323;  // std dev = 0.917, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.25561475571326675;  // std dev = 0.046, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.28526659838364876;  // std dev = 0.052, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, I) )
%   | then if ( follows(I, A) )
%   | | then if ( tweets(A, J) )
%   | | | then return -0.08518475138839682;  // std dev = 1.83e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.08518475138839687;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.08518475138839687;  // std dev = 1.61e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.08518475138839687;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | | then return 0.2200286859538348;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.23498106803821017;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2610464999990904;  // std dev = 0.038, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.23563394101969523;  // std dev = 0.052, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.21057485243161259;  // std dev = 0.025, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, H) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else return -0.07877675473109172;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.1845939142541304;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1915470956770876;  // std dev = 0.011, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.21395906140626425;  // std dev = 0.033, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then return -0.05987844607140674;  // std dev = 0.850, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.186213418410358;  // std dev = 0.050, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, A) )
%   | | then if ( tweets(A, J) )
%   | | | then return -0.07324622576333704;  // std dev = 7.45e-09, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.1584079385790872;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1600565743832525;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.17200253736384705;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.16228615662902254;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.19487144941290563;  // std dev = 0.028, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.15972445454253614;  // std dev = 0.045, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, A) )
%   | | then return -0.06842697784420272;  // std dev = 9.31e-10, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.138364391863551;  // std dev = 0.000241, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.14236729376640597;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.15521604998408722;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then return -0.07977063710412435;  // std dev = 0.851, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.13950139457157965;  // std dev = 0.040, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06419184008202625;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.901', 'seconds']
Refined model CLL: -0.096839


******************************************
Best model found
******************************************
Results 

CLL : -0.086661 

AUC ROC : 0.993771 

AUC PR : 0.33603 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 5.762 

Total Inference Time : 1.8873889446258545 

Total revision time: 12.027764823913575
Best scored revision CLL: -0.095841


Results 

CLL : -0.086661 

AUC ROC : 0.993771 

AUC PR : 0.33603 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 12.067227390289307 

Total Inference Time : 1.8873889446258545 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.207
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8015451615146066;  // std dev = 1.682, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004877;  // std dev = 5.58e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7111468298594117;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839108;  // std dev = 7.88e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5517291183771317;  // std dev = 0.139, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360628;  // std dev = 6.59e-09, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.413869050479105;  // std dev = 0.990, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | else return -0.10681123349646268;  // std dev = 0.462, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.434277213744411;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.31685706167953;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09225363540385985;  // std dev = 0.000, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else return -0.09269127618926103;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.25013179898189514;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08482935855555404;  // std dev = 7.58e-05, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20377247170723808;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07847808347718867;  // std dev = 0.000821, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.19002267204352002;  // std dev = 0.004, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07296683000944695;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07329063682362526;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10588317184331186;  // std dev = 0.231, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06818236173907294;  // std dev = 1.97e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | else return -0.06846585023616628;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.09198379876792084;  // std dev = 0.231, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06399160655101183;  // std dev = 6.06e-05, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.658', 'seconds']
Parameter learned model CLL:-0.093027 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.682, 3, 50], 'false,true': [5.58e-08, 117, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.99, 1, 50], 'false,true': [7.88e-08, 106, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.139, 1, 50], 'false,true': [0.0, 0, 0], 'false,false': [6.59e-09, 78, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.99, 1, 48], 'true,false': [0.462, 89, 0], 'false,true,true': [0.0, 0, 2], 'false,true,false': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.99, 1, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 105, 0], 'false,false,false': [0.0, 6, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.99, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [7.58e-05, 92, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.99, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.000821, 96, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.004, 0, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 74, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.231, 3, 50], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.97e-08, 92, 0], 'false,false,false': [0.0, 3, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.231, 3, 50], 'false,true': [0.0, 0, 0], 'false,false': [6.06e-05, 96, 0]}]
{'': [0.053399786400854646, 2.6569439905559303e-17], 'false': [2.6569439905559303e-17, nan]}
{'': [0.019223375624757687, 5.86532918669894e-17], 'false': [5.86532918669894e-17, nan]}
{'': [0.01922337562475943, 4.2700885562506023e-17], 'false': [nan, 4.2700885562506023e-17]}
{'': [0.070724559539062, 0.05384258518805311], 'true': [0.019991670137442536, 0.002393179696088546], 'false': [0.05384258518805311, nan], 'false,true': [0.0, -2.3129646346357427e-18]}
{'': [0.019217167737895346, 9.793325048810373e-09], 'true': [0.019217167737895346, nan], 'false': [nan, 9.793325048810373e-09], 'false,false': [-2.1147105230955365e-18, 0.0], 'false,false,true': [nan, -2.1147105230955365e-18]}
{'': [0.019217823845208044, 5.741093884109353e-09], 'false': [nan, 5.741093884109353e-09], 'false,false': [nan, 5.741093884109353e-09]}
{'': [0.019218426615533097, 7.018559531011641e-09], 'false': [nan, 7.018559531011641e-09], 'false,false': [nan, 7.018559531011641e-09], 'false,false,false': [7.018559531011641e-09, nan]}
{'': [3.7447881515273454e-07, 5.1012249218221415e-09], 'true': [3.7447881515273454e-07, nan], 'false': [-7.50150692314295e-18, 0.0], 'false,false': [nan, 0.0]}
{'': [0.05338827404717142, 2.4577219914194354e-09], 'false': [nan, 2.4577219914194354e-09], 'false,false': [4.2236745502044e-18, -5.782411586589357e-19], 'false,false,true': [nan, 4.2236745502044e-18]}
{'': [0.0533890687587868, 3.6669411488758166e-09], 'false': [nan, 3.6669411488758166e-09]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 13.637
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995122;  // std dev = 1.46e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else return -0.14185106490048763;  // std dev = 8.69e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7194734122109547;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else return -0.1254446385283914;  // std dev = 0.000, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(D, E), follows(E, A) )
%   | | | then return 0.3053664367462843;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.3053664367462843;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.5553664367462843;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.11231637819360621;  // std dev = 7.30e-08, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.4219243783749584;  // std dev = 0.084, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.332218231343135;  // std dev = 0.961, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.1829513639165791;  // std dev = 0.885, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.29251358415830986;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return -0.10159632948783617;  // std dev = 5.77e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.4792647031913866;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.10159632948783634;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.26712011214532416;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.31975169109269264;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3537683566631227;  // std dev = 0.060, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.3491305282015432;  // std dev = 0.118, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926103;  // std dev = 3.49e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), tweets(A, F) )
%   | | then if ( tweets(E, F), follows(A, E) )
%   | | | then return 0.22259546203995415;  // std dev = 0.977, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.41612775262536106;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.30812720177121317;  // std dev = 0.048, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.2837386381663997;  // std dev = 0.042, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.26613184493345665;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2739580314284456;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( tweets(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.08518475138839683;  // std dev = 4.84e-09, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else return -0.0851847513883969;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.08518475138839687;  // std dev = 1.18e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(D, A) )
%   | | | then return 0.22250570836850736;  // std dev = 0.012, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.1193297342653064;  // std dev = 0.945, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.26212157503642536;  // std dev = 0.089, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.22508397269196928;  // std dev = 0.043, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then return -0.012803917558763506;  // std dev = 0.793, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.2360291438409912;  // std dev = 0.054, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, H) )
%   | then if ( follows(A, I) )
%   | | then return -0.07877675473109173;  // std dev = 3.23e-09, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else return -0.07877675473109179;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.0787767547310918;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.18839166460046974;  // std dev = 0.033, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.22297393365476584;  // std dev = 0.068, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(D, F), follows(F, D) )
%   | | | then return -0.08471650705192904;  // std dev = 1.173, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.20768314266710372;  // std dev = 0.036, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(H, A), tweets(A, I) )
%   | | | then return 0.19370757621692106;  // std dev = 0.030, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.18358137678490852;  // std dev = 0.008, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.21839410756615307;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1877176376347804;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333706;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), tweets(E, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.16307732338339032;  // std dev = 0.045, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.1769933285322337;  // std dev = 0.073, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.18735062311702202;  // std dev = 0.057, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return -0.18978672286632542;  // std dev = 1.069, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.16013065298244666;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15811275032833982;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, J) )
%   | then if ( follows(K, A) )
%   | | then return -0.06842697784420267;  // std dev = 4.06e-09, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else return -0.06842697784420275;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), tweets(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | | then return 0.14041506475550766;  // std dev = 0.026, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.1499857498902559;  // std dev = 0.071, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.16058089459224217;  // std dev = 0.051, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.23208120605821636;  // std dev = 0.050, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.13974771611789338;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1381846193556322;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.06419184008202626;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.915', 'seconds']
Refined model CLL: -0.091407


******************************************
Best model found
******************************************
Results 

CLL : -0.086225 

AUC ROC : 0.995325 

AUC PR : 0.406172 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 13.637 

Total Inference Time : 3.9348337650299072 

Total revision time: 25.577052968978883
Best scored revision CLL: -0.091407


Results 

CLL : -0.086225 

AUC ROC : 0.995325 

AUC PR : 0.406172 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 25.616515535354615 

Total Inference Time : 3.9348337650299072 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.911
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8075160237071076;  // std dev = 1.949, 79.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=75 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048818;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6911167364284371;  // std dev = 1.698, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839105;  // std dev = 8.16e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5488026899194712;  // std dev = 0.159, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360615;  // std dev = 8.84e-09, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.41105756231008;  // std dev = 1.395, 73.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=71 */
%   | else return -0.10159632948783642;  // std dev = 0.000, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4384548225840528;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.31478573395201703;  // std dev = 1.395, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926075;  // std dev = 8.16e-08, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2232515794797534;  // std dev = 1.951, 79.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 5.89e-09, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20586720801183722;  // std dev = 1.395, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109151;  // std dev = 8.49e-08, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1840514464982956;  // std dev = 0.993, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333731;  // std dev = 0.000, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333707;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14371116312667181;  // std dev = 0.159, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420264;  // std dev = 6.41e-08, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   | | else return -0.06842697784420275;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12441278120441257;  // std dev = 0.159, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.922', 'seconds']
Parameter learned model CLL:-0.092303 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.949, 4, 75], 'false,true': [0.0, 165, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.698, 3, 75], 'false,true': [8.16e-08, 127, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.159, 2, 75], 'false,true': [0.0, 0, 0], 'false,false': [8.84e-09, 143, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.395, 2, 71], 'true,false': [0.0, 136, 0], 'false,true,true': [0.0, 0, 4], 'false,true,false': [0.0, 13, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.395, 2, 75], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [8.16e-08, 138, 0], 'false,false,false': [0.0, 7, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.951, 4, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 134, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.395, 2, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [8.49e-08, 155, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.993, 1, 75], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 150, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.63e-09, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.159, 2, 75], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.41e-08, 140, 0], 'false,false,false': [0.0, 7, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.159, 2, 75], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 142, 0]}]
{'': [0.04806921967633292, -1.6417843515668981e-16], 'false': [-1.6417843515668981e-16, nan]}
{'': [0.03698224852071045, 5.245148147835385e-17], 'false': [5.245148147835385e-17, nan]}
{'': [0.025299375948725993, 7.763797375001094e-17], 'false': [nan, 7.763797375001094e-17]}
{'': [0.06904066903324425, 0.05247776067964389], 'true': [0.026646650403452803, -4.408238480129298e-17], 'false': [0.05247776067964389, nan], 'false,true': [0.0, -8.540177112501205e-18]}
{'': [0.02528468356153216, 4.900294729380001e-17], 'true': [0.02528468356153216, nan], 'false': [nan, 4.900294729380001e-17], 'false,false': [4.827056628805028e-17, 0.0], 'false,false,true': [nan, 4.827056628805028e-17]}
{'': [0.048173417515002634, 3.4798035100191475e-17], 'false': [nan, 3.4798035100191475e-17], 'false,false': [nan, 3.4798035100191475e-17]}
{'': [0.02528745282668231, 4.6557739742345276e-17], 'false': [nan, 4.6557739742345276e-17], 'false,false': [nan, 4.6557739742345276e-17], 'false,false,false': [4.6557739742345276e-17, nan]}
{'': [0.012979725760633753, -3.191891195797325e-17], 'true': [0.012979725760633753, nan], 'false': [-2.7385501274087195e-17, 6.938893903907229e-19], 'false,false': [nan, 6.938893903907229e-19]}
{'': [0.025289765556846793, 3.0210150329936235e-17], 'false': [nan, 3.0210150329936235e-17], 'false,false': [2.9341608507950566e-17, -9.912705577010326e-19], 'false,false,true': [nan, 2.9341608507950566e-17]}
{'': [0.025290603458825413, -1.1727708006603766e-17], 'false': [nan, -1.1727708006603766e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 23.284
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( tweets(A, F) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.14185106490048816;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7194734122109544;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.7194734122109542;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.3989887196812543;  // std dev = 0.833, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.7339281331150419;  // std dev = 0.053, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.12544463852839136;  // std dev = 4.21e-08, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.5196521510319989;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.22203310341295093;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0.5704700393858625;  // std dev = 0.149, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.1123163781936062;  // std dev = 9.88e-08, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4268892350258534;  // std dev = 0.191, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   | else return -0.10159632948783646;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.41384508864709524;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.10159632948783627;  // std dev = 3.73e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.32300493889486454;  // std dev = 0.027, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return -0.014239434599801223;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.32127408686980835;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.3336699366049596;  // std dev = 0.169, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926071;  // std dev = 7.45e-08, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.2597830374228738;  // std dev = 0.000326, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.2530262757927713;  // std dev = 0.000293, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.2554901952555949;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2522525251488539;  // std dev = 0.004, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(G, H) )
%   | | | then return 0.24971834693536557;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3135340562605897;  // std dev = 0.077, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.247011329284232;  // std dev = 0.007, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.26525417587180994;  // std dev = 0.044, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.08518475138839678;  // std dev = 5.02e-09, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(A, F) )
%   | | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | | then return 0.21218726974214072;  // std dev = 0.010, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.20796406877911308;  // std dev = 0.007, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(E, A) )
%   | | | then return 0.006245844628240027;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.2244158074849217;  // std dev = 0.065, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.0701195873736079;  // std dev = 0.943, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.2054294039758513;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.05656847875865639;  // std dev = 0.902, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(I, A) )
%   | then return -0.07877675473109158;  // std dev = 5.59e-09, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return -0.07877675473109176;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.135374955916343;  // std dev = 0.977, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.17905671774802162;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.18182979773948849;  // std dev = 0.024, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1755417945454641;  // std dev = 0.003, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.20373438609052863;  // std dev = 0.037, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.23589748993949747;  // std dev = 0.064, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1739156521292378;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.19552622571104644;  // std dev = 0.067, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.07324622576333684;  // std dev = 6.25e-09, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.11634964183081539;  // std dev = 0.977, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.15422955835204194;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, G), follows(H, D) )
%   | | | then return 0.15155791508687114;  // std dev = 0.005, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.15635894840758313;  // std dev = 0.020, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(J, A) )
%   | | | then return 0.1726949310942213;  // std dev = 0.033, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.19624012532609747;  // std dev = 0.056, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.14306541138780915;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.16419866298274133;  // std dev = 0.058, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06842697784420262;  // std dev = 5.59e-09, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.10745349056286845;  // std dev = 0.980, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return -0.17974811922294875;  // std dev = 0.769, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.13726250722686295;  // std dev = 0.018, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.13293794285791385;  // std dev = 0.002, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(H, I) )
%   | | | then return 0.14514158181975198;  // std dev = 0.024, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.16265511535191526;  // std dev = 0.051, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.13053490194359452;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.14602980465325976;  // std dev = 0.050, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06419184008202626;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.250', 'seconds']
Refined model CLL: -0.092491


******************************************
Best model found
******************************************
Results 

CLL : -0.087187 

AUC ROC : 0.993771 

AUC PR : 0.33603 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 23.284 

Total Inference Time : 5.132262706756592 

Total revision time: 39.52152544975281
Best scored revision CLL: -0.092303


Results 

CLL : -0.087187 

AUC ROC : 0.993771 

AUC PR : 0.33603 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 39.56098801612854 

Total Inference Time : 5.132262706756592 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.531
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8105298874804635;  // std dev = 2.182, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004885;  // std dev = 0.000, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7093754038089508;  // std dev = 1.400, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5219503952694098;  // std dev = 0.213, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360654;  // std dev = 0.000, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.40890126169950786;  // std dev = 1.705, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4398290967510538;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.1015963294878362;  // std dev = 1.86e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.32280327903502665;  // std dev = 1.400, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926061;  // std dev = 8.30e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | | else return -0.09269127618926087;  // std dev = 1.32e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.25420409858744314;  // std dev = 1.400, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.19e-09, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.17956158191564392;  // std dev = 2.142, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109147;  // std dev = 7.60e-08, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17676360914334027;  // std dev = 1.400, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.0732462257633367;  // std dev = 1.05e-07, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1315060918955295;  // std dev = 0.192, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6.66e-08, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | | else return -0.0684269778442027;  // std dev = 1.32e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1230828550553283;  // std dev = 0.168, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.704', 'seconds']
Parameter learned model CLL:-0.093252 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.182, 5, 100], 'false,true': [0.0, 222, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.4, 2, 100], 'false,true': [0.0, 188, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.213, 5, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 191, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.705, 3, 94], 'true,false': [0.0, 182, 0], 'false,true,true': [0.0, 0, 6], 'false,true,false': [1.86e-09, 15, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.4, 2, 100], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [8.3e-08, 175, 0], 'false,false,false': [1.32e-09, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.4, 2, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.19e-09, 173, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.142, 5, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.6e-08, 189, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.4, 2, 100], 'true,false': [0.0, 0, 0], 'false,true': [1.05e-07, 181, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 15, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.192, 4, 100], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.66e-08, 205, 0], 'false,false,false': [1.32e-09, 13, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.168, 3, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 196, 0]}]
{'': [0.0453514739229045, -2.360474178482315e-16], 'false': [-2.360474178482315e-16, nan]}
{'': [0.01922337562475992, -4.2519179666495357e-17], 'false': [-4.2519179666495357e-17, nan]}
{'': [0.04535147392290071, -3.022596716256971e-17], 'false': [nan, -3.022596716256971e-17]}
{'': [0.06952484343028616, 0.059824794322033345], 'true': [0.029971304070570477, -8.90618470303697e-17], 'false': [0.059824794322033345, nan], 'false,true': [-3.700743415417188e-17, 3.7007434154171884e-18]}
{'': [0.019210042740924905, 4.1559150654417624e-17], 'true': [0.019210042740924905, nan], 'false': [nan, 4.1559150654417624e-17], 'false,false': [3.933361572957697e-17, 2.3129646346357427e-18], 'false,false,true': [nan, 3.933361572957697e-17]}
{'': [0.019211345409837044, 2.6953391349281256e-17], 'false': [nan, 2.6953391349281256e-17], 'false,false': [nan, 2.6953391349281256e-17]}
{'': [0.04367937720256438, 3.054581866693552e-17], 'false': [nan, 3.054581866693552e-17], 'false,false': [nan, 3.054581866693552e-17], 'false,false,false': [3.054581866693552e-17, nan]}
{'': [0.01921350714434526, 6.910571887972913e-17], 'true': [0.01921350714434526, nan], 'false': [6.072490576679034e-17, -1.8503717077085942e-18], 'false,false': [nan, -1.8503717077085942e-18]}
{'': [0.036964076004446365, 2.1389617905622283e-17], 'false': [nan, 2.1389617905622283e-17], 'false,false': [2.166288828536891e-17, 1.0675221390626506e-18], 'false,false,true': [nan, 2.166288828536891e-17]}
{'': [0.028265320272733655, -2.2657612747452172e-18], 'false': [nan, -2.2657612747452172e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 32.24
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, D), tweets(A, E) )
%   | | | then return 0.8318331456258272;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.7528857772047755;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.1418510649004884;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(A, D), tweets(D, E) )
%   | | | then return 0.725751794726808;  // std dev = 0.021, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.6728682450795777;  // std dev = 0.973, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return 0.7282865212165899;  // std dev = 0.056, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.052806745544287804;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.744846430816708;  // std dev = 0.012, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.6202843206108015;  // std dev = 0.940, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.12544463852839163;  // std dev = 0.000, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5719984352163375;  // std dev = 0.221, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   else return -0.11231637819360656;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.42477088481606357;  // std dev = 0.071, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( follows(F, A), tweets(A, G) )
%   | | | then return 0.24973695333823182;  // std dev = 1.566, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | | else return 0.4138754396364898;  // std dev = 0.974, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else return -0.10159632948783648;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.4248204569536247;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.10159632948783623;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(A, F), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.2997838819247705;  // std dev = 0.992, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | | else return 0.02115299625160168;  // std dev = 0.812, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.33930445993781827;  // std dev = 0.094, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else return 0.3660294323465202;  // std dev = 0.130, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, G) )
%   | then return -0.0926912761892606;  // std dev = 8.82e-08, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | else return -0.09269127618926087;  // std dev = 3.73e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then if ( follows(E, F), follows(A, F) )
%   | | | then return 0.2609451979514015;  // std dev = 0.032, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.2513700594961371;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, D), tweets(A, G) )
%   | | | then return 0.2687720550430375;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2638341275423395;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( tweets(A, I), follows(A, H) )
%   | | | then return 0.2375858014641407;  // std dev = 0.838, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.11068023558232029;  // std dev = 1.338, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.2737811651411841;  // std dev = 0.043, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.3020612852538997;  // std dev = 0.091, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.08518475138839678;  // std dev = 5.35e-09, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, E), follows(D, E) )
%   | | | then return 0.21332207921334098;  // std dev = 0.033, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return 0.21690217818976051;  // std dev = 0.015, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.24493789674610067;  // std dev = 0.080, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.2772311652713784;  // std dev = 0.023, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return 0.22350701505616682;  // std dev = 0.038, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.11584062014689911;  // std dev = 0.824, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2277100880279619;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2576153389289181;  // std dev = 0.069, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.07877675473109147;  // std dev = 5.67e-09, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E), tweets(A, F) )
%   | | | then return 0.1785586965741138;  // std dev = 0.008, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.1838133721868279;  // std dev = 0.016, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.1803298936022202;  // std dev = 0.007, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.16932954679997347;  // std dev = 0.001, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A), tweets(I, H) )
%   | | | then return 0.20326469397581934;  // std dev = 0.070, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.18865018699060854;  // std dev = 0.034, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.24573187190346335;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.21479732463093604;  // std dev = 0.052, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.07324622576333668;  // std dev = 8.01e-09, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.09892888192064772;  // std dev = 1.376, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | | else return -0.0840022912288991;  // std dev = 0.835, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.15798725565297309;  // std dev = 0.004, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.1535195797405598;  // std dev = 0.015, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), follows(I, A) )
%   | | | then return 0.1723777967874078;  // std dev = 0.062, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.16146797828325613;  // std dev = 0.030, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.20310192970435637;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.18084393366155707;  // std dev = 0.046, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06842697784420262;  // std dev = 5.43e-09, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(D, E), follows(A, D) )
%   | | | then return 0.11101123539009476;  // std dev = 0.986, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return 0.1420829311365122;  // std dev = 0.045, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.13684989271183462;  // std dev = 0.009, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.11649670988557315;  // std dev = 0.860, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), tweets(H, G) )
%   | | | then return 0.14919421811113934;  // std dev = 0.055, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.1407915739118227;  // std dev = 0.027, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.17222197385224347;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1556202305853127;  // std dev = 0.041, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06419184008202626;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.606', 'seconds']
Refined model CLL: -0.092895


******************************************
Best model found
******************************************
Results 

CLL : -0.08623 

AUC ROC : 0.995975 

AUC PR : 0.478053 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 32.24 

Total Inference Time : 7.698169708251953 

Total revision time: 52.62569198226929
Best scored revision CLL: -0.092895


Results 

CLL : -0.08623 

AUC ROC : 0.995975 

AUC PR : 0.478053 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 52.66515454864502 

Total Inference Time : 7.698169708251953 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.311
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8199809961682126;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048816;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6744804081531018;  // std dev = 2.575, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839186;  // std dev = 0.000, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5601709110867431;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360686;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4038967735007927;  // std dev = 1.967, 122.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=118 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43668365874669324;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783617;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3182957494390941;  // std dev = 1.645, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926047;  // std dev = 9.42e-08, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
%   | | else return -0.09269127618926087;  // std dev = 1.32e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23491006277286955;  // std dev = 2.195, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.67e-09, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21341020290462054;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 5.37e-08, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1627358612141241;  // std dev = 1.971, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333661;  // std dev = 1.30e-07, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.073246225763337;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1537716483573364;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420276;  // std dev = 0.000, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
%   | | else return -0.06842697784420267;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13322114094748952;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202622;  // std dev = 3.09e-09, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.572', 'seconds']
Parameter learned model CLL:-0.093023 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 259, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.575, 7, 126], 'false,true': [0.0, 249, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 254, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.967, 4, 118], 'true,false': [0.0, 241, 0], 'false,true,true': [1.05e-08, 0, 8], 'false,true,false': [0.0, 20, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.645, 3, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [9.42e-08, 246, 0], 'false,false,false': [1.32e-09, 16, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.195, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.67e-09, 229, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.403, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.37e-08, 273, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.971, 4, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.3e-07, 216, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 20, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 257, 0], 'false,false,false': [0.0, 18, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false': [3.09e-09, 257, 0]}]
{'': [0.03671114736903867, -9.259002830850726e-17], 'false': [-9.259002830850726e-17, nan]}
{'': [0.049861495844872435, -6.420566889398495e-17], 'false': [-6.420566889398495e-17, nan]}
{'': [0.015380859374998612, -9.616104937698206e-17], 'false': [nan, -9.616104937698206e-17]}
{'': [0.0676736473521693, 0.05913170321097246], 'true': [0.03171190540177332, -7.370775267220956e-17], 'false': [0.05913170321097246, nan], 'false,true': [1.1102230246251565e-16, -5.551115123125783e-18]}
{'': [0.020981471727804443, 5.4239903493137417e-17], 'true': [0.020981471727804443, nan], 'false': [nan, 5.4239903493137417e-17], 'false,false': [3.610481380894818e-17, 1.734723475976807e-18], 'false,false,true': [nan, 3.610481380894818e-17]}
{'': [0.03677863386633171, 3.199769415950233e-17], 'false': [nan, 3.199769415950233e-17], 'false,false': [nan, 3.199769415950233e-17]}
{'': [0.015371573404895977, 1.057355261547768e-17], 'false': [nan, 1.057355261547768e-17], 'false,false': [nan, 1.057355261547768e-17], 'false,false,false': [1.057355261547768e-17, nan]}
{'': [0.02988057025134148, 6.491982093147102e-17], 'true': [0.02988057025134148, nan], 'false': [7.812680543658509e-17, -2.0816681711721684e-18], 'false,false': [nan, -2.0816681711721684e-18]}
{'': [0.01537315809359515, -3.3912266934004784e-17], 'false': [nan, -3.3912266934004784e-17], 'false,false': [-1.4687775423056546e-17, -2.3129646346357427e-18], 'false,false,true': [nan, -1.4687775423056546e-17]}
{'': [0.015373818799274803, 9.503854685507177e-18], 'false': [nan, 9.503854685507177e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 23.789
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5248156017661788;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(G, A), tweets(A, H) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.14185106490048827;  // std dev = 0.000, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then return 0.7229275301191629;  // std dev = 0.114, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | else if ( follows(F, A) )
%   | | then return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5854956304058602;  // std dev = 0.937, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.12544463852839188;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.5546199712896419;  // std dev = 0.002, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.506975533689076;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.22118000003393137;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5545844253155162;  // std dev = 0.000817, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.5759942816621296;  // std dev = 0.176, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   else return -0.11231637819360678;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.4031101239250546;  // std dev = 0.995, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.4313284518838497;  // std dev = 0.127, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.4301934169973649;  // std dev = 0.107, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.30962677400106625;  // std dev = 1.364, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | else return -0.10346861750181192;  // std dev = 0.452, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.42060307620035875;  // std dev = 0.014, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.31309681440813847;  // std dev = 0.926, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | | else return -0.011912764448997101;  // std dev = 0.795, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return -0.3383909927065643;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.41122732470581713;  // std dev = 0.052, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.333476138230801;  // std dev = 0.118, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else if ( follows(A, H) )
%   | then return -0.09253393754192892;  // std dev = 0.000, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
%   | else return -0.09269127618926087;  // std dev = 5.27e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.23978795951067905;  // std dev = 0.982, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | | else return 0.2828340380759919;  // std dev = 0.130, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.11957963145971309;  // std dev = 1.315, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.25880281996573884;  // std dev = 0.043, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.3087271546494418;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2640767652527397;  // std dev = 0.115, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.28527969097670414;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.30609026011897883;  // std dev = 0.051, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.08506131253675203;  // std dev = 3.53e-05, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.20566360460884223;  // std dev = 0.950, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | | else return 0.10861223462033909;  // std dev = 0.936, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.28261737915686863;  // std dev = 0.067, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.21572708680584785;  // std dev = 0.955, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.21321079385030806;  // std dev = 0.015, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.20540266340881974;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.21552478889256213;  // std dev = 0.053, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.2342889815349647;  // std dev = 0.009, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07866868191704116;  // std dev = 2.93e-05, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.16010173429218058;  // std dev = 0.982, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.2010984686284565;  // std dev = 0.035, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.21500185392097002;  // std dev = 0.111, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.18149540396073482;  // std dev = 0.052, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.177731377959976;  // std dev = 0.012, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.19214278669912666;  // std dev = 0.064, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return -0.15549990491169852;  // std dev = 1.119, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.10830328903412312;  // std dev = 0.949, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else return -0.07315358168000213;  // std dev = 2.94e-05, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D), follows(F, E) )
%   | | | then return 0.12393198295898614;  // std dev = 1.375, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | | | else return 0.174276476420155;  // std dev = 0.072, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.17518204939761448;  // std dev = 0.080, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.15668259314345148;  // std dev = 0.045, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.15937046245828426;  // std dev = 0.058, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2809414527858635;  // std dev = 0.107, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(I, A), follows(A, I) )
%   | | | then return -0.1216385595955066;  // std dev = 1.186, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.08093264819261017;  // std dev = 0.876, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.06835012928218259;  // std dev = 3.39e-05, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, F), recursion_accounttype(E, B) )
%   | | | then return 0.14505165272461937;  // std dev = 0.016, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.009894282105615361;  // std dev = 1.614, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | else if ( follows(E, G), follows(G, A) )
%   | | | then return 0.14208841814314588;  // std dev = 0.022, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.13453437537347465;  // std dev = 0.004, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.13919780686724084;  // std dev = 0.052, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.15648700820912098;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.2054105962413519;  // std dev = 0.114, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1545460336816276;  // std dev = 0.094, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.0641180451222133;  // std dev = 2.23e-05, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.061', 'seconds']
Refined model CLL: -0.091138


******************************************
Best model found
******************************************
Results 

CLL : -0.085744 

AUC ROC : 0.996269 

AUC PR : 0.504912 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 23.789 

Total Inference Time : 10.01204514503479 

Total revision time: 49.35578904151917
Best scored revision CLL: -0.091138


Results 

CLL : -0.085744 

AUC ROC : 0.996269 

AUC PR : 0.504912 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 49.3952516078949 

Total Inference Time : 10.01204514503479 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.733
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8268989350995116;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048766;  // std dev = 6.32e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6944871741022817;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283916;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.569206368094408;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360628;  // std dev = 5.89e-09, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.36334269597572777;  // std dev = 1.368, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | else return -0.10159632948783624;  // std dev = 2.79e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.09452549167465223;  // std dev = 0.471, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.1015963294878363;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3147776660443554;  // std dev = 0.992, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926105;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else return -0.09269127618926097;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24743077448592338;  // std dev = 0.991, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 2.46e-09, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.17108896669567825;  // std dev = 1.377, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109175;  // std dev = 2.11e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.20284705012711118;  // std dev = 0.064, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333704;  // std dev = 1.05e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14069992135523582;  // std dev = 0.175, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0684269778442027;  // std dev = 1.67e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15291882779416952;  // std dev = 0.009, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.464', 'seconds']
Parameter learned model CLL:-0.090585 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.984, 1, 31], 'false,true': [6.32e-08, 62, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.984, 1, 31], 'false,true': [0.0, 60, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.0, 0, 31], 'false,true': [0.0, 0, 0], 'false,false': [5.89e-09, 61, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.368, 2, 29], 'true,false': [2.79e-08, 52, 0], 'false,true,true': [0.471, 1, 2], 'false,true,false': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.992, 1, 31], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 48, 0], 'false,false,false': [0.0, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.991, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.46e-09, 74, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.377, 2, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.11e-08, 58, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.064, 0, 31], 'true,false': [0.0, 0, 0], 'false,true': [1.05e-08, 50, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.73e-09, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.175, 1, 31], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.67e-08, 54, 0], 'false,false,false': [0.0, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.009, 0, 31], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 61, 0]}]
{'': [0.030273437500001332, 6.446456272017038e-17], 'false': [6.446456272017038e-17, nan]}
{'': [0.0302734375000005, -4.070817756958907e-17], 'false': [-4.070817756958907e-17, nan]}
{'': [-2.2920733411616134e-16, 3.45807171604557e-17], 'false': [nan, 3.45807171604557e-17]}
{'': [0.07312434576685255, 0.04480557654065455], 'true': [0.06035379812695084, 1.4945309946877107e-17], 'false': [0.04480557654065455, nan], 'false,true': [0.22222222222222224, -3.96508223080413e-18]}
{'': [0.03074971943681966, -9.40866970021319e-18], 'true': [0.03074971943681966, nan], 'false': [nan, -9.40866970021319e-18], 'false,false': [-3.469446951953614e-18, 0.0], 'false,false,true': [nan, -3.469446951953614e-18]}
{'': [0.03068327568585856, 6.00120553851436e-18], 'false': [nan, 6.00120553851436e-18], 'false,false': [nan, 6.00120553851436e-18]}
{'': [0.057453167912003195, 7.656710514656252e-18], 'false': [nan, 7.656710514656252e-18], 'false,false': [nan, 7.656710514656252e-18], 'false,false,false': [7.656710514656252e-18, nan]}
{'': [0.00013024981895023543, -1.734723475976807e-18], 'true': [0.00013024981895023543, nan], 'false': [2.220446049250313e-18, 9.912705577010326e-19], 'false,false': [nan, 9.912705577010326e-19]}
{'': [0.030534145756138772, 9.394194823751325e-18], 'false': [nan, 9.394194823751325e-18], 'false,false': [5.13992141030165e-18, 6.30808536718839e-19], 'false,false,true': [nan, 5.13992141030165e-18]}
{'': [8.568689099651014e-05, -2.7300566179307128e-18], 'false': [nan, -2.7300566179307128e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 11.078
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.14185106490048768;  // std dev = 5.37e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7229775869755815;  // std dev = 0.052, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.5426009656574945;  // std dev = 0.878, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.7194734122109544;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.1254446385283916;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5664923625364802;  // std dev = 0.144, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else return -0.11231637819360628;  // std dev = 4.21e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4270260453406048;  // std dev = 0.147, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.10159632948783624;  // std dev = 3.16e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.41438513329537335;  // std dev = 0.000601, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.10159632948783628;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then return 0.24542756478652672;  // std dev = 0.269, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0.33064110316529044;  // std dev = 0.121, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.014868428008425435;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926103;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then return 0.27180244497941736;  // std dev = 0.015, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.24875076182646083;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.305135719628994;  // std dev = 0.042, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.27354683876745456;  // std dev = 0.084, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H) )
%   | | then if ( follows(H, A) )
%   | | | then return -0.08518475138839683;  // std dev = 1.49e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.08518475138839687;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.08518475138839687;  // std dev = 9.31e-10, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(A, I) )
%   | | then return -0.08518475138839687;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.08518475138839687;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.13517977294582004;  // std dev = 0.277, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.22510562354028682;  // std dev = 0.049, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.20521118880081057;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.24595262843908694;  // std dev = 0.037, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.20521118880081057;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.21452370486750794;  // std dev = 0.057, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(H, A) )
%   | then if ( follows(A, H) )
%   | | then return -0.07877675473109175;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.07877675473109175;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.19355800897096942;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.18854113315639207;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.21775735093707166;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.17334920977277513;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.16940466395338294;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1926779996551415;  // std dev = 0.058, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, J) )
%   | then if ( follows(K, A) )
%   | | then return -0.07324622576333704;  // std dev = 1.61e-09, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return -0.07324622576333704;  // std dev = 9.31e-10, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), follows(D, A) )
%   | | | then return 0.1651973598420676;  // std dev = 0.000653, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.16114255863204785;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.18294998092094397;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.14989531944500076;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.14688341146291173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.16457407081019426;  // std dev = 0.052, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, J) )
%   | then if ( follows(K, A) )
%   | | then return -0.06842697784420276;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return -0.06842697784420272;  // std dev = 9.31e-10, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), follows(D, A) )
%   | | | then return 0.14365585818830148;  // std dev = 0.000583, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.14053120217650938;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.15717520469597585;  // std dev = 0.010, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.13177937157980965;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1294150706523346;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.14325090828895218;  // std dev = 0.046, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, J) )
%   | then return -0.06419184008202623;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( follows(K, A) )
%   | | then return -0.0641918400820262;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.06419184008202618;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.021', 'seconds']
Refined model CLL: -0.091183


******************************************
Best model found
******************************************
Results 

CLL : -0.092922 

AUC ROC : 0.99255 

AUC PR : 0.344001 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 11.078 

Total Inference Time : 1.8045361042022705 

Total revision time: 18.62145627593994
Best scored revision CLL: -0.090585


Results 

CLL : -0.092922 

AUC ROC : 0.99255 

AUC PR : 0.344001 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 18.646310459136963 

Total Inference Time : 1.8045361042022705 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.636
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8119950889456665;  // std dev = 1.692, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048777;  // std dev = 0.000, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7128206589934594;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839105;  // std dev = 8.02e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5683651859056953;  // std dev = 7.45e-09, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360622;  // std dev = 7.68e-09, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.39389196742351157;  // std dev = 1.390, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else return -0.10159632948783626;  // std dev = 4.21e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.22722530075684427;  // std dev = 0.400, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.27638591334086365;  // std dev = 1.945, 66.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926108;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else return -0.09269127618926105;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23215704251749564;  // std dev = 1.697, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 6.04e-09, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2183533079936177;  // std dev = 0.996, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109155;  // std dev = 7.07e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.13709048690297831;  // std dev = 1.929, 66.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333707;  // std dev = 5.27e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.176570120599277;  // std dev = 0.006, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420265;  // std dev = 5.05e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else return -0.06842697784420276;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12105460158922549;  // std dev = 0.174, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.213', 'seconds']
Parameter learned model CLL:-0.088263 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.692, 3, 62], 'false,true': [0.0, 122, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.992, 1, 62], 'false,true': [8.02e-08, 115, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [7.45e-09, 0, 62], 'false,true': [0.0, 0, 0], 'false,false': [7.68e-09, 109, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.39, 2, 58], 'true,false': [4.21e-08, 97, 0], 'false,true,true': [0.4, 1, 4], 'false,true,false': [0.0, 26, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.945, 4, 62], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 83, 0], 'false,false,false': [0.0, 19, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.697, 3, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.04e-09, 137, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.996, 1, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.07e-08, 122, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.929, 4, 62], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 108, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.27e-09, 17, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.006, 0, 62], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.05e-08, 105, 0], 'false,false,false': [0.0, 24, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.174, 2, 62], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 130, 0]}]
{'': [0.044023668639052445, 0.0], 'false': [0.0, nan]}
{'': [0.015621063240110014, 5.599385689413833e-17], 'false': [5.599385689413833e-17, nan]}
{'': [5.730183352904034e-17, 6.111319401606367e-17], 'false': [nan, 6.111319401606367e-17]}
{'': [0.07028251410451875, 0.04043296190133195], 'true': [0.03222222222222193, 1.8312957107219077e-17], 'false': [0.04043296190133195, nan], 'false,true': [0.16, -2.135044278125301e-18]}
{'': [0.05729518147148816, 2.503444075135157e-17], 'true': [0.05729518147148816, nan], 'false': [nan, 2.503444075135157e-17], 'false,false': [0.0, -4.382459307730881e-18], 'false,false,true': [nan, 0.0]}
{'': [0.04428863413684758, 3.565679787117291e-17], 'false': [nan, 3.565679787117291e-17], 'false,false': [nan, 3.565679787117291e-17]}
{'': [0.01574087088683899, 4.0950849268960694e-17], 'false': [nan, 4.0950849268960694e-17], 'false,false': [nan, 4.0950849268960694e-17], 'false,false,false': [4.0950849268960694e-17, nan]}
{'': [0.05640409640198814, -1.4210854715202004e-17], 'true': [0.05640409640198814, nan], 'false': [-3.0839528461809902e-18, 1.6326809185664067e-18], 'false,false': [nan, 1.6326809185664067e-18]}
{'': [3.884935984428907e-05, 2.7540416114732565e-17], 'false': [nan, 2.7540416114732565e-17], 'false,false': [2.4319171015598667e-17, -4.04768811061255e-18], 'false,false,true': [nan, 2.4319171015598667e-17]}
{'': [0.030391760701094447, -1.4518301091252048e-17], 'false': [nan, -1.4518301091252048e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 14.338
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.8025933795439567;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.8581489350995121;  // std dev = 8.43e-08, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.14185106490048793;  // std dev = 0.000, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.7255467837439447;  // std dev = 0.031, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0.3898317360839485;  // std dev = 0.807, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.724790091164182;  // std dev = 0.072, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.12544463852839105;  // std dev = 8.30e-08, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.5662258126524727;  // std dev = 0.129, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.5538662115774398;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.058975287003502706;  // std dev = 0.751, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.5589258386711167;  // std dev = 0.046, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360617;  // std dev = 9.31e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.42362027768900146;  // std dev = 0.187, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.10159632948783626;  // std dev = 4.21e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.46323162251039707;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.32681592624111533;  // std dev = 0.183, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( follows(A, D) )
%   | then return -0.09269127618926096;  // std dev = 5.05e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else return -0.09269127618926104;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(D, B) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.25691861755233064;  // std dev = 0.023, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.30360409702385016;  // std dev = 0.112, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.2498063142537763;  // std dev = 0.000138, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.25118521982471664;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.2814288201288885;  // std dev = 0.001, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, H) )
%   | then if ( follows(I, A) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.08518475138839685;  // std dev = 3.41e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return -0.08518475138839691;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return -0.08518475138839694;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return -0.08518475138839687;  // std dev = 1.05e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.20958709014809443;  // std dev = 0.024, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.22782362959681057;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.23914685297095664;  // std dev = 0.041, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return -0.023462104726113597;  // std dev = 0.905, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.2064523014056958;  // std dev = 0.002, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.21400499831026365;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(J, A) )
%   | then if ( follows(A, J) )
%   | | then return -0.07877675473109173;  // std dev = 3.23e-09, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else return -0.0787767547310918;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return -0.0787767547310918;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(D, B) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.1782116600299025;  // std dev = 0.017, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.2294743959919095;  // std dev = 0.102, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(D, G) )
%   | | | then return 0.17434204961953584;  // std dev = 0.002, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.17263571462750105;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.009107145059959664;  // std dev = 0.895, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, H) )
%   | then return -0.07324622576333711;  // std dev = 0.000, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.15552360517383765;  // std dev = 0.006, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.15021859144611585;  // std dev = 0.000164, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.2088464825734107;  // std dev = 0.983, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1502874977204201;  // std dev = 0.000691, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.19182244294642226;  // std dev = 0.090, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.15054342337320026;  // std dev = 0.004, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.19246807187264783;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, I) )
%   | then return -0.06842697784420265;  // std dev = 4.37e-09, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return -0.06842697784420275;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.04204159879871348;  // std dev = 1.287, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return 0.14349209692905135;  // std dev = 0.054, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.14540048145859782;  // std dev = 0.097, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.13230623344420692;  // std dev = 0.004, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return -0.035837585945016584;  // std dev = 0.895, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.06419184008202626;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '3.940', 'seconds']
Refined model CLL: -0.086684


******************************************
Best model found
******************************************
Results 

CLL : -0.091585 

AUC ROC : 0.994641 

AUC PR : 0.410133 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 14.338 

Total Inference Time : 2.8494465351104736 

Total revision time: 26.8943405380249
Best scored revision CLL: -0.086684


Results 

CLL : -0.091585 

AUC ROC : 0.994641 

AUC PR : 0.410133 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 26.91919472122192 

Total Inference Time : 2.8494465351104736 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.416
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8475106372271711;  // std dev = 0.995, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048824;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.670595125150506;  // std dev = 2.178, 98.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=93 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839155;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5700105602196235;  // std dev = 3.41e-08, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360653;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3947572197287012;  // std dev = 1.703, 89.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=86 */
%   | else return -0.10159632948783645;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.20624286267501835;  // std dev = 0.416, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3079741709650805;  // std dev = 1.690, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926071;  // std dev = 7.15e-08, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | | else return -0.09269127618926094;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2323062543530115;  // std dev = 1.967, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.43e-09, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.178847459075989;  // std dev = 2.186, 98.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.0787767547310915;  // std dev = 8.36e-08, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.18921255305563667;  // std dev = 1.000, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.0732462257633368;  // std dev = 8.23e-08, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12020525204744756;  // std dev = 0.221, 98.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420264;  // std dev = 6.58e-08, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | | else return -0.06842697784420265;  // std dev = 2.95e-09, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13384689434282449;  // std dev = 0.144, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.090', 'seconds']
Parameter learned model CLL:-0.087377 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.995, 1, 93], 'false,true': [0.0, 173, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.178, 5, 93], 'false,true': [0.0, 181, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [3.41e-08, 0, 93], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 184, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.703, 3, 86], 'true,false': [0.0, 148, 0], 'false,true,true': [0.416, 2, 7], 'false,true,false': [0.0, 36, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.69, 3, 93], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.15e-08, 141, 0], 'false,false,false': [0.0, 30, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.967, 4, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.43e-09, 167, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.186, 5, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [8.36e-08, 156, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.0, 1, 93], 'true,false': [0.0, 0, 0], 'false,true': [8.23e-08, 155, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 42, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.221, 5, 93], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.58e-08, 148, 0], 'false,false,false': [2.95e-09, 27, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.144, 2, 93], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 203, 0]}]
{'': [0.010525124490720615, -1.8225626531418756e-16], 'false': [-1.8225626531418756e-16, nan]}
{'': [0.04841732611411797, -1.7174720822930598e-17], 'false': [-1.7174720822930598e-17, nan]}
{'': [1.1842378929335002e-15, -7.240584943207542e-18], 'false': [nan, -7.240584943207542e-18]}
{'': [0.07000619204551058, 0.04973029615160462], 'true': [0.032571644994318985, -5.8511754000515e-17], 'false': [0.04973029615160462, nan], 'false,true': [0.17283950617283955, -9.25185853854297e-18]}
{'': [0.02974057408687708, 3.895519384649672e-17], 'true': [0.02974057408687708, nan], 'false': [nan, 3.895519384649672e-17], 'false,false': [3.622004193812568e-17, -1.8503717077085942e-18], 'false,false,true': [nan, 3.622004193812568e-17]}
{'': [0.039868140431228626, 2.9251385079944247e-17], 'false': [nan, 2.9251385079944247e-17], 'false,false': [nan, 2.9251385079944247e-17]}
{'': [0.04875133880921151, 4.483592984063132e-17], 'false': [nan, 4.483592984063132e-17], 'false,false': [nan, 4.483592984063132e-17], 'false,false,false': [4.483592984063132e-17, nan]}
{'': [0.010643932159623492, 6.875492842856299e-17], 'true': [0.010643932159623492, nan], 'false': [4.369264806589326e-17, -1.057355261547768e-17], 'false,false': [nan, -1.057355261547768e-17]}
{'': [0.0486753342352525, 2.6645352591003756e-17], 'false': [nan, 2.6645352591003756e-17], 'false,false': [2.92558770002575e-17, 8.22387425648264e-18], 'false,false,true': [nan, 2.92558770002575e-17]}
{'': [0.020736585666700443, -2.187631575616072e-18], 'false': [nan, -2.187631575616072e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 34.669
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 1.46e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.7043027812533584;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.1418510649004882;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, F) )
%   | | then if ( follows(D, A), follows(E, A) )
%   | | | then return 0.7194734122109546;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.6290410310746741;  // std dev = 1.342, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | else return 0.4020062622195435;  // std dev = 0.778, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.7330516140564457;  // std dev = 0.099, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else return -0.1254446385283916;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return 0.5583148360768648;  // std dev = 0.055, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( recursion_accounttype(E, B), follows(G, E) )
%   | | | then return 0.36734702135233976;  // std dev = 0.912, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.516797376814686;  // std dev = 0.958, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0.5727281148305307;  // std dev = 0.130, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.11231637819360647;  // std dev = 3.65e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.4329553388019859;  // std dev = 0.184, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0.37240377685402265;  // std dev = 1.365, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | | | else return 0.4296652309874295;  // std dev = 0.049, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.10159632948783641;  // std dev = 0.000, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.4295865513726484;  // std dev = 0.070, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then return 0.3351496185674542;  // std dev = 0.175, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.08339417183176168;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.32256574340266636;  // std dev = 0.012, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(H, A), follows(A, H) )
%   | | | then return 0.2556390853515748;  // std dev = 0.932, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.35539824323365643;  // std dev = 0.060, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, I) )
%   | then return -0.09269127618926072;  // std dev = 7.30e-08, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then if ( follows(D, A), follows(E, A) )
%   | | | then return 0.25389614817405565;  // std dev = 0.046, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.28642222330480815;  // std dev = 0.097, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( follows(D, A), tweets(A, F) )
%   | | | then return 0.03006831904212348;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2693487793230258;  // std dev = 0.079, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(G, A) )
%   | | then return 0.04707911718039599;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.2730784221681221;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A) )
%   | then if ( follows(A, H) )
%   | | then return -0.08518475138839678;  // std dev = 3.95e-09, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else return -0.08518475138839679;  // std dev = 7.45e-09, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else return -0.08518475138839678;  // std dev = 1.05e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | | then return 0.1743334880042471;  // std dev = 0.947, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.23302030659680795;  // std dev = 0.084, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.23670670541626895;  // std dev = 0.045, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.26676786881507536;  // std dev = 1.008, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.2567957632107388;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.22093036316534273;  // std dev = 0.023, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.20671769571437648;  // std dev = 0.016, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.22973516290780233;  // std dev = 0.035, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.07877675473109148;  // std dev = 5.96e-09, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.17858225345433815;  // std dev = 0.026, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.19812773466410805;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.20091777895319574;  // std dev = 0.070, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24870334617942672;  // std dev = 0.093, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.12866093919310992;  // std dev = 1.165, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.1748674128612864;  // std dev = 0.014, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.19059118183399112;  // std dev = 0.027, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, J) )
%   | then return -0.07324622576333685;  // std dev = 5.59e-09, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A), follows(E, A) )
%   | | | then return 0.15345260254447862;  // std dev = 0.011, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.16873456726313832;  // std dev = 0.152, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else return 0.02648446853188352;  // std dev = 0.888, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(F, A) )
%   | | then return 0.1685182759417041;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.09476290664762105;  // std dev = 0.882, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, A) )
%   | | then if ( follows(A, H) )
%   | | | then return -0.06842697784420267;  // std dev = 3.16e-08, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | | else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.06842697784420268;  // std dev = 1.83e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else return -0.06842697784420265;  // std dev = 2.95e-09, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.1370896713995681;  // std dev = 0.044, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.0670942886370807;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | | then return 0.20675304937011071;  // std dev = 0.077, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.14537859565079483;  // std dev = 0.103, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( tweets(A, G) )
%   | | then return 0.14762731819856173;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.16590543499850507;  // std dev = 0.854, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.06419184008202626;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.201', 'seconds']
Refined model CLL: -0.086522


******************************************
Best model found
******************************************
Results 

CLL : -0.092344 

AUC ROC : 0.994559 

AUC PR : 0.46974 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 34.669 

Total Inference Time : 7.244784593582153 

Total revision time: 57.034672460556024
Best scored revision CLL: -0.086522


Results 

CLL : -0.092344 

AUC ROC : 0.994559 

AUC PR : 0.46974 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 57.059526643753046 

Total Inference Time : 7.244784593582153 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.515
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8119950889456642;  // std dev = 2.392, 130.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=124 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004884;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7206936748664768;  // std dev = 0.996, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839186;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.535182698668038;  // std dev = 0.174, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360692;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4334297223314342;  // std dev = 1.88e-07, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | else return -0.10159632948783653;  // std dev = 0.000, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43342972233143473;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.1015963294878362;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3079017543253424;  // std dev = 1.711, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926053;  // std dev = 5.96e-08, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | | else return -0.09269127618926078;  // std dev = 2.95e-09, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2512628499509432;  // std dev = 1.403, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.74e-09, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.18213402972138684;  // std dev = 2.192, 129.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 5.37e-08, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1675210273036337;  // std dev = 1.711, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333664;  // std dev = 1.21e-07, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12781214643563935;  // std dev = 0.193, 129.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6.23e-08, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | | else return -0.06842697784420262;  // std dev = 2.79e-09, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1259536260010427;  // std dev = 0.152, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 1.86e-09, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.373', 'seconds']
Parameter learned model CLL:-0.086739 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.392, 6, 124], 'false,true': [0.0, 204, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.996, 1, 124], 'false,true': [0.0, 250, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.174, 4, 124], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 269, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.88e-07, 0, 108], 'true,false': [0.0, 205, 0], 'false,true,true': [0.0, 0, 16], 'false,true,false': [0.0, 49, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.711, 3, 124], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.96e-08, 203, 0], 'false,false,false': [2.95e-09, 35, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.403, 2, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.74e-09, 245, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.192, 5, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.37e-08, 268, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.711, 3, 124], 'true,false': [0.0, 0, 0], 'false,true': [1.21e-07, 202, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 51, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.193, 5, 124], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.23e-08, 195, 0], 'false,false,false': [2.79e-09, 49, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.152, 3, 124], 'false,true': [0.0, 0, 0], 'false,false': [1.86e-09, 237, 0]}]
{'': [0.044023668639057364, -2.394598680564063e-16], 'false': [-2.394598680564063e-16, nan]}
{'': [0.007935999999997079, -7.815970093361102e-17], 'false': [-7.815970093361102e-17, nan]}
{'': [0.030273437500000833, -1.0730780163663223e-16], 'false': [nan, -1.0730780163663223e-16]}
{'': [0.06469024566357225, 0.05311769346325421], 'true': [3.289549702593056e-16, -9.098413079854941e-17], 'false': [0.05311769346325421, nan], 'false,true': [-5.551115123125783e-17, -1.586032892321652e-17]}
{'': [0.023064046128092312, 2.7988815746852685e-17], 'true': [0.023064046128092312, nan], 'false': [nan, 2.7988815746852685e-17], 'false,false': [1.7501052604928576e-17, 9.516197353929913e-18], 'false,false,true': [nan, 1.7501052604928576e-17]}
{'': [0.015621063240110507, 3.2626962356331134e-17], 'false': [nan, 3.2626962356331134e-17], 'false,false': [nan, 3.2626962356331134e-17]}
{'': [0.037257376359593496, 1.0770820388154504e-17], 'false': [nan, 1.0770820388154504e-17], 'false,false': [nan, 1.0770820388154504e-17], 'false,false,false': [1.0770820388154504e-17, nan]}
{'': [0.023064046128092215, 5.441409290652941e-17], 'true': [0.023064046128092215, nan], 'false': [7.25492273517429e-17, -1.0884539457109378e-17], 'false,false': [nan, -1.0884539457109378e-17]}
{'': [0.037257376359593856, 0.0], 'false': [nan, 0.0], 'false,false': [1.9927079929169476e-17, 7.93016446160826e-18], 'false,false,true': [nan, 1.9927079929169476e-17]}
{'': [0.023064046128092257, 2.3422426679855622e-18], 'false': [nan, 2.3422426679855622e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 32.509
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(F, D) )
%   | | then if ( follows(A, F), recursion_accounttype(D, B) )
%   | | | then return 0.8287371703936293;  // std dev = 0.985, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.8581489350995118;  // std dev = 2.38e-07, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   else return -0.14185106490048807;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7220454759609419;  // std dev = 0.090, 124.000 (wgt'ed) examples reached here.  /* #pos=124 */
%   else return -0.12544463852839188;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.5249468185414577;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.5569070073224268;  // std dev = 0.011, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.561040388772365;  // std dev = 0.109, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, G) )
%   | | | then return 0.26901692949839784;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | | else return 0.5547312152126834;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.4975883580698264;  // std dev = 1.373, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | else return 0.5547312152126835;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.11231637819360688;  // std dev = 0.000, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(A, F) )
%   | | | then return 0.4347476189218493;  // std dev = 0.190, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | | else return 0.11104854856054681;  // std dev = 1.131, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.42995974487399463;  // std dev = 0.078, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else return -0.10159632948783652;  // std dev = 0.000, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4162760939617802;  // std dev = 0.003, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.10159632948783624;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.33232458403345355;  // std dev = 0.259, 124.000 (wgt'ed) examples reached here.  /* #pos=124 */
%   else if ( follows(A, D) )
%   | then return -0.09269127618926051;  // std dev = 6.14e-08, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.2596477664875525;  // std dev = 0.061, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.2536150645802924;  // std dev = 0.062, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( recursion_accounttype(D, B), tweets(D, F) )
%   | | | then return 0.2958325076354723;  // std dev = 0.141, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.2601178210499484;  // std dev = 0.064, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else if ( follows(G, A) )
%   | | then return 0.25164926025664136;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.052839276547060846;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.25283927654706084;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(I, A) )
%   | then return -0.08518475138839678;  // std dev = 5.27e-09, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else return -0.08518475138839678;  // std dev = 1.83e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, D), tweets(A, F) )
%   | | | then return 0.2127048138023641;  // std dev = 0.017, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.20509176170575524;  // std dev = 0.010, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.06440429175818575;  // std dev = 0.919, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.2328438713562281;  // std dev = 0.125, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.16062873940968236;  // std dev = 0.947, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.09991484752973263;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.21311130836331146;  // std dev = 0.018, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.11249943802045312;  // std dev = 0.961, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.07877675473109143;  // std dev = 3.73e-09, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return 0.17988118325014685;  // std dev = 0.044, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.17241000080528993;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.19820193073075454;  // std dev = 0.070, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.18045080607797992;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( recursion_accounttype(H, B), follows(H, J) )
%   | | | then return 0.020324469933632006;  // std dev = 1.223, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.13242509945272707;  // std dev = 0.983, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.1747915853575363;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.19364425062690713;  // std dev = 0.083, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.07324622576333681;  // std dev = 7.27e-09, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.15367226199162143;  // std dev = 0.042, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.16275761891969484;  // std dev = 0.070, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( recursion_accounttype(D, B), tweets(D, F) )
%   | | | then return 0.21358425821312785;  // std dev = 0.087, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.15788880007276548;  // std dev = 0.049, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.026695029567293513;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.19115707453824993;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.0062808992489902975;  // std dev = 0.911, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, I) )
%   | then return -0.06842697784420261;  // std dev = 4.66e-09, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else return -0.06842697784420264;  // std dev = 1.29e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(F, D) )
%   | | then if ( follows(D, E) )
%   | | | then return 0.13462654873491572;  // std dev = 0.039, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return 0.15388697256592565;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, G), follows(H, D) )
%   | | | then return 0.14829166244498504;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.17897343484328335;  // std dev = 0.041, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(J, K), follows(A, K) )
%   | | | then return 0.016142842468802224;  // std dev = 1.567, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | | | else return 0.14345240944108648;  // std dev = 0.090, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, L) )
%   | | | then return 0.13702588056187034;  // std dev = 0.031, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.16315382506083814;  // std dev = 0.000495, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06419184008202626;  // std dev = 2.36e-08, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.299', 'seconds']
Refined model CLL: -0.085704


******************************************
Best model found
******************************************
Results 

CLL : -0.09223 

AUC ROC : 0.995144 

AUC PR : 0.479716 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 32.509 

Total Inference Time : 7.81716513633728 

Total revision time: 58.63172943496704
Best scored revision CLL: -0.085704


Results 

CLL : -0.09223 

AUC ROC : 0.995144 

AUC PR : 0.479716 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 58.65658361816406 

Total Inference Time : 7.81716513633728 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.949
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8270930344783917;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048777;  // std dev = 1.43e-07, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7068306138113399;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839208;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #neg=337 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5290923655886671;  // std dev = 0.189, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360668;  // std dev = 0.000, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4346224502472607;  // std dev = 0.000, 128.000 (wgt'ed) examples reached here.  /* #pos=128 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4346224502472603;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.10159632948783616;  // std dev = 2.63e-09, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.30733601853244663;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926046;  // std dev = 1.55e-07, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
%   | | else return -0.09269127618926103;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2553062757503829;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.11e-09, 328.000 (wgt'ed) examples reached here.  /* #neg=328 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20205764048157698;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 3.65e-08, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1631099337190124;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333678;  // std dev = 1.18e-07, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13339894786964965;  // std dev = 0.173, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420282;  // std dev = 0.000, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
%   | | else return -0.06842697784420262;  // std dev = 1.32e-09, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12193476856696475;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820258;  // std dev = 8.23e-09, 339.000 (wgt'ed) examples reached here.  /* #neg=339 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.290', 'seconds']
Parameter learned model CLL:-0.087396 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.201, 5, 156], 'false,true': [1.43e-07, 313, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 337, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.189, 6, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 318, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 128], 'true,false': [0.0, 243, 0], 'false,true,true': [0.0, 0, 28], 'false,true,false': [2.63e-09, 59, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.975, 4, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.55e-07, 280, 0], 'false,false,false': [0.0, 63, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.11e-09, 328, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.65e-08, 293, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.975, 4, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.18e-07, 251, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 53, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.173, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 262, 0], 'false,false,false': [1.32e-09, 73, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [8.23e-09, 339, 0]}]
{'': [0.030091431657735174, 6.526550687892294e-17], 'false': [6.526550687892294e-17, nan]}
{'': [0.01851192595229428, -9.487959379585907e-17], 'false': [-9.487959379585907e-17, nan]}
{'': [0.035665294924553045, -5.02742501717052e-17], 'false': [nan, -5.02742501717052e-17]}
{'': [0.0649759239779677, 0.0627560467342403], 'true': [-6.38378239159465e-16, -7.127357688951622e-17], 'false': [0.0627560467342403, nan], 'false,true': [-2.5376526277146434e-16, 5.645201820127915e-18]}
{'': [0.024375000000000625, 1.2170374847202881e-16], 'true': [0.024375000000000625, nan], 'false': [nan, 1.2170374847202881e-16], 'false,false': [8.564577618536922e-17, -2.2909364000201642e-17], 'false,false,true': [nan, 8.564577618536922e-17]}
{'': [0.012497997115846324, 3.791005449939559e-17], 'false': [nan, 3.791005449939559e-17], 'false,false': [nan, 3.791005449939559e-17]}
{'': [0.018511925952296504, 4.54698849675832e-18], 'false': [nan, 4.54698849675832e-18], 'false,false': [nan, 4.54698849675832e-18], 'false,false,false': [4.54698849675832e-18, nan]}
{'': [0.024375000000000063, 2.921639538487254e-17], 'true': [0.024375000000000063, nan], 'false': [5.57323111963226e-17, -1.0473802119105251e-17], 'false,false': [nan, -1.0473802119105251e-17]}
{'': [0.0300914316577294, -7.953836594329479e-17], 'false': [nan, -7.953836594329479e-17], 'false,false': [-1.1017480397043538e-17, 3.0417069167812506e-18], 'false,false,true': [nan, -1.1017480397043538e-17]}
{'': [0.024375000000000126, 6.811987879705975e-17], 'false': [nan, 6.811987879705975e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 48.01
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8409075557891676;  // std dev = 0.991, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | | else return 0.7748156017661789;  // std dev = 1.354, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else return 0.8581489350995121;  // std dev = 1.19e-07, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else return 0.8581489350995118;  // std dev = 1.58e-07, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else return -0.14185106490048793;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.7223980107209451;  // std dev = 0.023, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.633141491312762;  // std dev = 1.353, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return 0.7227828362694856;  // std dev = 0.030, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(G, B), tweets(A, I) )
%   | | | then return 0.4839177496566585;  // std dev = 1.221, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.7237532158985703;  // std dev = 0.038, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.636140078877621;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else return -0.12544463852839208;  // std dev = 0.000, 333.000 (wgt'ed) examples reached here.  /* #neg=333 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), follows(F, D) )
%   | | | then return 0.5220225994901935;  // std dev = 1.365, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   | | | else return 0.5668466386737876;  // std dev = 0.062, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.48797113190985125;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( tweets(A, G) )
%   | | then return 0.5820794276864006;  // std dev = 0.150, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.5067938465805382;  // std dev = 0.963, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.5655572669467409;  // std dev = 0.076, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.1123163781936069;  // std dev = 0.000, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), tweets(A, F) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.38712186562664647;  // std dev = 1.384, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | | | else return 0.43207375739601966;  // std dev = 0.097, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return 0.4353722719962857;  // std dev = 0.182, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.4314886452957462;  // std dev = 0.032, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.10159632948783626;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.3361494058035787;  // std dev = 0.058, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.33181073725209564;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.018522090296402244;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(A, H) )
%   | | | then return 0.07299656249383517;  // std dev = 1.205, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.26486532228656945;  // std dev = 0.971, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.29248377661816816;  // std dev = 0.996, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return 0.3359306168511495;  // std dev = 0.054, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, K) )
%   | then return -0.09269127618926047;  // std dev = 9.88e-08, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.26684051068449954;  // std dev = 0.008, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | | else return 0.2681513103631564;  // std dev = 0.029, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return 0.344374148177511;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3080415032722666;  // std dev = 0.053, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, H), follows(I, A) )
%   | | then if ( follows(H, J) )
%   | | | then return 0.25827767486018577;  // std dev = 0.041, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.08088409785596185;  // std dev = 0.813, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.2559807569438515;  // std dev = 0.032, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.2683350185668368;  // std dev = 0.086, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else return -0.08518475138839678;  // std dev = 5.96e-09, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(D, E) )
%   | | | then return 0.21757059549105445;  // std dev = 0.009, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.21848545142627893;  // std dev = 0.024, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return 0.27126518906132036;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.24658486010416153;  // std dev = 0.046, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.2206211300682166;  // std dev = 0.022, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.20744926330982244;  // std dev = 0.012, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.24422804001914641;  // std dev = 0.039, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2170648158122969;  // std dev = 0.070, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.07877675473109141;  // std dev = 4.21e-08, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(A, F), follows(G, D) )
%   | | | then return 0.18334740643939024;  // std dev = 0.046, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.17930475588796113;  // std dev = 0.009, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( recursion_accounttype(D, B), follows(A, H) )
%   | | | then return 0.18290272390030746;  // std dev = 0.026, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.1933167697688125;  // std dev = 0.100, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(A, I), tweets(A, J) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.07007558842243666;  // std dev = 0.924, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.17861511502683153;  // std dev = 0.024, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.021887410254431573;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.10158252992885179;  // std dev = 1.352, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   else return -0.07324622576333699;  // std dev = 5.51e-09, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A) )
%   | | then if ( recursion_accounttype(E, B), follows(E, F) )
%   | | | then return 0.16078034434799354;  // std dev = 0.068, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return 0.09181579104252043;  // std dev = 1.378, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.07371203192263295;  // std dev = 1.331, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return -0.16001652522658427;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( recursion_accounttype(H, B), tweets(H, I) )
%   | | | then return 0.15898919377434198;  // std dev = 0.053, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.14784444173266392;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.181339258774746;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.16668481823236658;  // std dev = 0.025, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.0684269778442031;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #neg=324 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.13843962160310902;  // std dev = 0.028, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.1621612657209784;  // std dev = 0.022, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.07004226780043234;  // std dev = 0.311, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(G, F), follows(A, G) )
%   | | | then return 0.1474125748074496;  // std dev = 0.016, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.13946946211597133;  // std dev = 0.016, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.18259257152552075;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1432673233161686;  // std dev = 0.059, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(J, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else return -0.06419184008202622;  // std dev = 0.000, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.630', 'seconds']
Refined model CLL: -0.087219


******************************************
Best model found
******************************************
Results 

CLL : -0.093141 

AUC ROC : 0.993849 

AUC PR : 0.416697 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 48.01 

Total Inference Time : 10.40777587890625 

Total revision time: 81.40307081604004
Best scored revision CLL: -0.087219


Results 

CLL : -0.093141 

AUC ROC : 0.993849 

AUC PR : 0.416697 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 81.42792499923706 

Total Inference Time : 10.40777587890625 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.471
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6453993381368804;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4995008095844134;  // std dev = 0.262, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360633;  // std dev = 3.48e-09, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3753373453257452;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | else return -0.10159632948783631;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.10159632948783627;  // std dev = 1.86e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.35930396097841816;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.092691276189261;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20729303513652678;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 1.61e-09, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2414065736137605;  // std dev = 2.11e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109177;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16152316009662845;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333704;  // std dev = 1.18e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.17538787737928885;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0684269778442027;  // std dev = 1.39e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.044303600771507474;  // std dev = 0.309, 28.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.240', 'seconds']
Parameter learned model CLL:-0.089944 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.33e-07, 0, 25], 'false,true': [4.59e-08, 44, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.361, 2, 25], 'false,true': [0.0, 51, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.262, 2, 25], 'false,true': [0.0, 0, 0], 'false,false': [3.48e-09, 46, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.361, 2, 25], 'true,false': [0.0, 43, 0], 'false,true,true': [0.0, 0, 0], 'false,true,false': [1.86e-09, 7, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.0, 0, 25], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 37, 0], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.361, 2, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.61e-09, 50, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.11e-08, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 43, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.981, 1, 25], 'true,false': [0.0, 0, 0], 'false,true': [1.18e-08, 42, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 1, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.39e-08, 51, 0], 'false,false,false': [0.0, 2, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.309, 3, 25], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 56, 0]}]
{'': [7.105427357601002e-16, 4.794144879063176e-17], 'false': [4.794144879063176e-17, nan]}
{'': [0.06858710562414251, -3.2653618371328135e-17], 'false': [-3.2653618371328135e-17, nan]}
{'': [0.06858710562414257, 1.206764157201257e-17], 'false': [nan, 1.206764157201257e-17]}
{'': [0.08035047803232205, 0.0], 'true': [0.06858710562414252, -1.290957005378089e-18], 'false': [0.0, nan], 'false,true': [nan, 0.0]}
{'': [-7.105427357601002e-17, -1.3539305178355567e-17], 'false': [nan, -1.3539305178355567e-17], 'false,false': [-1.050210969240013e-17, 0.0], 'false,false,true': [nan, -1.050210969240013e-17], 'true': [-7.105427357601002e-17, nan]}
{'': [0.06858710562414261, 3.3306690738754695e-18], 'false': [nan, 3.3306690738754695e-18], 'false,false': [nan, 3.3306690738754695e-18]}
{'': [1.7763568394002505e-17, -2.581914010756178e-18], 'false': [nan, -2.581914010756178e-18], 'false,false': [nan, -2.581914010756178e-18], 'false,false,false': [-2.581914010756178e-18, nan]}
{'': [0.03698224852071011, 3.2273925134452225e-18], 'true': [0.03698224852071011, nan], 'false': [3.3042351923367752e-18, 0.0], 'false,false': [nan, 0.0]}
{'': [-4.4408920985006264e-17, 4.7132109535973624e-18], 'false': [nan, 4.7132109535973624e-18], 'false,false': [3.8095888099882826e-18, 0.0], 'false,false,true': [nan, 3.8095888099882826e-18]}
{'': [0.09566326530612246, -2.9738116731030977e-18], 'false': [nan, -2.9738116731030977e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 10.286
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.14185106490048768;  // std dev = 4.94e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then return 0.7194734122109543;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.09135266795518789;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.7426009656574946;  // std dev = 0.042, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.12544463852839155;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5674824214538925;  // std dev = 0.094, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.3517424759572539;  // std dev = 0.932, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.3812510597411258;  // std dev = 0.876, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.565934743369816;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.11231637819360626;  // std dev = 4.94e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(G, A) )
%   | | | then return 0.4221605486478001;  // std dev = 0.070, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.5241592561023591;  // std dev = 0.166, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A), tweets(A, I) )
%   | | | then return -0.05108376321552993;  // std dev = 1.023, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.45722181432932557;  // std dev = 0.095, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10159632948783628;  // std dev = 2.47e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.32364654695171413;  // std dev = 0.051, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.4192946166105386;  // std dev = 0.108, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.442463661280315;  // std dev = 0.124, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3195878748550973;  // std dev = 0.036, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926105;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.25144660728128515;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.2803127957357201;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.3229571428150882;  // std dev = 0.096, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.33969589291654717;  // std dev = 0.115, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.254517931413912;  // std dev = 0.031, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, H) )
%   | then if ( follows(H, A) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.08518475138839682;  // std dev = 1.58e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.08518475138839687;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.08518475138839686;  // std dev = 2.08e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return -0.08518475138839687;  // std dev = 9.31e-10, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.20712247630564745;  // std dev = 2.11e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.25731917532681764;  // std dev = 0.084, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.019270807684508305;  // std dev = 0.908, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return -0.13520160885087004;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.24939067606120918;  // std dev = 0.117, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109177;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.1744919923104296;  // std dev = 0.006, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.18476604179975553;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.21164563475557463;  // std dev = 0.073, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.24249565909837237;  // std dev = 0.064, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.20100654850092212;  // std dev = 0.036, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, A) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.07324622576333704;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.07324622576333704;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.07324622576333704;  // std dev = 1.32e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | | then return 0.026360131347080137;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.18448747952950065;  // std dev = 0.819, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.1576593466635913;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.17871547234051255;  // std dev = 0.065, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.2009669646209709;  // std dev = 0.056, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.17069330561525003;  // std dev = 0.031, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, A) )
%   | | then return -0.06842697784420274;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.044367028370030905;  // std dev = 0.299, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.16218389268618144;  // std dev = 0.023, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then return 0.1541267019394098;  // std dev = 0.057, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.15893025690525026;  // std dev = 0.067, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06419184008202623;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.247', 'seconds']
Refined model CLL: -0.089338


******************************************
Best model found
******************************************
Results 

CLL : -0.085161 

AUC ROC : 0.995042 

AUC PR : 0.391686 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 10.286 

Total Inference Time : 2.2282049655914307 

Total revision time: 17.02358225059509
Best scored revision CLL: -0.089338


Results 

CLL : -0.085161 

AUC ROC : 0.995042 

AUC PR : 0.391686 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 17.048436433792112 

Total Inference Time : 2.2282049655914307 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.218
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995122;  // std dev = 1.46e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048763;  // std dev = 8.43e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7194734122109547;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839144;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.535758593609029;  // std dev = 0.139, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360621;  // std dev = 7.57e-09, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4005505743550065;  // std dev = 0.989, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else return -0.10159632948783627;  // std dev = 4.21e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4222897047897892;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.10159632948783634;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.2898096322392574;  // std dev = 1.386, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.092691276189261;  // std dev = 3.94e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.26778198137126497;  // std dev = 0.009, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 5.51e-09, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11152381853543969;  // std dev = 2.314, 56.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.0787767547310916;  // std dev = 5.58e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16172563463491213;  // std dev = 1.386, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333709;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333707;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10304921153847325;  // std dev = 0.256, 54.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420265;  // std dev = 5.16e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | | else return -0.06842697784420275;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14307556287300932;  // std dev = 0.128, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.640', 'seconds']
Parameter learned model CLL:-0.09338 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.46e-07, 0, 50], 'false,true': [8.43e-08, 107, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.0, 0, 50], 'false,true': [0.0, 84, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.139, 1, 50], 'false,true': [0.0, 0, 0], 'false,false': [7.57e-09, 88, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.989, 1, 45], 'true,false': [4.21e-08, 98, 0], 'false,true,true': [0.0, 0, 5], 'false,true,false': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.386, 2, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.94e-08, 95, 0], 'false,false,false': [0.0, 2, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.009, 0, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.51e-09, 92, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.314, 6, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.58e-08, 96, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.386, 2, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 112, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 8, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.256, 4, 50], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.16e-08, 108, 0], 'false,false,false': [0.0, 9, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.128, 1, 50], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 93, 0]}]
{'': [4.263256414560601e-16, 6.640586315514955e-17], 'false': [6.640586315514955e-17, nan]}
{'': [-5.684341886080802e-16, -2.114710523095536e-17], 'false': [-2.114710523095536e-17, nan]}
{'': [0.01922337562475978, 5.803438537813318e-17], 'false': [nan, 5.803438537813318e-17]}
{'': [0.061611139370997124, 0.06670819577701259], 'false': [0.06670819577701259, nan], 'false,true': [0.0, -1.982541115402065e-18], 'true': [0.021266540642722317, 1.8126090197961738e-17]}
{'': [0.03694888496522242, 2.0602076745621462e-17], 'true': [0.03694888496522242, nan], 'false': [nan, 2.0602076745621462e-17], 'false,false': [1.636118141552862e-17, 0.0], 'false,false,true': [nan, 1.636118141552862e-17]}
{'': [1.6219695287844615e-06, 3.0169103930031426e-17], 'false': [nan, 3.0169103930031426e-17], 'false,false': [nan, 3.0169103930031426e-17]}
{'': [0.09559367148149275, 3.23815048849004e-17], 'false': [nan, 3.23815048849004e-17], 'false,false': [nan, 3.23815048849004e-17], 'false,false,false': [3.23815048849004e-17, nan]}
{'': [0.03695768119346929, -1.0177044392397268e-17], 'true': [0.03695768119346929, nan], 'false': [-4.956352788505163e-18, 0.0], 'false,false': [nan, 0.0]}
{'': [0.06576849799220444, 2.5620531337503614e-17], 'false': [nan, 2.5620531337503614e-17], 'false,false': [2.4671622769447922e-17, 0.0], 'false,false,true': [nan, 2.4671622769447922e-17]}
{'': [0.016265458635233664, -1.4325458382260084e-17], 'false': [nan, -1.4325458382260084e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 20.981
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995122;  // std dev = 1.46e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else return -0.14185106490048763;  // std dev = 8.69e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.7194734122109551;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.12544463852839136;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.47844335982320746;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.5553664367462843;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5553664367462844;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.5647891577871786;  // std dev = 0.106, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.11231637819360618;  // std dev = 8.43e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4253335234604261;  // std dev = 0.120, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return -0.1015963294878363;  // std dev = 1.49e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.41751358415830986;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.3293859349712147;  // std dev = 0.038, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.23390563472558368;  // std dev = 0.962, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( follows(E, G), tweets(E, D) )
%   | | | then return -0.01003890412181833;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1424081849783963;  // std dev = 0.785, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.3241065088489836;  // std dev = 0.072, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, H) )
%   | then return -0.09269127618926107;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.2619777470856219;  // std dev = 0.033, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.2715398142771178;  // std dev = 0.065, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.3079887979144008;  // std dev = 0.044, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.1101895180934518;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.2681943532871234;  // std dev = 0.059, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, H) )
%   | then if ( follows(I, A) )
%   | | then if ( tweets(I, H) )
%   | | | then return -0.08518475138839685;  // std dev = 2.89e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | | else return -0.08518475138839691;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.0851847513883969;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.0851847513883969;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.21511857137902257;  // std dev = 0.033, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.22463150958040073;  // std dev = 0.034, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.2342889694863064;  // std dev = 0.036, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.10282708047574811;  // std dev = 0.811, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.04851956462299771;  // std dev = 0.887, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2080719474014229;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.23358191982480062;  // std dev = 0.042, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, K) )
%   | then return -0.07877675473109169;  // std dev = 4.06e-09, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.18102643535145674;  // std dev = 0.029, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.19146238630481838;  // std dev = 0.080, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.2378658873439008;  // std dev = 0.038, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.052035702749771796;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.18251636017666376;  // std dev = 0.044, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, H) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then if ( follows(A, D), tweets(F, E) )
%   | | | then return 0.15717089026774952;  // std dev = 0.017, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.1496008967815918;  // std dev = 0.001, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(D, G), follows(A, D) )
%   | | | then return 0.15835212066396404;  // std dev = 0.039, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.1915542291858413;  // std dev = 0.047, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( tweets(A, J) )
%   | | | then return -0.12280939063942105;  // std dev = 0.823, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.0744564628292443;  // std dev = 0.937, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.18487097677696418;  // std dev = 0.008, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, K) )
%   | then return -0.06842697784420265;  // std dev = 4.27e-09, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else return -0.06842697784420272;  // std dev = 9.31e-10, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.08447440813905352;  // std dev = 0.972, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.1690293514434056;  // std dev = 0.786, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, G), follows(G, E) )
%   | | | then return 0.1330263882059712;  // std dev = 0.017, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.1588145272148046;  // std dev = 0.043, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then return 0.1950902432278293;  // std dev = 0.079, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.17577625234768815;  // std dev = 0.001, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.14341576226305028;  // std dev = 0.024, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06419184008202626;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.945', 'seconds']
Refined model CLL: -0.093816


******************************************
Best model found
******************************************
Results 

CLL : -0.086546 

AUC ROC : 0.993771 

AUC PR : 0.33603 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 20.981 

Total Inference Time : 3.2614474296569824 

Total revision time: 31.48777329826355
Best scored revision CLL: -0.09338


Results 

CLL : -0.086546 

AUC ROC : 0.993771 

AUC PR : 0.33603 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 31.512627481460573 

Total Inference Time : 3.2614474296569824 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.919
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7956489350995126;  // std dev = 2.165, 80.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=75 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004881;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.705939163405786;  // std dev = 1.396, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839133;  // std dev = 4.21e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5480802211377921;  // std dev = 0.159, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360615;  // std dev = 8.84e-09, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.41012736085971535;  // std dev = 1.394, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | else return -0.10159632948783641;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4379051386374928;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.10159632948783628;  // std dev = 1.32e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3144080804637427;  // std dev = 1.395, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926071;  // std dev = 7.45e-08, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   | | else return -0.09269127618926096;  // std dev = 1.32e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23515944373147818;  // std dev = 1.701, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.27e-09, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21633481546587474;  // std dev = 0.993, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109151;  // std dev = 8.09e-08, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15503251802053297;  // std dev = 1.698, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333731;  // std dev = 0.000, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15727781938294663;  // std dev = 0.114, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420264;  // std dev = 6.14e-08, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1233648570124574;  // std dev = 0.159, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.533', 'seconds']
Parameter learned model CLL:-0.092301 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.165, 5, 75], 'false,true': [0.0, 154, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.396, 2, 75], 'false,true': [4.21e-08, 153, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.159, 2, 75], 'false,true': [0.0, 0, 0], 'false,false': [8.84e-09, 139, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.394, 2, 70], 'true,false': [0.0, 131, 0], 'false,true,true': [0.0, 0, 5], 'false,true,false': [1.32e-09, 10, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.395, 2, 75], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.45e-08, 144, 0], 'false,false,false': [1.32e-09, 13, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.701, 3, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.27e-09, 145, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.993, 1, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [8.09e-08, 150, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.698, 3, 75], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 149, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.63e-09, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.114, 1, 75], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.14e-08, 136, 0], 'false,false,false': [0.0, 7, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.159, 2, 75], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 153, 0]}]
{'': [0.05859374999999893, -1.2688263138573217e-16], 'false': [-1.2688263138573217e-16, nan]}
{'': [0.02529937594872853, 1.161017542091667e-17], 'false': [1.161017542091667e-17, nan]}
{'': [0.025299375948726915, 7.667727364317628e-17], 'false': [nan, 7.667727364317628e-17]}
{'': [0.06951385498367002, 0.06468040757986342], 'true': [0.027006172839506, -3.8984930635692517e-17], 'false': [0.06468040757986342, nan], 'false,true': [0.0, 1.3877787807814458e-18]}
{'': [0.025280763271862426, 4.101460855303126e-17], 'true': [0.025280763271862426, nan], 'false': [nan, 4.101460855303126e-17], 'false,false': [3.854941057726238e-17, 2.135044278125301e-18], 'false,false,true': [nan, 3.854941057726238e-17]}
{'': [0.03709270119604403, 2.7564157852762507e-17], 'false': [nan, 2.7564157852762507e-17], 'false,false': [nan, 2.7564157852762507e-17]}
{'': [0.012977779776496513, 4.366877230192282e-17], 'false': [nan, 4.366877230192282e-17], 'false,false': [nan, 4.366877230192282e-17], 'false,false,false': [4.366877230192282e-17, nan]}
{'': [0.036962142926277, -2.4438871611245585e-17], 'true': [0.036962142926277, nan], 'false': [-2.682418046074204e-17, 6.938893903907229e-19], 'false,false': [nan, 6.938893903907229e-19]}
{'': [0.01297895201409137, 2.950243002500416e-17], 'false': [nan, 2.950243002500416e-17], 'false,false': [2.7755575615628914e-17, 9.912705577010326e-19], 'false,false,true': [nan, 2.7755575615628914e-17]}
{'': [0.02528831650125514, -9.433267529494795e-18], 'false': [nan, -9.433267529494795e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 14.609
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995127;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   else return -0.14185106490048796;  // std dev = 0.000, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.719473412210955;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else return 0.5194734122109543;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.7194734122109543;  // std dev = 4.21e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.12544463852839144;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, D) )
%   | | | then return 0.5118881758767191;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.5580711936519361;  // std dev = 0.047, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.5595999692942611;  // std dev = 0.066, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.561452139784001;  // std dev = 0.046, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.35536643674628426;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.11231637819360615;  // std dev = 1.05e-07, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.4017004788367058;  // std dev = 0.986, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | | else return 0.28778295218255573;  // std dev = 1.257, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else return 0.4356164602178006;  // std dev = 0.087, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.10159632948783641;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.416855945245597;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10159632948783627;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.3335882344259666;  // std dev = 0.035, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.13455931799414692;  // std dev = 1.284, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.3206335297305376;  // std dev = 0.016, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0.3594584053164283;  // std dev = 0.060, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926072;  // std dev = 7.30e-08, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   | else return -0.09269127618926096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.26395133856859315;  // std dev = 0.030, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.3080071781429976;  // std dev = 0.055, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.25746170965124937;  // std dev = 0.000444, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.25258612938060526;  // std dev = 0.006, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.10497371451947334;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.27512147398348147;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.29879400525240285;  // std dev = 0.031, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, I) )
%   | then return -0.08518475138839678;  // std dev = 4.84e-09, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | else return -0.08518475138839679;  // std dev = 3.61e-09, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.2184655866864165;  // std dev = 0.045, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.26824721287595377;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.21073284702918574;  // std dev = 0.005, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.20651551638893473;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.25137552379221395;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2372086486503821;  // std dev = 0.033, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.22776462027407499;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, J) )
%   | then return -0.07877675473109154;  // std dev = 6.25e-09, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | else return -0.07877675473109179;  // std dev = 5.27e-09, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, D) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.17938371983807114;  // std dev = 0.015, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.18901119867093386;  // std dev = 0.058, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.05837436957533659;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.2070721282811018;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.19703665039103446;  // std dev = 0.029, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.20047675113826124;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.17835891838059692;  // std dev = 0.018, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, J) )
%   | then return -0.0732462257633368;  // std dev = 6.84e-09, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | else return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then if ( follows(D, A), tweets(A, F) )
%   | | | then return 0.15671925623740499;  // std dev = 0.047, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.16964266125193408;  // std dev = 0.036, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.1872082035639163;  // std dev = 0.031, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.15255852382280644;  // std dev = 0.005, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.1504682942486545;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.17193857179007993;  // std dev = 0.017, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.06842697784420265;  // std dev = 4.84e-09, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else return -0.06842697784420274;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D), follows(A, E) )
%   | | | then return 0.09306575946313138;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.14122686849825947;  // std dev = 0.068, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.15061183788157764;  // std dev = 0.021, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.13330794033376975;  // std dev = 0.004, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.014715609419778822;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.1356785111758491;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.14883015606797456;  // std dev = 0.015, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06419184008202626;  // std dev = 0.000, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.284', 'seconds']
Refined model CLL: -0.092844


******************************************
Best model found
******************************************
Results 

CLL : -0.087256 

AUC ROC : 0.993771 

AUC PR : 0.33603 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 14.609 

Total Inference Time : 4.719012498855591 

Total revision time: 30.24505412864685
Best scored revision CLL: -0.092301


Results 

CLL : -0.087256 

AUC ROC : 0.993771 

AUC PR : 0.33603 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 30.26990831184387 

Total Inference Time : 4.719012498855591 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.521
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8105298874804635;  // std dev = 2.182, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048843;  // std dev = 0.000, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6723794733612999;  // std dev = 2.379, 106.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=100 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839166;  // std dev = 0.000, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5494888418546768;  // std dev = 0.168, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360644;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.43152223803188916;  // std dev = 0.995, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   | else return -0.10159632948783646;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4421605359042302;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.1015963294878362;  // std dev = 1.86e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3297933636600811;  // std dev = 0.995, 101.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0926912761892606;  // std dev = 8.82e-08, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | | else return -0.09269127618926087;  // std dev = 1.32e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23155665237517967;  // std dev = 1.962, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.19e-09, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2169802837581274;  // std dev = 0.995, 101.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109148;  // std dev = 7.88e-08, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16195940011645993;  // std dev = 1.706, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333671;  // std dev = 1.02e-07, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11967646743718617;  // std dev = 0.213, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420262;  // std dev = 7.74e-08, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | | else return -0.06842697784420267;  // std dev = 2.28e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12213925899268915;  // std dev = 0.168, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.950', 'seconds']
Parameter learned model CLL:-0.091165 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.182, 5, 100], 'false,true': [0.0, 209, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.379, 6, 100], 'false,true': [0.0, 203, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.168, 3, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 177, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.995, 1, 93], 'true,false': [0.0, 167, 0], 'false,true,true': [0.0, 0, 7], 'false,true,false': [1.86e-09, 15, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.995, 1, 100], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [8.82e-08, 185, 0], 'false,false,false': [1.32e-09, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.962, 4, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.19e-09, 172, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.995, 1, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.88e-08, 176, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.706, 3, 100], 'true,false': [0.0, 0, 0], 'false,true': [1.02e-07, 176, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.213, 5, 100], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.74e-08, 185, 0], 'false,false,false': [2.28e-09, 21, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.168, 3, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 196, 0]}]
{'': [0.0453514739229045, -2.3798082058950725e-16], 'false': [-2.3798082058950725e-16, nan]}
{'': [0.05339978640085485, -5.2503157814785726e-17], 'false': [-5.2503157814785726e-17, nan]}
{'': [0.028277877274010946, -1.003591434689407e-17], 'false': [nan, -1.003591434689407e-17]}
{'': [0.06928607718441482, 0.06414361675497023], 'true': [0.010525124490720426, -7.97765047634843e-17], 'false': [0.06414361675497023, nan], 'false,true': [0.0, 3.7007434154171884e-18]}
{'': [0.009800056672944047, 4.2131540421672605e-17], 'true': [0.009800056672944047, nan], 'false': [nan, 4.2131540421672605e-17], 'false,false': [4.200843876960052e-17, 1.3877787807814458e-18], 'false,false,true': [nan, 4.200843876960052e-17]}
{'': [0.03701041881990001, 2.7110097112939868e-17], 'false': [nan, 2.7110097112939868e-17], 'false,false': [nan, 2.7110097112939868e-17]}
{'': [0.009800629431503977, 3.532527805625498e-17], 'false': [nan, 3.532527805625498e-17], 'false,false': [nan, 3.532527805625498e-17], 'false,false,false': [3.532527805625498e-17, nan]}
{'': [0.02827155611921411, 6.544472566211448e-17], 'true': [0.02827155611921411, nan], 'false': [5.866519391485203e-17, -1.982541115402065e-18], 'false,false': [nan, -1.982541115402065e-18]}
{'': [0.045342229094723054, 3.125870651857237e-17], 'false': [nan, 3.125870651857237e-17], 'false,false': [3.2406509907977544e-17, 5.9476233462061954e-18], 'false,false,true': [nan, 3.2406509907977544e-17]}
{'': [0.02829828708461728, -1.699320956058913e-18], 'false': [nan, -1.699320956058913e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 22.159
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), tweets(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5248156017661788;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.14185106490048838;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E), follows(D, A) )
%   | | | then return 0.6861400788776212;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.7194734122109542;  // std dev = 5.96e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(D, F), follows(F, D) )
%   | | | then return 0.5110635294030301;  // std dev = 1.222, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.7660900577342101;  // std dev = 0.054, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.7194734122109546;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else return -0.12544463852839163;  // std dev = 0.000, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then return 0.5648451399040465;  // std dev = 0.189, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   | else if ( tweets(A, F) )
%   | | then return 0.5553664367462844;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.3692119779478445;  // std dev = 0.912, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else return -0.1123163781936066;  // std dev = 0.000, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.39216670318464636;  // std dev = 0.983, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | | else return 0.41863504936257584;  // std dev = 0.018, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.4387156167768559;  // std dev = 0.213, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.29251358415830986;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return -0.10159632948783623;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.3257134664683896;  // std dev = 0.037, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( follows(F, A), follows(D, F) )
%   | | | then return 0.22806967238047232;  // std dev = 1.343, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | | else return 0.33258167606099914;  // std dev = 0.141, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.22353106035566864;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926064;  // std dev = 8.02e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | else return -0.09269127618926087;  // std dev = 5.27e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.25958314964630347;  // std dev = 0.027, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.29963565724125546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.13117992845188364;  // std dev = 0.940, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.2522183198141333;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.12435980424489386;  // std dev = 1.232, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return -0.20462669501810274;  // std dev = 1.230, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return 0.17547759846962074;  // std dev = 0.970, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.2587048258948868;  // std dev = 0.058, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.08518475138839678;  // std dev = 5.35e-09, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( tweets(E, D), tweets(F, D) )
%   | | | then return 0.22303226094965686;  // std dev = 0.137, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.12768726485106224;  // std dev = 0.971, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(G, A), recursion_accounttype(E, B) )
%   | | | then return -0.10394663654466818;  // std dev = 1.083, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.22152028235046795;  // std dev = 0.150, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.23662706525811447;  // std dev = 0.017, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.20766890866708887;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.3432337842230944;  // std dev = 0.084, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2247166263900926;  // std dev = 0.030, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07877675473109146;  // std dev = 4.84e-09, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.1848305423607176;  // std dev = 0.085, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.24847858281652374;  // std dev = 0.040, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return -0.189842985693718;  // std dev = 1.162, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1485934978361251;  // std dev = 1.008, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then return 0.17090013049896022;  // std dev = 0.003, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.20015976143734232;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.22729591946921532;  // std dev = 0.103, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, I) )
%   | then return -0.07324622576333666;  // std dev = 8.38e-09, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else return -0.07324622576333698;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.15747294855925323;  // std dev = 0.044, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.04480023250775911;  // std dev = 0.956, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.22102041166868075;  // std dev = 0.105, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.16095429484736049;  // std dev = 0.056, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.04116263146202204;  // std dev = 1.222, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.1938970824186112;  // std dev = 0.120, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.15847653051582497;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.16398809909062562;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.06842697784420262;  // std dev = 5.59e-09, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.14102533020354532;  // std dev = 0.080, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return -0.07770160534559924;  // std dev = 1.942, 21.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=16 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.17054645911630256;  // std dev = 0.054, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.24251885070432366;  // std dev = 0.023, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, H), recursion_accounttype(G, B) )
%   | | | then return 0.1386325913415061;  // std dev = 0.012, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1481090749506345;  // std dev = 0.028, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.12898799938434258;  // std dev = 0.002, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1394508070534789;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.06419184008202626;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.510', 'seconds']
Refined model CLL: -0.089479


******************************************
Best model found
******************************************
Results 

CLL : -0.085106 

AUC ROC : 0.996589 

AUC PR : 0.531978 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 22.159 

Total Inference Time : 6.46803617477417 

Total revision time: 41.16160147666931
Best scored revision CLL: -0.089479


Results 

CLL : -0.085106 

AUC ROC : 0.996589 

AUC PR : 0.531978 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 41.18645565986633 

Total Inference Time : 6.46803617477417 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.237
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.834893121146022;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004884;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7008873074338162;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839166;  // std dev = 0.000, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.527505332627581;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360696;  // std dev = 0.000, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4097627791150888;  // std dev = 1.710, 121.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=118 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43455616754484083;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783616;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3218443277854637;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0926912761892605;  // std dev = 6.99e-08, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | | else return -0.09269127618926087;  // std dev = 1.32e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2472537488625759;  // std dev = 1.650, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.74e-09, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21588516088079304;  // std dev = 1.000, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 5.96e-08, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15776746915435066;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333668;  // std dev = 1.26e-07, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333699;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14231831768898573;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420276;  // std dev = 0.000, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
%   | | else return -0.06842697784420267;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1318042110066588;  // std dev = 0.119, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 1.61e-09, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '19.327', 'seconds']
Parameter learned model CLL:-0.093199 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 234, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 203, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 285, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.71, 3, 118], 'true,false': [0.0, 229, 0], 'false,true,true': [0.0, 0, 8], 'false,true,false': [0.0, 15, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.403, 2, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.99e-08, 222, 0], 'false,false,false': [1.32e-09, 18, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.65, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.74e-09, 237, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.0, 1, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.96e-08, 254, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.969, 4, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.26e-07, 231, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 15, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 256, 0], 'false,false,false': [0.0, 9, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.119, 2, 126], 'false,true': [0.0, 0, 0], 'false,false': [1.61e-09, 243, 0]}]
{'': [0.022714981070853308, -1.8978171361113786e-16], 'false': [-1.8978171361113786e-16, nan]}
{'': [0.022714981070850387, -5.2503157814785726e-17], 'false': [-5.2503157814785726e-17, nan]}
{'': [0.03671114736903432, -1.1530737378563028e-16], 'false': [nan, -1.1530737378563028e-16]}
{'': [0.06750646331949342, 0.06520820417566153], 'true': [0.024178676319923625, -7.950942185088457e-17], 'false': [0.06520820417566153, nan], 'false,true': [-2.7755575615628914e-17, -1.8503717077085942e-18]}
{'': [0.015371858687898365, 3.3306690738754695e-17], 'true': [0.015371858687898365, nan], 'false': [nan, 3.3306690738754695e-17], 'false,false': [2.2004420307885986e-17, 0.0], 'false,false,true': [nan, 2.2004420307885986e-17]}
{'': [0.02111039356042361, 3.1854500284603647e-17], 'false': [nan, 3.1854500284603647e-17], 'false,false': [nan, 3.1854500284603647e-17]}
{'': [0.007875862585901021, 1.3987061727561027e-17], 'false': [nan, 1.3987061727561027e-17], 'false,false': [nan, 1.3987061727561027e-17], 'false,false,false': [1.3987061727561027e-17, nan]}
{'': [0.02980903757825404, 5.867032243954079e-17], 'true': [0.02980903757825404, nan], 'false': [6.920870802858119e-17, 0.0], 'false,false': [nan, 0.0]}
{'': [0.022705844960444626, -2.4299220916324182e-17], 'false': [nan, -2.4299220916324182e-17], 'false,false': [-1.474514954580286e-17, -7.709882115452476e-19], 'false,false,true': [nan, -1.474514954580286e-17]}
{'': [0.014248108255679768, 1.827527612551698e-18], 'false': [nan, 1.827527612551698e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 32.078
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.834339411289988;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return 0.8581489350995118;  // std dev = 2.38e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.1418510649004883;  // std dev = 0.000, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(A, E), tweets(D, F) )
%   | | | then return 0.6834888679501884;  // std dev = 1.388, 50.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=48 */
%   | | | else return 0.7194734122109543;  // std dev = 4.21e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.43375912649666876;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.7194734122109544;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.719473412210955;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.12544463852839183;  // std dev = 0.000, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5494401406321863;  // std dev = 0.989, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | | else return 0.5860298310284183;  // std dev = 0.103, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.4886997700796178;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.5553664367462844;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.5036438054759959;  // std dev = 0.978, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.22203310341295102;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5553664367462844;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360674;  // std dev = 0.000, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( tweets(E, G), recursion_accounttype(F, B) )
%   | | | then return 0.413304183873764;  // std dev = 1.377, 107.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=105 */
%   | | | else return 0.09422558065562152;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.4207729136652693;  // std dev = 0.015, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.27465644130116706;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.43381023169310673;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3363315510123733;  // std dev = 0.118, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.08612243784311108;  // std dev = 0.816, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.33620151494648665;  // std dev = 0.102, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.33499976723458463;  // std dev = 0.116, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else if ( follows(A, H) )
%   | then return -0.09269127618926051;  // std dev = 6.14e-08, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else return -0.09269127618926086;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(A, D), tweets(D, E) )
%   | | | then return 0.24182134835431285;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.2634952245267631;  // std dev = 0.060, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( recursion_accounttype(D, B), follows(A, D) )
%   | | | then return 0.2677481647728111;  // std dev = 0.056, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2760025334814057;  // std dev = 0.141, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.0028407154499455745;  // std dev = 0.867, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.1526975036409059;  // std dev = 0.948, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.25326145649737253;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2803663761591851;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.08518475138839678;  // std dev = 5.82e-09, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D), follows(A, E) )
%   | | | then return 0.17468173987462413;  // std dev = 1.381, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.21564969423020944;  // std dev = 0.052, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(E, F), follows(F, A) )
%   | | | then return -0.14172183507597255;  // std dev = 1.068, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.21572165494602935;  // std dev = 0.078, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.24803583951315467;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.22490528352729733;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(I, A), follows(A, I) )
%   | | | then return 0.22511916504899745;  // std dev = 0.093, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.21941263106995632;  // std dev = 0.031, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.07877675473109143;  // std dev = 4.17e-09, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.19008069067667419;  // std dev = 0.178, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | | else return 0.14727593975666317;  // std dev = 0.999, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.18640514840854489;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.05377675600771597;  // std dev = 0.890, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.0689979424295088;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, A) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.07324622576333668;  // std dev = 1.10e-07, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | | | else return -0.07324622576333698;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.07324622576333702;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else return -0.07324622576333699;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(D, F), follows(F, A) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(F, B) )
%   | | | then return 0.1626850762583488;  // std dev = 0.038, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return -0.025035816413822815;  // std dev = 2.215, 31.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=25 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.15672319268545715;  // std dev = 0.060, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.1690080486032495;  // std dev = 0.075, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18573043437050352;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.16231415508610805;  // std dev = 0.018, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.17310047673313175;  // std dev = 0.033, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, K) )
%   | then return -0.06842697784420261;  // std dev = 4.37e-09, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else return -0.06842697784420267;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(D, F), tweets(E, F) )
%   | | | then return 0.147063007005156;  // std dev = 0.093, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.044520517195839035;  // std dev = 0.930, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.021466621161620847;  // std dev = 0.888, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.19171087040002965;  // std dev = 0.121, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.13712587824213573;  // std dev = 0.060, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.1391942156525584;  // std dev = 0.022, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.152608870735658;  // std dev = 0.051, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( tweets(A, K) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return -0.06419184008202622;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.880', 'seconds']
Refined model CLL: -0.090885


******************************************
Best model found
******************************************
Results 

CLL : -0.085787 

AUC ROC : 0.996211 

AUC PR : 0.448627 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 32.078 

Total Inference Time : 10.24390697479248 

Total revision time: 57.71973008155823
Best scored revision CLL: -0.090885


Results 

CLL : -0.085787 

AUC ROC : 0.996211 

AUC PR : 0.448627 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 57.744584264755254 

Total Inference Time : 10.24390697479248 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.694
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8268989350995116;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048766;  // std dev = 6.99e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6944871741022817;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839155;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.537956368094408;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360625;  // std dev = 6.84e-09, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3984883116683826;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | else return -0.10159632948783624;  // std dev = 3.65e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4355253487054195;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3398922265502736;  // std dev = 0.017, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926107;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else return -0.09269127618926101;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.26822368928659124;  // std dev = 0.015, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 1.86e-09, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15820245419382656;  // std dev = 1.374, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109169;  // std dev = 3.33e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1930884045621879;  // std dev = 0.012, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333704;  // std dev = 7.45e-09, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.07660764714351907;  // std dev = 0.283, 34.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0684269778442027;  // std dev = 1.18e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15449726831834418;  // std dev = 0.002, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.848', 'seconds']
Parameter learned model CLL:-0.086993 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.984, 1, 31], 'false,true': [6.99e-08, 70, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.984, 1, 31], 'false,true': [0.0, 50, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.174, 1, 31], 'false,true': [0.0, 0, 0], 'false,false': [6.84e-09, 71, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.981, 1, 26], 'true,false': [3.65e-08, 54, 0], 'false,true,true': [0.0, 0, 5], 'false,true,false': [0.0, 13, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.017, 0, 31], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 57, 0], 'false,false,false': [0.0, 16, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.015, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.86e-09, 69, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.374, 2, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.33e-08, 68, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.012, 0, 31], 'true,false': [0.0, 0, 0], 'false,true': [7.45e-09, 54, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 6, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.283, 3, 31], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.18e-08, 48, 0], 'false,false,false': [0.0, 8, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.002, 0, 31], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 60, 0]}]
{'': [0.030273437500001332, 6.97854472621527e-17], 'false': [6.97854472621527e-17, nan]}
{'': [0.0302734375000005, -3.3306690738754695e-17], 'false': [-3.3306690738754695e-17, nan]}
{'': [0.030273437499999722, 4.5347137625534564e-17], 'false': [nan, 4.5347137625534564e-17]}
{'': [0.06746279793492797, 0.057878025669858175], 'true': [0.035665294924554114, 2.4671622769447922e-17], 'false': [0.057878025669858175, nan], 'false,true': [2.2204460492503132e-17, -8.540177112501205e-18]}
{'': [9.265298383459754e-06, 0.0], 'true': [9.265298383459754e-06, nan], 'false': [nan, 0.0], 'false,false': [-1.947759692324836e-18, -5.204170427930421e-18], 'false,false,true': [nan, -1.947759692324836e-18]}
{'': [7.0654460033450146e-06, 4.827056628805028e-18], 'false': [nan, 4.827056628805028e-18], 'false,false': [nan, 4.827056628805028e-18]}
{'': [0.0571813850165397, 1.6326809185664067e-17], 'false': [nan, 1.6326809185664067e-17], 'false,false': [nan, 1.6326809185664067e-17], 'false,false,false': [1.6326809185664067e-17, nan]}
{'': [4.435271108941514e-06, 0.0], 'true': [4.435271108941514e-06, nan], 'false': [1.02798428206033e-18, 0.0], 'false,false': [nan, 0.0]}
{'': [0.08032186840783069, 4.956352788505163e-18], 'false': [nan, 4.956352788505163e-18], 'false,false': [2.8912057932946786e-18, 0.0], 'false,false,true': [nan, 2.8912057932946786e-18]}
{'': [3.1116403715855937e-06, -3.23815048849004e-18], 'false': [nan, -3.23815048849004e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 12.844
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( tweets(A, E) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.14185106490048766;  // std dev = 5.96e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.724695872745027;  // std dev = 0.066, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else return -0.12544463852839152;  // std dev = 0.000, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.4112193178437347;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5540764607008775;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.5540764607008776;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return -0.08544480836715095;  // std dev = 0.834, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.5812218582995158;  // std dev = 0.047, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.22074312736754412;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.11231637819360628;  // std dev = 4.21e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.31786612804335956;  // std dev = 0.964, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.4165575310484824;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.4165575310484825;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4626285263248572;  // std dev = 0.171, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.10159632948783621;  // std dev = 4.08e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.4495757254927847;  // std dev = 0.090, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(D, A) )
%   | | then return 0.3397460705557779;  // std dev = 0.098, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.39882147600380913;  // std dev = 0.132, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.013269572565546691;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.31292132718461474;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.343604888988834;  // std dev = 0.085, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, H) )
%   | then return -0.09269127618926105;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.2970421128898592;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.25734685509577154;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.2510115008703304;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.24984889935218357;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then return 0.2719174921079063;  // std dev = 0.093, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.30196869098563245;  // std dev = 0.117, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2965540038490369;  // std dev = 0.035, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, K) )
%   | then return -0.08518475138839679;  // std dev = 2.79e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return -0.08518475138839686;  // std dev = 2.08e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.2389513092892405;  // std dev = 0.010, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.21130955021475903;  // std dev = 0.014, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.2068142521068031;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.20599019809009966;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return -0.09296249468863627;  // std dev = 0.879, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.2362530568528968;  // std dev = 0.080, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2134511452229042;  // std dev = 0.000788, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, I) )
%   | then return -0.07877675473109179;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.19823385691798;  // std dev = 0.008, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.17824455040560236;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.1749345773403801;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.17432823020946142;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then return 0.1939018897124311;  // std dev = 0.068, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.2232186302159122;  // std dev = 0.151, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.19961977661682997;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, K) )
%   | then return -0.07324622576333704;  // std dev = 1.32e-09, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return -0.07324622576333704;  // std dev = 1.32e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(D, E), follows(F, A) )
%   | | | then return 0.08297460621825058;  // std dev = 0.951, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.41368186129669143;  // std dev = 0.887, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.16003299913365765;  // std dev = 0.027, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A) )
%   | | then return 0.16686125976435934;  // std dev = 0.044, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.14272173226522167;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.16965481767606705;  // std dev = 0.021, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, J) )
%   | then if ( follows(K, A) )
%   | | then return -0.0684269778442027;  // std dev = 1.86e-09, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else return -0.06842697784420272;  // std dev = 9.31e-10, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(D, A) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.15041406617662245;  // std dev = 0.029, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.138173960719677;  // std dev = 0.011, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.23533231039167887;  // std dev = 0.200, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(A, G), follows(G, H) )
%   | | | then return -0.18275086028462495;  // std dev = 1.128, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.1318163489898433;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.13880317308283582;  // std dev = 0.027, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06419184008202625;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.043', 'seconds']
Refined model CLL: -0.085228


******************************************
Best model found
******************************************
Results 

CLL : -0.091344 

AUC ROC : 0.993047 

AUC PR : 0.410088 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 12.844 

Total Inference Time : 3.154326915740967 

Total revision time: 22.135230434417725
Best scored revision CLL: -0.085228


Results 

CLL : -0.091344 

AUC ROC : 0.993047 

AUC PR : 0.410088 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 27.718465698242188 

Total Inference Time : 3.154326915740967 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.558
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8119950889456665;  // std dev = 1.692, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048785;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7286936748664752;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839116;  // std dev = 7.30e-08, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5332169708707082;  // std dev = 0.174, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360617;  // std dev = 8.64e-09, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.37837706670950727;  // std dev = 1.685, 56.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=53 */
%   | else return -0.1015963294878362;  // std dev = 5.37e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.33194849528093645;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3127061051037928;  // std dev = 1.394, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926103;  // std dev = 3.16e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | else return -0.09269127618926104;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.26134612684281916;  // std dev = 0.994, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 5.82e-09, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2121284356462952;  // std dev = 0.993, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109157;  // std dev = 6.41e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.13239395699220421;  // std dev = 1.934, 66.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333707;  // std dev = 9.13e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15718061741982828;  // std dev = 0.125, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420265;  // std dev = 4.47e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | else return -0.06842697784420276;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10561467038969505;  // std dev = 0.210, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.366', 'seconds']
Parameter learned model CLL:-0.085785 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.692, 3, 62], 'false,true': [0.0, 129, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.0, 0, 62], 'false,true': [7.3e-08, 137, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.174, 2, 62], 'false,true': [0.0, 0, 0], 'false,false': [8.64e-09, 128, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.685, 3, 53], 'true,false': [5.37e-08, 87, 0], 'false,true,true': [0.3, 1, 9], 'false,true,false': [0.0, 29, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.394, 2, 62], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.16e-08, 93, 0], 'false,false,false': [0.0, 22, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.994, 1, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.82e-09, 112, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.993, 1, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.41e-08, 111, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.934, 4, 62], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 101, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.13e-09, 23, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.125, 1, 62], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.47e-08, 94, 0], 'false,false,false': [0.0, 24, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.21, 3, 62], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 110, 0]}]
{'': [0.044023668639052445, -3.0982968129074136e-17], 'false': [-3.0982968129074136e-17, nan]}
{'': [-8.022256694065647e-16, 3.889832495037045e-17], 'false': [3.889832495037045e-17, nan]}
{'': [0.030273437500000278, 7.45931094670027e-17], 'false': [nan, 7.45931094670027e-17]}
{'': [0.0747421502965231, 0.058914348043588284], 'true': [0.05070153061224536, 3.317907889684376e-17], 'false': [0.058914348043588284, nan], 'false,true': [0.08999999999999994, 0.0]}
{'': [0.030379388342380714, 4.247809833348425e-17], 'true': [0.030379388342380714, nan], 'false': [nan, 4.247809833348425e-17], 'false,false': [1.0744093786695063e-17, -8.831319514063745e-18], 'false,false,true': [nan, 1.0744093786695063e-17]}
{'': [0.01567431423168689, 3.271192840413408e-17], 'false': [nan, 3.271192840413408e-17], 'false,false': [nan, 3.271192840413408e-17]}
{'': [0.015666782831860026, 3.700743415417188e-17], 'false': [nan, 3.700743415417188e-17], 'false,false': [nan, 3.700743415417188e-17], 'false,false,false': [3.700743415417188e-17, nan]}
{'': [0.0566454296695686, -1.343011723336883e-17], 'true': [0.0566454296695686, nan], 'false': [-5.4961535872532505e-18, 3.620292471603771e-18], 'false,false': [nan, 3.620292471603771e-18]}
{'': [0.015657044806069047, 2.6344275160596936e-17], 'false': [nan, 2.6344275160596936e-17], 'false,false': [2.1259589833247678e-17, -4.04768811061255e-18], 'false,false,true': [nan, 2.1259589833247678e-17]}
{'': [0.043928290361477274, -1.6653345369377347e-17], 'false': [nan, -1.6653345369377347e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 14.775
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995126;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else return -0.1418510649004879;  // std dev = 0.000, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.6606498827991895;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.7194734122109542;  // std dev = 4.21e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.7194734122109542;  // std dev = 8.43e-08, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then return 0.4337591264966686;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.7194734122109543;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else return -0.12544463852839108;  // std dev = 7.88e-08, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.570538835676275;  // std dev = 0.136, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then if ( recursion_accounttype(E, B), follows(G, A) )
%   | | | then return 0.22203310341295093;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5553664367462844;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.3053664367462843;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.22203310341295093;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else return -0.11231637819360617;  // std dev = 9.66e-08, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.4249898346752854;  // std dev = 0.117, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( tweets(A, F), follows(G, A) )
%   | | | then return 0.1665922882001044;  // std dev = 0.869, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.4286154050962376;  // std dev = 0.095, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.10159632948783628;  // std dev = 3.65e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.47715674212171205;  // std dev = 0.069, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.32499578053578604;  // std dev = 0.080, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0.024525442532946213;  // std dev = 1.174, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return 0.3404689873383328;  // std dev = 0.150, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926093;  // std dev = 5.77e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return -0.09269127618926101;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(E, D) )
%   | | | then return 0.25970076151210736;  // std dev = 0.017, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.25130578565365175;  // std dev = 0.015, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.27770581742547024;  // std dev = 0.076, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then return 0.35716945075758816;  // std dev = 0.051, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.24935164515115033;  // std dev = 1.83e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.2912154976891438;  // std dev = 0.062, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( tweets(A, J) )
%   | then if ( follows(K, A) )
%   | | then return -0.08518475138839682;  // std dev = 5.35e-09, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else return -0.08518475138839693;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return -0.08518475138839689;  // std dev = 5.27e-09, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.20999052258077244;  // std dev = 0.026, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.2286728950419;  // std dev = 0.044, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.27411008067061954;  // std dev = 0.049, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return -0.18657676567260656;  // std dev = 1.064, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.2056375285195134;  // std dev = 1.49e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.2426099833909074;  // std dev = 0.021, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(I, A) )
%   | then if ( follows(A, I) )
%   | | then return -0.07877675473109169;  // std dev = 4.17e-09, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | | else return -0.0787767547310918;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return -0.0787767547310918;  // std dev = 5.27e-09, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.17845233271334013;  // std dev = 0.020, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.1978222971367123;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return 0.23310998503046212;  // std dev = 0.022, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.19392915424073634;  // std dev = 0.074, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.17372657214389686;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.4398035893736298;  // std dev = 0.825, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.177568498449589;  // std dev = 0.019, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.19192284179579175;  // std dev = 0.044, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07324622576333711;  // std dev = 0.000, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), follows(A, E) )
%   | | | then return 0.08786214842736725;  // std dev = 0.965, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.15167858736849354;  // std dev = 0.015, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.21598035549195932;  // std dev = 0.119, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.19964796544082197;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.15173846489607568;  // std dev = 0.021, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.16235387899974837;  // std dev = 0.033, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.0034947131579961266;  // std dev = 1.272, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   else if ( follows(A, I) )
%   | then return -0.06842697784420264;  // std dev = 5.27e-09, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else return -0.06842697784420276;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.13872590687445302;  // std dev = 0.031, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.16948857548948948;  // std dev = 0.000384, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.18369452987617674;  // std dev = 0.819, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.13942311128063611;  // std dev = 0.050, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.1516650724702927;  // std dev = 0.021, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1713232183058353;  // std dev = 0.114, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.15848239745750703;  // std dev = 0.053, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.06419184008202626;  // std dev = 0.000, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.861', 'seconds']
Refined model CLL: -0.08503


******************************************
Best model found
******************************************
Results 

CLL : -0.092075 

AUC ROC : 0.992807 

AUC PR : 0.338938 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 14.775 

Total Inference Time : 3.8436551094055176 

Total revision time: 28.618880804061888
Best scored revision CLL: -0.08503


Results 

CLL : -0.092075 

AUC ROC : 0.992807 

AUC PR : 0.338938 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 34.20211606788635 

Total Inference Time : 3.8436551094055176 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.542
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995116;  // std dev = 2.38e-07, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048843;  // std dev = 0.000, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6984207806320066;  // std dev = 1.399, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283916;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5395061833743757;  // std dev = 0.144, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360649;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.40151704134257765;  // std dev = 1.396, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   | else return -0.10159632948783644;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.3640170413425772;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.10159632948783624;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3024043407831542;  // std dev = 1.707, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926064;  // std dev = 8.02e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | | else return -0.09269127618926094;  // std dev = 0.000, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2389313759721976;  // std dev = 1.703, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.51e-09, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2046117825029891;  // std dev = 1.401, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109147;  // std dev = 7.74e-08, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17087058106191708;  // std dev = 1.401, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333674;  // std dev = 9.54e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333702;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12560700686045584;  // std dev = 0.199, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420264;  // std dev = 5.96e-08, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | | else return -0.06842697784420262;  // std dev = 2.63e-09, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1290200190538028;  // std dev = 0.144, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.752', 'seconds']
Parameter learned model CLL:-0.087371 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.38e-07, 0, 93], 'false,true': [0.0, 209, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.399, 2, 93], 'false,true': [0.0, 193, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.144, 2, 93], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 182, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.396, 2, 78], 'true,false': [0.0, 148, 0], 'false,true,true': [0.242, 1, 15], 'false,true,false': [0.0, 27, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.707, 3, 93], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [8.02e-08, 163, 0], 'false,false,false': [0.0, 34, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.703, 3, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.51e-09, 204, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.401, 2, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.74e-08, 182, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.401, 2, 93], 'true,false': [0.0, 0, 0], 'false,true': [9.54e-08, 169, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 35, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.199, 4, 93], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.96e-08, 130, 0], 'false,false,false': [2.63e-09, 45, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.144, 2, 93], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 180, 0]}]
{'': [6.11219557643097e-16, -2.3798082058950725e-16], 'false': [-2.3798082058950725e-16, nan]}
{'': [0.020609418282548867, -4.6019607238348455e-17], 'false': [-4.6019607238348455e-17, nan]}
{'': [0.02060941828254767, -1.9520404828574182e-17], 'false': [nan, -1.9520404828574182e-17]}
{'': [0.0662045451807241, 0.07245445667576968], 'false': [0.07245445667576968, nan], 'false,true': [0.058593750000000056, -4.11193712824132e-18], 'true': [0.02437499999999957, -6.601326092365796e-17]}
{'': [0.030364443098764793, 4.283093902107203e-17], 'true': [0.030364443098764793, nan], 'false': [nan, 4.283093902107203e-17], 'false,false': [3.950486836089514e-17, -1.6326809185664067e-17], 'false,false,true': [nan, 3.950486836089514e-17]}
{'': [0.030203654556697518, 2.938825653419532e-17], 'false': [nan, 2.938825653419532e-17], 'false,false': [nan, 2.938825653419532e-17]}
{'': [0.02065907688473473, 3.294068314821893e-17], 'false': [nan, 3.294068314821893e-17], 'false,false': [nan, 3.294068314821893e-17], 'false,false,false': [3.294068314821893e-17, nan]}
{'': [0.020652956156510038, 7.292641436263283e-17], 'true': [0.020652956156510038, nan], 'false': [5.386880947885375e-17, -7.137148015447434e-18], 'false,false': [nan, -7.137148015447434e-18]}
{'': [0.03950354883378042, 2.5376526277146434e-17], 'false': [nan, 2.5376526277146434e-17], 'false,false': [2.7328566760003855e-17, 6.784696261598179e-18], 'false,false,true': [nan, 2.7328566760003855e-17]}
{'': [0.020644599559024868, -4.3175339846533866e-18], 'false': [nan, -4.3175339846533866e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 54.166
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.8581489350995125;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( tweets(A, E) )
%   | | then return 0.7672398441904213;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.14185106490048824;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.7234844985480863;  // std dev = 0.062, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.2194734122109543;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.7194734122109542;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.7236325453566054;  // std dev = 0.057, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else return -0.1254446385283917;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | | then return 0.519892983610369;  // std dev = 0.983, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.5621747045486057;  // std dev = 0.162, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.5545558685065539;  // std dev = 0.001, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.4432280568566142;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.582822505328558;  // std dev = 0.034, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.11231637819360653;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.4261993287441465;  // std dev = 0.167, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( tweets(A, F), follows(G, A) )
%   | | | then return 0.3239429699045604;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.427797665389014;  // std dev = 0.061, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.10159632948783648;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(I, A) )
%   | | then return 0.4357718965617313;  // std dev = 0.024, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.2777844783209887;  // std dev = 0.906, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.10159632948783626;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then return 0.32385359196037034;  // std dev = 0.020, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( follows(A, E), follows(D, E) )
%   | | | then return 0.2534225758974198;  // std dev = 0.990, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.015726027117089664;  // std dev = 0.815, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.33725108477232274;  // std dev = 0.115, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926062;  // std dev = 8.16e-08, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | else return -0.09269127618926093;  // std dev = 5.27e-09, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, D) )
%   | | | then return 0.22188490288693719;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.26518974257667455;  // std dev = 0.057, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.3039001431594518;  // std dev = 0.126, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.26069897563517047;  // std dev = 0.063, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.16401767248695728;  // std dev = 0.956, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.3909740975425158;  // std dev = 0.789, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.27090056493693204;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2942418657257016;  // std dev = 0.036, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.08518475138839678;  // std dev = 5.43e-09, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, F), tweets(E, D) )
%   | | | then return 0.19048858000130928;  // std dev = 0.999, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return -0.028236695565511515;  // std dev = 1.480, 12.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=9 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.21989420309687852;  // std dev = 0.000706, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.21219255301802115;  // std dev = 1.29e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.21026661181117323;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2026676883078134;  // std dev = 1.67e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.2290623372242844;  // std dev = 0.108, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.23808118881780863;  // std dev = 0.031, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07877675473109147;  // std dev = 5.51e-09, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B), tweets(E, D) )
%   | | | then return 0.18466691485510983;  // std dev = 0.021, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.2056954313497688;  // std dev = 0.036, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.23162518703792526;  // std dev = 0.055, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.184496208981794;  // std dev = 0.000619, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.18552981388601553;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.0637761097312632;  // std dev = 0.658, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.17347601993930617;  // std dev = 0.009, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.19156029278719755;  // std dev = 0.038, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.07324622576333677;  // std dev = 6.97e-09, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.16215540919884935;  // std dev = 0.042, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.179412128726269;  // std dev = 0.036, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, D) )
%   | | | then return -0.11896908011583225;  // std dev = 0.853, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.15370619886423942;  // std dev = 0.002, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, F), follows(F, A) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return -0.12242914380348058;  // std dev = 1.449, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return 0.16162148565842882;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.1550437394530311;  // std dev = 0.042, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.008304201989607796;  // std dev = 0.911, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else return -0.06842697784420262;  // std dev = 5.74e-09, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), follows(G, E) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.018693415928204084;  // std dev = 1.838, 30.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=26 */
%   | | | else return 0.16082145864383524;  // std dev = 0.076, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.04499888567342735;  // std dev = 0.388, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.1344578308804053;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.13000762343454522;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.14938906706374655;  // std dev = 0.152, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.16271248595917312;  // std dev = 0.045, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06419184008202626;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.845', 'seconds']
Refined model CLL: -0.08482


******************************************
Best model found
******************************************
Results 

CLL : -0.090438 

AUC ROC : 0.994508 

AUC PR : 0.451008 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 54.166 

Total Inference Time : 8.034104824066162 

Total revision time: 76.97713118362427
Best scored revision CLL: -0.08482


Results 

CLL : -0.090438 

AUC ROC : 0.994508 

AUC PR : 0.451008 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 82.56036644744873 

Total Inference Time : 8.034104824066162 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.4
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8422759192264946;  // std dev = 1.403, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004881;  // std dev = 0.000, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7067928809885279;  // std dev = 1.403, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839183;  // std dev = 0.000, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5387836403604394;  // std dev = 0.152, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360678;  // std dev = 0.000, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4092989370426868;  // std dev = 1.401, 104.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=102 */
%   | else return -0.10159632948783652;  // std dev = 0.000, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.42852970627345505;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.1015963294878362;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3090389024674941;  // std dev = 1.644, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926051;  // std dev = 6.14e-08, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2590655018005325;  // std dev = 0.995, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.82e-09, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1807508868522957;  // std dev = 2.191, 129.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109144;  // std dev = 5.96e-08, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15883694765534298;  // std dev = 1.969, 128.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333668;  // std dev = 1.10e-07, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1206809233928996;  // std dev = 0.210, 130.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6.83e-08, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | | else return -0.06842697784420262;  // std dev = 2.28e-09, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10455459602366271;  // std dev = 0.210, 130.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 1.61e-09, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.912', 'seconds']
Parameter learned model CLL:-0.08737 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.403, 2, 124], 'false,true': [0.0, 266, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.403, 2, 124], 'false,true': [0.0, 242, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.152, 3, 124], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 232, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.401, 2, 102], 'true,false': [0.0, 195, 0], 'false,true,true': [0.0, 0, 22], 'false,true,false': [0.0, 51, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.644, 3, 124], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.14e-08, 210, 0], 'false,false,false': [0.0, 37, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.995, 1, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.82e-09, 256, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.191, 5, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.96e-08, 242, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.969, 4, 124], 'true,false': [0.0, 0, 0], 'false,true': [1.1e-07, 186, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 45, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.21, 6, 124], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.83e-08, 218, 0], 'false,false,false': [2.28e-09, 60, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.21, 6, 124], 'false,true': [0.0, 0, 0], 'false,false': [1.61e-09, 247, 0]}]
{'': [0.015621063240114865, -7.011934892369409e-17], 'false': [-7.011934892369409e-17, nan]}
{'': [0.015621063240114186, -6.055761952500853e-17], 'false': [-6.055761952500853e-17, nan]}
{'': [0.023064046128093558, -7.848128277522658e-17], 'false': [nan, -7.848128277522658e-17]}
{'': [0.06576954821319203, 0.059170522551061006], 'true': [0.018860946745561467, -9.337260309667983e-17], 'false': [0.059170522551061006, nan], 'false,true': [-4.0371746350005693e-17, -6.530723674265627e-18]}
{'': [0.02128540585022186, 4.49483005921116e-17], 'true': [0.02128540585022186, nan], 'false': [nan, 4.49483005921116e-17], 'false,false': [1.797503944631206e-17, -1.800361661554308e-17], 'false,false,true': [nan, 1.797503944631206e-17]}
{'': [0.007927473717375818, 3.382710778154774e-17], 'false': [nan, 3.382710778154774e-17], 'false,false': [nan, 3.382710778154774e-17]}
{'': [0.03721549875647356, 1.4680635036365707e-17], 'false': [nan, 1.4680635036365707e-17], 'false,false': [nan, 1.4680635036365707e-17], 'false,false,false': [1.4680635036365707e-17, nan]}
{'': [0.030287680561824442, 6.920870802858119e-17], 'true': [0.030287680561824442, nan], 'false': [6.446456272017038e-17, -9.86864910777917e-18], 'false,false': [nan, -9.86864910777917e-18]}
{'': [0.044022180308372884, -3.753991522113839e-17], 'false': [nan, -3.753991522113839e-17], 'false,false': [2.1389617905622283e-17, 5.551115123125783e-18], 'false,false,true': [nan, 2.1389617905622283e-17]}
{'': [0.04405821991590661, 2.696898035526696e-18], 'false': [nan, 2.696898035526696e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 26.656
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.858148935099512;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #pos=88 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(A, G), follows(F, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.1418510649004882;  // std dev = 0.000, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.698196816466274;  // std dev = 0.989, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.6569734122109543;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.03052658778904553;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else if ( follows(A, H) )
%   | | then return 0.724251990012541;  // std dev = 0.046, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.7194734122109543;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.5766162693538115;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.12544463852839188;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5649837552428384;  // std dev = 0.216, 124.000 (wgt'ed) examples reached here.  /* #pos=124 */
%   else return -0.11231637819360678;  // std dev = 0.000, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), tweets(A, F) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.3377726437131224;  // std dev = 1.915, 47.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=43 */
%   | | | else return 0.42537976663635135;  // std dev = 0.028, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.42682723255690325;  // std dev = 0.199, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return -0.10159632948783653;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return 0.41517656282161425;  // std dev = 2.98e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.16517656282161428;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3073709972430318;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return -0.10159632948783617;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.335076637116703;  // std dev = 0.145, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.32717703578862706;  // std dev = 0.068, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.13953802772658724;  // std dev = 0.919, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.3442330459524774;  // std dev = 0.196, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926054;  // std dev = 5.58e-08, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F), follows(A, D) )
%   | | | then return 0.27008747944504585;  // std dev = 4.71e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.2560234020991589;  // std dev = 0.028, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return -0.02671690278082428;  // std dev = 0.783, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.25861804163069546;  // std dev = 0.077, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(J, A), follows(A, J) )
%   | | | then return 0.02853361218873161;  // std dev = 1.060, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.27855700502988456;  // std dev = 0.115, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.26050913728780906;  // std dev = 0.159, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.18864815365848464;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.08518475138839678;  // std dev = 5.74e-09, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(D, G), follows(D, E) )
%   | | | then return 0.21896184988448075;  // std dev = 0.026, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.2594928408665811;  // std dev = 0.099, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A), follows(H, D) )
%   | | | then return 0.20671147172429313;  // std dev = 0.007, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.2214357000983711;  // std dev = 0.060, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(J, A), follows(A, K) )
%   | | | then return 0.1773711588212243;  // std dev = 0.938, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.09265502494261783;  // std dev = 1.626, 24.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=21 */
%   | | else if ( follows(A, L) )
%   | | | then return 0.22563699897627368;  // std dev = 0.169, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.2611242008132157;  // std dev = 0.000114, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07877675473109143;  // std dev = 4.47e-09, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, D), follows(F, E) )
%   | | | then return 0.18379056646723574;  // std dev = 0.022, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.20764803411634786;  // std dev = 0.091, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(G, A), recursion_accounttype(E, B) )
%   | | | then return 0.23006335354941457;  // std dev = 0.048, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.19140249522730035;  // std dev = 0.042, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.17914293163845182;  // std dev = 0.047, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.029885985121501528;  // std dev = 1.343, 16.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=13 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.10947996393798644;  // std dev = 0.969, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.2257165438532655;  // std dev = 0.043, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.07324622576333671;  // std dev = 8.12e-09, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, D), follows(F, E) )
%   | | | then return 0.15780539230028687;  // std dev = 0.020, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.1758316718733952;  // std dev = 0.080, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(G, A), follows(E, G) )
%   | | | then return 0.17901223702979813;  // std dev = 0.065, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.16414267531439194;  // std dev = 0.037, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.15099092511286624;  // std dev = 0.007, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.16319458604226433;  // std dev = 0.045, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.04402856939330377;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.09939742109963827;  // std dev = 1.141, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   else return -0.06842697784420274;  // std dev = 0.000, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.13744136405530596;  // std dev = 0.021, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.14452913233711723;  // std dev = 0.074, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.023005301213488365;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.1418165511906421;  // std dev = 0.045, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( recursion_accounttype(I, B), follows(J, A) )
%   | | | then return 0.16600891059625522;  // std dev = 0.036, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.02045671406170252;  // std dev = 1.880, 33.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=29 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.17024196685738882;  // std dev = 0.140, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.0695282910543912;  // std dev = 0.962, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.06419184008202625;  // std dev = 2.11e-08, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.649', 'seconds']
Refined model CLL: -0.086126


******************************************
Best model found
******************************************
Results 

CLL : -0.091812 

AUC ROC : 0.993764 

AUC PR : 0.413766 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 26.656 

Total Inference Time : 8.341011047363281 

Total revision time: 52.91754270172119
Best scored revision CLL: -0.086126


Results 

CLL : -0.091812 

AUC ROC : 0.993764 

AUC PR : 0.413766 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 58.50077796554565 

Total Inference Time : 8.341011047363281 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.44
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995098;  // std dev = 9.68e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048774;  // std dev = 1.49e-07, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6884175115898383;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839208;  // std dev = 0.000, 335.000 (wgt'ed) examples reached here.  /* #neg=335 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5441535096403437;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360697;  // std dev = 0.000, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4124430035974212;  // std dev = 1.403, 130.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=128 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.39334486036134814;  // std dev = 0.182, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return -0.10159632948783621;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3130173521415059;  // std dev = 1.715, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926042;  // std dev = 1.59e-07, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
%   | | else return -0.092691276189261;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2294051731714323;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.11e-09, 334.000 (wgt'ed) examples reached here.  /* #neg=334 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22406322129431083;  // std dev = 0.016, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 2.98e-08, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15046381310483958;  // std dev = 2.405, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333681;  // std dev = 1.16e-07, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1406531968425849;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420292;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
%   | | else return -0.06842697784420262;  // std dev = 2.79e-09, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12213069410877819;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202584;  // std dev = 7.79e-09, 325.000 (wgt'ed) examples reached here.  /* #neg=325 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.469', 'seconds']
Parameter learned model CLL:-0.087388 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [9.68e-07, 0, 156], 'false,true': [1.49e-07, 315, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.201, 5, 156], 'false,true': [0.0, 335, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 286, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.403, 2, 128], 'true,false': [0.0, 264, 0], 'false,true,true': [0.182, 1, 28], 'false,true,false': [0.0, 48, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.715, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.59e-07, 304, 0], 'false,false,false': [0.0, 52, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.404, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.11e-09, 334, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.016, 0, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.98e-08, 309, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [2.405, 6, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.16e-07, 257, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 54, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 283, 0], 'false,false,false': [2.79e-09, 50, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [7.79e-09, 325, 0]}]
{'': [6.012284687200848e-15, 7.04903507698512e-17], 'false': [7.04903507698512e-17, nan]}
{'': [0.030091431657726698, -9.279476026717726e-17], 'false': [-9.279476026717726e-17, nan]}
{'': [0.018511925952292674, -1.0092936587501423e-16], 'false': [nan, -1.0092936587501423e-16]}
{'': [0.06341616252145613, 0.07005204710878563], 'false': [0.07005204710878563, nan], 'false,true': [0.03329369797859688, -1.1564823173178714e-17], 'true': [0.01514792899408347, -6.392193172084235e-17]}
{'': [0.018490441054458795, 1.0104276965689627e-16], 'true': [0.018490441054458795, nan], 'false': [nan, 1.0104276965689627e-16], 'false,false': [8.326672684688674e-17, -2.6688053476566264e-17], 'false,false,true': [nan, 8.326672684688674e-17]}
{'': [0.03567077768098802, 3.722903555629267e-17], 'false': [nan, 3.722903555629267e-17], 'false,false': [nan, 3.722903555629267e-17]}
{'': [1.634616098039752e-06, 2.874363817799758e-18], 'false': [nan, 2.874363817799758e-18], 'false,false': [nan, 2.874363817799758e-18], 'false,false,false': [2.874363817799758e-18, nan]}
{'': [0.035703909822703064, 2.784482183947338e-17], 'true': [0.035703909822703064, nan], 'false': [5.270319416508525e-17, -1.1307827102663631e-17], 'false,false': [nan, -1.1307827102663631e-17]}
{'': [0.024399206479098212, -8.268327630842006e-17], 'false': [nan, -8.268327630842006e-17], 'false,false': [-4.158432530398113e-17, 7.771561172376097e-18], 'false,false,true': [nan, -4.158432530398113e-17]}
{'': [0.024367586303880313, 6.080606104100857e-17], 'false': [nan, 6.080606104100857e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 32.11
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then return 0.8581489350995117;  // std dev = 1.69e-07, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.7528857772047755;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return 0.8581489350995117;  // std dev = 2.46e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.14185106490048782;  // std dev = 1.03e-07, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return 0.6687917944041376;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.6751600161619846;  // std dev = 1.311, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return 0.7220667814136739;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.7209914819881565;  // std dev = 0.035, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.12544463852839208;  // std dev = 0.000, 331.000 (wgt'ed) examples reached here.  /* #neg=331 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.564777180167963;  // std dev = 0.200, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( follows(A, E) )
%   | | then return 0.5549915414193225;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.33081568198252587;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.5549915414193222;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.11231637819360688;  // std dev = 0.000, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.41780560735358774;  // std dev = 0.041, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.34964779181443345;  // std dev = 0.820, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.4209938958447115;  // std dev = 0.025, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.44327295001953443;  // std dev = 0.137, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.10159632948783621;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(E, F) )
%   | | | then return 0.2562887753643489;  // std dev = 1.364, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | | else return 0.32241006603165356;  // std dev = 0.050, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return 0.050544355369150175;  // std dev = 1.117, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(G, A) )
%   | | then return 0.3379812788991856;  // std dev = 0.116, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.32307981303926153;  // std dev = 0.022, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.23076668700283934;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(A, I) )
%   | then return -0.09269127618926046;  // std dev = 1.12e-07, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, F) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.2640628765281024;  // std dev = 0.094, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.25477952592353426;  // std dev = 0.019, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.31328825012374467;  // std dev = 0.196, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2666123820638332;  // std dev = 0.043, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else if ( follows(H, A), follows(A, I) )
%   | | then if ( follows(A, H), recursion_accounttype(I, B) )
%   | | | then return 0.25850022214515417;  // std dev = 0.021, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.0624126720476769;  // std dev = 0.769, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.31303955235360303;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2597312014418614;  // std dev = 0.037, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.08518475138839678;  // std dev = 6.04e-09, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.1850983873806295;  // std dev = 0.982, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.2076846837492129;  // std dev = 0.002, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | | then return 0.23599056818283615;  // std dev = 0.197, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.21085658195871607;  // std dev = 0.019, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( follows(H, G) )
%   | | | then return 0.21273575546410542;  // std dev = 0.018, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.23612827855307295;  // std dev = 0.055, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return -0.04321890184785323;  // std dev = 0.659, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.15298219426519022;  // std dev = 1.666, 45.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=42 */
%   else return -0.07877675473109143;  // std dev = 2.58e-08, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, D) )
%   | | | then return 0.13662545585163566;  // std dev = 1.374, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.19018337093429555;  // std dev = 0.071, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.14195416443738607;  // std dev = 1.283, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.024990616878575473;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.1796384872759754;  // std dev = 0.015, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.18519968154018523;  // std dev = 0.041, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.2218568410574441;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.19136452490265662;  // std dev = 0.067, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.073246225763337;  // std dev = 5.27e-09, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(D, E) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.13240412419293457;  // std dev = 1.365, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | | else return 0.0825504727835566;  // std dev = 1.332, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else return -0.16523192030590325;  // std dev = 0.789, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.15325072423855216;  // std dev = 0.017, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.16631469038277816;  // std dev = 0.177, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.18791462683190907;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.17230211661808553;  // std dev = 0.029, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, H) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   | else return -0.06842697784420262;  // std dev = 1.97e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.12837187710027728;  // std dev = 0.996, 62.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=61 */
%   | | | else return 0.0169849785561568;  // std dev = 0.937, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.14750206203457128;  // std dev = 0.160, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.1608781406199657;  // std dev = 0.015, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.13440535860592798;  // std dev = 0.015, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.16137698199625802;  // std dev = 0.000627, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.16752404943133137;  // std dev = 0.811, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.06305012723217761;  // std dev = 1.337, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   else return -0.06419184008202589;  // std dev = 7.45e-09, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.338', 'seconds']
Refined model CLL: -0.085835


******************************************
Best model found
******************************************
Results 

CLL : -0.091816 

AUC ROC : 0.993672 

AUC PR : 0.392038 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 32.11 

Total Inference Time : 9.627810955047607 

Total revision time: 63.993442344665525
Best scored revision CLL: -0.085835


Results 

CLL : -0.091816 

AUC ROC : 0.993672 

AUC PR : 0.392038 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 69.57667760848999 

Total Inference Time : 9.627810955047607 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.524
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7840748610254378;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048766;  // std dev = 5.58e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.695716567862233;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5409135432244246;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936063;  // std dev = 4.93e-09, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4450466440514997;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.11189989827103321;  // std dev = 0.448, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4450466440514995;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.2653747026551332;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0918283791228672;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.28269626471602327;  // std dev = 2.11e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08446719815661262;  // std dev = 0.000105, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19056384932380416;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07816055894892862;  // std dev = 0.000676, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1971209733195423;  // std dev = 3.49e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07269781829767073;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07333681381617453;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.16777103949266006;  // std dev = 4.56e-09, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06794673123278817;  // std dev = 1.18e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return -0.06850626532841515;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14563208421171836;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06380452990719253;  // std dev = 0.000129, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.813', 'seconds']
Parameter learned model CLL:-0.089073 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.361, 2, 25], 'false,true': [5.58e-08, 53, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.981, 1, 25], 'false,true': [0.0, 54, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 1, 25], 'false,true': [0.0, 0, 0], 'false,false': [4.93e-09, 54, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 23], 'true,false': [0.448, 44, 0], 'false,true,true': [0.0, 0, 2], 'false,true,false': [0.0, 3, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.361, 2, 25], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 50, 0], 'false,false,false': [0.0, 2, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.11e-08, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.000105, 48, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.981, 1, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.000676, 47, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [3.49e-08, 0, 25], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 49, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 3, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [4.56e-09, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.18e-08, 41, 0], 'false,false,false': [0.0, 2, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 0, 0], 'false,false': [0.000129, 54, 0]}]
{'': [0.06858710562414343, 5.86532918669894e-17], 'false': [5.86532918669894e-17, nan]}
{'': [0.03698224852071048, -3.700743415417188e-17], 'false': [-3.700743415417188e-17, nan]}
{'': [0.036982248520709554, 2.4671622769447922e-17], 'false': [nan, 2.4671622769447922e-17]}
{'': [0.07292703009404816, 0.0717164497247825], 'true': [-1.1584935909132068e-16, 0.0045650317758130195], 'false': [0.0717164497247825, nan], 'false,true': [0.0, -1.1564823173178713e-18]}
{'': [0.06858710562414268, 2.7536662250629348e-08], 'true': [0.06858710562414268, nan], 'false': [nan, 2.7536662250629348e-08], 'false,false': [0.0, 0.0], 'false,false,true': [nan, 0.0]}
{'': [1.7763568394002505e-17, 1.0954949802623645e-08], 'false': [nan, 1.0954949802623645e-08], 'false,false': [nan, 1.0954949802623645e-08]}
{'': [0.036982248520710144, 9.708802748751158e-09], 'false': [nan, 9.708802748751158e-09], 'false,false': [nan, 9.708802748751158e-09], 'false,false,false': [9.708802748751158e-09, nan]}
{'': [4.884981308350689e-17, 2.2197612822636096e-08], 'false': [-2.2657612747452172e-18, -1.1564823173178713e-18], 'true': [4.884981308350689e-17, nan], 'false,false': [nan, -1.1564823173178713e-18]}
{'': [1.7763568394002505e-17, 1.3884493860840003e-08], 'false': [nan, 1.3884493860840003e-08], 'false,false': [3.384826294588892e-18, 0.0], 'false,false,true': [nan, 3.384826294588892e-18]}
{'': [-3.552713678800501e-17, 1.6727008285679058e-08], 'false': [nan, 1.6727008285679058e-08]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 4.933
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.14185106490048768;  // std dev = 3.94e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7194734122109544;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.1254446385283916;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.11231637819360632;  // std dev = 3.16e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4175135841583099;  // std dev = 4.21e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.10159632948783634;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.3207118471601496;  // std dev = 2.58e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( tweets(A, E) )
%   | | then return 0.07071184716014967;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926101;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return -0.09269127618926094;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.2551722425694894;  // std dev = 2.11e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.25517224256948945;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(D, E) )
%   | | | then return 0.03033910952189184;  // std dev = 0.838, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2887280651726926;  // std dev = 0.041, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.07816109076384388;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.0851847513883968;  // std dev = 1.05e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.08518475138839685;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.08518475138839683;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return -0.08518475138839685;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.12642438229920228;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.20792170487753023;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return 0.20975771563253554;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.26600167875016273;  // std dev = 0.041, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.25909554987347916;  // std dev = 0.022, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, I) )
%   | then if ( follows(A, J), tweets(J, I) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.07877675473109175;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.07877675473109173;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.07877675473109176;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E), recursion_accounttype(D, B) )
%   | | | then return 0.1868571013099336;  // std dev = 0.015, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.18956935186964718;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then return 0.219334520769055;  // std dev = 0.036, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.19285047664931945;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, A) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.07324622576333704;  // std dev = 9.13e-09, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.07324622576333704;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return -0.07324622576333704;  // std dev = 9.31e-10, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( follows(A, D) )
%   | | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | | then return 0.16238731712444807;  // std dev = 0.000522, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.15518936243998277;  // std dev = 0.012, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.17539280620889855;  // std dev = 0.028, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then return -0.07256041766813551;  // std dev = 0.884, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.16462594097473202;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, A) )
%   | | then if ( follows(A, H) )
%   | | | then return -0.06842697784420272;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.06842697784420272;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.13974367471676133;  // std dev = 0.011, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.14207549280849854;  // std dev = 0.000626, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.13314270342732012;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then return 0.19346256134923356;  // std dev = 0.033, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1505557782846049;  // std dev = 0.028, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, H) )
%   | then if ( follows(H, A) )
%   | | then return -0.06419184008202623;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( follows(H, I) )
%   | | | then return -0.06419184008202618;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.06419184008202618;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.295', 'seconds']
Refined model CLL: -0.089219


******************************************
Best model found
******************************************
Results 

CLL : -0.087429 

AUC ROC : 0.993793 

AUC PR : 0.337662 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 4.933 

Total Inference Time : 1.616471290588379 

Total revision time: 10.997411233901978
Best scored revision CLL: -0.089073


Results 

CLL : -0.087429 

AUC ROC : 0.993793 

AUC PR : 0.337662 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 16.58064649772644 

Total Inference Time : 1.616471290588379 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.276
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8015451615146066;  // std dev = 1.682, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048763;  // std dev = 8.94e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7111468298594117;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839136;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5517291183771317;  // std dev = 0.139, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936062;  // std dev = 7.90e-09, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.43427721374441103;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else return -0.10159632948783627;  // std dev = 3.94e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.434277213744411;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.10159632948783634;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.33210088942452193;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926104;  // std dev = 2.79e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1888551153384966;  // std dev = 1.925, 54.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839682;  // std dev = 5.51e-09, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20838944496246412;  // std dev = 0.990, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109158;  // std dev = 5.96e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15494213156822906;  // std dev = 1.387, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333707;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1319114822124835;  // std dev = 0.192, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420265;  // std dev = 4.15e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | else return -0.06842697784420275;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.09592580700163086;  // std dev = 0.231, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.199', 'seconds']
Parameter learned model CLL:-0.089579 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.682, 3, 50], 'false,true': [8.94e-08, 100, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.99, 1, 50], 'false,true': [0.0, 101, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.139, 1, 50], 'false,true': [0.0, 0, 0], 'false,false': [7.9e-09, 96, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 46], 'true,false': [3.94e-08, 99, 0], 'false,true,true': [0.0, 0, 4], 'false,true,false': [0.0, 7, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.0, 0, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [2.79e-08, 91, 0], 'false,false,false': [0.0, 8, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.925, 4, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.51e-09, 95, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.99, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.96e-08, 104, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.387, 2, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 73, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.192, 2, 50], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.15e-08, 87, 0], 'false,false,false': [0.0, 7, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.231, 3, 50], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 96, 0]}]
{'': [0.053399786400854646, 7.993605777301127e-17], 'false': [7.993605777301127e-17, nan]}
{'': [0.019223375624757687, -1.0992307174506501e-17], 'false': [-1.0992307174506501e-17, nan]}
{'': [0.01922337562475943, 6.245004513516506e-17], 'false': [nan, 6.245004513516506e-17]}
{'': [0.06219874953852251, 0.06645035306955314], 'false': [0.06645035306955314, nan], 'false,true': [0.0, -1.982541115402065e-18], 'true': [-1.544658121217609e-16, 1.570012358055777e-17]}
{'': [-1.2434497875801754e-16, 2.1307310573614114e-17], 'false': [nan, 2.1307310573614114e-17], 'false,false': [8.540177112501205e-18, 0.0], 'false,false,true': [nan, 8.540177112501205e-18], 'true': [-1.2434497875801754e-16, nan]}
{'': [0.06858710562414272, 3.0385051200267444e-17], 'false': [nan, 3.0385051200267444e-17], 'false,false': [nan, 3.0385051200267444e-17]}
{'': [0.019223375624759745, 3.416070845000482e-17], 'false': [nan, 3.416070845000482e-17], 'false,false': [nan, 3.416070845000482e-17], 'false,false,false': [3.416070845000482e-17, nan]}
{'': [0.036982248520710075, -6.6084703846735505e-18], 'true': [0.036982248520710075, nan], 'false': [-5.3229871043671886e-18, 0.0], 'false,false': [nan, 0.0]}
{'': [0.03698224852071004, 2.1259589833247678e-17], 'false': [nan, 2.1259589833247678e-17], 'false,false': [1.9779835496195318e-17, -9.912705577010326e-19], 'false,false,true': [nan, 1.9779835496195318e-17]}
{'': [0.05339978640085436, -1.4456028966473393e-17], 'false': [nan, -1.4456028966473393e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 7.482
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995122;  // std dev = 1.46e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else return -0.14185106490048763;  // std dev = 8.56e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7194734122109547;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else return -0.1254446385283914;  // std dev = 0.000, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5553664367462838;  // std dev = 4.21e-08, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else return -0.1123163781936062;  // std dev = 8.02e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.41751358415831025;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else return -0.10159632948783631;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.32071184716014955;  // std dev = 2.11e-08, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.012621486173183668;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.17928815283985033;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.3207118471601497;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926096;  // std dev = 4.71e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.25517224256948956;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return 0.2665548205098633;  // std dev = 0.062, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(A, G), follows(G, H) )
%   | | | then return -0.18423390969612485;  // std dev = 0.949, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.2904337277871751;  // std dev = 0.086, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.2763291337001008;  // std dev = 0.095, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( tweets(A, J) )
%   | then if ( follows(K, A) )
%   | | then return -0.08518475138839685;  // std dev = 4.47e-09, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else return -0.0851847513883969;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.08518475138839691;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.20975771563253554;  // std dev = 1.49e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.22292543531452005;  // std dev = 0.052, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.28866215172908694;  // std dev = 0.114, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.20801500500565884;  // std dev = 0.005, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.06821479379612944;  // std dev = 0.878, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.2242436104201726;  // std dev = 0.076, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, J) )
%   | then if ( follows(K, A) )
%   | | then return -0.07877675473109169;  // std dev = 3.95e-09, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else return -0.07877675473109179;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(D, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.17713154794560318;  // std dev = 0.000472, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.23541794145224246;  // std dev = 0.091, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.15860315574630582;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.19867420908446498;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.405420015578593;  // std dev = 0.850, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.17164134350875232;  // std dev = 0.012, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.18786337011593762;  // std dev = 0.067, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, J) )
%   | then return -0.07324622576333704;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( tweets(D, F), tweets(E, F) )
%   | | | then return 0.15475237621639593;  // std dev = 0.031, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return -0.16567896488101516;  // std dev = 0.835, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.14090819098184246;  // std dev = 0.772, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.2723644311755423;  // std dev = 0.134, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.15425249136331598;  // std dev = 0.048, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.16915249689717168;  // std dev = 0.055, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.06842697784420267;  // std dev = 3.84e-09, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return -0.06842697784420272;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.13380114014367644;  // std dev = 0.000372, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.14846521094976564;  // std dev = 0.025, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.208030954640988;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.19051553462307338;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.14414656916236449;  // std dev = 0.040, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.14274469024285447;  // std dev = 0.070, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.20875893814733135;  // std dev = 0.136, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.06419184008202625;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '5.259', 'seconds']
Refined model CLL: -0.088379


******************************************
Best model found
******************************************
Results 

CLL : -0.085326 

AUC ROC : 0.995558 

AUC PR : 0.440364 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 7.482 

Total Inference Time : 2.0762293338775635 

Total revision time: 17.39077506828308
Best scored revision CLL: -0.088379


Results 

CLL : -0.085326 

AUC ROC : 0.995558 

AUC PR : 0.440364 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 22.974010332107543 

Total Inference Time : 2.0762293338775635 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.976
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8449910403626706;  // std dev = 0.993, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004882;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7221214037124147;  // std dev = 1.88e-07, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283914;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5448022671633602;  // std dev = 0.114, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360625;  // std dev = 7.45e-09, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3944784344234495;  // std dev = 1.394, 71.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.422647448507957;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.10159632948783628;  // std dev = 1.32e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.30393901994924705;  // std dev = 1.395, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926067;  // std dev = 8.02e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | else return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22803211547645127;  // std dev = 1.698, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.27e-09, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1996372694717164;  // std dev = 1.329, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109148;  // std dev = 8.43e-08, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1783553019893719;  // std dev = 0.993, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333685;  // std dev = 7.07e-08, 140.000 (wgt'ed) examples reached here.  /* #neg=140 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15224546379738438;  // std dev = 0.114, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420264;  // std dev = 5.96e-08, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | else return -0.06842697784420272;  // std dev = 9.31e-10, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.08295585411890935;  // std dev = 0.242, 80.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.899', 'seconds']
Parameter learned model CLL:-0.091127 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.993, 1, 75], 'false,true': [0.0, 167, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.88e-07, 0, 75], 'false,true': [0.0, 163, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.114, 1, 75], 'false,true': [0.0, 0, 0], 'false,false': [7.45e-09, 151, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.394, 2, 69], 'true,false': [0.0, 116, 0], 'false,true,true': [0.0, 0, 6], 'false,true,false': [1.32e-09, 10, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.395, 2, 75], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [8.02e-08, 158, 0], 'false,false,false': [0.0, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.698, 3, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.27e-09, 153, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.329, 2, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [8.43e-08, 167, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.993, 1, 75], 'true,false': [0.0, 0, 0], 'false,true': [7.07e-08, 140, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.63e-09, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.114, 1, 75], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.96e-08, 128, 0], 'false,false,false': [9.31e-10, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.242, 5, 75], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 144, 0]}]
{'': [0.012984764542935068, -1.6753066000331702e-16], 'false': [-1.6753066000331702e-16, nan]}
{'': [4.736951571734001e-16, 0.0], 'false': [0.0, nan]}
{'': [0.012984764542936423, 5.440828067699443e-17], 'false': [nan, 5.440828067699443e-17]}
{'': [0.06835378307350679, 0.06441364189858649], 'true': [0.027375520730014036, -1.7227598657976568e-17], 'false': [0.06441364189858649, nan], 'false,true': [0.0, 1.3877787807814458e-18]}
{'': [0.02527703482923678, 4.097251638497602e-17], 'true': [0.02527703482923678, nan], 'false': [nan, 4.097251638497602e-17], 'false,false': [4.0755022422948786e-17, 0.0], 'false,false,true': [nan, 4.0755022422948786e-17]}
{'': [0.03695197766717503, 2.757416662467709e-17], 'false': [nan, 2.757416662467709e-17], 'false,false': [nan, 2.757416662467709e-17]}
{'': [0.02293104914294116, 4.254746920719163e-17], 'false': [nan, 4.254746920719163e-17], 'false,false': [nan, 4.254746920719163e-17], 'false,false,false': [4.254746920719163e-17, nan]}
{'': [0.012977132534520222, 4.485006920671162e-17], 'true': [0.012977132534520222, nan], 'false': [3.568574007723718e-17, 6.30808536718839e-19], 'false,false': [nan, 6.30808536718839e-19]}
{'': [0.012977831983519664, 2.9341608507950566e-17], 'false': [nan, 2.9341608507950566e-17], 'false,false': [2.7755575615628914e-17, 5.782411586589357e-19], 'false,false,true': [nan, 2.7755575615628914e-17]}
{'': [0.05856203908162351, -1.1564823173178714e-17], 'false': [nan, -1.1564823173178714e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 16.006
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 8.43e-08, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.14185106490048804;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.721745640653849;  // std dev = 0.062, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.39693316398137046;  // std dev = 0.830, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.12544463852839136;  // std dev = 4.21e-08, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.5548835763508668;  // std dev = 0.001, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else if ( tweets(A, F), follows(A, D) )
%   | | | then return 0.22147194133178974;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5662902856738955;  // std dev = 0.072, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.5670710753556416;  // std dev = 0.129, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.11231637819360625;  // std dev = 9.19e-08, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.42260529570364297;  // std dev = 0.149, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.14871985254342446;  // std dev = 0.852, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4143022374415073;  // std dev = 0.000780, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.1015963294878364;  // std dev = 0.000, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.41707848135901854;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.10159632948783628;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.32176214526241165;  // std dev = 0.058, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(D, F), tweets(D, G) )
%   | | | then return -0.1847115691705703;  // std dev = 1.058, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.40743384636141433;  // std dev = 0.130, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.31827838836334554;  // std dev = 0.008, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(A, H) )
%   | then return -0.09269127618926071;  // std dev = 7.45e-08, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | else return -0.09269127618926096;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(A, E) )
%   | | | then return 0.210264334068601;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.25369816280162427;  // std dev = 0.002, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( recursion_accounttype(D, B), follows(D, A) )
%   | | | then return 0.336994149054043;  // std dev = 0.189, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2596967167903871;  // std dev = 0.085, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.2535918891466128;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.25537740760265754;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.005256793156044955;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( tweets(A, H) )
%   | then return -0.08518475138839678;  // std dev = 4.17e-09, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | else return -0.08518475138839682;  // std dev = 3.48e-09, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), tweets(A, F) )
%   | | | then return 0.17714612519920503;  // std dev = 0.986, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.22999071618264164;  // std dev = 0.196, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.09892878328102132;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.20639594055591312;  // std dev = 0.000526, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.23204853686797886;  // std dev = 0.055, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2088959730154933;  // std dev = 0.004, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.2546152701411068;  // std dev = 0.164, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( tweets(A, J) )
%   | then return -0.07877675473109157;  // std dev = 6.04e-09, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   | else return -0.07877675473109179;  // std dev = 5.27e-09, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.15172924295768744;  // std dev = 0.987, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return 0.18776893577422013;  // std dev = 0.131, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.14908415172944814;  // std dev = 1.055, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.1745176510039238;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.17506279576709266;  // std dev = 0.018, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.28969788334872887;  // std dev = 0.081, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.17273185630961538;  // std dev = 0.009, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.18258776652663966;  // std dev = 0.028, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.07324622576333677;  // std dev = 7.33e-09, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.15959838103159626;  // std dev = 0.044, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.206145694792856;  // std dev = 0.108, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.24787979428612156;  // std dev = 0.092, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(G, A), tweets(G, I) )
%   | | | then return 0.15174857935948102;  // std dev = 0.009, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.14837270752749296;  // std dev = 0.006, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.15692157446570865;  // std dev = 0.025, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.15159092128066975;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, K) )
%   | then return -0.06842697784420264;  // std dev = 5.27e-09, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | else return -0.06842697784420274;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.14030764607232532;  // std dev = 0.034, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.16123210387238607;  // std dev = 0.106, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.1339359766096605;  // std dev = 0.007, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1267718849713727;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), tweets(G, H) )
%   | | | then return -0.27923854999936293;  // std dev = 0.974, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.20340768554601493;  // std dev = 0.070, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.13210008838257106;  // std dev = 0.005, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.13727711948059287;  // std dev = 0.023, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06419184008202626;  // std dev = 0.000, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.242', 'seconds']
Refined model CLL: -0.089086


******************************************
Best model found
******************************************
Results 

CLL : -0.084682 

AUC ROC : 0.995381 

AUC PR : 0.456359 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 16.006 

Total Inference Time : 4.3151421546936035 

Total revision time: 30.668174154281616
Best scored revision CLL: -0.089086


Results 

CLL : -0.084682 

AUC ROC : 0.995381 

AUC PR : 0.456359 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 36.25140941810608 

Total Inference Time : 4.3151421546936035 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.531
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8385410919622563;  // std dev = 1.400, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048835;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7038059645790306;  // std dev = 1.400, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839166;  // std dev = 0.000, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5255977075810025;  // std dev = 0.192, 104.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360672;  // std dev = 0.000, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.41257838851911277;  // std dev = 1.399, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | else return -0.10159632948783646;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43341172185244625;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.10159632948783621;  // std dev = 1.32e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.2894261308253136;  // std dev = 2.131, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0926912761892606;  // std dev = 8.82e-08, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | | else return -0.09269127618926087;  // std dev = 1.32e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2455236352466637;  // std dev = 1.706, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.27e-09, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2089112987657407;  // std dev = 1.400, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109144;  // std dev = 7.60e-08, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17417697014638137;  // std dev = 1.400, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333671;  // std dev = 1.02e-07, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333698;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13888798453960927;  // std dev = 0.168, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 5.58e-08, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | | else return -0.06842697784420268;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12984878023525734;  // std dev = 0.139, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.870', 'seconds']
Parameter learned model CLL:-0.092396 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.4, 2, 100], 'false,true': [0.0, 190, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.4, 2, 100], 'false,true': [0.0, 203, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 4, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 222, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.399, 2, 94], 'true,false': [0.0, 165, 0], 'false,true,true': [0.0, 0, 6], 'false,true,false': [1.32e-09, 12, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.131, 5, 100], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [8.82e-08, 185, 0], 'false,false,false': [1.32e-09, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.706, 3, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.27e-09, 189, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.4, 2, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.6e-08, 204, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.4, 2, 100], 'true,false': [0.0, 0, 0], 'false,true': [1.02e-07, 176, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.73e-09, 13, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.168, 3, 100], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.58e-08, 171, 0], 'false,false,false': [0.0, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.139, 2, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 180, 0]}]
{'': [0.019223375624761452, -2.220446049250313e-16], 'false': [-2.220446049250313e-16, nan]}
{'': [0.019223375624761938, -3.500210520985715e-17], 'false': [-3.500210520985715e-17, nan]}
{'': [0.036982248520710956, -6.601326092365796e-17], 'false': [nan, -6.601326092365796e-17]}
{'': [0.06897777701000277, 0.06360746999976136], 'true': [0.020399305555555507, -7.670631806501082e-17], 'false': [0.06360746999976136, nan], 'false,true': [0.0, 0.0]}
{'': [0.043249520513183946, 4.2400477322367786e-17], 'true': [0.043249520513183946, nan], 'false': [nan, 4.2400477322367786e-17], 'false,false': [4.200843876960052e-17, 2.9738116731030977e-18], 'false,false,true': [nan, 4.200843876960052e-17]}
{'': [0.028264789407095866, 2.819614030794048e-17], 'false': [nan, 2.819614030794048e-17], 'false,false': [nan, 2.819614030794048e-17]}
{'': [0.019215684758618547, 2.829980258848438e-17], 'false': [nan, 2.829980258848438e-17], 'false,false': [nan, 2.829980258848438e-17], 'false,false,false': [2.829980258848438e-17, nan]}
{'': [0.019216489546867985, 6.579099405186112e-17], 'true': [0.019216489546867985, nan], 'false': [5.866519391485203e-17, 1.0675221390626506e-18], 'false,false': [nan, 1.0675221390626506e-18]}
{'': [0.028268515114901055, 1.9413735949729513e-17], 'false': [nan, 1.9413735949729513e-17], 'false,false': [1.817909046169847e-17, -2.3129646346357427e-18], 'false,false,true': [nan, 1.817909046169847e-17]}
{'': [0.019268336830130205, -4.934324553889585e-18], 'false': [nan, -4.934324553889585e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 23.518
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, A) )
%   | | then return 0.8581489350995124;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( follows(F, A), recursion_accounttype(E, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.4831489350995123;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.14185106490048846;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.7229524827404402;  // std dev = 0.088, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.07586805104340703;  // std dev = 1.117, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.74497810657665;  // std dev = 0.132, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.7194734122109542;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.12544463852839183;  // std dev = 0.000, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5649715607317727;  // std dev = 0.299, 100.000 (wgt'ed) examples reached here.  /* #pos=100 */
%   else return -0.11231637819360647;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.35551150694444744;  // std dev = 1.680, 51.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=48 */
%   | | | else return 0.421208377640298;  // std dev = 0.079, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.43771157714937037;  // std dev = 0.278, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.44937015827929505;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.10159632948783623;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, A), tweets(E, D) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.2927668410225365;  // std dev = 1.402, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   | | | else return 0.17345978713292265;  // std dev = 0.775, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.3243538619732687;  // std dev = 0.099, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.3379130358022576;  // std dev = 0.148, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926055;  // std dev = 4.71e-08, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | else return -0.09269127618926087;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A), follows(E, F) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(F, B) )
%   | | | then return 0.270652504556906;  // std dev = 0.025, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.15729568171870792;  // std dev = 1.565, 24.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=21 */
%   | | else if ( follows(G, A), tweets(G, D) )
%   | | | then return 0.2711494646141042;  // std dev = 0.057, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.24931199869349585;  // std dev = 0.003, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(H, A) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.26164080577313364;  // std dev = 0.034, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.31675536511576285;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.24634187911329541;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( tweets(A, I) )
%   | then return -0.08518475138839678;  // std dev = 4.66e-09, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | else return -0.08518475138839678;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), follows(F, D) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.2253257010245851;  // std dev = 0.062, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.20994173164764765;  // std dev = 0.021, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0.2547633190506306;  // std dev = 0.172, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.22262754170342236;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.21397350070700943;  // std dev = 1.67e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.20313164909626302;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08236823563765538;  // std dev = 1.307, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.2042653379938025;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07877675473109144;  // std dev = 5.51e-09, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.18824167971919484;  // std dev = 0.068, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.17753460624885584;  // std dev = 0.014, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(G, A), recursion_accounttype(D, B) )
%   | | | then return -0.017127384278868927;  // std dev = 1.244, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.196686426797792;  // std dev = 0.182, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0.04295339740518394;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, A) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.07324622576333678;  // std dev = 8.30e-08, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | | | else return -0.07324622576333698;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return -0.07324622576333702;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return -0.07324622576333698;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( recursion_accounttype(D, B), follows(F, D) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.1573742503343903;  // std dev = 0.017, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.0687193789231614;  // std dev = 1.641, 31.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=28 */
%   | | else if ( tweets(A, G), follows(A, D) )
%   | | | then return 0.17943680194759923;  // std dev = 0.134, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.21582034293153257;  // std dev = 0.053, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return -0.5079147018122686;  // std dev = 0.822, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.1555893044686062;  // std dev = 0.016, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.16269500522230818;  // std dev = 0.001, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.14676432425918357;  // std dev = 0.002, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06842697784420261;  // std dev = 4.47e-09, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | | then return 0.13749437466591602;  // std dev = 0.012, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.15859124236431513;  // std dev = 0.054, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return -0.513785434807563;  // std dev = 0.809, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.1409682311176093;  // std dev = 0.027, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.1850208076051275;  // std dev = 0.086, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.15420723791330715;  // std dev = 0.124, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.12991760921967255;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.12852801081329995;  // std dev = 0.000882, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06419184008202626;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.031', 'seconds']
Refined model CLL: -0.090126


******************************************
Best model found
******************************************
Results 

CLL : -0.085254 

AUC ROC : 0.99585 

AUC PR : 0.470011 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 23.518 

Total Inference Time : 6.772581100463867 

Total revision time: 44.81194898986816
Best scored revision CLL: -0.090126


Results 

CLL : -0.085254 

AUC ROC : 0.99585 

AUC PR : 0.470011 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 50.395184253692626 

Total Inference Time : 6.772581100463867 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.216
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.834893121146022;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048832;  // std dev = 0.000, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7085181213873046;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839188;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5559235329608464;  // std dev = 0.088, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360682;  // std dev = 0.000, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3929332256495171;  // std dev = 1.967, 122.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=118 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.42572011089541817;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783619;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.2876349230388151;  // std dev = 2.392, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926049;  // std dev = 7.60e-08, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   | | else return -0.09269127618926086;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2568824669679139;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.82e-09, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19387815052473362;  // std dev = 1.968, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 5.77e-08, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.19267435531883473;  // std dev = 0.014, 126.000 (wgt'ed) examples reached here.  /* #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333673;  // std dev = 1.24e-07, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.073246225763337;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.148841162515733;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6.14e-08, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | | else return -0.06842697784420267;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10741267868300503;  // std dev = 0.189, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202618;  // std dev = 3.61e-09, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.771', 'seconds']
Parameter learned model CLL:-0.093087 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 243, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.403, 2, 126], 'false,true': [0.0, 254, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.088, 1, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 242, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.967, 4, 118], 'true,false': [0.0, 223, 0], 'false,true,true': [0.0, 0, 8], 'false,true,false': [0.0, 22, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.392, 6, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.6e-08, 235, 0], 'false,false,false': [0.0, 13, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.403, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.82e-09, 252, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.968, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.77e-08, 262, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.014, 0, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.24e-07, 239, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 18, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.14e-08, 230, 0], 'false,false,false': [0.0, 19, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.189, 5, 126], 'false,true': [0.0, 0, 0], 'false,false': [3.61e-09, 260, 0]}]
{'': [0.022714981070853308, -1.5716737467944603e-16], 'false': [-1.5716737467944603e-16, nan]}
{'': [0.015380859375001332, -6.643854320591488e-17], 'false': [-6.643854320591488e-17, nan]}
{'': [0.007812015624032213, -8.624873083864852e-17], 'false': [nan, -8.624873083864852e-17]}
{'': [0.0671139620738865, 0.05437669175614444], 'true': [0.03171190540177344, -7.965725737220854e-17], 'false': [0.05437669175614444, nan], 'false,true': [-8.326672684688674e-17, -1.0092936587501423e-17]}
{'': [0.04335148722466857, 3.9395010551215234e-17], 'true': [0.04335148722466857, nan], 'false': [nan, 3.9395010551215234e-17], 'false,false': [2.456663714064176e-17, -5.337610695313253e-18], 'false,false,true': [nan, 2.456663714064176e-17]}
{'': [0.015370690669863352, 3.348291661567932e-17], 'false': [nan, 3.348291661567932e-17], 'false,false': [nan, 3.348291661567932e-17]}
{'': [0.029802883601793288, 1.2712477381204082e-17], 'false': [nan, 1.2712477381204082e-17], 'false,false': [nan, 1.2712477381204082e-17], 'false,false,false': [1.2712477381204082e-17, nan]}
{'': [1.5194995653327542e-06, 5.270319416508525e-17], 'true': [1.5194995653327542e-06, nan], 'false': [6.41049277817036e-17, -7.709882115452476e-19], 'false,false': [nan, -7.709882115452476e-19]}
{'': [0.015373310867491583, -5.35047240783208e-18], 'false': [nan, -5.35047240783208e-18], 'false,false': [1.6411992537937097e-17, -2.1912296538654404e-18], 'false,false,true': [nan, 1.6411992537937097e-17]}
{'': [0.035666352278646556, 1.2810265668751807e-17], 'false': [nan, 1.2810265668751807e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 53.307
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E) )
%   | | then if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.7981489350995122;  // std dev = 1.679, 50.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=47 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then return 0.8581489350995115;  // std dev = 2.38e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( follows(H, A), follows(A, H) )
%   | | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.14185106490048827;  // std dev = 0.000, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | | then return 0.6911481618532916;  // std dev = 1.383, 55.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=53 */
%   | | | else return 0.7286601959841297;  // std dev = 0.067, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.7218632026451626;  // std dev = 0.011, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.32594926327320406;  // std dev = 1.108, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return 0.7234601456845197;  // std dev = 0.065, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else return -0.12544463852839186;  // std dev = 0.000, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), follows(E, A) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.5419315773528545;  // std dev = 1.386, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | | | else return 0.44327064732324045;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(G, A), tweets(G, H) )
%   | | | then return 0.08916515478863464;  // std dev = 1.227, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.48950612953979844;  // std dev = 0.956, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.5736189498223545;  // std dev = 0.165, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.11231637819360675;  // std dev = 0.000, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.35518824138972577;  // std dev = 2.151, 60.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=55 */
%   | | | else return 0.4392912822070682;  // std dev = 0.226, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.43675780305273953;  // std dev = 0.171, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.33760462359474863;  // std dev = 0.920, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return -0.10159632948783655;  // std dev = 0.000, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   else if ( recursion_accounttype(J, B) )
%   | then return 0.3329046891576484;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.3579330215270917;  // std dev = 0.099, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.29834119375247736;  // std dev = 0.961, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return 0.36966295803703436;  // std dev = 0.175, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.05542706849506875;  // std dev = 1.071, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2704209951161579;  // std dev = 0.882, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0.3425978657142139;  // std dev = 0.135, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else if ( follows(A, J) )
%   | then return -0.0926912761892605;  // std dev = 6.99e-08, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else return -0.09269127618926087;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(F, D), follows(F, A) )
%   | | then if ( follows(E, A), follows(F, E) )
%   | | | then return 0.2831326234356116;  // std dev = 0.121, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | | else return 0.2660048472162877;  // std dev = 0.040, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(E, G), tweets(E, D) )
%   | | | then return 0.10040055824513948;  // std dev = 1.244, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.30986022473516833;  // std dev = 0.155, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.08677882195716181;  // std dev = 1.297, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.2833137107938547;  // std dev = 0.054, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.17233176244399268;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.2691173423258491;  // std dev = 0.107, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.08518475138839678;  // std dev = 5.82e-09, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, A), follows(A, D) )
%   | | | then return 0.2300161829702224;  // std dev = 0.083, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.2190587198734117;  // std dev = 0.043, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, D), tweets(D, F) )
%   | | | then return 0.23126168595926372;  // std dev = 0.033, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2588442721991253;  // std dev = 0.104, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(G, B), follows(I, A) )
%   | | | then return 0.011436690158729699;  // std dev = 1.170, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.1690825321796688;  // std dev = 1.374, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2207711857472049;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.21887456017732668;  // std dev = 0.030, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07877675473109143;  // std dev = 4.47e-09, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return 0.18826241701137253;  // std dev = 0.025, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.24714339358979084;  // std dev = 0.077, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.04486378084343726;  // std dev = 1.555, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | | else return 0.16484764603438495;  // std dev = 0.983, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21912372292794915;  // std dev = 0.033, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.19622602537800188;  // std dev = 0.059, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.17569532228839155;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, J) )
%   | then return -0.07324622576333674;  // std dev = 7.90e-09, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | else return -0.073246225763337;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(D, B) )
%   | | then if ( follows(E, D), tweets(E, F) )
%   | | | then return 0.15530595920532256;  // std dev = 0.882, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | | | else return -0.020801719351389948;  // std dev = 1.270, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( tweets(D, G), follows(D, A) )
%   | | | then return 0.1898162667091322;  // std dev = 0.154, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.16292971248052204;  // std dev = 0.080, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.06327585116600426;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, H) )
%   | then return -0.06842697784420268;  // std dev = 2.11e-08, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | else return -0.06842697784420267;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return 0.14262360385905332;  // std dev = 0.037, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.19855664963775807;  // std dev = 0.070, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return 0.0750513105198904;  // std dev = 1.297, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return 0.16511926543846167;  // std dev = 0.026, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.1716857593674243;  // std dev = 0.080, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.14716341778929115;  // std dev = 0.109, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1453271064391671;  // std dev = 0.032, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.13234887099109166;  // std dev = 0.008, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06419184008202626;  // std dev = 1.32e-09, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.339', 'seconds']
Refined model CLL: -0.09132


******************************************
Best model found
******************************************
Results 

CLL : -0.086129 

AUC ROC : 0.995408 

AUC PR : 0.410865 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 53.307 

Total Inference Time : 10.756472110748291 

Total revision time: 81.02213382530212
Best scored revision CLL: -0.09132


Results 

CLL : -0.086129 

AUC ROC : 0.995408 

AUC PR : 0.410865 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 86.60536908912658 

Total Inference Time : 10.756472110748291 

