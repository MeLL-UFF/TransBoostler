Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Run: 1
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.382
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8485335504841266;  // std dev = 0.995, 104.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | else return -0.05489454316135737;  // std dev = 0.282, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0.30814893509951236;  // std dev = 0.497, 20.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6993063157610242;  // std dev = 1.407, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03574727628493501;  // std dev = 0.262, 206.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10588748040769834;  // std dev = 0.985, 34.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.743694045345338;  // std dev = 0.084, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.05727793452329397;  // std dev = 3.325, 76.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5375136436872343;  // std dev = 1.678, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.7285372298735178;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.5045884231881399;  // std dev = 0.773, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5817275881097339;  // std dev = 0.112, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5627081118189929;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5627081118189929;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.028658629265975757;  // std dev = 3.639, 188.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=21 */
%   | | | else return 0.01663468820066911;  // std dev = 2.817, 64.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5234742249360195;  // std dev = 1.596, 126.000 (wgt'ed) examples reached here.  /* #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11938393997090264;  // std dev = 0.045, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | | else return -0.12358066975898163;  // std dev = 0.004, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15542017601956462;  // std dev = 0.235, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30025985198559163;  // std dev = 1.531, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.41632575414004347;  // std dev = 0.174, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.24723971324813362;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6255852095843683;  // std dev = 0.163, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08491367227152376;  // std dev = 2.296, 249.000 (wgt'ed) examples reached here.  /* #neg=240 #pos=9 */
%   | | else return -0.10824207156103352;  // std dev = 3.23e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.021096369342041534;  // std dev = 3.440, 283.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.19434088105018002;  // std dev = 0.991, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.49453490439520625;  // std dev = 1.107, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11506168081197048;  // std dev = 0.114, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.12382269687734944;  // std dev = 0.197, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.24288880877875083;  // std dev = 2.497, 113.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=107 */
%   | else return -0.08046366119801077;  // std dev = 2.142, 251.000 (wgt'ed) examples reached here.  /* #neg=240 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.01149566994028182;  // std dev = 1.047, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1794932392065718;  // std dev = 1.388, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.26635752511177646;  // std dev = 0.084, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04658238781553643;  // std dev = 0.153, 206.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.016170931474766205;  // std dev = 1.470, 77.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=13 */
%   | | | else return 0.09158915013250225;  // std dev = 1.775, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17056225047101112;  // std dev = 0.159, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.23728373187853205;  // std dev = 1.367, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08976638558274072;  // std dev = 0.036, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4491714446655279;  // std dev = 0.573, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11010803531766035;  // std dev = 0.167, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1945250618926862;  // std dev = 0.792, 94.000 (wgt'ed) examples reached here.  /* #pos=94 */
%   | | else return 0.057912867372258384;  // std dev = 0.950, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.0835207106855064;  // std dev = 0.018, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07883207813650328;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.028929839724136285;  // std dev = 0.571, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.016777332270217042;  // std dev = 1.027, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.30993581785533353;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.036353968781798494;  // std dev = 1.333, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.516', 'seconds']
Parameter learned model CLL:-0.109988 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.995, 1, 103], 'true,false,true': [0.0, 167, 0], 'true,false,false': [0.282, 21, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 1, 0], 'false,true,false': [2.58e-08, 28, 0], 'false,false': [0.497, 11, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.407, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.262, 184, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.985, 33, 1], 'false,false,false,true': [0.084, 0, 4], 'false,false,false,false': [3.325, 59, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.678, 3, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.773, 1, 2], 'true,false,false': [0.112, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.639, 167, 21], 'false,false,false,false': [2.817, 53, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.596, 0, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.045, 169, 0], 'false,true,false,false': [0.004, 42, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.235, 52, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.531, 2, 73], 'true,false': [0.174, 0, 4], 'false,true,true': [0.972, 1, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.163, 0, 23], 'false,false,true,false': [2.296, 240, 9], 'false,false,false': [3.23e-09, 20, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.44, 192, 91], 'false,true': [0.991, 1, 13], 'false,false,true': [1.107, 1, 22], 'false,false,false,true': [0.114, 28, 0], 'false,false,false,false': [0.197, 46, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.497, 6, 107], 'true,false': [2.142, 240, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.047, 15, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.388, 2, 80], 'true,false,true': [0.084, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.153, 184, 22], 'false,false,false,true': [1.47, 64, 13], 'false,false,false,false': [1.775, 14, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.159, 2, 77], 'false,true,true,true': [1.367, 2, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.036, 210, 0], 'false,false,true': [0.573, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.167, 32, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.792, 0, 94], 'true,true,false': [0.95, 1, 9], 'true,false,true': [0.018, 173, 0], 'true,false,false,true': [0.0, 15, 0], 'true,false,false,false': [0.571, 14, 2], 'false,true': [1.027, 29, 12], 'false,false,true': [0.707, 1, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.333, 18, 8]}]
{'': [0.2295918367346963, 0.22574576726686382], 'true': [0.009522928994084868, 0.010415512465373795], 'false': [0.20701963117192096, 0.2475], 'false,true': [0.07100591715976314, 2.3790493384824782e-17], 'false,true,true': [-1.4802973661668753e-16, 0.0], 'true,false': [-1.6753066000331702e-16, 0.07939508506616262]}
{'': [0.023565382518857432, 0.09137786304061836], 'false': [0.06865843433492272, 0.12941633955019705], 'false,false': [0.028546712802768142, 0.1606541112038544], 'false,false,false': [0.0017599172082911618, 0.14545860965960736], 'false,true': [nan, 0.06865843433492272], 'false,false,true': [nan, 0.028546712802768142]}
{'': [0.04286400386122988, 0.09898586843600983], 'false': [nan, 0.09898586843600984], 'false,false': [5.224578939412501e-17, 0.08441399950691353], 'false,false,false': [0.07043333909598491, 0.12395171682059869], 'true': [0.03852021853377915, 0.08871687691285546], 'true,false': [0.19941975011037993, 0.003139528829797511], 'true,true': [0.03855478451054675, 0.0], 'false,false,true': [4.9343245538895844e-17, 0.0]}
{'': [0.020203455338986372, 0.00041605773832766756], 'false': [1.2265627779340343e-05, 0.0010604141442904437], 'false,false': [nan, 0.0010604141442904437], 'false,false,false': [nan, 0.0010604141442904437], 'false,true': [nan, 1.2265627779336133e-05], 'false,true,false': [1.172077853697165e-05, 3.512702668078973e-07]}
{'': [0.030705450837857275, 0.0590572876580355], 'false': [0.05246913580246912, 0.054982813726172704], 'false,false': [0.058549175495561254, 9.714451465470119e-18], 'false,false,true': [0.0011571794506948037, 0.021164417714897476], 'false,true': [0.05246913580246912, nan], 'true': [0.03125761399379171, 0.007563188838524193]}
{'': [0.041821935191777064, 0.08331841347120969], 'false': [0.07014450902100351, 0.0816169272459392], 'false,false': [0.05331727226941597, 0.0007181182805369318], 'true': [nan, 0.0418219351917772], 'true,false': [nan, 0.041821935191777064], 'false,false,false': [0.0004606214844017631, 0.0008458128760642274]}
{'': [0.05211200804603168, 0.0477025917161084], 'true': [0.055181242535757735, 0.018271667932251733], 'false': [nan, 0.0477025917161084], 'false,false': [nan, 0.0477025917161084], 'false,false,false': [nan, 0.0477025917161084]}
{'': [0.023202937558953914, 0.03442217285896301], 'false': [nan, 0.03442217285896261], 'false,false': [0.023345704790194897, 0.05518869861680185], 'false,false,false': [0.028066161991082677, 0.13704881318205414], 'true': [0.0235022550759845, 0.0035651676750158984], 'true,false': [0.0035651676750158984, nan]}
{'': [0.025196074468125388, 0.032419980354702914], 'false': [0.02049227760070835, 0.07814513678020184], 'false,false': [0.019331416363793378, 0.0008697191307145361], 'false,true': [0.054967328078057445, 6.092526810568054e-06], 'false,true,true': [0.054967328078057445, nan], 'false,false,false': [nan, 0.0008697191307145361]}
{'': [0.021865738431361272, 0.05152745513075235], 'false': [0.02573631589161756, 0.08927724099228374], 'false,false': [0.25, 0.06834847924290187], 'false,false,false': [nan, 0.06834847924290187], 'true': [0.016329457784755277, 0.0018123599158645191], 'true,true': [0.006676939699290323, 0.09019474491294695], 'true,false': [1.9356917503148196e-06, 0.0111296685107234], 'true,false,false': [0.0, 0.0203587810950598]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 16.56
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8459538131482928;  // std dev = 0.110, 82.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=81 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return -0.13195007480147844;  // std dev = 0.099, 202.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.15814893509951236;  // std dev = 0.458, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.7076424561265473;  // std dev = 0.119, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else return 0.733584857810997;  // std dev = 0.146, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.6864105921297834;  // std dev = 0.953, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.12653489340416577;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | | else return -0.01199388909487495;  // std dev = 0.294, 38.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return -0.04961181648108875;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | | else return -0.12653489340416565;  // std dev = 7.45e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7490517228539606;  // std dev = 0.102, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.14022244156758257;  // std dev = 3.084, 56.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5459065240462847;  // std dev = 0.992, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | | else return 0.6417031579346663;  // std dev = 0.134, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.7642399348993096;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6667836948166347;  // std dev = 0.315, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5567749328768417;  // std dev = 0.003, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6099098041216219;  // std dev = 0.241, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11623037209275269;  // std dev = 0.081, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1165464199710397;  // std dev = 2.073, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
%   | | | else return 0.15000308199203424;  // std dev = 2.217, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(E, A) )
%   | | | then return 0.42567903399011453;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.3641394637773361;  // std dev = 1.394, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | else if ( follows(A, E), follows(E, A) )
%   | | | then return 0.08077003215033828;  // std dev = 1.517, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0.3761484293598465;  // std dev = 1.693, 37.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=34 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.28680184067769565;  // std dev = 1.017, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.6648720469777977;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.7632283247665084;  // std dev = 0.114, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(H, A) )
%   | then return -0.10391063368342877;  // std dev = 0.004, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else return -0.17480341604188457;  // std dev = 0.154, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.33064652985875187;  // std dev = 0.048, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.00479569789855853;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3699521965287574;  // std dev = 0.206, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, G) )
%   | | then return 0.39179546654740516;  // std dev = 0.118, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.5120601870800349;  // std dev = 0.041, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3468963967308765;  // std dev = 0.031, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.35471739293191185;  // std dev = 1.364, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return -0.07795168010305512;  // std dev = 2.056, 235.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=9 */
%   | | else return -0.09290868669008055;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.23786325552277457;  // std dev = 0.980, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.26389994195060634;  // std dev = 0.019, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.2897053777149972;  // std dev = 0.044, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( tweets(A, F) )
%   | | then return -0.0492860554099433;  // std dev = 0.113, 151.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=15 */
%   | | else return -0.0500267679297411;  // std dev = 0.177, 40.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2736871238507689;  // std dev = 0.056, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.17910249205062587;  // std dev = 0.959, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5191541229703683;  // std dev = 0.410, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.11569479763794721;  // std dev = 0.028, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( tweets(C, E) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.15053726829683658;  // std dev = 1.660, 44.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | | else return 0.21533022199784835;  // std dev = 0.014, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.016459726283007715;  // std dev = 0.897, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.23855636168435648;  // std dev = 0.054, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(F, A) )
%   | then return -0.04780541998358663;  // std dev = 0.117, 252.000 (wgt'ed) examples reached here.  /* #neg=229 #pos=23 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.28108666868951515;  // std dev = 0.151, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.11454977430034342;  // std dev = 0.007, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.056295797197386234;  // std dev = 0.833, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.043899925831496;  // std dev = 1.352, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then return 0.1871529868725555;  // std dev = 0.055, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(A, D), tweets(C, E) )
%   | | | then return -0.045225292381644036;  // std dev = 1.940, 19.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=14 */
%   | | | else return 0.18390056760331405;  // std dev = 0.062, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.20436004343269362;  // std dev = 0.044, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), follows(F, G) )
%   | | then return 0.26227605052367486;  // std dev = 0.107, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return -0.20622512408522095;  // std dev = 1.331, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.2602609071320234;  // std dev = 0.129, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(I, A) )
%   | | then return -0.05552197483060106;  // std dev = 0.114, 214.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=15 */
%   | | else return -0.0022345287097215506;  // std dev = 0.220, 68.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.15127834063758486;  // std dev = 0.961, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.1740258459634307;  // std dev = 0.060, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.009990421049793259;  // std dev = 0.432, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else return 0.2894306599885626;  // std dev = 0.416, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, A) )
%   | | | then return 0.2747266805001348;  // std dev = 1.045, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.06964619409930592;  // std dev = 0.960, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return -0.07630609893379127;  // std dev = 0.059, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.363668383882042;  // std dev = 0.117, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12144162726223066;  // std dev = 0.023, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.11306606176745253;  // std dev = 1.663, 72.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=69 */
%   | | | else return -0.11556970506967679;  // std dev = 0.860, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.21905981238199268;  // std dev = 0.078, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.06701735187225821;  // std dev = 0.050, 211.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=2 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then return 0.1756479515610858;  // std dev = 0.028, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.09248118223715969;  // std dev = 0.006, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.3018040267038543;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.10708079518739691;  // std dev = 6.45e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.005263665668714856;  // std dev = 0.244, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.203', 'seconds']
Refined model CLL: -0.10118


******************************************
Best model found
******************************************
Results 

CLL : -0.09875 

AUC ROC : 0.995447 

AUC PR : 0.411782 

Precision : 0.338428 

Recall : 0.99359 

F1 : 0.504886 

Total Learning Time : 16.56 

Total Inference Time : 17.279373168945312 

Total revision time: 44.10659369659424
Best scored revision CLL: -0.10118


Results 

CLL : -0.09875 

AUC ROC : 0.995447 

AUC PR : 0.411782 

Precision : 0.338428 

Recall : 0.99359 

F1 : 0.504886 

Total Learning Time : 44.12415274810791 

Total Inference Time : 17.279373168945312 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.837
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.995, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004881;  // std dev = 0.000, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | | else return -0.09121815350808263;  // std dev = 0.219, 79.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 5.37e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0.1456489350995117;  // std dev = 0.453, 80.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7131939822767294;  // std dev = 1.019, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04067482673804527;  // std dev = 0.256, 188.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.061350899656147165;  // std dev = 1.796, 51.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7494746197852904;  // std dev = 0.147, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1104780280884261;  // std dev = 4.999, 147.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5570761393023996;  // std dev = 1.070, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return -0.2705074134493854;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7331947231689782;  // std dev = 0.227, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5889473953027206;  // std dev = 0.201, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5934864848857644;  // std dev = 0.187, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5592653101557153;  // std dev = 5.96e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0320628449191817;  // std dev = 4.632, 305.000 (wgt'ed) examples reached here.  /* #neg=271 #pos=34 */
%   | | | else return 0.05952530675826912;  // std dev = 4.119, 104.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5359408945868467;  // std dev = 2.686, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11890669246981858;  // std dev = 0.047, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | | | else return -0.12834442097889998;  // std dev = 0.008, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1578223958255286;  // std dev = 0.256, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.28311965847140325;  // std dev = 1.649, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   | else return 0.4772378824464316;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2961840789584566;  // std dev = 0.014, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5121468074933007;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6373880087998847;  // std dev = 0.361, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10197263572390881;  // std dev = 1.807, 271.000 (wgt'ed) examples reached here.  /* #neg=266 #pos=5 */
%   | | else return 0.04633733718949822;  // std dev = 0.322, 61.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.021167171747168406;  // std dev = 3.207, 253.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.20577811394650147;  // std dev = 1.005, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5010683156057639;  // std dev = 1.545, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12258516683862015;  // std dev = 0.195, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | | else return -0.1284228987835747;  // std dev = 0.211, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28839712571236115;  // std dev = 1.338, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else return -0.08787245051862308;  // std dev = 1.855, 248.000 (wgt'ed) examples reached here.  /* #neg=241 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.024203129480599633;  // std dev = 2.302, 96.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15569797358086765;  // std dev = 1.704, 86.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.26708058486960007;  // std dev = 0.015, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04732737539615167;  // std dev = 0.147, 185.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.006068921458334641;  // std dev = 2.026, 126.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=28 */
%   | | | else return 0.06314434106671649;  // std dev = 2.433, 73.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15717131951542562;  // std dev = 0.156, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.23600969375345762;  // std dev = 1.641, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09017082076291477;  // std dev = 0.109, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.33992549752290135;  // std dev = 1.776, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11202594057392197;  // std dev = 0.265, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1749129207886668;  // std dev = 1.266, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.17139230310525888;  // std dev = 0.356, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08100132633681043;  // std dev = 0.026, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09381136097908539;  // std dev = 0.031, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.03290791223655853;  // std dev = 0.995, 35.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.010090617282772272;  // std dev = 1.725, 65.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18050754628822974;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03204699179552112;  // std dev = 2.009, 68.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.739', 'seconds']
Parameter learned model CLL:-0.110492 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.995, 1, 104], 'true,false,true': [0.0, 152, 0], 'true,false,false': [0.219, 75, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.37e-08, 51, 0], 'false,false': [0.453, 57, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.019, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.256, 169, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.796, 47, 4], 'false,false,false,true': [0.147, 0, 8], 'false,false,false,false': [4.999, 107, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.07, 1, 67], 'true,true,false': [0.0, 1, 0], 'true,false,true': [0.227, 0, 3], 'true,false,false': [0.201, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.187, 0, 6], 'false,false,true,false': [5.96e-08, 0, 15], 'false,false,false,true': [4.632, 271, 34], 'false,false,false,false': [4.119, 81, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.686, 3, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.047, 184, 0], 'false,true,false,false': [0.008, 33, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.256, 103, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.649, 3, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.361, 0, 39], 'false,false,true,false': [1.807, 266, 5], 'false,false,false': [0.322, 48, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.207, 171, 82], 'false,true': [1.005, 1, 22], 'false,false,true': [1.545, 1, 52], 'false,false,false,true': [0.195, 90, 0], 'false,false,false,false': [0.211, 78, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.338, 1, 121], 'true,false': [1.855, 241, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.302, 68, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.704, 3, 83], 'true,false,true': [0.015, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.147, 166, 19], 'false,false,false,true': [2.026, 98, 28], 'false,false,false,false': [2.433, 49, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.156, 2, 78], 'false,true,true,true': [1.641, 2, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.109, 200, 0], 'false,false,true': [1.776, 2, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.265, 102, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.266, 1, 85], 'true,true,false': [0.356, 0, 19], 'true,false,true': [0.026, 156, 0], 'true,false,false,true': [0.031, 30, 0], 'true,false,false,false': [0.995, 31, 4], 'false,true': [1.725, 40, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.009, 47, 21]}]
{'': [0.21811224489796133, 0.21301775147929078], 'true': [0.009433106575965852, 0.0170161728603286], 'false': [0.22074099722991802, 0.20484375000000096], 'false,true': [7.105427357601002e-16, 5.659960517696876e-17], 'true,false': [-1.2270886061646468e-16, 0.0480692196763339], 'false,true,true': [0.0, 0.0]}
{'': [0.012066684465508244, 0.11927786514429489], 'false': [0.06541492781351466, 0.15993947403087205], 'false,false': [0.06327663176216922, 0.1813597578568869], 'false,false,false': [0.0027002173677553865, 0.17000831860417995], 'false,true': [nan, 0.06541492781351466], 'false,false,true': [nan, 0.06327663176216922]}
{'': [0.025281361566700113, 0.10648174398437706], 'false': [nan, 0.10648174398437704], 'false,false': [0.001911981714129572, 0.09554546722429114], 'false,false,false': [0.07035228264266795, 0.16317392534955433], 'true': [0.026369989409509947, 0.012481488850652912], 'true,true': [0.01683177559191788, 0.0], 'true,false': [0.017184186618924624, 0.0050432612975813695], 'false,false,true': [0.005855443999522795, 2.3684757858670006e-16]}
{'': [0.0453820237874405, 0.0005255018966793063], 'false': [2.1919268235909207e-05, 0.0006338274263755821], 'false,false': [nan, 0.0006338274263755821], 'false,false,false': [nan, 0.0006338274263755821], 'false,true': [nan, 2.19192682359133e-05], 'false,true,false': [1.193094418446066e-05, 2.086339100475442e-06]}
{'': [0.03402184288531168, 0.0776051617226586], 'false': [0.0021242117040414232, 0.07685053344858907], 'false,false': [0.07107785245105319, 0.10363241995380967], 'false,false,true': [0.003339387605467236, 0.012053571945365995], 'true': [0.03398190746607911, 0.0], 'false,true': [9.47466466180158e-06, 0.0]}
{'': [0.040659478472902875, 0.08184300059242854], 'false': [0.0439286496866075, 0.082705496581551], 'false,false': [0.04503867415268096, 0.0004998886649022931], 'true': [nan, 0.04065947847290284], 'true,false': [nan, 0.040659478472902875], 'false,false,false': [0.0004241564704502012, 0.0005690152978390117]}
{'': [0.04542322135120163, 0.055218997673684385], 'false': [nan, 0.055218997673684406], 'false,false': [nan, 0.055218997673684385], 'false,false,false': [nan, 0.055218997673684385], 'true': [0.014667725289415285, 0.013870203707941911]}
{'': [0.03328327096259643, 0.0382115257549632], 'false': [nan, 0.0382115257549634], 'false,false': [0.021637472849465513, 0.051479544440195216], 'false,false,false': [0.03257138937693593, 0.08108237258650584], 'true': [0.033772899138365696, 0.0001051298092372005], 'true,false': [0.0001051298092372005, nan]}
{'': [0.02443970337872269, 0.04122724042193731], 'false': [0.026047151749311877, 0.06459524438632304], 'false,false': [0.0751180291500989, 0.0006864698136489314], 'false,true': [0.06732283924580142, 5.972624165287876e-05], 'false,true,true': [0.06732283924580142, nan], 'false,false,false': [nan, 0.0006864698136489314]}
{'': [0.022167862607534013, 0.052436141770158005], 'false': [0.04579268609835744, 0.058274604563297694], 'false,false': [0.0, 0.059358833914176456], 'false,false,false': [nan, 0.05935883391417652], 'true': [0.01647643700433752, 0.0048381560173552], 'true,true': [0.018637667615444393, 0.006683872875037729], 'true,false': [4.397689589367803e-06, 0.016157270977312437], 'true,false,false': [3.247252364739402e-05, 0.028266574455324118]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 20.086
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.097, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048804;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | | else if ( follows(E, A), follows(F, E) )
%   | | | then return -0.10263537862597792;  // std dev = 1.386, 51.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=2 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048766;  // std dev = 5.77e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.7993254056877476;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return 0.14981560176617903;  // std dev = 0.455, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(D, C), tweets(A, F) )
%   | | then return 0.6986643195735879;  // std dev = 0.149, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return 0.7281107879535349;  // std dev = 0.119, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.6102804811897486;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, G), follows(A, H) )
%   | | | then return 0.22139159230086003;  // std dev = 1.581, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return 0.692254421068048;  // std dev = 0.868, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return -0.12745018840755826;  // std dev = 0.115, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.7224028569698224;  // std dev = 0.014, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09153051062374445;  // std dev = 3.671, 98.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=25 */
%   | | | else return 0.1416494534763936;  // std dev = 2.977, 48.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5412793053332196;  // std dev = 0.163, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | else if ( follows(E, A) )
%   | | then return 0.6657262540649418;  // std dev = 0.152, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.41178579591450937;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.23578913316251984;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5837802981444753;  // std dev = 0.022, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5203059719598118;  // std dev = 1.004, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.11407629187621389;  // std dev = 0.120, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.0989904508857915;  // std dev = 3.854, 103.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=29 */
%   | | | else return 0.23571551914413622;  // std dev = 2.352, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.4366359389043842;  // std dev = 0.263, 86.000 (wgt'ed) examples reached here.  /* #pos=86 */
%   | | | else return 0.37212497538762357;  // std dev = 0.963, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return 0.585830926357263;  // std dev = 0.130, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.3604707681215662;  // std dev = 0.904, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.6855518714785127;  // std dev = 0.032, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.6749087563172704;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6499799696027776;  // std dev = 0.936, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(J, A) )
%   | then return -0.10399214592931354;  // std dev = 0.010, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else return -0.158649683000136;  // std dev = 0.211, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.34033301905828117;  // std dev = 0.038, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.3340018870648701;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.0878327924748165;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.3686955721321321;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3366128604202452;  // std dev = 0.015, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.345393753195168;  // std dev = 0.187, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09413894488173154;  // std dev = 0.124, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0374618023170213;  // std dev = 2.816, 98.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=25 */
%   | | | else return 0.1022389881896392;  // std dev = 2.291, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.241435409072493;  // std dev = 0.124, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.19430612722765656;  // std dev = 1.262, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.08459366737427539;  // std dev = 4.21e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | | else return -0.07083433536041528;  // std dev = 0.069, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.263021392616291;  // std dev = 0.026, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.20491734685060742;  // std dev = 0.243, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.22388260214664144;  // std dev = 0.996, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.4869156664187646;  // std dev = 1.165, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return -0.12168286170819682;  // std dev = 0.032, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.21299379188380382;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.1220847009747129;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.20973091261107557;  // std dev = 0.008, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.22188946702706192;  // std dev = 0.075, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, F) )
%   | | then return 0.2914003515187643;  // std dev = 0.040, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.05125381980742083;  // std dev = 0.863, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then return -0.05312481019830523;  // std dev = 0.086, 204.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=17 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.017526792150675628;  // std dev = 2.008, 83.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=19 */
%   | | | else return 0.07160153854525715;  // std dev = 2.153, 56.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=21 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.14036028672695447;  // std dev = 1.379, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | | | else return 0.17226393403750076;  // std dev = 0.024, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.18819228766037688;  // std dev = 0.029, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.20858733091287363;  // std dev = 0.013, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.04917885464510548;  // std dev = 0.111, 239.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=23 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.31486368614238514;  // std dev = 1.208, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return -0.1324052047254044;  // std dev = 0.618, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.1487824591597172;  // std dev = 0.656, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.04527750587752104;  // std dev = 1.651, 30.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16031521623463688;  // std dev = 0.051, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(E, A) )
%   | | then return 0.2828084183859441;  // std dev = 0.102, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.17605315056396675;  // std dev = 0.033, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1167147107156791;  // std dev = 0.976, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.24800240485471606;  // std dev = 0.138, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07198757592050632;  // std dev = 0.074, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.3182303553241129;  // std dev = 0.031, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.42541963500551405;  // std dev = 0.236, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.13015806150710768;  // std dev = 0.035, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.11837065802579981;  // std dev = 0.182, 108.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=104 */
%   | else return -0.06117700504739192;  // std dev = 0.042, 209.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.1654555224833961;  // std dev = 1.045, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.0932746772221381;  // std dev = 1.83e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.02705203207303094;  // std dev = 0.437, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.002092498215360329;  // std dev = 0.608, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.19591552718211624;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.006599593774970547;  // std dev = 1.009, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
%   | | | else return -0.03681408176766019;  // std dev = 1.428, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.695', 'seconds']
Refined model CLL: -0.10391


******************************************
Best model found
******************************************
Results 

CLL : -0.101888 

AUC ROC : 0.993972 

AUC PR : 0.416885 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 20.086 

Total Inference Time : 15.608378887176514 

Total revision time: 49.187000415802004
Best scored revision CLL: -0.10391


Results 

CLL : -0.101888 

AUC ROC : 0.993972 

AUC PR : 0.416885 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 49.204559467315676 

Total Inference Time : 15.608378887176514 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.365
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8391013160518921;  // std dev = 1.401, 105.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | | else return -0.04661296966239256;  // std dev = 0.294, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0.26723984419042146;  // std dev = 0.492, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.701163929534371;  // std dev = 1.407, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03525325993095007;  // std dev = 0.266, 202.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09719957455410579;  // std dev = 0.993, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7452075089279165;  // std dev = 0.089, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.10881432821780715;  // std dev = 3.211, 61.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5261942187364889;  // std dev = 1.937, 74.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=70 */
%   | | else return 0.7303013325237695;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8167245390192223;  // std dev = 0.082, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5835787114402637;  // std dev = 0.120, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5645710874452804;  // std dev = 3.65e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5645710874452804;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04696761842180065;  // std dev = 3.678, 225.000 (wgt'ed) examples reached here.  /* #neg=204 #pos=21 */
%   | | | else return -0.0030666835221740143;  // std dev = 2.851, 73.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.485885839816856;  // std dev = 2.779, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11750390066996441;  // std dev = 0.041, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | | | else return -0.12141652677485629;  // std dev = 0.004, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1534836226614323;  // std dev = 0.221, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.31382224561356303;  // std dev = 1.405, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.4076637904099606;  // std dev = 0.132, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3120136259406453;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5952779866657151;  // std dev = 0.995, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.08085414247391741;  // std dev = 2.308, 225.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=9 */
%   | | else return -0.10829425761242949;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04134819512039535;  // std dev = 3.237, 263.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25793564804345875;  // std dev = 0.109, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5340770356541307;  // std dev = 0.772, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11164997562616154;  // std dev = 0.091, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.11647655602187781;  // std dev = 0.153, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27839525233610835;  // std dev = 1.757, 109.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else return -0.07203005352441953;  // std dev = 2.005, 210.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.012924489432464714;  // std dev = 0.713, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19918487217412828;  // std dev = 0.070, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.22189828108337645;  // std dev = 0.039, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03742454179886368;  // std dev = 0.157, 182.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.013641523836041582;  // std dev = 1.578, 60.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=13 */
%   | | | else return 0.06728237715967826;  // std dev = 1.657, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.11041650732105765;  // std dev = 0.263, 84.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2507392088829593;  // std dev = 1.305, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09271927850576273;  // std dev = 0.252, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.44610327108190123;  // std dev = 0.584, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10755951153704878;  // std dev = 0.154, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1545448862932653;  // std dev = 2.197, 98.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=94 */
%   | | else return 0.14295263030991853;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.0849957334839026;  // std dev = 0.015, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07926758550926087;  // std dev = 1.29e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.03791146548897314;  // std dev = 0.489, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.019386466517170856;  // std dev = 1.002, 38.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.209271609056357;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02128182237656145;  // std dev = 1.372, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.606', 'seconds']
Parameter learned model CLL:-0.111393 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 103], 'true,false,true': [0.0, 174, 0], 'true,false,false': [0.294, 19, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.49e-08, 23, 0], 'false,false': [0.492, 13, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.407, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.266, 180, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.993, 21, 1], 'false,false,false,true': [0.089, 0, 4], 'false,false,false,false': [3.211, 44, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.937, 4, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.082, 0, 2], 'true,false,false': [0.12, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [3.65e-08, 0, 9], 'false,false,true,false': [2.98e-08, 0, 8], 'false,false,false,true': [3.678, 204, 21], 'false,false,false,false': [2.851, 62, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.779, 5, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.041, 175, 0], 'false,true,false,false': [0.004, 31, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.221, 58, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.405, 2, 73], 'true,false': [0.132, 0, 4], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.995, 1, 23], 'false,false,true,false': [2.308, 216, 9], 'false,false,false': [0.0, 14, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.237, 172, 91], 'false,true': [0.109, 0, 13], 'false,false,true': [0.772, 0, 22], 'false,false,false,true': [0.091, 33, 0], 'false,false,false,false': [0.153, 32, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.757, 2, 107], 'true,false': [2.005, 199, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.713, 23, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.07, 0, 80], 'true,false,true': [0.039, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.157, 160, 22], 'false,false,false,true': [1.578, 47, 13], 'false,false,false,false': [1.657, 20, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.263, 7, 77], 'false,true,true,true': [1.305, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.252, 210, 0], 'false,false,true': [0.584, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.154, 37, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.197, 4, 94], 'true,true,false': [0.007, 0, 9], 'true,false,true': [0.015, 158, 0], 'true,false,false,true': [1.29e-08, 28, 0], 'true,false,false,false': [0.489, 14, 2], 'false,true': [1.002, 26, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.372, 21, 8]}]
{'': [0.2275000000000023, 0.23268698060941828], 'false': [0.2253061224489791, 0.24173553719008264], 'true': [0.01868480725623786, 0.010151216305062292], 'false,true': [-1.4802973661668753e-16, 9.654113257610057e-18], 'true,false': [-1.8376105235175005e-16, 0.08616780045351478], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.023554202529508912, 0.10028023967710616], 'false': [0.07066145912570561, 0.15877757202149317], 'false,false': [0.04482431911114923, 0.18214574458875502], 'false,false,false': [0.001986731201513825, 0.16903660235668094], 'false,true': [nan, 0.07066145912570561], 'false,false,true': [nan, 0.04482431911114923]}
{'': [0.049183201663066396, 0.08751848605208389], 'false': [nan, 0.08751848605208401], 'false,false': [1.0449157878825003e-16, 0.07303174424885873], 'false,false,false': [0.06012564004029334, 0.11135566236447823], 'true': [0.05057231119981438, 0.015593383378108042], 'true,true': [0.05070025795864173, 0.0], 'true,false': [0.0033693212742275103, 0.0035864221242226657], 'false,false,true': [1.4802973661668753e-16, 1.1102230246251565e-16]}
{'': [0.058963651571111594, 0.0004082954135895612], 'false': [1.0019497004714892e-05, 0.000845518136151237], 'false,false': [nan, 0.000845518136151237], 'false,false,false': [nan, 0.000845518136151237], 'false,true': [nan, 1.0019497004712735e-05], 'false,true,false': [9.419244402774244e-06, 4.031045567844519e-07]}
{'': [0.025643401429667822, 0.06468256532260866], 'false': [-1.0449157878825003e-16, 0.06214604728085384], 'false,false': [0.06518365801285213, -3.96508223080413e-18], 'false,false,true': [0.04121797266675823, 0.02367689840431739], 'true': [0.02633184854001261, 0.004374667924207987], 'false,true': [-1.0449157878825003e-16, nan]}
{'': [0.03983793312582438, 0.08033592980283213], 'false': [0.0009099530253761687, 0.08657587673186774], 'false,false': [0.027086059215204784, 0.0004944559204506623], 'true': [nan, 0.03983793312582439], 'true,false': [nan, 0.03983793312582438], 'false,false,false': [0.00025042131171234346, 0.0007342894724899334]}
{'': [0.04990218783561318, 0.016387189804538925], 'true': [0.02833608425232781, 0.01913686721211439], 'false': [nan, 0.016387189804538925], 'false,false': [nan, 0.016387189804538925], 'false,false,false': [nan, 0.016387189804538925]}
{'': [8.999147350809653e-05, 0.03696845644618074], 'false': [nan, 0.036968456446180645], 'false,false': [0.024752567960360575, 0.060260106712489096], 'false,false,false': [0.04147568536757656, 0.09470958780226738], 'true': [6.0579745730293676e-05, 0.0007631445414222129], 'true,false': [0.0007631445414222129, nan]}
{'': [0.06935879418244882, 0.032423397856432654], 'false': [0.021116762836477322, 0.07288942535576377], 'false,false': [0.020095115426870622, 0.0006421573735042446], 'false,true': [0.05163345997025668, 0.00030151570827704316], 'false,true,true': [0.05163345997025668, nan], 'false,false,false': [nan, 0.0006421573735042446]}
{'': [0.028904863436079623, 0.04295689482294714], 'false': [0.026421267421082844, 0.0638647979231392], 'false,false': [0.0, 0.06488902700441809], 'false,false,false': [nan, 0.06488902700441809], 'true': [0.04512815878511482, 0.001343693249831197], 'true,true': [0.049260787114405596, 5.350713806421023e-06], 'true,false': [1.4004458272789568e-06, 0.005826424562352676], 'true,false,false': [5.9476233462061954e-18, 0.014934276579021922]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 14.435
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.8438632208137985;  // std dev = 0.993, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995121;  // std dev = 8.43e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.1321892291516961;  // std dev = 0.098, 207.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.17393840878372288;  // std dev = 0.465, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then return 0.6714752268930565;  // std dev = 0.227, 56.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=53 */
%   | | else return 0.5766162693538116;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.7209730185153586;  // std dev = 0.007, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.7392851667556052;  // std dev = 0.071, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.06242023028045574;  // std dev = 2.823, 156.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=12 */
%   | | | else return -0.06460735065602145;  // std dev = 1.411, 41.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=3 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.09425039899781154;  // std dev = 0.177, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7485124095828778;  // std dev = 0.101, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.10493748214674667;  // std dev = 3.140, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.5379638805485729;  // std dev = 1.340, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | | | else return 0.5581737967767146;  // std dev = 0.004, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.6308579598858953;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.5088209971360281;  // std dev = 0.411, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.56745878464694;  // std dev = 0.017, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7319833263248621;  // std dev = 0.000665, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11965991448122101;  // std dev = 0.036, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1663038222194311;  // std dev = 1.885, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
%   | | | else return 0.07957449806236806;  // std dev = 2.411, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(D, E) )
%   | | | then return 0.42379354705774314;  // std dev = 1.023, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | | | else return 0.26313958324608167;  // std dev = 0.778, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.4306726997807378;  // std dev = 0.047, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.5353260441381699;  // std dev = 0.407, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.507214809710408;  // std dev = 0.242, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.6616396813389231;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7518417201352342;  // std dev = 0.191, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(I, A) )
%   | then return -0.10737718134756025;  // std dev = 0.002, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else return -0.16929264350999718;  // std dev = 0.126, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.3364150459403775;  // std dev = 0.064, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.2550159084980728;  // std dev = 1.353, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | else return 0.3401367011620617;  // std dev = 0.014, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.44490615517576554;  // std dev = 0.390, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), tweets(A, H) )
%   | | then return 0.3476340548843339;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.3161279624522732;  // std dev = 0.002, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.055976365756587564;  // std dev = 2.003, 192.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=15 */
%   | | | else return 0.08128768071705393;  // std dev = 2.415, 51.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=17 */
%   | | else return -0.09504999145368574;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then return 0.2506583444815779;  // std dev = 0.147, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | else return 0.2638778034098761;  // std dev = 0.012, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), follows(G, A) )
%   | | | then return -0.04751476624602549;  // std dev = 1.843, 157.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=14 */
%   | | | else return -0.025316756438027256;  // std dev = 0.506, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else return -0.03347090525513513;  // std dev = 0.159, 39.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.27212854681255044;  // std dev = 0.052, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.14467128752015476;  // std dev = 1.075, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5304456161010019;  // std dev = 0.312, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12747568981045868;  // std dev = 0.035, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(A, C) )
%   | then if ( tweets(E, D), follows(E, C) )
%   | | then if ( follows(C, E), recursion_accounttype(E, B) )
%   | | | then return 0.20572878877294204;  // std dev = 0.998, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | | else return -0.2300303635189663;  // std dev = 0.913, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.12398461412153546;  // std dev = 0.822, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.2342587045420216;  // std dev = 0.043, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.2505008053061945;  // std dev = 0.111, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.46480178836839064;  // std dev = 0.045, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.08813108629447325;  // std dev = 0.051, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.008027245935725865;  // std dev = 1.252, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
%   | | | else return 0.0492244948990048;  // std dev = 1.432, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.12532186785851465;  // std dev = 1.677, 45.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=42 */
%   | | | else return 0.20243542228481076;  // std dev = 0.112, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.18502627356138068;  // std dev = 0.026, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.2727475761216199;  // std dev = 0.081, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(H, A), follows(A, H) )
%   | | then return 0.17469344451364796;  // std dev = 0.018, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(G, I), follows(I, G) )
%   | | | then return -0.10737655417603433;  // std dev = 0.958, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.19731873519061646;  // std dev = 0.093, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(J, A) )
%   | | then return -0.054954573347823756;  // std dev = 0.104, 246.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=15 */
%   | | else return 0.022530155830528094;  // std dev = 0.270, 53.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.1713734247396114;  // std dev = 0.016, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | | then return -0.21373559474974774;  // std dev = 1.015, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.16171044152456318;  // std dev = 0.077, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.2524298697192003;  // std dev = 0.361, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.2306533070217662;  // std dev = 0.181, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else return -0.07752441636471873;  // std dev = 0.042, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.2500084575380722;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.4400290956877274;  // std dev = 0.225, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.1400203679767188;  // std dev = 0.015, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.1368160500253615;  // std dev = 0.877, 72.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | | | else return 0.2559641329557949;  // std dev = 0.388, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.11936778434367008;  // std dev = 0.009, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06800907851070613;  // std dev = 0.043, 225.000 (wgt'ed) examples reached here.  /* #neg=223 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1188905835532023;  // std dev = 0.027, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.014536730171114436;  // std dev = 0.801, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
%   | | | else return -0.019401348668204452;  // std dev = 0.713, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | then return 0.19336159989700452;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.023710674415813697;  // std dev = 0.212, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.224', 'seconds']
Refined model CLL: -0.107196


******************************************
Best model found
******************************************
Results 

CLL : -0.10713 

AUC ROC : 0.994178 

AUC PR : 0.349172 

Precision : 0.340659 

Recall : 0.99359 

F1 : 0.507365 

Total Learning Time : 14.435 

Total Inference Time : 10.868375062942505 

Total revision time: 35.64821891784668
Best scored revision CLL: -0.107196


Results 

CLL : -0.10713 

AUC ROC : 0.994178 

AUC PR : 0.349172 

Precision : 0.340659 

Recall : 0.99359 

F1 : 0.507365 

Total Learning Time : 35.677733707427976 

Total Inference Time : 10.868375062942505 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.738
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.995, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048816;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | | else return -0.07935106490048771;  // std dev = 0.242, 64.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 5.05e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return 0.1568502338008104;  // std dev = 0.458, 77.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7017627412284891;  // std dev = 1.417, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03775818937608963;  // std dev = 0.261, 180.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06250663607756816;  // std dev = 1.789, 53.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7559073189512865;  // std dev = 0.134, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.0919084668247877;  // std dev = 5.094, 157.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5359074505742801;  // std dev = 1.575, 70.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7337170072496582;  // std dev = 0.224, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5952748085658657;  // std dev = 0.185, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5958198429374576;  // std dev = 0.185, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5620810313445583;  // std dev = 5.16e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.006778145898937792;  // std dev = 4.585, 242.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=34 */
%   | | | else return 0.034970894697216745;  // std dev = 4.181, 120.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5416128939618866;  // std dev = 2.625, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12220306657364706;  // std dev = 0.047, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | | | else return -0.12662659509956256;  // std dev = 0.011, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1557818171859674;  // std dev = 0.211, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.27144901764673535;  // std dev = 2.057, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   | else return -0.1302504067457954;  // std dev = 0.857, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2489532547212597;  // std dev = 0.981, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.5100375479580357;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6162798207073349;  // std dev = 0.973, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.10165019104171451;  // std dev = 1.806, 274.000 (wgt'ed) examples reached here.  /* #neg=269 #pos=5 */
%   | | else return 0.007152342905256194;  // std dev = 0.298, 77.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03267017390715739;  // std dev = 3.217, 232.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2643927436694557;  // std dev = 0.286, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.49873489272390814;  // std dev = 1.647, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11985540222479434;  // std dev = 0.144, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | | else return -0.12119228330398162;  // std dev = 0.152, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2747565244543726;  // std dev = 2.134, 124.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=121 */
%   | else return -0.08861943389323057;  // std dev = 1.704, 282.000 (wgt'ed) examples reached here.  /* #neg=275 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.037948455312596274;  // std dev = 2.286, 88.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19476879782283008;  // std dev = 0.090, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.32157544911506036;  // std dev = 0.077, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0502918528729299;  // std dev = 0.148, 188.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return 4.0803494121760086E-4;  // std dev = 2.060, 116.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=28 */
%   | | | else return 0.04566692132422025;  // std dev = 2.623, 80.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1374156604650762;  // std dev = 0.209, 82.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28191304560317443;  // std dev = 0.875, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09264696980980833;  // std dev = 0.090, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4081713411490184;  // std dev = 0.817, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11309713414304258;  // std dev = 0.213, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18002419705629852;  // std dev = 0.947, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.10844623337590023;  // std dev = 1.066, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08299632219214712;  // std dev = 0.014, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09667883535018994;  // std dev = 0.007, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.00855883977604516;  // std dev = 0.977, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.0013991039093492446;  // std dev = 1.546, 80.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1857798714094151;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.053074505053663575;  // std dev = 1.948, 61.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.027', 'seconds']
Parameter learned model CLL:-0.110568 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.995, 1, 104], 'true,false,true': [0.0, 161, 0], 'true,false,false': [0.242, 60, 4], 'false,true,true,true': [0.977, 1, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.05e-08, 48, 0], 'false,false': [0.458, 54, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.417, 2, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.261, 161, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.789, 49, 4], 'false,false,false,true': [0.134, 0, 8], 'false,false,false,false': [5.094, 117, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.575, 3, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.224, 0, 3], 'true,false,false': [0.185, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.185, 0, 6], 'false,false,true,false': [5.16e-08, 0, 15], 'false,false,false,true': [4.585, 208, 34], 'false,false,false,false': [4.181, 97, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.625, 3, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.047, 173, 0], 'false,true,false,false': [0.011, 31, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.211, 89, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.057, 4, 77], 'true,false': [0.857, 1, 1], 'false,true,true': [0.981, 1, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.973, 1, 39], 'false,false,true,false': [1.806, 269, 5], 'false,false,false': [0.298, 64, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.217, 150, 82], 'false,true': [0.286, 0, 22], 'false,false,true': [1.647, 2, 52], 'false,false,false,true': [0.144, 63, 0], 'false,false,false,false': [0.152, 67, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.134, 3, 121], 'true,false': [1.704, 275, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.286, 60, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.09, 0, 83], 'true,false,true': [0.077, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.148, 169, 19], 'false,false,false,true': [2.06, 88, 28], 'false,false,false,false': [2.623, 56, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.209, 4, 78], 'false,true,true,true': [0.875, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.09, 199, 0], 'false,false,true': [0.817, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.213, 91, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.947, 1, 85], 'true,true,false': [1.066, 1, 19], 'true,false,true': [0.014, 172, 0], 'true,false,false,true': [0.007, 19, 0], 'true,false,false,false': [0.977, 21, 4], 'false,true': [1.546, 55, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.948, 40, 21]}]
{'': [0.22016528925620055, 0.21683259506162092], 'true': [0.009433106575965852, 0.01746172839506162], 'false': [0.22370343316289376, 0.2094788328554572], 'false,true': [0.03698224852071082, 5.3198186596622086e-17], 'false,true,true': [0.04338842975206614, 0.0], 'true,false': [-1.5170749404815803e-16, 0.0585937499999999]}
{'': [0.023094210612415195, 0.11946940316028021], 'false': [0.06826896838744882, 0.15560759935518784], 'false,false': [0.06035391115065207, 0.17773811732847533], 'false,false,false': [0.002244382153675617, 0.16530377141244967], 'false,true': [nan, 0.06826896838744882], 'false,false,true': [nan, 0.06035391115065207]}
{'': [0.03327597634356806, 0.11753532718277626], 'false': [nan, 0.11753532718277536], 'false,false': [0.0018584610737979986, 0.10676376323265291], 'false,false,false': [0.08688703088279053, 0.14568330863208714], 'true': [0.03542203491623011, 0.01146714904940126], 'true,true': [0.03542203491623011, nan], 'true,false': [0.016747667991112936, 0.004259797434513102], 'false,false,true': [0.005691537038505705, 1.7763568394002506e-16]}
{'': [0.0433383825721273, 0.00039115736529393935], 'false': [1.4118905429249877e-05, 0.0005014570056082152], 'false,false': [nan, 0.0005014570056082152], 'false,false,false': [nan, 0.0005014570056082152], 'false,true': [nan, 1.4118905429243346e-05], 'false,true,false': [1.295455870329348e-05, 4.022615276932928e-06]}
{'': [0.06361452406955156, 0.07640285901842903], 'false': [0.04671289285166549, 0.07425886486188399], 'false,false': [0.07069951135300827, 0.08853198730310863], 'false,false,true': [0.02367849891635787, 0.01190484791915668], 'true': [0.05223439987948387, 0.3670353774764417], 'false,true': [0.045838906858294844, 0.0]}
{'': [0.04461187857996876, 0.0887390689273116], 'false': [0.003711926120335511, 0.09449606154757477], 'false,false': [0.050220270194968435, 0.00033661927619060584], 'true': [nan, 0.04461187857996916], 'true,false': [nan, 0.04461187857996876], 'false,false,false': [0.000328778746046005, 0.0003431255856428026]}
{'': [0.04637599996398445, 0.059363893120623505], 'false': [nan, 0.05936389312062335], 'false,false': [nan, 0.059363893120623505], 'false,false,false': [nan, 0.059363893120623505], 'true': [0.03671270559410562, 0.01029698300094888]}
{'': [0.0005337471282633654, 0.041096437472695306], 'false': [nan, 0.041096437472695466], 'false,false': [0.021808358513020945, 0.057254645280887285], 'false,false,false': [0.03659574210490147, 0.08599775616969346], 'true': [9.693176549488591e-05, 0.00296000909031173], 'true,false': [0.00296000909031173, nan]}
{'': [0.0435463459444985, 0.03813757620894765], 'false': [0.022149958557774133, 0.06307694789051162], 'false,false': [0.016689203132260876, 0.0004989750358840587], 'false,true': [0.020134208752480908, 4.0285751360310136e-05], 'false,true,true': [0.020134208752480908, nan], 'false,false,false': [nan, 0.0004989750358840587]}
{'': [0.022887875934308168, 0.044266581656271925], 'false': [0.029866844590265125, 0.060804550189369484], 'false,false': [0.0, 0.06223907170490096], 'false,false,false': [nan, 0.062239071704901], 'true': [0.019978299000616633, 0.005020421686211123], 'true,true': [0.010433662870881082, 0.05686350964075928], 'true,false': [1.216177161510534e-06, 0.02358672234700593], 'true,false,false': [2.7523677102867982e-06, 0.038157413649912444]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 35.272
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else return 0.7711924133603816;  // std dev = 0.282, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | else return -0.12532213928065372;  // std dev = 0.127, 242.000 (wgt'ed) examples reached here.  /* #neg=238 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048766;  // std dev = 5.37e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.324815601766179;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7230794671426422;  // std dev = 0.214, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.6840530773862766;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.1272692531922917;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | | else return -0.09693976073179682;  // std dev = 0.176, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.042181102219157274;  // std dev = 1.305, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return -0.08887130165780546;  // std dev = 1.194, 45.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=2 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.6083623010998434;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.11107008431889402;  // std dev = 4.734, 138.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D) )
%   | | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | | then return 0.5128091336457159;  // std dev = 1.384, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | | | else return 0.5618256063781858;  // std dev = 0.060, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.7304569328242675;  // std dev = 0.227, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3098807311668031;  // std dev = 0.445, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5646875956367403;  // std dev = 0.046, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.631742669727133;  // std dev = 0.359, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.11695003884313789;  // std dev = 0.097, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.1194674848309235;  // std dev = 3.470, 81.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=25 */
%   | | | else return 0.08503146437828818;  // std dev = 3.076, 52.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.427215198739437;  // std dev = 0.212, 86.000 (wgt'ed) examples reached here.  /* #pos=86 */
%   | | | else return 0.3414429478960314;  // std dev = 1.271, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else return 0.6506385998089472;  // std dev = 0.290, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H) )
%   | | then if ( recursion_accounttype(H, B), follows(H, I) )
%   | | | then return 0.3947906229442482;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.644773592314585;  // std dev = 0.921, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.6782518355346804;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7822936166813266;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(K, A) )
%   | then return -0.10455422006145587;  // std dev = 0.004, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else return -0.1657248340978821;  // std dev = 0.264, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.24603610081825134;  // std dev = 1.660, 37.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=34 */
%   | | | else return 0.3271171818993324;  // std dev = 2.11e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.32305358511971033;  // std dev = 0.054, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return 0.4206332120207708;  // std dev = 0.076, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.33573028857345993;  // std dev = 0.039, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3827859883758427;  // std dev = 0.415, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09509186727554489;  // std dev = 0.054, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.04028178784746537;  // std dev = 3.050, 108.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=29 */
%   | | | else return 0.09997605155228363;  // std dev = 2.008, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(D, A) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.22114630122215448;  // std dev = 1.373, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return 0.2566898601003587;  // std dev = 0.017, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.2687543760588581;  // std dev = 0.036, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( tweets(A, G) )
%   | | then return -0.053140417334336304;  // std dev = 0.099, 145.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=14 */
%   | | else return -0.0647915156385732;  // std dev = 0.106, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.267938025222384;  // std dev = 0.042, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.3349525727566584;  // std dev = 0.197, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5014544630745256;  // std dev = 0.966, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return -0.1294267844932067;  // std dev = 0.033, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then return 0.20827813212294757;  // std dev = 0.110, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else return 0.24916989742553194;  // std dev = 0.149, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, F), tweets(A, H) )
%   | | | then return 0.1498205868117311;  // std dev = 1.354, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return 0.390039749706494;  // std dev = 0.122, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.08197092081996214;  // std dev = 0.044, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.27408114275368717;  // std dev = 1.919, 40.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=37 */
%   | | | else return -0.13449002775786387;  // std dev = 0.451, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.006492764143150002;  // std dev = 0.848, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.051552556169292656;  // std dev = 1.466, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.06099613259184572;  // std dev = 2.465, 53.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=46 */
%   | | | else return 0.17235258468322287;  // std dev = 0.060, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.17829775787343566;  // std dev = 0.047, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.27253125079699153;  // std dev = 0.035, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.05500683755702734;  // std dev = 0.123, 248.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=23 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.261892491568758;  // std dev = 1.005, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.11242538292990634;  // std dev = 0.054, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.039008279782362446;  // std dev = 1.246, 39.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=14 */
%   | | | else return 0.021398287917114563;  // std dev = 1.572, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then return 0.18621223404157355;  // std dev = 0.028, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else return 0.15801346445348446;  // std dev = 0.053, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.07258613903721223;  // std dev = 1.358, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0.2570568262754162;  // std dev = 0.147, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07218478339467355;  // std dev = 0.033, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.29539702789360395;  // std dev = 0.193, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.4025588669751181;  // std dev = 0.233, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.10474356652674542;  // std dev = 0.054, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | | | else return -0.16655139453444534;  // std dev = 0.226, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.12367968023942603;  // std dev = 1.374, 68.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=66 */
%   | | | else return -0.19194516228178174;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.17289524516638252;  // std dev = 0.035, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.06166444643873392;  // std dev = 0.044, 217.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.005153419351296124;  // std dev = 0.134, 56.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=19 */
%   | | else return -0.011756094004917906;  // std dev = 0.138, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.16827934566795677;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.01786428918393475;  // std dev = 1.145, 41.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=14 */
%   | | | else return -0.023724317279162646;  // std dev = 1.193, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.852', 'seconds']
Refined model CLL: -0.102538


******************************************
Best model found
******************************************
Results 

CLL : -0.102086 

AUC ROC : 0.992913 

AUC PR : 0.354854 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 35.272 

Total Inference Time : 18.75581932067871 

Total revision time: 66.57616163253783
Best scored revision CLL: -0.102538


Results 

CLL : -0.102086 

AUC ROC : 0.992913 

AUC PR : 0.354854 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 66.60567642211913 

Total Inference Time : 18.75581932067871 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.534
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8391013160518921;  // std dev = 1.401, 105.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048838;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | | else return -0.06777699082641374;  // std dev = 0.262, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return 0.15814893509951236;  // std dev = 0.458, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7011933570465497;  // std dev = 1.407, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.030177192306548667;  // std dev = 0.268, 196.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10046581948790241;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7604969749842876;  // std dev = 0.089, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15444390824165394;  // std dev = 3.155, 53.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5786841265996681;  // std dev = 0.386, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.7293003756702119;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8199745924264683;  // std dev = 0.081, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.4213687377892746;  // std dev = 0.808, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5645638532493051;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5645638532493051;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.042789840610335514;  // std dev = 3.677, 214.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=21 */
%   | | | else return 3.0250743584442054E-4;  // std dev = 2.857, 74.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.46777432397106405;  // std dev = 2.964, 134.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11828604938343885;  // std dev = 0.051, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | | | else return -0.12221463548737005;  // std dev = 0.000401, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15622139988811495;  // std dev = 0.144, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3079718617452271;  // std dev = 1.410, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.44094857956188993;  // std dev = 0.114, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3159098432550508;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6427355612724203;  // std dev = 0.180, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.0868252990317394;  // std dev = 2.357, 272.000 (wgt'ed) examples reached here.  /* #neg=263 #pos=9 */
%   | | else return -0.10627968710336312;  // std dev = 1.32e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0270222031978233;  // std dev = 3.392, 279.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26044400539896173;  // std dev = 0.107, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5024757974126894;  // std dev = 1.295, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11326760939877693;  // std dev = 0.077, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.11409493221896462;  // std dev = 0.125, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27790614184216483;  // std dev = 1.751, 109.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else return -0.07528212990158586;  // std dev = 2.089, 249.000 (wgt'ed) examples reached here.  /* #neg=238 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.018834480429344904;  // std dev = 1.037, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15041809719949312;  // std dev = 1.953, 84.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.2242535832672235;  // std dev = 0.036, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04259312413086723;  // std dev = 0.159, 190.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.01385584655731482;  // std dev = 1.467, 73.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=13 */
%   | | | else return 0.08083387907276021;  // std dev = 1.830, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17014680492614734;  // std dev = 0.157, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.25378686525953137;  // std dev = 1.279, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09009489588936705;  // std dev = 0.043, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.46216612870463225;  // std dev = 0.616, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11078444578906181;  // std dev = 0.145, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18429868316114334;  // std dev = 1.178, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | | else return 0.05801798901982839;  // std dev = 0.881, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.0836357445356834;  // std dev = 0.015, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07781019918975308;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.0033786846691660427;  // std dev = 0.461, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.00913000792676842;  // std dev = 1.066, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2447314484359827;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0161649959337561;  // std dev = 1.423, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.792', 'seconds']
Parameter learned model CLL:-0.110226 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 103], 'true,false,true': [0.0, 193, 0], 'true,false,false': [0.262, 25, 2], 'false,true,true,true': [0.961, 1, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [2.58e-08, 29, 0], 'false,false': [0.458, 21, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.407, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.268, 174, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.983, 29, 1], 'false,false,false,true': [0.089, 0, 4], 'false,false,false,false': [3.155, 36, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.386, 0, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.081, 0, 2], 'true,false,false': [0.808, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.677, 193, 21], 'false,false,false,false': [2.857, 63, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.964, 8, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.051, 156, 0], 'false,true,false,false': [0.000401, 37, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.144, 41, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.41, 2, 73], 'true,false': [0.114, 0, 4], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.18, 0, 23], 'false,false,true,false': [2.357, 263, 9], 'false,false,false': [1.32e-09, 13, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.392, 188, 91], 'false,true': [0.107, 0, 13], 'false,false,true': [1.295, 1, 22], 'false,false,false,true': [0.077, 32, 0], 'false,false,false,false': [0.125, 29, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.751, 2, 107], 'true,false': [2.089, 238, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.037, 16, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.953, 4, 80], 'true,false,true': [0.036, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.159, 168, 22], 'false,false,false,true': [1.467, 60, 13], 'false,false,false,false': [1.83, 17, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.157, 2, 77], 'false,true,true,true': [1.279, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.043, 213, 0], 'false,false,true': [0.616, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.145, 45, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.178, 1, 94], 'true,true,false': [0.881, 1, 9], 'true,false,true': [0.015, 166, 0], 'true,false,false,true': [0.0, 15, 0], 'true,false,false,false': [0.461, 7, 2], 'false,true': [1.066, 31, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.423, 24, 8]}]
{'': [0.21869822485207302, 0.20659722222222243], 'true': [0.01868480725623786, 0.009008264462809753], 'false': [0.2040816326530607, 0.21000000000000008], 'false,true': [0.07100591715976314, 2.2970131543968756e-17], 'false,true,true': [0.07100591715976314, nan], 'true,false': [-2.277970558298249e-16, 0.0685871056241427]}
{'': [0.023563842173146637, 0.10259991739433019], 'false': [0.07178200990344961, 0.16127882616782221], 'false,false': [0.032222222222222194, 0.19869631480471528], 'false,false,false': [0.0019912315344615683, 0.18776652043447037], 'false,true': [nan, 0.07178200990344961], 'false,false,true': [nan, 0.032222222222222194]}
{'': [0.013731692137327401, 0.09014769777105783], 'false': [nan, 0.09014769777105786], 'false,false': [-2.612289469706251e-16, 0.07565129403598092], 'false,false,false': [0.06318695166514329, 0.11031700732017745], 'true': [0.002411798963511998, 0.1266592024835873], 'true,false': [0.0033002331804897755, 0.13060661096166992], 'true,true': [0.0021267426078830556, 0.0], 'false,false,true': [-4.9343245538895844e-17, -5.551115123125783e-17]}
{'': [0.0655506694850867, 0.0003015325418373446], 'false': [1.572880998489936e-05, 0.0005066209254689315], 'false,false': [nan, 0.0005066209254689315], 'false,false,false': [nan, 0.0005066209254689315], 'false,true': [nan, 1.572880998489936e-05], 'false,true,false': [1.6499520468346788e-05, 4.348417926036985e-09]}
{'': [0.02617037259887472, 0.058183571718557495], 'false': [-7.836868409118753e-17, 0.05502109553693974], 'false,false': [0.057199805213736396, 2.135044278125301e-18], 'false,false,true': [0.0014086043401458674, 0.02041928038927962], 'true': [0.026498562391653106, 0.0032293385273561293], 'false,true': [-7.836868409118753e-17, nan]}
{'': [0.0412331907244223, 0.08789658065147284], 'false': [0.0008774777728942042, 0.0957095597948521], 'false,false': [0.07293455175771667, 0.0003520644859534431], 'true': [nan, 0.04123319072442281], 'true,false': [nan, 0.0412331907244223], 'false,false,false': [0.0001842903193241905, 0.0005368355382717987]}
{'': [0.047176685974049754, 0.044801764899351955], 'true': [0.02813887658557567, 0.017530413613456978], 'false': [nan, 0.044801764899351955], 'false,false': [nan, 0.044801764899351955], 'false,false,false': [nan, 0.044801764899351955]}
{'': [0.04450731281175501, 0.036888784204758954], 'true': [0.04542486730092232, 0.0006451284964944654], 'false': [nan, 0.03688878420475891], 'false,false': [0.02525536027981736, 0.05732638757682679], 'false,false,false': [0.029497719419626766, 0.12884932588085032], 'true,false': [0.0006451284964944654, nan]}
{'': [0.024559662047573746, 0.032049720061999194], 'false': [0.020391249122267252, 0.07179782434822221], 'false,false': [0.02235423331857506, 0.00046635084412477066], 'false,true': [0.04956148421910648, 8.486166122178648e-06], 'false,true,true': [0.04956148421910648, nan], 'false,false,false': [nan, 0.00046635084412477066]}
{'': [0.023247001328267507, 0.04228759761713159], 'false': [0.026402375170956463, 0.06287624222256734], 'false,false': [0.0, 0.06325801499779674], 'false,false,false': [nan, 0.06325801499779674], 'true': [0.021973252110076273, 0.0014112322530386674], 'true,true': [0.014603324599754317, 0.07755949390844785], 'true,false': [1.3266557146415078e-06, 0.010168643473905632], 'true,false,false': [0.0, 0.023653851125938957]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 15.668
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.8581489350995126;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.8581489350995121;  // std dev = 8.43e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.1326767529738829;  // std dev = 0.095, 218.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.693584627373718;  // std dev = 0.163, 71.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   | else return 0.7313251035827906;  // std dev = 0.148, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.6639178566553986;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.12645459995517566;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | | else return -0.030920941157314384;  // std dev = 0.276, 43.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.026454599955175483;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return -0.12645459995517544;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.5422198280150733;  // std dev = 0.925, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.11853364866738972;  // std dev = 3.110, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5669276500470797;  // std dev = 0.178, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.7575765637339101;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.5404989333988958;  // std dev = 0.397, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.557611184428801;  // std dev = 0.014, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.5524379572309734;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10158538119869147;  // std dev = 1.173, 160.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=3 */
%   | | | else return -0.014620078597408829;  // std dev = 2.343, 84.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09102616070739532;  // std dev = 2.007, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return 0.19607135948706114;  // std dev = 2.186, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.4249568692410132;  // std dev = 0.023, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else if ( follows(D, F), follows(A, F) )
%   | | | then return 0.13982107230102325;  // std dev = 1.605, 11.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=7 */
%   | | | else return 0.5333344368733967;  // std dev = 0.220, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.41738188092319595;  // std dev = 0.004, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.5624418411578642;  // std dev = 0.745, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.7019979757523898;  // std dev = 0.224, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(I, A) )
%   | then return -0.10814664368839048;  // std dev = 0.007, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return -0.15029473762614162;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return -0.19819684314308783;  // std dev = 0.024, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.32286998307762693;  // std dev = 0.005, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.3458508015252344;  // std dev = 0.074, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.39823407950197437;  // std dev = 0.153, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.5017210592264442;  // std dev = 0.342, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.3222528966847217;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.20768848170954535;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.4840948881772212;  // std dev = 0.272, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08176662302648209;  // std dev = 2.050, 237.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=9 */
%   | | else return -0.09373472203877954;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.2568450970003723;  // std dev = 0.004, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else if ( tweets(A, F), tweets(D, G) )
%   | | | then return -0.21571856000854361;  // std dev = 0.998, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.267999497821168;  // std dev = 0.053, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, H) )
%   | | then return -0.05225518058803181;  // std dev = 0.132, 167.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=17 */
%   | | else return -0.03562931509492733;  // std dev = 0.205, 36.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=5 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.2784869772974642;  // std dev = 0.039, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( tweets(A, K) )
%   | | | then return 0.3111963416478839;  // std dev = 1.179, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return 0.5391527351308122;  // std dev = 0.413, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.11613571482110988;  // std dev = 0.024, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, D) )
%   then if ( follows(D, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, C), recursion_accounttype(D, B) )
%   | | then if ( follows(D, A), follows(E, C) )
%   | | | then return 0.19986232776901347;  // std dev = 1.013, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | | else return -0.06317062423652019;  // std dev = 1.325, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else if ( follows(A, C), follows(E, C) )
%   | | | then return 0.33105975105636526;  // std dev = 0.391, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.15299243117608902;  // std dev = 0.948, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.08619395629414574;  // std dev = 0.021, 214.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=1 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.23644119742387934;  // std dev = 0.061, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.22348540370533027;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.03249910588912467;  // std dev = 1.850, 57.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=17 */
%   | | | else return -0.07736253101758962;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1724130882960573;  // std dev = 0.098, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else return 0.23509277435804787;  // std dev = 0.104, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.07428036908466665;  // std dev = 0.075, 141.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=3 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.26380785622604686;  // std dev = 1.093, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.08632974865361175;  // std dev = 0.033, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.26494741132487054;  // std dev = 0.172, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.11425571662429858;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.11840300913836442;  // std dev = 0.800, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.11167020242907484;  // std dev = 1.208, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.15503968073537808;  // std dev = 4.34e-08, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.0377860570425509;  // std dev = 1.342, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else return 0.19363664159640148;  // std dev = 0.047, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return 0.2482600112034974;  // std dev = 0.046, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.1134483578950244;  // std dev = 0.731, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.14787025969756568;  // std dev = 0.232, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | else return -0.0741359355684861;  // std dev = 0.005, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.35130165147966735;  // std dev = 0.112, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12410906806460956;  // std dev = 0.032, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.12886380707173198;  // std dev = 0.113, 82.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=81 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.15039777963115888;  // std dev = 0.919, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.29201612996266213;  // std dev = 0.098, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.0658065507569253;  // std dev = 0.045, 194.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.17423220704768583;  // std dev = 0.086, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.0922594393964815;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.012196658116805169;  // std dev = 0.198, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.1809433846059323;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.015757051297966645;  // std dev = 0.233, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '40.454', 'seconds']
Refined model CLL: -0.103233


******************************************
Best model found
******************************************
Results 

CLL : -0.100324 

AUC ROC : 0.994887 

AUC PR : 0.366594 

Precision : 0.348315 

Recall : 0.99359 

F1 : 0.515807 

Total Learning Time : 15.668 

Total Inference Time : 40.36132454872131 

Total revision time: 66.51095900726318
Best scored revision CLL: -0.103233


Results 

CLL : -0.100324 

AUC ROC : 0.994887 

AUC PR : 0.366594 

Precision : 0.348315 

Recall : 0.99359 

F1 : 0.515807 

Total Learning Time : 66.5351139087677 

Total Inference Time : 40.36132454872131 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.773
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.830111551921941;  // std dev = 1.708, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048816;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   | | else return -0.05674468192176434;  // std dev = 0.279, 47.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.71e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return 0.1607805140468801;  // std dev = 0.459, 76.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7053230051017705;  // std dev = 1.416, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03633576255643775;  // std dev = 0.264, 178.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.062134694052181694;  // std dev = 1.791, 51.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7489622353486364;  // std dev = 0.144, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1619528395476082;  // std dev = 4.824, 122.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5018154869389441;  // std dev = 2.219, 73.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=67 */
%   | | else return -0.2677194286470321;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7325140531403022;  // std dev = 0.219, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5882907504700419;  // std dev = 0.197, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5980936208524669;  // std dev = 0.177, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5657582457802955;  // std dev = 5.96e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02445185811424948;  // std dev = 4.620, 274.000 (wgt'ed) examples reached here.  /* #neg=240 #pos=34 */
%   | | | else return 0.04424560144266873;  // std dev = 4.131, 109.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5446327923340291;  // std dev = 2.551, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12107011440794925;  // std dev = 0.063, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | | | else return -0.1281737314633134;  // std dev = 0.018, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1683545766356089;  // std dev = 0.247, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3041326123797841;  // std dev = 1.518, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.0716320346819973;  // std dev = 0.561, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2510830165318631;  // std dev = 0.974, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.5021738022120593;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6014683260525494;  // std dev = 1.111, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.10112943595048213;  // std dev = 1.779, 235.000 (wgt'ed) examples reached here.  /* #neg=230 #pos=5 */
%   | | else return 0.019513645648738222;  // std dev = 0.312, 69.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.033352175765135716;  // std dev = 3.185, 237.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.21841634752296155;  // std dev = 1.017, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5184198139743336;  // std dev = 1.106, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12185469541462507;  // std dev = 0.181, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | | | else return -0.12725217933933544;  // std dev = 0.190, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26252723088403923;  // std dev = 2.245, 126.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=121 */
%   | else return -0.09041798438945058;  // std dev = 1.668, 250.000 (wgt'ed) examples reached here.  /* #neg=243 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03924266488272013;  // std dev = 2.316, 84.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19973135978656156;  // std dev = 0.087, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return -0.06288484514577324;  // std dev = 0.903, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.047034286922572006;  // std dev = 0.153, 183.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.015105975909340404;  // std dev = 2.109, 130.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=28 */
%   | | | else return 0.0405057297360627;  // std dev = 2.539, 77.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15338809077539095;  // std dev = 0.172, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2919282750240835;  // std dev = 0.876, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09277083029558021;  // std dev = 0.103, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3939758555683956;  // std dev = 0.803, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11978534635068344;  // std dev = 0.258, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16774049480570546;  // std dev = 1.523, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   | | else return 0.16329416693462565;  // std dev = 0.356, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08242681312797163;  // std dev = 0.024, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09654376812125773;  // std dev = 0.010, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.010615244791443237;  // std dev = 0.999, 26.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.02159664961968322;  // std dev = 1.292, 69.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.17922018185160005;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02969059096224624;  // std dev = 1.940, 66.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.377', 'seconds']
Parameter learned model CLL:-0.111592 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.708, 3, 104], 'true,false,true': [0.0, 159, 0], 'true,false,false': [0.279, 43, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.894, 1, 4], 'false,true,false': [4.71e-08, 45, 0], 'false,false': [0.459, 53, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.416, 2, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.264, 159, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.791, 47, 4], 'false,false,false,true': [0.144, 0, 8], 'false,false,false,false': [4.824, 82, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [2.219, 6, 67], 'true,true,false': [0.0, 1, 0], 'true,false,true': [0.219, 0, 3], 'true,false,false': [0.197, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.177, 0, 6], 'false,false,true,false': [5.96e-08, 0, 15], 'false,false,false,true': [4.62, 240, 34], 'false,false,false,false': [4.131, 86, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.551, 3, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.063, 150, 0], 'false,true,false,false': [0.018, 36, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.247, 93, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.518, 2, 77], 'true,false': [0.561, 1, 1], 'false,true,true': [0.974, 1, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.111, 1, 39], 'false,false,true,false': [1.779, 230, 5], 'false,false,false': [0.312, 56, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.185, 155, 82], 'false,true': [1.017, 1, 22], 'false,false,true': [1.106, 0, 52], 'false,false,false,true': [0.181, 90, 0], 'false,false,false,false': [0.19, 70, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.245, 5, 121], 'true,false': [1.668, 243, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.316, 56, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.087, 0, 83], 'true,false,true': [0.903, 1, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.153, 164, 19], 'false,false,false,true': [2.109, 102, 28], 'false,false,false,false': [2.539, 53, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.172, 3, 78], 'false,true,true,true': [0.876, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.103, 194, 0], 'false,false,true': [0.803, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.258, 103, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.523, 2, 85], 'true,true,false': [0.356, 0, 19], 'true,false,true': [0.024, 164, 0], 'true,false,false,true': [0.01, 27, 0], 'true,false,false,false': [0.999, 22, 4], 'false,true': [1.292, 44, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.94, 45, 21]}]
{'': [0.22598985393338952, 0.21990837151187081], 'true': [0.02725128832212642, 0.019040437364501735], 'false': [0.22812933941678357, 0.21104570637119213], 'false,true': [0.03698224852071082, 4.9343245538895844e-17], 'false,true,true': [0.0, 0.15999999999999986], 'true,false': [-1.424437088198314e-16, 0.07786328655500212]}
{'': [0.02304690004152889, 0.12889893685464132], 'false': [0.06952974547876392, 0.17441704815195339], 'false,false': [0.06291031759076661, 0.19908352668387141], 'false,false,false': [0.0026087720701363226, 0.19076219218058046], 'false,true': [nan, 0.06952974547876392], 'false,false,true': [nan, 0.06291031759076661]}
{'': [0.06845049556852918, 0.11265186565038936], 'false': [nan, 0.1126518656503878], 'false,false': [0.0017070636425436565, 0.10125502370436794], 'false,false,false': [0.0779140814230338, 0.15655234634043505], 'true': [0.07443799524432133, 0.012019257380867933], 'true,true': [0.06745520750788071, 0.0], 'true,false': [0.01600349520458444, 0.0048523424606695675], 'false,false,true': [0.005227882405290189, 2.3684757858670006e-16]}
{'': [0.04093911531056636, 0.0007078471815747303], 'false': [3.112018397354704e-05, 0.000656175517171198], 'false,false': [nan, 0.000656175517171198], 'false,false,false': [nan, 0.000656175517171198], 'false,true': [nan, 3.112018397353988e-05], 'false,true,false': [2.666643427843359e-05, 8.982816894656828e-06]}
{'': [0.033640030609101035, 0.08308599807167528], 'false': [0.045887316385543726, 0.08147225436683751], 'false,false': [0.07735058890069507, 0.09762714506348878], 'false,false,true': [0.030864034775086546, 0.013460486196911942], 'false,true': [0.04520667293264004, 0.0], 'true': [0.029167288843170148, 0.1575915405886242]}
{'': [0.042789433998330115, 0.08189997549555275], 'false': [0.04500134310097451, 0.08255327555011341], 'false,false': [0.023532978601272382, 0.00043766746625109875], 'true': [nan, 0.042789433998329664], 'true,false': [nan, 0.042789433998330115], 'false,false,false': [0.00036256884585792457, 0.0005178356169243273]}
{'': [0.048555301515114765, 0.06386162961458386], 'false': [nan, 0.06386162961458376], 'false,false': [nan, 0.06386162961458386], 'false,false,false': [nan, 0.06386162961458386], 'true': [0.04000084440612542, 0.011122436866022302]}
{'': [0.011892038592532135, 0.03992609927721755], 'false': [nan, 0.039926099277217464], 'false,false': [0.02326389797846857, 0.05335747200040414], 'false,false,false': [0.0342301034551984, 0.08370818050693102], 'true': [9.179369705350126e-05, 0.2718040446458433], 'true,false': [0.2718040446458433, nan]}
{'': [0.02959870872801161, 0.03747182963788357], 'false': [0.02362161239861875, 0.05815914214752698], 'false,false': [0.016134461017318257, 0.0006470786648579906], 'false,true': [0.0201819273050387, 5.506660544850342e-05], 'false,true,true': [0.0201819273050387, nan], 'false,false,false': [nan, 0.0006470786648579906]}
{'': [0.024039658177255452, 0.040016094541962414], 'false': [0.02420852579170212, 0.0559775346104545], 'false,false': [0.0, 0.057016202992410524], 'false,false,false': [nan, 0.05701620299241057], 'true': [0.023091544963953776, 0.005200539311356751], 'true,true': [0.02667171285513505, 0.006681918437635676], 'true,false': [3.43388593395341e-06, 0.02068807985220071], 'true,false,false': [4.0671938611766854e-06, 0.0384061182460257]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 9.998
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.097, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else return -0.12243358917233296;  // std dev = 0.138, 206.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 5.05e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7331489350995123;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1273797043302816;  // std dev = 2.262, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then return 0.7090459132885153;  // std dev = 0.110, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else return 0.7817987812996403;  // std dev = 0.165, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.11646132669492891;  // std dev = 0.102, 139.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=2 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.7357742563481885;  // std dev = 0.203, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.1275904352021891;  // std dev = 5.58e-08, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.7008811484464839;  // std dev = 0.974, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return -0.12544463852839147;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.029630347066776277;  // std dev = 1.633, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   | | | else return 0.16326079982142;  // std dev = 2.618, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5438432263037736;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | | else return 0.4505232884238533;  // std dev = 0.792, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.6022647536342977;  // std dev = 0.076, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5688357853229518;  // std dev = 0.042, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.11066295093414788;  // std dev = 0.881, 128.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=1 */
%   | | | else return 0.0031148556987038146;  // std dev = 2.487, 93.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=16 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.06838724362727411;  // std dev = 3.359, 109.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=29 */
%   | | | else return 0.20518879190860345;  // std dev = 2.475, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.4278843039087469;  // std dev = 0.231, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | | else return 0.19882676258555332;  // std dev = 1.168, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.4287330366438432;  // std dev = 0.216, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.56149726354849;  // std dev = 0.220, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.7245348253843689;  // std dev = 0.314, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.10795476992839224;  // std dev = 0.060, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   | | else return -0.11111168695640856;  // std dev = 0.031, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else return -0.1299883165555688;  // std dev = 0.279, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | then return 0.29548141915225623;  // std dev = 0.168, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | | else return 0.4409926139867894;  // std dev = 0.117, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.21302132581379116;  // std dev = 0.319, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.3196806349300164;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.06577789227583106;  // std dev = 0.862, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.5357056157311957;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(I, A) )
%   | | then return -0.06047826639436668;  // std dev = 0.139, 237.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=17 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.008588403390938632;  // std dev = 2.671, 129.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=29 */
%   | | | else return 0.05537372414463096;  // std dev = 2.156, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.24082211463972836;  // std dev = 0.988, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | | else return 0.06129908058321178;  // std dev = 0.891, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.271035604270791;  // std dev = 0.039, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.04601641212312029;  // std dev = 0.152, 168.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=15 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then return 0.3216487371906635;  // std dev = 0.212, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.20165425610364995;  // std dev = 0.237, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.30355649750488306;  // std dev = 0.200, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.4381996802157361;  // std dev = 1.320, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | | else return -0.11627856907915057;  // std dev = 0.034, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then return 0.2212580354773047;  // std dev = 0.012, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else return 0.27897352955823107;  // std dev = 0.161, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.3539398258831588;  // std dev = 1.130, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.07957505636189997;  // std dev = 1.095, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.08779507714119841;  // std dev = 0.005, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(K, J), recursion_accounttype(K, B) )
%   | | | then return 0.2840571454253092;  // std dev = 1.096, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return -0.10219835792818595;  // std dev = 0.170, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else if ( tweets(A, L) )
%   | | | then return 0.06849603706885275;  // std dev = 0.832, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.10699338745298434;  // std dev = 1.430, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.17113423589178178;  // std dev = 0.112, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | | else return 0.06992588039021774;  // std dev = 0.324, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0.30081068183086973;  // std dev = 0.043, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return -0.07030175718492485;  // std dev = 0.066, 134.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=2 */
%   | | else return -0.0044397026291219865;  // std dev = 0.174, 101.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=21 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.19920640977960494;  // std dev = 1.539, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | | else return -0.09518280759312717;  // std dev = 0.198, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.0373574991330254;  // std dev = 0.934, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return -0.0127396631773489;  // std dev = 1.571, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return 0.11554558448602868;  // std dev = 1.385, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.15683177984796973;  // std dev = 0.017, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.2160366786790305;  // std dev = 0.077, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, G) )
%   | | then return 0.14826937042867033;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.17411030530891589;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then return 0.265103877154391;  // std dev = 0.111, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.07782329822226251;  // std dev = 0.006, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.29833154508304405;  // std dev = 0.109, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.1007569182048743;  // std dev = 0.042, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.13052791895369348;  // std dev = 0.109, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else return 0.2758104178161823;  // std dev = 0.093, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.06596427650522783;  // std dev = 0.047, 210.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.13052043202575186;  // std dev = 0.025, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.025571196719674245;  // std dev = 1.100, 49.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=13 */
%   | | | else return 0.03705004729364847;  // std dev = 0.801, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.18393520414344533;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.01879698231688637;  // std dev = 0.867, 41.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=14 */
%   | | | else return -0.007226235127813906;  // std dev = 1.433, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.192', 'seconds']
Refined model CLL: -0.100829


******************************************
Best model found
******************************************
Results 

CLL : -0.102058 

AUC ROC : 0.993485 

AUC PR : 0.372596 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 9.998 

Total Inference Time : 11.259799003601074 

Total revision time: 34.90833530044556
Best scored revision CLL: -0.100829


Results 

CLL : -0.102058 

AUC ROC : 0.993485 

AUC PR : 0.372596 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 34.932490201950074 

Total Inference Time : 11.259799003601074 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.525
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8298470483070582;  // std dev = 1.707, 106.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048802;  // std dev = 0.000, 145.000 (wgt'ed) examples reached here.  /* #neg=145 */
%   | | else return -0.08302753548872306;  // std dev = 0.235, 34.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0.14847151574467365;  // std dev = 0.454, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7148223748869585;  // std dev = 1.006, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03532970502809756;  // std dev = 0.263, 206.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1007915114439665;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5433982342578078;  // std dev = 0.927, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.14620656325192105;  // std dev = 3.147, 54.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5779435626833793;  // std dev = 0.395, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.7321351678312079;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8209540615814842;  // std dev = 0.082, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6366820015029566;  // std dev = 0.133, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5634880997007711;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5634880997007711;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04175994353291625;  // std dev = 3.649, 213.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=21 */
%   | | | else return 0.016576404752698785;  // std dev = 2.838, 66.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4821195182285833;  // std dev = 2.697, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11746222325977898;  // std dev = 0.039, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | | | else return -0.12334859749180246;  // std dev = 0.000975, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15463629647344604;  // std dev = 0.153, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3151703209336437;  // std dev = 1.146, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | else return 0.43474451622329147;  // std dev = 0.129, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.25655363085594;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6374075947454841;  // std dev = 0.200, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08304078266764633;  // std dev = 2.317, 243.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=9 */
%   | | else return -0.10498328813301948;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.037228199882349496;  // std dev = 3.182, 264.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2676412384150511;  // std dev = 0.098, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5382247332892106;  // std dev = 0.757, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11438938338026766;  // std dev = 0.098, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.11058238632916938;  // std dev = 0.164, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2828381215879623;  // std dev = 1.303, 108.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=107 */
%   | else return -0.07768978189079581;  // std dev = 2.039, 255.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.012990445845039377;  // std dev = 0.688, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16904269160666546;  // std dev = 1.402, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.22455790528170744;  // std dev = 0.030, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.042768680230754544;  // std dev = 0.149, 197.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -5.769192330497074E-4;  // std dev = 1.361, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.08482214478077292;  // std dev = 1.797, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14940140580088263;  // std dev = 0.191, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2855057907563476;  // std dev = 0.668, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09102007385622526;  // std dev = 0.044, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.44091692580210434;  // std dev = 0.628, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11301244465155223;  // std dev = 0.156, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16035639263503582;  // std dev = 1.738, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | | else return 0.14533789361212163;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08463846414885577;  // std dev = 0.024, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08037864853245685;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.03113386449663626;  // std dev = 0.473, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.00999339187590534;  // std dev = 1.326, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.24228836295833844;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03959989282289197;  // std dev = 1.365, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.054', 'seconds']
Parameter learned model CLL:-0.111148 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.707, 3, 103], 'true,false,true': [0.0, 145, 0], 'true,false,false': [0.235, 32, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.49e-08, 23, 0], 'false,false': [0.454, 22, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.006, 1, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.263, 184, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.984, 31, 1], 'false,false,false,true': [0.927, 1, 4], 'false,false,false,false': [3.147, 37, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.395, 0, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.082, 0, 2], 'true,false,false': [0.133, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.649, 192, 21], 'false,false,false,false': [2.838, 55, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.697, 5, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.039, 157, 0], 'false,true,false,false': [0.000975, 27, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.153, 46, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.146, 1, 73], 'true,false': [0.129, 0, 4], 'false,true,true': [0.972, 1, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.2, 0, 23], 'false,false,true,false': [2.317, 234, 9], 'false,false,false': [0.0, 18, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.182, 173, 91], 'false,true': [0.098, 0, 13], 'false,false,true': [0.757, 0, 22], 'false,false,false,true': [0.098, 37, 0], 'false,false,false,false': [0.164, 51, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.303, 1, 107], 'true,false': [2.039, 244, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.688, 16, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.402, 2, 80], 'true,false,true': [0.03, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.149, 175, 22], 'false,false,false,true': [1.361, 45, 13], 'false,false,false,false': [1.797, 16, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.191, 3, 77], 'false,true,true,true': [0.668, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.044, 208, 0], 'false,false,true': [0.628, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.156, 51, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.738, 3, 94], 'true,true,false': [0.011, 0, 9], 'true,false,true': [0.024, 188, 0], 'true,false,false,true': [0.0, 22, 0], 'true,false,false,false': [0.473, 12, 2], 'false,true': [1.326, 28, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.365, 19, 8]}]
{'': [0.2326869806094208, 0.21694214876033072], 'true': [0.027500889996442155, 0.011048344308854109], 'false': [0.2253061224489791, 0.2060353798126952], 'false,true': [-1.4802973661668753e-16, 9.654113257610057e-18], 'true,false': [-9.800589458760002e-17, 0.05536332179930797], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.012187247363016754, 0.09836090414528707], 'false': [0.06925584536440633, 0.15483276303027618], 'false,false': [0.030273437499999955, 0.1946913287618276], 'false,false,false': [0.17185951725863574, 0.1834357901692351], 'false,true': [nan, 0.06925584536440633], 'false,false,true': [nan, 0.030273437499999955]}
{'': [0.004236148459761813, 0.09170145254721959], 'false': [nan, 0.09170145254721966], 'false,false': [-5.224578939412501e-17, 0.07719851156706875], 'false,false,false': [0.06250926585086262, 0.12200662551438946], 'true': [0.002527661465557119, 0.011616245237270931], 'true,false': [0.003379518323703201, 0.004415877985526673], 'true,true': [0.0022289110404444096, 0.0], 'false,false,true': [4.9343245538895844e-17, 0.0]}
{'': [0.05553808363943916, 0.0003227459582485135], 'false': [1.2434528698472256e-05, 0.0005092406833480594], 'false,false': [nan, 0.0005092406833480594], 'false,false,false': [nan, 0.0005092406833480594], 'false,true': [nan, 1.243452869846743e-05], 'false,true,false': [9.48247591310914e-06, 3.519043000003945e-08]}
{'': [0.017736016932552605, 0.06202871059692291], 'false': [0.05246913580246918, 0.05787325439044421], 'false,false': [0.061339752190928, 0.0], 'false,false,true': [0.0017321256514555101, 0.022101720729276672], 'false,true': [0.05246913580246918, nan], 'true': [0.017736739762068278, 0.0041578865703802426]}
{'': [0.0383499059925928, 0.071466958793176], 'false': [0.0007314051087676798, 0.0732345123275305], 'false,false': [0.02606874889968762, 0.00041989482955270325], 'true': [nan, 0.038349905992593344], 'true,false': [nan, 0.0383499059925928], 'false,false,false': [0.00026113590000690777, 0.0005289791334980722]}
{'': [0.043297931543854945, 0.01975059203846569], 'true': [0.015713316840373737, 0.01630898180508851], 'false': [nan, 0.01975059203846569], 'false,false': [nan, 0.01975059203846569], 'false,false,false': [nan, 0.01975059203846569]}
{'': [0.023467435193357894, 0.03523783166451164], 'false': [nan, 0.035237831664511825], 'false,false': [0.022268107823572404, 0.0627762671319771], 'false,false,false': [0.03195680492151394, 0.12918110611329572], 'true': [0.023955224523864543, 0.00045951319199431795], 'true,false': [0.00045951319199431795, nan]}
{'': [0.03650851661838614, 0.02904038274457499], 'false': [0.01825053722377597, 0.06369836982216986], 'false,false': [0.02322691375091758, 0.0004794183164579051], 'false,true': [0.013948955010042771, 9.422206512368487e-06], 'false,true,true': [0.013948955010042771, nan], 'false,false,false': [nan, 0.0004794183164579051]}
{'': [0.022512717556337353, 0.054611382770716664], 'false': [0.04395765577204502, 0.06793105497188011], 'false,false': [0.0, 0.06897978368777263], 'false,false,false': [nan, 0.06897978368777263], 'true': [0.028530156152830916, 0.0011699461439785089], 'true,true': [0.03115691151018325, 1.3166244592290507e-05], 'true,false': [3.0746651586102974e-06, 0.0068036339550751924], 'true,false,false': [-3.784851220313033e-18, 0.016013084502617455]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 10.907
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.7923594614153023;  // std dev = 2.161, 76.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=71 */
%   | | | else return 0.858148935099512;  // std dev = 1.03e-07, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.13195007480147847;  // std dev = 0.099, 202.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.25814893509951237;  // std dev = 0.490, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, C), recursion_accounttype(D, B) )
%   | | then return 0.7325581450445144;  // std dev = 2.31e-07, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else if ( tweets(A, E), follows(D, C) )
%   | | | then return 0.5966078651444694;  // std dev = 1.313, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return 0.7360247319639571;  // std dev = 0.144, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.6302322013528495;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.7301510132639895;  // std dev = 0.149, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.1265348934041659;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.7455384727792422;  // std dev = 0.090, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.13677130825278513;  // std dev = 2.105, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
%   | | | else return 0.13732103024982803;  // std dev = 2.226, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.5741060155228753;  // std dev = 0.095, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0.4965284717019842;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.5689306404713173;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.508825360757237;  // std dev = 0.347, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5821844414606143;  // std dev = 0.024, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10221740262905134;  // std dev = 1.186, 154.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=3 */
%   | | | else return 0.009742369559968411;  // std dev = 2.083, 65.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.15839196095444238;  // std dev = 1.998, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
%   | | | else return 0.07325190427326443;  // std dev = 2.280, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, E), follows(D, F) )
%   | | | then return 0.42031482329748004;  // std dev = 0.974, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | | else return 0.5865335674994635;  // std dev = 0.195, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2522773863885514;  // std dev = 0.937, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.420203510102105;  // std dev = 0.894, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.508167646231705;  // std dev = 0.269, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.5562636773191103;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.7475646162694634;  // std dev = 0.159, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(J, A) )
%   | then return -0.10650675386879369;  // std dev = 0.005, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else return -0.1743702341325464;  // std dev = 0.152, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.3010376119376997;  // std dev = 1.371, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | | | else return 0.23690576740945515;  // std dev = 0.927, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.20092560032987894;  // std dev = 0.330, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.4413044058865058;  // std dev = 0.194, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.3106788262447331;  // std dev = 0.022, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.35901129697162304;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3842249789453526;  // std dev = 1.322, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return -0.07909053253981967;  // std dev = 2.074, 232.000 (wgt'ed) examples reached here.  /* #neg=223 #pos=9 */
%   | | else return -0.09387534287325193;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.24786284568401745;  // std dev = 0.148, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | else return 0.27762532900297887;  // std dev = 0.015, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), tweets(F, G) )
%   | | | then return 0.03539476404391717;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2814949152754029;  // std dev = 0.035, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.055153034138282646;  // std dev = 0.117, 188.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=15 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2764847357885268;  // std dev = 0.046, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.172866427999389;  // std dev = 0.842, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.47041035030766776;  // std dev = 0.939, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.12431789353643943;  // std dev = 0.029, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then return 0.19496336738688308;  // std dev = 0.158, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else return 0.22994872397148777;  // std dev = 0.056, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( tweets(A, E), follows(A, C) )
%   | | then return 0.028161343691803963;  // std dev = 0.892, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.22385147696078883;  // std dev = 0.049, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(F, G) )
%   | | then return 0.26552902760489633;  // std dev = 0.044, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.008456478522319899;  // std dev = 0.900, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(H, A) )
%   | | then return -0.05562073382425606;  // std dev = 0.111, 221.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=15 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.02037509531352537;  // std dev = 1.058, 36.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=8 */
%   | | | else return 0.0587944375329716;  // std dev = 1.583, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.14662283090943118;  // std dev = 1.362, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.18796810598203853;  // std dev = 0.077, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.19090353096367216;  // std dev = 0.049, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.22810389232701694;  // std dev = 0.104, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then return 0.2257178531252972;  // std dev = 0.314, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else return -0.08193422070963655;  // std dev = 0.047, 207.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.2431626943320715;  // std dev = 0.136, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.030225987920366626;  // std dev = 0.982, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
%   | | | else return 0.015525352632129986;  // std dev = 1.626, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.10419036729652836;  // std dev = 1.662, 47.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=44 */
%   | | | else return 0.18130945701845758;  // std dev = 0.042, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.019441365531612773;  // std dev = 0.433, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return -5.786487749061172E-4;  // std dev = 1.298, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return -0.16350047344078122;  // std dev = 0.821, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.07545345731648112;  // std dev = 0.845, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.21281132194221186;  // std dev = 0.111, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(J, A) )
%   | then return -0.03264303539732984;  // std dev = 0.110, 230.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=32 */
%   | else return 0.009502901528937374;  // std dev = 0.236, 65.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.13124762110229377;  // std dev = 1.382, 73.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=71 */
%   | | | else return 0.22581984581170642;  // std dev = 0.975, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return 0.0017063199664209298;  // std dev = 0.347, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | else return -0.06916255983675053;  // std dev = 0.035, 224.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.26317009460584095;  // std dev = 0.187, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.11866716954868013;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return 0.015907259689032963;  // std dev = 0.235, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.26049613513550207;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.04333911259430332;  // std dev = 0.288, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.696', 'seconds']
Refined model CLL: -0.108096


******************************************
Best model found
******************************************
Results 

CLL : -0.10916 

AUC ROC : 0.99388 

AUC PR : 0.323724 

Precision : 0.338747 

Recall : 0.935897 

F1 : 0.497445 

Total Learning Time : 10.907 

Total Inference Time : 10.958235740661621 

Total revision time: 32.305948335647585
Best scored revision CLL: -0.108096


Results 

CLL : -0.10916 

AUC ROC : 0.99388 

AUC PR : 0.323724 

Precision : 0.338747 

Recall : 0.935897 

F1 : 0.497445 

Total Learning Time : 59.95739205551148 

Total Inference Time : 10.958235740661621 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.732
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.821111898062474;  // std dev = 1.963, 108.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else return -0.07288554765910842;  // std dev = 0.253, 58.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.71e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return 0.23519811542738034;  // std dev = 0.485, 61.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.707115220141627;  // std dev = 1.416, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03917236172342409;  // std dev = 0.259, 186.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.060263262984910033;  // std dev = 1.791, 51.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5482525837983209;  // std dev = 1.302, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.11415177954749336;  // std dev = 4.980, 142.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5389909389412955;  // std dev = 1.666, 70.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7345017536441407;  // std dev = 0.219, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5249814822585888;  // std dev = 0.985, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6000033494523233;  // std dev = 0.178, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5675280929830293;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.021563887134703533;  // std dev = 4.637, 274.000 (wgt'ed) examples reached here.  /* #neg=240 #pos=34 */
%   | | | else return 0.04197057741179807;  // std dev = 4.125, 109.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5370844998069246;  // std dev = 2.880, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1212942042260689;  // std dev = 0.076, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | | | else return -0.12690014182359716;  // std dev = 0.012, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17288588368298405;  // std dev = 0.287, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2984073610422424;  // std dev = 1.644, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   | else return 0.47357067470108394;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3013412459410614;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5071701280084984;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6106694506306309;  // std dev = 1.059, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.10266425700116312;  // std dev = 1.803, 273.000 (wgt'ed) examples reached here.  /* #neg=268 #pos=5 */
%   | | else return 0.029996898207936544;  // std dev = 0.320, 63.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02649462109420964;  // std dev = 3.116, 256.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2525837520010839;  // std dev = 0.179, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5075514140511345;  // std dev = 1.459, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12492905139257772;  // std dev = 0.208, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | | else return -0.12917184646958269;  // std dev = 0.204, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2923263220700616;  // std dev = 1.485, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else return -0.08515096398225418;  // std dev = 1.674, 237.000 (wgt'ed) examples reached here.  /* #neg=230 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05677352886503175;  // std dev = 2.179, 74.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.179787936590049;  // std dev = 0.995, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.25479062913685274;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.040323463462118646;  // std dev = 0.154, 164.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.007010452952336891;  // std dev = 2.188, 119.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=28 */
%   | | | else return 0.06440667184782461;  // std dev = 2.377, 68.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17048897655921158;  // std dev = 0.128, 79.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28304536985232415;  // std dev = 0.894, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0922034855944076;  // std dev = 0.111, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.38705595385002367;  // std dev = 0.750, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11820950925509521;  // std dev = 0.293, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17272666079570095;  // std dev = 1.262, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.15690354966012637;  // std dev = 0.362, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.082346233342459;  // std dev = 0.019, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.1071777462514677;  // std dev = 0.267, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.008062202050399266;  // std dev = 0.943, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.020281485080488458;  // std dev = 1.300, 74.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20121828018039079;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.021111137127998263;  // std dev = 1.923, 66.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.090', 'seconds']
Parameter learned model CLL:-0.112499 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.963, 4, 104], 'true,false,true': [0.0, 164, 0], 'true,false,false': [0.253, 54, 4], 'false,true,true,true': [0.977, 1, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [4.71e-08, 45, 0], 'false,false': [0.485, 38, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.416, 2, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.259, 167, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.791, 47, 4], 'false,false,false,true': [1.302, 2, 8], 'false,false,false,false': [4.98, 102, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.666, 3, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.219, 0, 3], 'true,false,false': [0.985, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.178, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.637, 240, 34], 'false,false,false,false': [4.125, 86, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.88, 4, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.076, 183, 0], 'false,true,false,false': [0.012, 28, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.287, 95, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.644, 3, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.059, 1, 39], 'false,false,true,false': [1.803, 268, 5], 'false,false,false': [0.32, 50, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.116, 174, 82], 'false,true': [0.179, 0, 22], 'false,false,true': [1.459, 1, 52], 'false,false,false,true': [0.208, 75, 0], 'false,false,false,false': [0.204, 71, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.485, 1, 121], 'true,false': [1.674, 230, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.179, 46, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.995, 1, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 145, 19], 'false,false,false,true': [2.188, 91, 28], 'false,false,false,false': [2.377, 44, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.128, 1, 78], 'false,true,true,true': [0.894, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.111, 223, 0], 'false,false,true': [0.75, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.293, 92, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.262, 1, 85], 'true,true,false': [0.362, 0, 19], 'true,false,true': [0.019, 173, 0], 'true,false,false,true': [0.267, 29, 0], 'true,false,false,false': [0.943, 19, 4], 'false,true': [1.3, 49, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.923, 45, 21]}]
{'': [0.22016528925620055, 0.23140495867768657], 'false': [0.22812933941678357, 0.23488309594195214], 'false,true': [0.03698224852071082, 4.9343245538895844e-17], 'true': [0.035665294924556515, 0.01769336904472029], 'false,true,true': [0.04338842975206614, 0.0], 'true,false': [-1.5705594006892458e-16, 0.06420927467300819]}
{'': [0.023047520016991653, 0.12117400154375782], 'false': [0.06688364456615649, 0.1627261507281035], 'false,false': [0.06290510234335801, 0.1858683599560854], 'false,false,false': [0.16943078884355298, 0.17462833615949172], 'false,true': [nan, 0.06688364456615649], 'false,false,true': [nan, 0.06290510234335801]}
{'': [0.04765848440967831, 0.11281194337949113], 'false': [nan, 0.11281194337948956], 'false,false': [0.001721864951422897, 0.10139947459521942], 'false,false,false': [0.07847300587850124, 0.15614332547529003], 'true': [0.03966183502072807, 0.0930487611369905], 'true,false': [0.016001672052020705, 0.10775643813494495], 'true,true': [0.03966183502072807, nan], 'false,false,true': [0.0052732114137321595, -1.7763568394002506e-16]}
{'': [0.05185707773857011, 0.0008454285065804489], 'false': [3.1742602879613746e-05, 0.0008698590392585687], 'false,false': [nan, 0.0008698590392585687], 'false,false,false': [nan, 0.0008698590392585687], 'false,true': [nan, 3.174260287961164e-05], 'false,true,false': [3.168942809027593e-05, 4.8339478183473394e-06]}
{'': [0.03372699171335878, 0.07725790328746007], 'false': [0.0019296324629658997, 0.07619328642436218], 'false,false': [0.07068884994676813, 0.102107022691142], 'false,false,true': [0.028016652091130866, 0.011913074367733749], 'true': [0.0337697866844431, 0.0], 'false,true': [8.707957869868999e-06, 0.0]}
{'': [0.037919307286380204, 0.08498762501596492], 'false': [0.0014492061383145627, 0.0898088256558319], 'false,false': [0.04018605517990564, 0.0005852578319799822], 'true': [nan, 0.03791930728637976], 'true,false': [nan, 0.037919307286380204], 'false,false,false': [0.000574197694072307, 0.0005876938279274741]}
{'': [0.045918846125586055, 0.06418601170635925], 'false': [nan, 0.06418601170635914], 'false,false': [nan, 0.06418601170635925], 'false,false,false': [nan, 0.06418601170635925], 'true': [0.018079613241577128, 0.011827110308845944]}
{'': [0.011652850798176646, 0.04226894993956362], 'false': [nan, 0.0422689499395636], 'false,false': [0.023619552841082816, 0.05698248744290473], 'false,false,false': [0.04021287225285459, 0.08308360129794237], 'true': [0.011797293196582615, 9.168952211756343e-05], 'true,false': [9.168952211756343e-05, nan]}
{'': [0.01650907408506396, 0.034633101252613784], 'false': [0.020629216285877224, 0.05883462140124166], 'false,false': [0.014073194323503202, 0.0009345392511528786], 'false,true': [0.02105571307567467, 5.521888471995537e-05], 'false,true,true': [0.02105571307567467, nan], 'false,false,false': [nan, 0.0009345392511528786]}
{'': [0.021897451886202277, 0.03841563237849438], 'false': [0.022852621841216274, 0.05533228706680052], 'false,false': [0.0, 0.05605494706856604], 'false,false,false': [nan, 0.05605494706856601], 'true': [0.01645904768433232, 0.004894837967785529], 'true,true': [0.018522478868038962, 0.0069142408917262175], 'true,false': [2.0330274328590035e-06, 0.02089501935498295], 'true,false,false': [0.0024493513890938585, 0.03867389220393282]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 8.199
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then return 0.8311219080724858;  // std dev = 0.162, 74.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.7936328060672536;  // std dev = 1.368, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.12204908470246849;  // std dev = 0.139, 202.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=4 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( recursion_accounttype(K, B) )
%   | | | then return 0.7914822684328456;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return 0.1484715157446736;  // std dev = 0.454, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then return 0.6963243926729101;  // std dev = 0.167, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | else return 0.7248958212443392;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.7379705009486975;  // std dev = 0.196, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.7386824625096866;  // std dev = 0.199, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.1276332409528178;  // std dev = 0.000, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.6113082021073163;  // std dev = 0.315, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.11478495838251956;  // std dev = 3.614, 88.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=25 */
%   | | | else return 0.15353720510402574;  // std dev = 3.003, 47.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.5725358326197837;  // std dev = 0.282, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5666992531694905;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.057964485946008316;  // std dev = 0.998, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5937111115757333;  // std dev = 0.189, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5041992531694905;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.521253199720845;  // std dev = 1.023, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.11408448444041767;  // std dev = 0.000, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.08978695764111025;  // std dev = 3.920, 106.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=29 */
%   | | | else return 0.13829472070125803;  // std dev = 2.558, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then return 0.43165055168773686;  // std dev = 0.347, 106.000 (wgt'ed) examples reached here.  /* #pos=106 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(F, H) )
%   | | | then return 0.43979527325278994;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.6054356302530955;  // std dev = 0.052, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.670021923160746;  // std dev = 0.044, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.7365120243689007;  // std dev = 0.242, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(J, A) )
%   | then if ( tweets(A, K) )
%   | | then return -0.10305175635482693;  // std dev = 1.17e-07, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | | else return -0.10305175635482731;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return -0.16282463330712485;  // std dev = 0.222, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.30196814082540496;  // std dev = 0.988, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return 0.3215742050367346;  // std dev = 0.021, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.3743304750062829;  // std dev = 0.070, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.03231534306755063;  // std dev = 0.755, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3395364450180827;  // std dev = 0.033, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.34885734998778023;  // std dev = 0.237, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09390857010723853;  // std dev = 0.000, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.03078767124677885;  // std dev = 2.168, 60.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=15 */
%   | | | else return 0.12971199588399335;  // std dev = 2.796, 64.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.24426560523823052;  // std dev = 0.122, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | | else return -0.0757596573979431;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.05608608449606086;  // std dev = 0.098, 170.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=15 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), tweets(A, H) )
%   | | then if ( follows(A, I), follows(G, I) )
%   | | | then return 0.3093453248847421;  // std dev = 0.231, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.03881292930739703;  // std dev = 0.886, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2664960740239086;  // std dev = 0.004, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.29888171535118285;  // std dev = 0.194, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.48647123888105914;  // std dev = 1.138, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return -0.12768729977969812;  // std dev = 0.035, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then return 0.21794908037982233;  // std dev = 0.007, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( follows(A, C), tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, C) )
%   | | | then return -0.07125072943636628;  // std dev = 1.194, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.23259609936111203;  // std dev = 0.048, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2427775904570371;  // std dev = 0.075, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(G, A) )
%   | then return -0.04934728840621472;  // std dev = 0.099, 250.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=23 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2799269322920143;  // std dev = 1.682, 40.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=37 */
%   | | | else return -0.1245698900770316;  // std dev = 0.095, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.02167695966249561;  // std dev = 0.795, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.10108047225964543;  // std dev = 1.382, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.18665522582677638;  // std dev = 0.015, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else return 0.17972124073693077;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.3616952823146284;  // std dev = 0.018, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A) )
%   | | then return 0.24491339795101705;  // std dev = 0.160, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.1793809670373937;  // std dev = 0.028, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.07426291952760108;  // std dev = 0.352, 121.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=1 */
%   | | | else return -0.020772790704232918;  // std dev = 1.307, 101.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=16 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.009666325373819418;  // std dev = 1.692, 79.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=19 */
%   | | | else return 0.03224446481020284;  // std dev = 1.970, 63.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16126673677147632;  // std dev = 0.021, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.05231694030000322;  // std dev = 0.378, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.17454149443672065;  // std dev = 0.061, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.16145428568195094;  // std dev = 1.405, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return 0.08570106794858587;  // std dev = 1.252, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | else return -0.07339936295846121;  // std dev = 0.002, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.2737795709198125;  // std dev = 0.999, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.41086003341655125;  // std dev = 0.244, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.13280180109100476;  // std dev = 0.034, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15883654118835058;  // std dev = 0.042, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.06972776790185323;  // std dev = 0.002, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | | else return -0.03474415628838435;  // std dev = 0.099, 46.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.12037859832793629;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, G) )
%   | | | then return 2.5195176915364164E-4;  // std dev = 1.198, 57.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=15 */
%   | | | else return 0.06545865336217249;  // std dev = 0.543, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.10374286238130792;  // std dev = 0.675, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.005658386430536868;  // std dev = 1.148, 44.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=14 */
%   | | | else return -0.0012303192658189401;  // std dev = 1.306, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.476', 'seconds']
Refined model CLL: -0.105177


******************************************
Best model found
******************************************
Results 

CLL : -0.102339 

AUC ROC : 0.993301 

AUC PR : 0.375803 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 8.199 

Total Inference Time : 12.328852653503418 

Total revision time: 33.15532994842529
Best scored revision CLL: -0.105177


Results 

CLL : -0.102339 

AUC ROC : 0.993301 

AUC PR : 0.375803 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 60.80677366828918 

Total Inference Time : 12.328852653503418 

Run: 2
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.39
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8391013160518921;  // std dev = 1.401, 105.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | | else return -0.08302753548872306;  // std dev = 0.235, 34.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else return 0.13939893509951237;  // std dev = 0.450, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.70121428134866;  // std dev = 1.407, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03736718824781978;  // std dev = 0.259, 212.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10036213322237769;  // std dev = 0.997, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7496847272501158;  // std dev = 0.105, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1266113557833253;  // std dev = 3.198, 58.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5552430185493116;  // std dev = 1.245, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.7307174918270332;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8221578571108565;  // std dev = 0.080, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5892176258534823;  // std dev = 0.143, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.46455870938959665;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.5645587093895966;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04318349705661164;  // std dev = 3.657, 217.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=21 */
%   | | | else return 0.003263315112981854;  // std dev = 2.869, 73.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5013213871117916;  // std dev = 2.332, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11709942852570406;  // std dev = 0.035, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | | | else return -0.12173760666703722;  // std dev = 0.000439, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15770352962588655;  // std dev = 0.150, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30208461141277415;  // std dev = 1.517, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.41276594629615554;  // std dev = 0.143, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.21487978053768217;  // std dev = 1.339, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6346574345188163;  // std dev = 0.207, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08154062795598181;  // std dev = 2.318, 241.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=9 */
%   | | else return -0.10492397727448498;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02700243783829148;  // std dev = 3.454, 275.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.27864120998976677;  // std dev = 0.095, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.48322499395385415;  // std dev = 1.407, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11282762333936143;  // std dev = 0.076, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.11017133914848702;  // std dev = 0.102, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.272202553316944;  // std dev = 1.829, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else return -0.07738018103642627;  // std dev = 2.080, 271.000 (wgt'ed) examples reached here.  /* #neg=260 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.018179611172279262;  // std dev = 0.687, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1886835203025838;  // std dev = 1.000, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.2383198952418586;  // std dev = 0.015, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04508362920773667;  // std dev = 0.154, 201.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.006123407644645091;  // std dev = 1.386, 55.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=13 */
%   | | | else return 0.07749095885736289;  // std dev = 1.853, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14229252773773796;  // std dev = 0.210, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.29028714568614555;  // std dev = 0.647, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0898560819543931;  // std dev = 0.039, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.45703246685204785;  // std dev = 0.636, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11250047528157829;  // std dev = 0.122, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1518724226745566;  // std dev = 2.106, 98.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=94 */
%   | | else return 0.14507355610173367;  // std dev = 0.024, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08322099164189088;  // std dev = 0.016, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0813368027909818;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.033543475420415324;  // std dev = 0.485, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.025224284226123782;  // std dev = 0.980, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.22828562389269413;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.031500494748401955;  // std dev = 1.418, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.770', 'seconds']
Parameter learned model CLL:-0.109922 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 103], 'true,false,true': [0.0, 178, 0], 'true,false,false': [0.235, 32, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.83e-08, 25, 0], 'false,false': [0.45, 23, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.407, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.259, 190, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.997, 26, 1], 'false,false,false,true': [0.105, 0, 4], 'false,false,false,false': [3.198, 41, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.245, 2, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.08, 0, 2], 'true,false,false': [0.143, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.949, 1, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.657, 196, 21], 'false,false,false,false': [2.869, 62, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.332, 3, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.035, 172, 0], 'false,true,false,false': [0.000439, 34, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.15, 49, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.517, 2, 73], 'true,false': [0.143, 0, 4], 'false,true,true': [1.339, 2, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.207, 0, 23], 'false,false,true,false': [2.318, 232, 9], 'false,false,false': [0.0, 11, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.454, 184, 91], 'false,true': [0.095, 0, 13], 'false,false,true': [1.407, 1, 22], 'false,false,false,true': [0.076, 29, 0], 'false,false,false,false': [0.102, 30, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.829, 3, 107], 'true,false': [2.08, 260, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.687, 15, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.0, 1, 80], 'true,false,true': [0.015, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 179, 22], 'false,false,false,true': [1.386, 42, 13], 'false,false,false,false': [1.853, 18, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.21, 4, 77], 'false,true,true,true': [0.647, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.039, 219, 0], 'false,false,true': [0.636, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.122, 38, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.106, 4, 94], 'true,true,false': [0.024, 0, 9], 'true,false,true': [0.016, 182, 0], 'true,false,false,true': [0.0, 13, 0], 'true,false,false,false': [0.485, 14, 2], 'false,true': [0.98, 23, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.418, 22, 8]}]
{'': [0.22151678293146723, 0.21172022684310035], 'true': [0.01868480725623786, 0.009344962620149364], 'false': [0.2191380569758943, 0.2021484375000001], 'false,true': [-1.4802973661668753e-16, 1.3322676295501878e-17], 'true,false': [-1.9709577291098283e-16, 0.05536332179930797], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.023570783845887348, 0.09694085974203762], 'false': [0.06699777623209195, 0.1575886968330676], 'false,false': [0.036808475748064756, 0.1885316991886592], 'false,false,false': [0.0027381706691864682, 0.17629856687142859], 'false,true': [nan, 0.06699777623209195], 'false,false,true': [nan, 0.036808475748064756]}
{'': [0.022098763912877684, 0.0896520286906919], 'false': [nan, 0.08965202869069189], 'false,false': [0.052469135802469195, 0.07488712516240244], 'false,false,false': [0.06161384871340654, 0.11272904282301588], 'false,false,true': [0.08999999999999994, -5.551115123125783e-17], 'true': [0.021648712047499876, 0.016551873399968626], 'true,true': [0.021527590099987788, 0.0], 'true,false': [0.0032358101698577446, 0.005122854568944235]}
{'': [0.04214672321294648, 0.0003421569944436057], 'false': [9.02636685024048e-06, 0.000460527663113634], 'false,false': [nan, 0.000460527663113634], 'false,false,false': [nan, 0.000460527663113634], 'false,true': [nan, 9.02636685023617e-06], 'false,true,false': [7.258890313845554e-06, 5.6614925394829974e-09]}
{'': [0.0299634397361751, 0.0648340892804334], 'false': [0.09442106938108606, 0.05914596070361642], 'false,true': [0.09442106938108606, nan], 'false,false': [0.06131605156486513, -1.0092936587501423e-17], 'false,false,true': [0.0018558106959584973, 0.0223027550284108], 'true': [0.030667083131946608, 0.005140039459539114]}
{'': [0.04339355013854702, 0.08861257253792103], 'false': [0.000700542763660947, 0.09572579793839726], 'false,false': [0.08610124056270198, 0.0002775024940387648], 'true': [nan, 0.04339355013854702], 'true,false': [nan, 0.04339355013854702], 'false,false,false': [0.00019942875949788754, 0.0003495056432128903]}
{'': [0.04523371345544556, 0.020495452182779907], 'true': [0.030400974248691252, 0.01597120744742338], 'false': [nan, 0.020495452182779907], 'false,false': [nan, 0.020495452182779907], 'false,false,false': [nan, 0.020495452182779907]}
{'': [0.012113175173136542, 0.03729320506126384], 'false': [nan, 0.037293205061263886], 'false,false': [0.023793769813992283, 0.06641939179356436], 'false,false,false': [0.03490446005755761, 0.1272002187993153], 'true': [0.012350210485098757, 0.00010884326654574117], 'true,false': [0.00010884326654574117, nan]}
{'': [0.04395096116499111, 0.029999347699512985], 'false': [0.01774678208924104, 0.07688451649402271], 'false,false': [0.023761449448483764, 0.0003909695381763147], 'false,true': [0.013067971935161862, 7.001804401100408e-06], 'false,true,true': [0.013067971935161862, nan], 'false,false,false': [nan, 0.0003909695381763147]}
{'': [0.026674993516192836, 0.04562488599206327], 'false': [0.027443505985464904, 0.0660677369950549], 'false,false': [0.0, 0.06702082111900826], 'false,false,false': [nan, 0.06702082111900826], 'true': [0.04144034881345855, 0.001288707899223599], 'true,true': [0.04523627849713948, 6.455572049346127e-05], 'true,false': [1.4336484813601981e-06, 0.00867894498643983], 'true,false,false': [-1.0675221390626506e-18, 0.014706635103958319]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 14.805
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8462441731947502;  // std dev = 0.108, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.7914822684328456;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.1317500547994782;  // std dev = 0.100, 198.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.13087620782678508;  // std dev = 0.445, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.7110435675945804;  // std dev = 0.121, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | else return 0.6566512227243614;  // std dev = 0.250, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( tweets(A, F), follows(E, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.6006660375591057;  // std dev = 0.959, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.7565980776600787;  // std dev = 0.099, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.7213905844345757;  // std dev = 0.004, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.12655700202914513;  // std dev = 6.66e-08, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.09182000309029774;  // std dev = 2.185, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
%   | | | else return 0.06808499095719416;  // std dev = 2.351, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5244697082137972;  // std dev = 0.200, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.5626489366056282;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.5200008706757873;  // std dev = 0.405, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(A, H), follows(H, A) )
%   | | | then return 0.3927369806059762;  // std dev = 0.912, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5596482190216863;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5737345611150145;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(I, A) )
%   | | then return -0.06750254935793562;  // std dev = 0.169, 220.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=15 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.17779684061005172;  // std dev = 1.984, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
%   | | | else return 0.0858152987551638;  // std dev = 2.303, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.43222558403629086;  // std dev = 0.037, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.24812415451789915;  // std dev = 1.271, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.4391611562788432;  // std dev = 0.069, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.5655528377969294;  // std dev = 0.222, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(A, G), follows(G, H) )
%   | | | then return 0.6014777210018436;  // std dev = 0.272, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.4620032580466301;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.6873911530045899;  // std dev = 1.49e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7826767592160936;  // std dev = 0.204, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.11690698711333801;  // std dev = 0.022, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return 0.3356445811597713;  // std dev = 0.144, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else return 0.2774393476904242;  // std dev = 0.251, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0.4159391345096503;  // std dev = 0.238, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), tweets(A, H) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.10682167356553962;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.3194942236598034;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3319694336822059;  // std dev = 0.036, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.4636739063677111;  // std dev = 0.199, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.0776548044789956;  // std dev = 2.163, 250.000 (wgt'ed) examples reached here.  /* #neg=241 #pos=9 */
%   | | else return -0.0959795708741298;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), tweets(A, F) )
%   | | | then return 0.21020025051756946;  // std dev = 1.382, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | | else return 0.2794629632549554;  // std dev = 0.125, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.07456711422678752;  // std dev = 0.789, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.052773093897732715;  // std dev = 0.137, 196.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=20 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.09210650202171922;  // std dev = 0.919, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.2590649081824008;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.3711514538278717;  // std dev = 0.253, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.6055400171330355;  // std dev = 0.361, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.11726244006245762;  // std dev = 0.026, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.20130380122941435;  // std dev = 0.166, 74.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | | else if ( follows(C, D), follows(D, A) )
%   | | | then return 0.013018545192341646;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.21301854519234165;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.014230930900105557;  // std dev = 0.886, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then return -0.043560545107356116;  // std dev = 0.137, 206.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=23 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H) )
%   | | | then return -0.026411468557205938;  // std dev = 0.593, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.06257483228819259;  // std dev = 0.887, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.0459237157647974;  // std dev = 0.902, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.05053248595494546;  // std dev = 1.332, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.15719741393082615;  // std dev = 1.390, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | | | else return -0.0012241228214690202;  // std dev = 0.844, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.21861335859197792;  // std dev = 0.044, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.34934461367107356;  // std dev = 0.075, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.041650947398342644;  // std dev = 0.131, 221.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=23 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.15973214923939702;  // std dev = 1.422, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return -0.12395398880196104;  // std dev = 0.022, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.10236580293387533;  // std dev = 0.526, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.10040970435416041;  // std dev = 1.305, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.16619896543071486;  // std dev = 0.036, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.0909254831173788;  // std dev = 0.989, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return -0.1303277115151008;  // std dev = 0.766, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.19532675432753926;  // std dev = 0.021, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.25068717195959456;  // std dev = 0.066, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.24848970781037963;  // std dev = 0.132, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else return -0.07805421883117002;  // std dev = 0.027, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.37058003507834725;  // std dev = 0.099, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12345675617248197;  // std dev = 0.113, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.10591706963703297;  // std dev = 1.859, 75.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=71 */
%   | | | else return 0.25762624235228443;  // std dev = 0.300, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.03184397300995904;  // std dev = 0.296, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.06875457043475787;  // std dev = 0.039, 194.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1359366277132377;  // std dev = 0.034, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.0011682379593570794;  // std dev = 0.158, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.14024453487813693;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0012727815541048876;  // std dev = 0.474, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.03414107228482788;  // std dev = 1.044, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.206', 'seconds']
Refined model CLL: -0.105511


******************************************
Best model found
******************************************
Results 

CLL : -0.104974 

AUC ROC : 0.994273 

AUC PR : 0.338839 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 14.805 

Total Inference Time : 10.947435140609741 

Total revision time: 36.845867223739624
Best scored revision CLL: -0.105511


Results 

CLL : -0.104974 

AUC ROC : 0.994273 

AUC PR : 0.338839 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 36.865687437057495 

Total Inference Time : 10.947435140609741 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.682
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.830111551921941;  // std dev = 1.708, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | | else return -0.06912379217321499;  // std dev = 0.260, 55.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return 0.15302072997130656;  // std dev = 0.456, 78.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7284210178094838;  // std dev = 0.197, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.030705952008201212;  // std dev = 0.269, 169.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06480090251759908;  // std dev = 1.794, 54.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6480319543922523;  // std dev = 0.871, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.13342346001181588;  // std dev = 4.936, 135.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5318838300183443;  // std dev = 1.667, 70.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7305223589056057;  // std dev = 0.224, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6124110316975167;  // std dev = 0.193, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5930308098419926;  // std dev = 0.181, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.44242818381575555;  // std dev = 1.328, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.026207085768910766;  // std dev = 4.632, 285.000 (wgt'ed) examples reached here.  /* #neg=251 #pos=34 */
%   | | | else return 0.06404114718232766;  // std dev = 4.098, 100.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5489905869965207;  // std dev = 2.416, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12065070314039497;  // std dev = 0.051, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | | | else return -0.1303597461043662;  // std dev = 0.012, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16150034585191383;  // std dev = 0.260, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2994309986945517;  // std dev = 1.312, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return -0.11944467396823483;  // std dev = 0.827, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31285809527153907;  // std dev = 0.062, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.49967034442907055;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6301144863927785;  // std dev = 0.357, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10474658269222618;  // std dev = 1.799, 260.000 (wgt'ed) examples reached here.  /* #neg=255 #pos=5 */
%   | | else return 0.04046565727134823;  // std dev = 0.328, 61.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.025983289553542305;  // std dev = 3.154, 243.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.22196308216392757;  // std dev = 1.024, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.495544132160564;  // std dev = 1.666, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1254981084596744;  // std dev = 0.194, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | | else return -0.13170648774073626;  // std dev = 0.211, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25887552006589426;  // std dev = 2.238, 126.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=121 */
%   | else return -0.08884676602919216;  // std dev = 1.682, 256.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04840215106767153;  // std dev = 2.272, 81.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1827516898627876;  // std dev = 1.000, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.32501100516603204;  // std dev = 0.074, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04269619729614732;  // std dev = 0.146, 177.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -4.192522409384748E-4;  // std dev = 2.046, 118.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=28 */
%   | | | else return 0.05993029881337767;  // std dev = 2.424, 72.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1498189294836886;  // std dev = 0.180, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.21594700575652961;  // std dev = 1.877, 41.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09462212888891328;  // std dev = 0.144, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3940066211368771;  // std dev = 0.800, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11975351007874696;  // std dev = 0.230, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1890831376185869;  // std dev = 0.760, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else return 0.09109722159649024;  // std dev = 1.259, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08232444851771939;  // std dev = 0.028, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09692312068103233;  // std dev = 0.034, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.02370117314988561;  // std dev = 1.155, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.014304551139223775;  // std dev = 1.329, 75.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.19371423295310952;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01748358827607043;  // std dev = 1.966, 71.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.886', 'seconds']
Parameter learned model CLL:-0.111393 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.708, 3, 104], 'true,false,true': [0.0, 162, 0], 'true,false,false': [0.26, 51, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.894, 1, 4], 'false,true,false': [4.59e-08, 44, 0], 'false,false': [0.456, 55, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.197, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.269, 150, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.794, 50, 4], 'false,false,false,true': [0.871, 1, 8], 'false,false,false,false': [4.936, 95, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.667, 3, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.224, 0, 3], 'true,false,false': [0.193, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.181, 0, 6], 'false,false,true,false': [1.328, 2, 15], 'false,false,false,true': [4.632, 251, 34], 'false,false,false,false': [4.098, 77, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.416, 2, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.051, 187, 0], 'false,true,false,false': [0.012, 40, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.26, 99, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.312, 2, 77], 'true,false': [0.827, 1, 1], 'false,true,true': [0.062, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.357, 0, 39], 'false,false,true,false': [1.799, 255, 5], 'false,false,false': [0.328, 48, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.154, 161, 82], 'false,true': [1.024, 1, 22], 'false,false,true': [1.666, 1, 52], 'false,false,false,true': [0.194, 80, 0], 'false,false,false,false': [0.211, 68, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.238, 5, 121], 'true,false': [1.682, 249, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.272, 53, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.0, 1, 83], 'true,false,true': [0.074, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.146, 158, 19], 'false,false,false,true': [2.046, 90, 28], 'false,false,false,false': [2.424, 48, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.18, 3, 78], 'false,true,true,true': [1.877, 3, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.144, 207, 0], 'false,false,true': [0.8, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.23, 78, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.76, 0, 85], 'true,true,false': [1.259, 2, 19], 'true,false,true': [0.028, 151, 0], 'true,false,false,true': [0.034, 27, 0], 'true,false,false,false': [1.155, 19, 4], 'false,true': [1.329, 50, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.966, 50, 21]}]
{'': [0.2222222222222245, 0.2191380569758956], 'true': [0.02725128832212642, 0.018093397608783264], 'false': [0.22959183673469508, 0.20792241946088197], 'false,true': [0.03698224852071082, 4.794144879063176e-17], 'false,true,true': [0.0, 0.15999999999999986], 'true,false': [-1.507710280355151e-16, 0.06743801652892546]}
{'': [0.00045846497978955955, 0.12680689057046765], 'false': [0.07248817126574984, 0.16496783831265913], 'false,false': [0.05961019373577992, 0.1900010411060881], 'false,false,false': [0.08428183786459699, 0.1804976190833228], 'false,true': [nan, 0.07248817126574984], 'false,false,true': [nan, 0.05961019373577992]}
{'': [0.03724420514039282, 0.11235795203546385], 'false': [nan, 0.11235795203546407], 'false,false': [0.0825162581952923, 0.1009087898444106], 'false,false,false': [0.07528172892518002, 0.16791668771880727], 'false,false,true': [0.00543034704826099, 0.10380622837370232], 'true': [0.03968311953872298, 0.010739744799373098], 'true,true': [0.03968311953872298, nan], 'true,false': [0.01676392798319193, 0.004676052755934856]}
{'': [0.0369499562164398, 0.0005484806412698516], 'false': [2.5717560524810355e-05, 0.0006804862538441037], 'false,false': [nan, 0.0006804862538441037], 'false,false,false': [nan, 0.0006804862538441037], 'false,true': [nan, 2.5717560524810355e-05], 'false,true,false': [1.377950806804323e-05, 3.87310396885443e-06]}
{'': [0.0339242338544393, 0.0799468753082425], 'false': [0.001764374531403281, 0.07878252911427762], 'false,false': [0.0725020170405761, 0.10754369538751422], 'false,false,true': [0.003269243936878925, 0.012449438546554274], 'true': [0.0217928735774831, 0.3419884030318969], 'false,true': [0.00019074485629267947, 0.0]}
{'': [0.040936596757892386, 0.08844071716132892], 'false': [0.04560593949010942, 0.08979741882926645], 'false,false': [0.05236748646730013, 0.0005647332459630551], 'true': [nan, 0.04093659675789242], 'true,false': [nan, 0.040936596757892386], 'false,false,false': [0.0004720579495802457, 0.0006529284262525107]}
{'': [0.04724600464584102, 0.06374337386724106], 'false': [nan, 0.06374337386724112], 'false,false': [nan, 0.06374337386724106], 'false,false,false': [nan, 0.06374337386724106], 'true': [0.03974356575457572, 0.011057042389346215]}
{'': [0.01215363741395199, 0.039187762364901256], 'false': [nan, 0.03918776236490161], 'false,false': [0.02128741090014565, 0.05381650289536133], 'false,false,false': [0.035484880951519304, 0.0815980783045933], 'true': [0.011906785990306626, 0.002754328900010178], 'true,false': [0.002754328900010178, nan]}
{'': [0.03238391309379448, 0.0417442905577375], 'false': [0.027595471444602133, 0.06501552593348248], 'false,false': [0.015994406662489302, 0.0006801640242904943], 'false,true': [0.0859092265822072, 9.951415039129626e-05], 'false,true,true': [0.0859092265822072, nan], 'false,false,false': [nan, 0.0006801640242904943]}
{'': [0.02600101954198139, 0.03848777420539976], 'false': [0.023552261493718068, 0.05379998760872864], 'false,false': [0.0, 0.05446459692637636], 'false,false,false': [nan, 0.05446459692637633], 'true': [0.021925067224693333, 0.007043180587832591], 'true,true': [0.006795026879333305, 0.07546659938018888], 'true,false': [5.179091719025426e-06, 0.028024359354438887], 'true,false,false': [4.194917179416323e-05, 0.057978090711667284]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 10.775
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.821111898062474;  // std dev = 0.189, 108.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=104 */
%   | else return -0.12445976055266228;  // std dev = 0.131, 230.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.47e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7914822684328456;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.29564893509951234;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then return 0.7056109400131205;  // std dev = 0.144, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | else return 0.7268875357578021;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.7401372988766817;  // std dev = 0.197, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.7395612222193391;  // std dev = 0.197, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.12736506993452223;  // std dev = 0.000, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7352797371976779;  // std dev = 0.129, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.1279037533826255;  // std dev = 0.086, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09986684166876753;  // std dev = 1.447, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.1515558589308762;  // std dev = 2.160, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.5716731677556298;  // std dev = 0.279, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else if ( tweets(A, E) )
%   | | then return 0.5594057813937061;  // std dev = 2.98e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.22607244806037277;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return 0.22621442936033712;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5791934453517701;  // std dev = 0.277, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.11386812213595718;  // std dev = 0.000, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.563978219386983;  // std dev = 0.006, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.07891126671180045;  // std dev = 3.178, 101.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=29 */
%   | | | else return 0.17158849080246083;  // std dev = 2.487, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.4315064682410351;  // std dev = 0.321, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.2797811221156089;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.07217734260605069;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return 0.43112946437729943;  // std dev = 0.261, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.557528130910797;  // std dev = 0.199, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.7275018175930661;  // std dev = 0.165, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(J, A) )
%   | then if ( tweets(A, K) )
%   | | then return -0.10287385504636892;  // std dev = 1.32e-07, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | | else return -0.1028738550463692;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return -0.144439758898088;  // std dev = 0.450, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3273721997466673;  // std dev = 0.028, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return 0.17642181467099669;  // std dev = 0.857, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.2928251887672909;  // std dev = 0.318, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.26444470383591046;  // std dev = 0.971, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.3705140360685896;  // std dev = 0.065, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5137768027084558;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(I, A) )
%   | | then return -0.0600636282929372;  // std dev = 0.116, 216.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=17 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.033751796487798864;  // std dev = 2.190, 92.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=25 */
%   | | | else return 0.08152929390861417;  // std dev = 2.247, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.23218958680713664;  // std dev = 0.987, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.14671950133705114;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.2634918602016968;  // std dev = 0.023, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( tweets(A, G) )
%   | | then return -0.045910526147994075;  // std dev = 0.127, 137.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=14 */
%   | | else return -0.07683161700640811;  // std dev = 0.070, 35.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2825106125781819;  // std dev = 0.049, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.17748502844718966;  // std dev = 1.103, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.4003793944403314;  // std dev = 1.410, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | | else return -0.11141528218839153;  // std dev = 0.033, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.21707973991857585;  // std dev = 0.012, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( tweets(A, E), tweets(C, E) )
%   | | | then return 0.08150345021571201;  // std dev = 1.316, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return 0.20967976359327947;  // std dev = 0.010, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.22987692938896373;  // std dev = 0.041, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(F, A) )
%   | then return -0.05231419920809335;  // std dev = 0.132, 258.000 (wgt'ed) examples reached here.  /* #neg=235 #pos=23 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.29107140527702396;  // std dev = 0.100, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.09902670437863448;  // std dev = 0.009, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.06185164226090088;  // std dev = 1.207, 36.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=14 */
%   | | | else return 0.03373621065974692;  // std dev = 1.841, 38.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=13 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, C) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.19321714538731;  // std dev = 0.168, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0.12243584461081776;  // std dev = 0.984, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.2672619876891993;  // std dev = 1.064, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return -0.05288963694757176;  // std dev = 1.209, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.1931332277853251;  // std dev = 0.025, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.2975806153729954;  // std dev = 0.986, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.07959161134409799;  // std dev = 0.029, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.007729728955105253;  // std dev = 1.870, 115.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=29 */
%   | | | else return 0.06206432409891986;  // std dev = 1.642, 27.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.17526242938651876;  // std dev = 0.048, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.15648876779280854;  // std dev = 0.001, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.18749192645763854;  // std dev = 1.053, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.26320641964263514;  // std dev = 0.308, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.1138584220247628;  // std dev = 0.938, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.07419961070745264;  // std dev = 0.002, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.18578209231902396;  // std dev = 0.967, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.36364712379057096;  // std dev = 0.367, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.11894837402785956;  // std dev = 0.046, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1556647980548656;  // std dev = 0.038, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else return -0.06303040916189617;  // std dev = 0.048, 257.000 (wgt'ed) examples reached here.  /* #neg=253 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.14928872782545352;  // std dev = 1.030, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.08027240626994214;  // std dev = 9.13e-09, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.013505825010787911;  // std dev = 0.337, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 5.556425544078711E-4;  // std dev = 0.658, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.38077001752182366;  // std dev = 0.065, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.0031814510844732982;  // std dev = 0.946, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | | | else return -0.04625380105246577;  // std dev = 1.445, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.751', 'seconds']
Refined model CLL: -0.100426


******************************************
Best model found
******************************************
Results 

CLL : -0.099253 

AUC ROC : 0.99455 

AUC PR : 0.477171 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 10.775 

Total Inference Time : 12.211782455444336 

Total revision time: 35.286933643341065
Best scored revision CLL: -0.100426


Results 

CLL : -0.099253 

AUC ROC : 0.99455 

AUC PR : 0.477171 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 35.306753856658936 

Total Inference Time : 12.211782455444336 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.482
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.777791792242368;  // std dev = 2.877, 112.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004883;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | | else return -0.05851773156715447;  // std dev = 0.276, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0.15814893509951236;  // std dev = 0.458, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7369844787632961;  // std dev = 0.129, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.030275607217642417;  // std dev = 0.270, 199.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09487591597187418;  // std dev = 0.980, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5431360607253592;  // std dev = 0.927, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.11739564116514864;  // std dev = 3.204, 61.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5572507409080962;  // std dev = 1.470, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.7412515745168464;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8150446108108552;  // std dev = 0.086, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6362889798731954;  // std dev = 0.131, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5708264227012406;  // std dev = 3.65e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5708264227012406;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03302372829509722;  // std dev = 3.666, 192.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=21 */
%   | | | else return -0.0022131284763236294;  // std dev = 2.888, 75.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4956278465309992;  // std dev = 2.506, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1190993117613361;  // std dev = 0.027, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | | else return -0.12192351286948934;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1481977971377982;  // std dev = 0.150, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3368617153523149;  // std dev = 0.535, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | else return 0.430769936259225;  // std dev = 0.127, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.314054737083418;  // std dev = 4.47e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6429372710836454;  // std dev = 0.203, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08359431414181148;  // std dev = 2.327, 245.000 (wgt'ed) examples reached here.  /* #neg=236 #pos=9 */
%   | | else return -0.1085617835339825;  // std dev = 2.28e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.035869291628452475;  // std dev = 3.269, 265.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1829399405402292;  // std dev = 1.020, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5387385030586634;  // std dev = 0.771, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1164062930780371;  // std dev = 0.094, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | | else return -0.1108756275909004;  // std dev = 0.118, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25155014970904693;  // std dev = 2.304, 112.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=107 */
%   | else return -0.0775890435351308;  // std dev = 2.154, 232.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.047335963083819994;  // std dev = 0.647, 18.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18751017320310853;  // std dev = 0.996, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.22947809213614345;  // std dev = 0.041, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04696502212470711;  // std dev = 0.147, 219.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.022282051680545072;  // std dev = 1.647, 59.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=13 */
%   | | | else return 0.09654547782815669;  // std dev = 1.655, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15640522516449162;  // std dev = 0.182, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2918708768545152;  // std dev = 0.713, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09141094564070515;  // std dev = 0.033, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.40663670565074317;  // std dev = 0.951, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12104971773152888;  // std dev = 0.127, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19328346646757016;  // std dev = 0.814, 94.000 (wgt'ed) examples reached here.  /* #pos=94 */
%   | | else return 0.1430108116654018;  // std dev = 0.015, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.0846028619783373;  // std dev = 0.013, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08383767023170273;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return 0.01750151319079897;  // std dev = 0.439, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.05709369151188763;  // std dev = 0.937, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.4312676196179557;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08385518303863958;  // std dev = 1.322, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.525', 'seconds']
Parameter learned model CLL:-0.1117 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.877, 9, 103], 'true,false,true': [0.0, 179, 0], 'true,false,false': [0.276, 22, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.05e-08, 22, 0], 'false,false': [0.458, 21, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.129, 0, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.27, 177, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.98, 24, 1], 'false,false,false,true': [0.927, 1, 4], 'false,false,false,false': [3.204, 44, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.47, 2, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.086, 0, 2], 'true,false,false': [0.131, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [3.65e-08, 0, 9], 'false,false,true,false': [2.98e-08, 0, 8], 'false,false,false,true': [3.666, 171, 21], 'false,false,false,false': [2.888, 64, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.506, 5, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.027, 160, 0], 'false,true,false,false': [0.0, 26, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.15, 56, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.535, 0, 73], 'true,false': [0.127, 0, 4], 'false,true,true': [4.47e-08, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.203, 0, 23], 'false,false,true,false': [2.327, 236, 9], 'false,false,false': [2.28e-09, 13, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.269, 174, 91], 'false,true': [1.02, 1, 13], 'false,false,true': [0.771, 0, 22], 'false,false,false,true': [0.094, 34, 0], 'false,false,false,false': [0.118, 39, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.304, 5, 107], 'true,false': [2.154, 221, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.647, 10, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.996, 1, 80], 'true,false,true': [0.041, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.147, 197, 22], 'false,false,false,true': [1.647, 46, 13], 'false,false,false,false': [1.655, 18, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.182, 3, 77], 'false,true,true,true': [0.713, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.033, 223, 0], 'false,false,true': [0.951, 1, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.127, 37, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.814, 0, 94], 'true,true,false': [0.015, 0, 9], 'true,false,true': [0.013, 194, 0], 'true,false,false,true': [0.0, 20, 0], 'true,false,false,false': [0.439, 5, 2], 'false,true': [0.937, 16, 12], 'false,false,true': [0.816, 2, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.322, 14, 8]}]
{'': [0.22222222222222435, 0.2204589843750001], 'true': [0.07389987244898195, 0.00975515057390359], 'false': [0.22837370242214483, 0.21000000000000008], 'false,true': [-1.4802973661668753e-16, 5.046468293750712e-18], 'true,false': [-1.9847562451399445e-16, 0.07638888888888894], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.00020271306712758605, 0.10104473810416562], 'false': [0.07286884455231077, 0.15393713620554111], 'false,false': [0.038399999999999955, 0.18127474981624794], 'false,false,false': [0.17170474314462697, 0.16832774440720852], 'false,true': [nan, 0.07286884455231077], 'false,false,true': [nan, 0.038399999999999955]}
{'': [0.02992824414738331, 0.09681916376593674], 'false': [nan, 0.09681916376593681], 'false,false': [5.224578939412501e-17, 0.08177811511218458], 'false,false,false': [0.07001376571676893, 0.11121221185752318], 'true': [0.030060155865343045, 0.011206207423791229], 'true,true': [0.03001387300591052, 0.0], 'true,false': [0.0036931876676872255, 0.004311525437869557], 'false,false,true': [1.4802973661668753e-16, 1.1102230246251565e-16]}
{'': [0.047953947086128, 0.00024288211169366057], 'false': [4.992979292500098e-06, 0.0003997663766352387], 'false,false': [nan, 0.0003997663766352387], 'false,false,false': [nan, 0.0003997663766352387], 'false,true': [nan, 4.9929792925024855e-06], 'false,true,false': [4.689398054588678e-06, -4.270088556250602e-18]}
{'': [0.004363687745452088, 0.06207142250310536], 'false': [1.1755302613678128e-16, 0.059257691126142854], 'false,false': [0.06177939101640236, 4.270088556250602e-18], 'false,false,true': [0.0017839242380502216, 0.022111218063630186], 'true': [0.003925001877038909, 0.0040090679786067285], 'false,true': [1.1755302613678128e-16, nan]}
{'': [0.04033219834157375, 0.08355154494865004], 'false': [0.07438605349182549, 0.08218843881203268], 'false,false': [0.02700087958966879, 0.0003177675426806911], 'true': [nan, 0.040332198341574164], 'true,false': [nan, 0.04033219834157375], 'false,false,false': [0.0002597213913997675, 0.0003541252925052252]}
{'': [0.05270034677606072, 0.02326070663338949], 'true': [0.04737751133231666, 0.019998909626249832], 'false': [nan, 0.02326070663338949], 'false,false': [nan, 0.02326070663338949], 'false,false,false': [nan, 0.02326070663338949]}
{'': [0.012018608751527276, 0.03495573928607952], 'false': [nan, 0.034955739286079424], 'false,false': [0.021519737277622422, 0.06641151028587866], 'false,false,false': [0.045961200462529064, 0.10141226010734067], 'true': [0.012252296471930482, 0.0008353909693518125], 'true,false': [0.0008353909693518125, nan]}
{'': [0.03316887863205341, 0.030063316528319846], 'false': [0.018117718121432758, 0.0780298377431313], 'false,false': [0.05020185383229167, 0.00043771576018115146], 'false,true': [0.015871097815495394, 4.971433096162921e-06], 'false,true,true': [0.015871097815495394, nan], 'false,false,false': [nan, 0.00043771576018115146]}
{'': [0.01875199874853018, 0.07563346075317982], 'false': [0.031375674467942496, 0.1245530410308981], 'false,false': [0.2222222222222222, 0.07939233610497592], 'false,false,false': [nan, 0.07939233610497592], 'true': [0.006636566336076342, 0.0011908868543711623], 'true,true': [0.007048773312777411, 2.4789165778860145e-05], 'true,false': [8.473467973637182e-07, 0.009099786995836686], 'true,false,false': [-2.7755575615628915e-18, 0.027492045007520727]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 8.927
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.7528857772047755;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.13300150737836455;  // std dev = 0.094, 226.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.08891816586874314;  // std dev = 0.421, 26.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.721773529481087;  // std dev = 0.153, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.6194734122109542;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.7515855591644457;  // std dev = 0.173, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.10784789290751515;  // std dev = 1.485, 140.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=3 */
%   | | | else return 0.019178850963500336;  // std dev = 2.720, 71.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.08738909025427902;  // std dev = 2.205, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
%   | | | else return 0.16896846000363985;  // std dev = 2.191, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5316258906538947;  // std dev = 0.164, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.5474233982882168;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.650168264579921;  // std dev = 0.254, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.55498773639221;  // std dev = 0.000803, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.44368727510406153;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09830303245517334;  // std dev = 1.508, 150.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=3 */
%   | | | else return 0.02312202491585891;  // std dev = 2.712, 67.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09201465740958419;  // std dev = 2.004, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return 0.206253088981847;  // std dev = 2.175, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.4130145902915065;  // std dev = 0.818, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.2219229482938184;  // std dev = 0.941, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(G, A), follows(G, D) )
%   | | | then return 0.3680359357329223;  // std dev = 0.956, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.14110590657463865;  // std dev = 0.886, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.4299841196813368;  // std dev = 0.056, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.720027806293543;  // std dev = 0.265, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.11282983332998221;  // std dev = 0.155, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | | else return -0.1210903185361365;  // std dev = 0.081, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else return -0.1656807256456707;  // std dev = 0.156, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then return 0.30833839205499236;  // std dev = 0.130, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else return 0.37561634751682643;  // std dev = 0.061, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.2332754374883906;  // std dev = 0.976, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.054949205244774285;  // std dev = 0.879, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.3993130559969038;  // std dev = 0.175, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.32924697204697084;  // std dev = 0.012, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5106598293593495;  // std dev = 0.982, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.08397190484676709;  // std dev = 2.057, 230.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=9 */
%   | | else return -0.09517861580076549;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25048444270909154;  // std dev = 0.115, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return -0.09089203685349931;  // std dev = 1.089, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2696636224602543;  // std dev = 0.046, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.05481757269158904;  // std dev = 1.854, 169.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=12 */
%   | | | else return -0.05023284610495406;  // std dev = 0.853, 33.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.28256140830222;  // std dev = 0.061, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.36538160016731897;  // std dev = 0.168, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.5795357834675187;  // std dev = 0.285, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.12073396259664289;  // std dev = 0.025, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.20861921404885897;  // std dev = 0.108, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( tweets(A, F), follows(D, E) )
%   | | | then return -0.07815214268008792;  // std dev = 1.349, 123.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=3 */
%   | | | else return -0.08368773458118182;  // std dev = 0.000697, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.3823547780003796;  // std dev = 0.419, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.10345181411632892;  // std dev = 0.018, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.30347548427388604;  // std dev = 0.179, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.11029935155495721;  // std dev = 0.028, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.01936177214198333;  // std dev = 0.565, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.061894333167015106;  // std dev = 1.309, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17228891891672946;  // std dev = 0.109, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else return 0.2730063100864226;  // std dev = 0.139, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.06936192212011175;  // std dev = 0.095, 160.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=3 */
%   | | else if ( follows(A, E), tweets(E, G) )
%   | | | then return -0.008252810504625847;  // std dev = 1.563, 86.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=19 */
%   | | | else return -0.07040771999565748;  // std dev = 0.378, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.24403127899460497;  // std dev = 0.155, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.09884885239447269;  // std dev = 0.023, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08305252213549064;  // std dev = 0.487, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.13342779584874934;  // std dev = 1.167, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then return 0.14031850741033788;  // std dev = 0.136, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else return 0.1802695840857927;  // std dev = 0.038, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.2012004759033763;  // std dev = 0.059, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.15443580752231154;  // std dev = 0.030, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.3997637494948076;  // std dev = 0.305, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.07781366987043875;  // std dev = 0.009, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.2213311930046776;  // std dev = 0.069, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.29821654147656884;  // std dev = 0.916, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.12579655195624567;  // std dev = 0.041, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.113711279136179;  // std dev = 1.395, 74.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | | | else return 0.1986097237192513;  // std dev = 1.178, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else return 0.14031479492954801;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.07037184564255294;  // std dev = 0.036, 200.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), follows(A, H) )
%   | | then return 0.007630088875267143;  // std dev = 0.122, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
%   | | else return -0.028990871022804888;  // std dev = 0.220, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.21151255518758716;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.11158654110327484;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.04553276357567245;  // std dev = 0.261, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.043', 'seconds']
Refined model CLL: -0.104816


******************************************
Best model found
******************************************
Results 

CLL : -0.103023 

AUC ROC : 0.994772 

AUC PR : 0.367586 

Precision : 0.338428 

Recall : 0.99359 

F1 : 0.504886 

Total Learning Time : 8.927 

Total Inference Time : 11.06514573097229 

Total revision time: 31.300573190689086
Best scored revision CLL: -0.104816


Results 

CLL : -0.103023 

AUC ROC : 0.994772 

AUC PR : 0.367586 

Precision : 0.338428 

Recall : 0.99359 

F1 : 0.504886 

Total Learning Time : 31.330491622924804 

Total Inference Time : 11.06514573097229 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.719
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8122773754664835;  // std dev = 2.184, 109.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | | else return -0.06185106490048773;  // std dev = 0.271, 50.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.94e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else return 0.16895974591032248;  // std dev = 0.463, 74.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7201930889187462;  // std dev = 1.016, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03407162694066317;  // std dev = 0.266, 176.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06418082585900275;  // std dev = 1.797, 53.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.755494574507735;  // std dev = 0.132, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1164134171155057;  // std dev = 5.006, 145.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5497352688325162;  // std dev = 1.457, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7324265946575682;  // std dev = 0.219, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5947455555475515;  // std dev = 0.182, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.4783427681824492;  // std dev = 0.797, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5664863093254658;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.015816550367379646;  // std dev = 4.643, 262.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=34 */
%   | | | else return 0.05568086331424763;  // std dev = 4.107, 107.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5252157074284827;  // std dev = 3.006, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12198576483233518;  // std dev = 0.064, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | | | else return -0.12913317675731356;  // std dev = 0.017, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1607373551569502;  // std dev = 0.260, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.31542254129706315;  // std dev = 0.996, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return 0.4710363802925037;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.261782114187419;  // std dev = 0.981, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.5344701095206119;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6413962821392192;  // std dev = 0.331, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10479753234752658;  // std dev = 1.820, 269.000 (wgt'ed) examples reached here.  /* #neg=264 #pos=5 */
%   | | else return 0.013855878205609715;  // std dev = 0.312, 72.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03177529243964784;  // std dev = 3.176, 236.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26526993797058046;  // std dev = 0.180, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4958546425123488;  // std dev = 1.623, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12377870158580126;  // std dev = 0.168, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | | else return -0.1249835833456798;  // std dev = 0.156, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2897971062746983;  // std dev = 1.365, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else return -0.08527634342113559;  // std dev = 1.696, 233.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.047739613038451714;  // std dev = 2.288, 84.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15683598388637773;  // std dev = 1.701, 86.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2602665219501902;  // std dev = 0.026, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.042924287630293594;  // std dev = 0.147, 173.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.005301873395954178;  // std dev = 2.099, 124.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=28 */
%   | | | else return 0.09308751646662264;  // std dev = 2.348, 62.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14299137613719112;  // std dev = 0.197, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.24126816491407785;  // std dev = 1.583, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09349716707783713;  // std dev = 0.128, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.39704602140638356;  // std dev = 0.810, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11688633316590503;  // std dev = 0.284, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18915795044488876;  // std dev = 0.722, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else return 0.17173006720351067;  // std dev = 0.369, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08352601052458582;  // std dev = 0.026, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09702739165412667;  // std dev = 0.036, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.0346013710618576;  // std dev = 0.990, 33.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 8.289166922372892E-4;  // std dev = 1.401, 89.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.17057342121796926;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.010336011767086466;  // std dev = 1.982, 73.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.322', 'seconds']
Parameter learned model CLL:-0.112468 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.184, 5, 104], 'true,false,true': [0.0, 177, 0], 'true,false,false': [0.271, 46, 4], 'false,true,true,true': [0.977, 1, 21], 'false,true,true,false': [0.894, 1, 4], 'false,true,false': [4.94e-08, 46, 0], 'false,false': [0.463, 51, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.016, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.266, 157, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.797, 49, 4], 'false,false,false,true': [0.132, 0, 8], 'false,false,false,false': [5.006, 105, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.457, 2, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.219, 0, 3], 'true,false,false': [0.182, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.797, 1, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.643, 228, 34], 'false,false,false,false': [4.107, 84, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [3.006, 7, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.064, 193, 0], 'false,true,false,false': [0.017, 48, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.26, 102, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.996, 1, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.981, 1, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.331, 0, 39], 'false,false,true,false': [1.82, 264, 5], 'false,false,false': [0.312, 59, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.176, 154, 82], 'false,true': [0.18, 0, 22], 'false,false,true': [1.623, 2, 52], 'false,false,false,true': [0.168, 64, 0], 'false,false,false,false': [0.156, 62, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.365, 1, 121], 'true,false': [1.696, 226, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.288, 56, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.701, 3, 83], 'true,false,true': [0.026, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.147, 154, 19], 'false,false,false,true': [2.099, 96, 28], 'false,false,false,false': [2.348, 38, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.197, 3, 78], 'false,true,true,true': [1.583, 2, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.128, 231, 0], 'false,false,true': [0.81, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.284, 92, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.722, 0, 85], 'true,true,false': [0.369, 0, 19], 'true,false,true': [0.026, 166, 0], 'true,false,false,true': [0.036, 23, 0], 'true,false,false,false': [0.99, 29, 4], 'false,true': [1.401, 64, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.982, 52, 21]}]
{'': [0.21811224489796133, 0.21990837151187081], 'false': [0.22518296115594033, 0.21420745069393815], 'false,true': [0.06858710562414343, 5.3097622916855314e-17], 'true': [0.04376735964986345, 0.017310640610141755], 'false,true,true': [0.04338842975206614, 0.15999999999999986], 'true,false': [-1.9068237259098733e-16, 0.07359999999999985]}
{'': [0.011992283044833707, 0.12353949980109379], 'false': [0.070520139796293, 0.16118952417503704], 'false,false': [0.060905481411541895, 0.18414484607609202], 'false,false,false': [0.0021771571160791314, 0.1728289014935298], 'false,true': [nan, 0.070520139796293], 'false,false,true': [nan, 0.060905481411541895]}
{'': [0.028875447584847523, 0.11609805161875167], 'false': [nan, 0.11609805161875035], 'false,false': [0.030592870008601194, 0.1051798769401113], 'false,false,false': [0.08226593723059109, 0.15765733343386684], 'false,false,true': [0.09085178104164801, -5.921189464667501e-17], 'true': [0.03077052392780278, 0.011109266320884553], 'true,true': [0.03077052392780278, nan], 'true,false': [0.015965577234620332, 0.004118312856302542]}
{'': [0.055433245780734344, 0.0005072702489089521], 'false': [2.6252468516339608e-05, 0.000664768777941849], 'false,false': [nan, 0.000664768777941849], 'false,false,false': [nan, 0.000664768777941849], 'false,true': [nan, 2.625246851634145e-05], 'false,true,false': [2.119619970853435e-05, 5.672090297210071e-06]}
{'': [0.012860455297165646, 0.07986062652423515], 'false': [0.04698996164076858, 0.07747588142656323], 'false,false': [0.07268875967559514, 0.09748070900836767], 'false,false,true': [0.0028122151308613897, 0.012315004157060305], 'false,true': [0.04584763600726503, 0.0], 'true': [0.01271880550023247, 0.0]}
{'': [0.042731796288392146, 0.08947434144682115], 'false': [0.001476614211888171, 0.09571610886461455], 'false,false': [0.04880595378735585, 0.0004162909457154706], 'true': [nan, 0.04273179628839183], 'true,false': [nan, 0.042731796288392146], 'false,false,false': [0.0004385617669272878, 0.0003925643191420786]}
{'': [0.04508761348584792, 0.06234041836309493], 'false': [nan, 0.06234041836309475], 'false,false': [nan, 0.06234041836309493], 'false,false,false': [nan, 0.06234041836309493], 'true': [0.015278778774261615, 0.01234927481951452]}
{'': [0.03312413362242344, 0.040343538529956965], 'false': [nan, 0.04034353852995692], 'false,false': [0.021493262014776394, 0.055486697063260634], 'false,false,false': [0.03554178802764652, 0.08892286710946876], 'true': [0.033643515689724623, 0.00033596207439667847], 'true,false': [0.00033596207439667847, nan]}
{'': [0.03869365798813026, 0.03735191370338532], 'false': [0.023405103128160718, 0.0613597205034013], 'false,false': [0.016383855553719462, 0.0008761216441987936], 'false,true': [0.06263636143987154, 7.0434892305822e-05], 'false,true,true': [0.06263636143987154, nan], 'false,false,false': [nan, 0.0008761216441987936]}
{'': [0.020372507492312664, 0.036281797250777494], 'false': [0.022057379334655677, 0.053058389266029765], 'false,false': [0.0, 0.05382734970280143], 'false,false,false': [nan, 0.05382734970280147], 'true': [0.006371753345745549, 0.004760026327725783], 'true,true': [0.006135381469940704, 0.007180964698255851], 'true,false': [3.990326988483714e-06, 0.01845284036629281], 'true,false,false': [5.491771027613595e-05, 0.029675078068287848]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 10.623
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8273797043302819;  // std dev = 1.392, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.12341788517698604;  // std dev = 0.135, 217.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048768;  // std dev = 5.37e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else return 0.16249676118646889;  // std dev = 0.460, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7140543022579393;  // std dev = 0.122, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else return 0.6657294598828607;  // std dev = 0.235, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.6770668612566115;  // std dev = 0.953, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.12748091227109493;  // std dev = 1.05e-07, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | | else return -0.10181562971103311;  // std dev = 0.145, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.09474130995112708;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return -0.07766006965450402;  // std dev = 1.162, 34.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1255957800128508;  // std dev = 4.628, 137.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.5589618822509457;  // std dev = 0.133, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.4511261685673089;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.5761261685673089;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.22203310341295093;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5685687175061996;  // std dev = 0.045, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.11139466795521358;  // std dev = 0.681, 155.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=1 */
%   | | | else return -0.008830839765883046;  // std dev = 2.737, 107.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=16 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09295690318412048;  // std dev = 3.083, 68.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=19 */
%   | | | else return 0.13903956261493514;  // std dev = 3.347, 64.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.43401140929986876;  // std dev = 0.244, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.21288197064989584;  // std dev = 1.078, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.36973423036799813;  // std dev = 1.060, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.42891703590076324;  // std dev = 0.233, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.23699642762488382;  // std dev = 0.660, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, I), follows(J, A) )
%   | | | then return 0.5477479550369029;  // std dev = 0.877, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.6729664410300549;  // std dev = 0.941, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   else if ( follows(K, A) )
%   | then return -0.10946826976691199;  // std dev = 0.008, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | else return -0.159240616961819;  // std dev = 0.146, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.3129099301707298;  // std dev = 1.000, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | | else return 0.1855457725185217;  // std dev = 0.963, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.3835027832859116;  // std dev = 0.114, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.5538874644673408;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.33552384865179147;  // std dev = 0.052, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.37435295805956786;  // std dev = 1.448, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return -0.10009457784209533;  // std dev = 0.125, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.034629516684150805;  // std dev = 2.150, 58.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=15 */
%   | | | else return 0.0602047275196168;  // std dev = 2.955, 83.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.27412086148637554;  // std dev = 0.033, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return -0.06956866026918795;  // std dev = 0.821, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2619355486226667;  // std dev = 0.010, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.3382532409659231;  // std dev = 0.096, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.08835709643164089;  // std dev = 0.044, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | | else return -0.07140719555603245;  // std dev = 0.105, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.2727765119255392;  // std dev = 0.057, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.4893947305488703;  // std dev = 0.113, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else return -0.1289960028885349;  // std dev = 0.030, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(A, D) )
%   | then return 0.2058708572222065;  // std dev = 0.125, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then return -0.12515894879130585;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.12990354144239386;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.2344482644709809;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A) )
%   | then return -0.042943828873804914;  // std dev = 0.125, 235.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=23 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.3036257046672996;  // std dev = 1.247, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return -0.12519461079189492;  // std dev = 0.033, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.12665222129246145;  // std dev = 0.710, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.10645108912971081;  // std dev = 1.459, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( tweets(A, F), follows(E, G) )
%   | | | then return 0.16033386428110605;  // std dev = 0.991, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | | else return 0.2040866125845411;  // std dev = 0.068, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.06607652614776933;  // std dev = 0.323, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | else return 0.33020092850254457;  // std dev = 0.033, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return 0.23268536235354945;  // std dev = 0.115, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.0768916239052285;  // std dev = 0.613, 131.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=1 */
%   | | | else return 0.0013188074197056242;  // std dev = 1.539, 77.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=16 */
%   | | else if ( tweets(A, K), follows(A, L) )
%   | | | then return 0.03558135932528906;  // std dev = 1.333, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
%   | | | else return -0.001246668295941078;  // std dev = 2.216, 92.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=25 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.13787582108275914;  // std dev = 0.993, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return -0.03290349980331775;  // std dev = 0.609, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.20572730624141716;  // std dev = 0.074, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( tweets(A, F) )
%   | | then return -0.14431573076071863;  // std dev = 0.436, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return -0.1954610288173891;  // std dev = 0.833, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.19797442764975623;  // std dev = 0.229, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | else return -0.07738342353331791;  // std dev = 0.122, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.34454029681015036;  // std dev = 0.078, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.1255705724450749;  // std dev = 0.025, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.1299567251503062;  // std dev = 0.109, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else return 0.1883504818497223;  // std dev = 0.258, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | else return -0.06420632380837327;  // std dev = 0.062, 212.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.12225883969841089;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.022094829081646172;  // std dev = 1.154, 65.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=15 */
%   | | | else return 0.07532345970255844;  // std dev = 0.565, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.16298170125621422;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.03335052746395775;  // std dev = 1.250, 48.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=12 */
%   | | | else return -0.01685419740412664;  // std dev = 1.492, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.870', 'seconds']
Refined model CLL: -0.104751


******************************************
Best model found
******************************************
Results 

CLL : -0.100897 

AUC ROC : 0.993153 

AUC PR : 0.347134 

Precision : 0.346154 

Recall : 1.0 

F1 : 0.514286 

Total Learning Time : 10.623 

Total Inference Time : 19.386781454086304 

Total revision time: 42.25927924346924
Best scored revision CLL: -0.104751


Results 

CLL : -0.100897 

AUC ROC : 0.993153 

AUC PR : 0.347134 

Precision : 0.346154 

Recall : 1.0 

F1 : 0.514286 

Total Learning Time : 42.289197675704955 

Total Inference Time : 19.386781454086304 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.336
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8118526388032147;  // std dev = 2.184, 108.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | | else return -0.08302753548872306;  // std dev = 0.235, 34.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return 0.23314893509951237;  // std dev = 0.484, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6838292391626829;  // std dev = 1.961, 86.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03221549393133223;  // std dev = 0.268, 200.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09978344692783747;  // std dev = 0.984, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5410455776123853;  // std dev = 0.923, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.09858742774356559;  // std dev = 3.252, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5497007695882424;  // std dev = 1.676, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.7350432732202736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.48005943818253316;  // std dev = 0.845, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.426325316223953;  // std dev = 0.933, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5754977767787849;  // std dev = 3.65e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5754977767787849;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03813834123100377;  // std dev = 3.671, 205.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=21 */
%   | | | else return 0.029947394918405444;  // std dev = 2.799, 61.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.512646443795039;  // std dev = 2.199, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1184317956158316;  // std dev = 0.047, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | | else return -0.1251721563007506;  // std dev = 0.000943, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15993876012852828;  // std dev = 0.195, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3285625964568311;  // std dev = 1.014, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | else return 0.10373163242145478;  // std dev = 1.281, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3134958606447701;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5577847603838214;  // std dev = 1.288, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return -0.08152282060818672;  // std dev = 2.289, 231.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=9 */
%   | | else return -0.1053276947451987;  // std dev = 2.28e-09, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02843106636523959;  // std dev = 3.569, 268.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2714285992463848;  // std dev = 0.265, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5561137495681003;  // std dev = 0.647, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11735850430105214;  // std dev = 0.131, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.12151084209290618;  // std dev = 0.163, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28535336355091334;  // std dev = 1.636, 109.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else return -0.07940959929646148;  // std dev = 2.018, 269.000 (wgt'ed) examples reached here.  /* #neg=258 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.005912029788739852;  // std dev = 1.022, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1606712344252304;  // std dev = 1.716, 83.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.29223236456561075;  // std dev = 0.136, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04714155953429219;  // std dev = 0.155, 210.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.002752426873141168;  // std dev = 1.400, 60.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=13 */
%   | | | else return 0.07306474868570281;  // std dev = 1.657, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14850607576242675;  // std dev = 0.222, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.29049540949817326;  // std dev = 0.731, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09071003483109112;  // std dev = 0.042, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.43794352455928065;  // std dev = 0.577, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11355491224320353;  // std dev = 0.168, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1396501858913079;  // std dev = 2.358, 100.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=94 */
%   | | else return 0.04106413178799974;  // std dev = 0.950, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.0863648687462947;  // std dev = 0.364, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07870386226892932;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.03618663318717514;  // std dev = 0.589, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.011719150432870378;  // std dev = 1.275, 34.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.32845683202185927;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.033745391679200626;  // std dev = 1.333, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.770', 'seconds']
Parameter learned model CLL:-0.109546 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.184, 5, 103], 'true,false,true': [0.0, 175, 0], 'true,false,false': [0.235, 32, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [2.11e-08, 26, 0], 'false,false': [0.484, 15, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.961, 4, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.268, 178, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.984, 30, 1], 'false,false,false,true': [0.923, 1, 4], 'false,false,false,false': [3.252, 46, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.676, 3, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.845, 1, 2], 'true,false,false': [0.933, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [3.65e-08, 0, 9], 'false,false,true,false': [2.98e-08, 0, 8], 'false,false,false,true': [3.671, 184, 21], 'false,false,false,false': [2.799, 50, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.199, 3, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.047, 167, 0], 'false,true,false,false': [0.000943, 40, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.195, 43, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.014, 1, 73], 'true,false': [1.281, 2, 4], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.288, 2, 23], 'false,false,true,false': [2.289, 222, 9], 'false,false,false': [2.28e-09, 19, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.569, 177, 91], 'false,true': [0.265, 0, 13], 'false,false,true': [0.647, 0, 22], 'false,false,false,true': [0.131, 33, 0], 'false,false,false,false': [0.163, 36, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.636, 2, 107], 'true,false': [2.018, 258, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.022, 12, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.716, 3, 80], 'true,false,true': [0.136, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.155, 188, 22], 'false,false,false,true': [1.4, 47, 13], 'false,false,false,false': [1.657, 20, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.222, 4, 77], 'false,true,true,true': [0.731, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.042, 190, 0], 'false,false,true': [0.577, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.168, 43, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.358, 6, 94], 'true,true,false': [0.95, 1, 9], 'true,false,true': [0.364, 169, 0], 'true,false,false,true': [0.0, 24, 0], 'true,false,false,false': [0.589, 18, 2], 'false,true': [1.275, 22, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.333, 19, 8]}]
{'': [0.22151678293146723, 0.2239854318418315], 'false': [0.21606648199445933, 0.23437500000000003], 'true': [0.04415294924554408, 0.009477804995306718], 'false,true': [-1.4802973661668753e-16, 1.708035422500241e-17], 'true,false': [-1.9032394707859825e-16, 0.05536332179930797], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.044721711069967834, 0.09806688898102975], 'false': [0.07167070400899848, 0.14584934709766662], 'false,false': [0.031217481789802243, 0.18141279539806507], 'false,false,false': [0.17049029944099897, 0.16788486498116978], 'false,true': [nan, 0.07167070400899848], 'false,false,true': [nan, 0.031217481789802243]}
{'': [0.05506149521481761, 0.09628107410906989], 'false': [nan, 0.09628107410906989], 'false,false': [5.224578939412501e-17, 0.08095124896786302], 'false,false,false': [0.06574717676114016, 0.12847430059843581], 'true': [0.038437831721221394, 0.1987422083010773], 'true,false': [0.23819065457755725, 0.17399038208669199], 'true,true': [0.03850016325782469, 0.0], 'false,false,true': [1.4802973661668753e-16, 1.1102230246251565e-16]}
{'': [0.03748462714878977, 0.00039685357583838155], 'false': [1.7830415684636147e-05, 0.0008830741071040432], 'false,false': [nan, 0.0008830741071040432], 'false,false,false': [nan, 0.0008830741071040432], 'false,true': [nan, 1.7830415684642585e-05], 'false,true,false': [1.3316634266564828e-05, 2.2210684011425563e-08]}
{'': [0.03688579179603198, 0.06193648729727515], 'false': [-3.918434204559376e-17, 0.05909264943726875], 'false,false': [0.06296461230667545, 4.382459307730881e-18], 'false,false,true': [0.0663905716320842, 0.02268034304319568], 'true': [0.013903239086883071, 0.2735794849989721], 'false,true': [-3.918434204559376e-17, nan]}
{'': [0.04754132346931034, 0.08400856070216621], 'false': [0.005386456318767919, 0.08876436894898296], 'false,false': [0.0190334390857131, 0.0006377696390995243], 'true': [nan, 0.04754132346931028], 'true,false': [nan, 0.04754132346931034], 'false,false,false': [0.000522735481101988, 0.0007349714868067841]}
{'': [0.04516192700411663, 0.0522418748888739], 'false': [nan, 0.0522418748888739], 'false,false': [nan, 0.0522418748888739], 'false,false,false': [nan, 0.0522418748888739], 'true': [0.024564320716816045, 0.015141316898481267]}
{'': [0.03524420442259876, 0.03407437340633573], 'true': [0.03546333524857144, 0.00924919902712569], 'false': [nan, 0.034074373406335325], 'false,false': [0.024074126371429336, 0.05394768122918362], 'false,false,false': [0.03267797496356222, 0.09462105594314207], 'true,false': [0.00924919902712569, nan]}
{'': [0.04917204782417007, 0.031469153752937656], 'false': [0.020343007208857632, 0.06778915205324462], 'false,false': [0.01961228925461868, 0.0006598364323247963], 'false,true': [0.016703130704182, 9.359288247915023e-06], 'false,true,true': [0.016703130704182, nan], 'false,false,false': [nan, 0.0006598364323247963]}
{'': [0.031943198996778756, 0.05646904178830577], 'false': [0.04778943237381267, 0.0664274911054811], 'false,false': [0.0, 0.06578581022994495], 'false,false,false': [nan, 0.06578581022994495], 'true': [0.0595333166630366, 0.0024640713142714678], 'true,true': [0.055584152097566654, 0.09018931680531753], 'true,false': [0.0007838671953616062, 0.008339730146812123], 'true,false,false': [-5.782411586589357e-18, 0.017361380085464645]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 11.441
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.786720363670941;  // std dev = 1.927, 56.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=52 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return -0.13292249347191704;  // std dev = 0.094, 224.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=2 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.17393840878372288;  // std dev = 0.465, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then if ( follows(C, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(A, F) )
%   | | | then return 0.7331885527674484;  // std dev = 0.014, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.5529628433958687;  // std dev = 1.811, 23.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   | | else return 0.7522506388931219;  // std dev = 0.134, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.7252537396485571;  // std dev = 0.036, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.7668438859497453;  // std dev = 0.152, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.109486523198986;  // std dev = 1.472, 152.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=3 */
%   | | | else return 0.01276291808082859;  // std dev = 2.722, 74.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.05464653558855432;  // std dev = 2.258, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
%   | | | else return 0.0906367596875056;  // std dev = 2.425, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5298974864183094;  // std dev = 1.631, 67.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=64 */
%   | | | else return 0.5980218123393454;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5980218123393454;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6434871078995408;  // std dev = 0.250, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5777881895813488;  // std dev = 0.022, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.672762088706828;  // std dev = 0.951, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.11893390471624053;  // std dev = 0.088, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.13029864948496578;  // std dev = 2.099, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | | | else return 0.020956679030121456;  // std dev = 2.518, 39.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E), tweets(A, F) )
%   | | | then return 0.4435908341485061;  // std dev = 0.093, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.4083557807267631;  // std dev = 0.969, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.22680116138163964;  // std dev = 0.916, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.4356646717261027;  // std dev = 0.079, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), tweets(A, J) )
%   | | | then return 0.4796004872310844;  // std dev = 0.162, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.43476541053062184;  // std dev = 0.148, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.5820154545353785;  // std dev = 0.954, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.7478223980462378;  // std dev = 0.344, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.11749800145110037;  // std dev = 0.024, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, E), follows(E, D) )
%   | | | then return 0.32058058674509016;  // std dev = 1.003, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | | else return 0.3429615614604721;  // std dev = 0.059, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.213693060287962;  // std dev = 0.332, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.3922533590128426;  // std dev = 0.262, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3434943732194074;  // std dev = 0.112, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return -0.06371145801601788;  // std dev = 2.039, 229.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=15 */
%   | | | else return 0.1009159830541712;  // std dev = 2.543, 51.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=17 */
%   | | else return -0.0928905731029037;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), follows(D, A) )
%   | | | then return 0.2650599061384595;  // std dev = 0.016, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.22271850936682644;  // std dev = 1.341, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | | else return -0.03326660059489909;  // std dev = 0.804, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then return -0.04202065293533232;  // std dev = 0.152, 161.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=15 */
%   | | else return -0.04985177276956646;  // std dev = 0.133, 52.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2766034269351914;  // std dev = 0.048, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.3719444795544196;  // std dev = 0.994, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.614910296490356;  // std dev = 0.283, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.13824801712515003;  // std dev = 0.032, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.2295642013671464;  // std dev = 0.261, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.2793761198567929;  // std dev = 0.069, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.24272397274724758;  // std dev = 0.106, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.07421410568672882;  // std dev = 0.887, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.3985384037607458;  // std dev = 0.941, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.08561038075216601;  // std dev = 0.075, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.04120733986918023;  // std dev = 1.376, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
%   | | | else return 6.190817285911896E-4;  // std dev = 1.629, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C) )
%   | then return 0.18761193476409005;  // std dev = 0.106, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else return 0.20601708850885667;  // std dev = 0.046, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E) )
%   | | then if ( tweets(A, F), follows(G, A) )
%   | | | then return 0.2194318318286114;  // std dev = 0.066, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1698648943425937;  // std dev = 0.059, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.018707258265532684;  // std dev = 0.708, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.06805920235951778;  // std dev = 0.807, 161.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=3 */
%   | | | else return -0.010088918577728832;  // std dev = 1.393, 70.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.009817915392836392;  // std dev = 1.421, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.05571545517446329;  // std dev = 1.515, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16244182642897326;  // std dev = 0.018, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( follows(E, A), tweets(A, F) )
%   | | then return 0.038793268308581985;  // std dev = 0.357, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(G, A) )
%   | | | then return -0.12550825498083554;  // std dev = 0.846, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.03861814384975095;  // std dev = 0.916, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.3121767587220641;  // std dev = 0.415, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.043951494275606094;  // std dev = 1.399, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | else return -0.07643250466006718;  // std dev = 0.090, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else if ( recursion_accounttype(L, B) )
%   | | then return 0.44447637980771715;  // std dev = 0.043, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.15315422614325633;  // std dev = 0.018, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.12991942544531254;  // std dev = 0.112, 82.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=81 */
%   | | else return 0.2721261740005892;  // std dev = 0.062, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.07131677647165208;  // std dev = 0.056, 216.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return -0.10268554878965755;  // std dev = 0.862, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.016363442014492687;  // std dev = 0.796, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | | else return 0.0029057094631361876;  // std dev = 0.700, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.2437786510142287;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.015607083911575784;  // std dev = 0.742, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.02415356854510043;  // std dev = 1.128, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.124', 'seconds']
Refined model CLL: -0.108576


******************************************
Best model found
******************************************
Results 

CLL : -0.112394 

AUC ROC : 0.994554 

AUC PR : 0.416279 

Precision : 0.338428 

Recall : 0.99359 

F1 : 0.504886 

Total Learning Time : 11.441 

Total Inference Time : 11.988729000091553 

Total revision time: 33.69683389854431
Best scored revision CLL: -0.108576


Results 

CLL : -0.112394 

AUC ROC : 0.994554 

AUC PR : 0.416279 

Precision : 0.338428 

Recall : 0.99359 

F1 : 0.504886 

Total Learning Time : 33.720825006484986 

Total Inference Time : 11.988729000091553 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.716
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.995, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else return -0.048827809086534266;  // std dev = 0.290, 43.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 5.77e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0.20143251718906383;  // std dev = 0.475, 67.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7016811974341712;  // std dev = 1.417, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03114449286812475;  // std dev = 0.268, 169.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.061714497332101305;  // std dev = 1.787, 50.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.633327781911258;  // std dev = 0.979, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.10492837595999627;  // std dev = 5.017, 146.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5379421278873135;  // std dev = 1.504, 70.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7307235039563956;  // std dev = 0.221, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.49822363322218854;  // std dev = 0.994, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5949158104400677;  // std dev = 0.180, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5621011029172945;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.011136760100813875;  // std dev = 4.570, 246.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=34 */
%   | | | else return 0.03925846377477293;  // std dev = 4.161, 110.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5398077748902372;  // std dev = 2.648, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12352673864885372;  // std dev = 0.068, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | | | else return -0.12724793302124948;  // std dev = 0.013, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15815910077115464;  // std dev = 0.276, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.281554090652019;  // std dev = 1.829, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   | else return 0.4691929066460435;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.20619605749023054;  // std dev = 1.351, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | else return 0.5031057166381034;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5579409849308093;  // std dev = 1.745, 42.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=39 */
%   | | | else return -0.10278726805188057;  // std dev = 1.792, 257.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=5 */
%   | | else return 0.033873655622680666;  // std dev = 0.323, 62.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03631018507988098;  // std dev = 3.051, 236.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26451304041565826;  // std dev = 0.160, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5112354850451076;  // std dev = 1.497, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12576681630284436;  // std dev = 0.205, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | | else return -0.13506064255019826;  // std dev = 0.165, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27149609852481543;  // std dev = 2.107, 125.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=121 */
%   | else return -0.0883413804318113;  // std dev = 1.676, 254.000 (wgt'ed) examples reached here.  /* #neg=247 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04626858895246493;  // std dev = 2.222, 81.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16018404331649333;  // std dev = 1.699, 86.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.25407398844828516;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05137970710894407;  // std dev = 0.159, 182.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.005069359916958783;  // std dev = 2.154, 117.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=28 */
%   | | | else return 0.038731430978384045;  // std dev = 2.628, 78.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1498956821420161;  // std dev = 0.191, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2765213549153548;  // std dev = 1.050, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09294361042956555;  // std dev = 0.101, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.40106491978318254;  // std dev = 0.763, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11278345698672454;  // std dev = 0.248, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1806633526190981;  // std dev = 1.136, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.11807883237779068;  // std dev = 1.015, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08534211348584665;  // std dev = 0.341, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09988087046009385;  // std dev = 0.036, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | | else return -0.00996677170179625;  // std dev = 0.944, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.00391193310323564;  // std dev = 1.575, 76.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.12346255347241115;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.012896706798489609;  // std dev = 2.020, 75.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.816', 'seconds']
Parameter learned model CLL:-0.11125 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.995, 1, 104], 'true,false,true': [0.0, 164, 0], 'true,false,false': [0.29, 39, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.77e-08, 56, 0], 'false,false': [0.475, 44, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.417, 2, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.268, 150, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.787, 46, 4], 'false,false,false,true': [0.979, 1, 8], 'false,false,false,false': [5.017, 106, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.504, 3, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.221, 0, 3], 'true,false,false': [0.994, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.18, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.57, 212, 34], 'false,false,false,false': [4.161, 87, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.648, 3, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.068, 181, 0], 'false,true,false,false': [0.013, 31, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.276, 111, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.829, 4, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [1.351, 2, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.745, 3, 39], 'false,false,true,false': [1.792, 252, 5], 'false,false,false': [0.323, 49, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.051, 154, 82], 'false,true': [0.16, 0, 22], 'false,false,true': [1.497, 1, 52], 'false,false,false,true': [0.205, 89, 0], 'false,false,false,false': [0.165, 50, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.107, 4, 121], 'true,false': [1.676, 247, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.222, 53, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.699, 3, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.159, 163, 19], 'false,false,false,true': [2.154, 89, 28], 'false,false,false,false': [2.628, 54, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.191, 3, 78], 'false,true,true,true': [1.05, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.101, 212, 0], 'false,false,true': [0.763, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.248, 95, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.136, 1, 85], 'true,true,false': [1.015, 1, 19], 'true,false,true': [0.341, 169, 0], 'true,false,false,true': [0.036, 43, 0], 'true,false,false,false': [0.944, 19, 4], 'false,true': [1.575, 51, 25], 'false,false,true': [0.816, 1, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.02, 54, 21]}]
{'': [0.22633136094674802, 0.2191380569758956], 'true': [0.009433106575965852, 0.018950267217437877], 'false': [0.21338210638622274, 0.2254399643573189], 'false,true': [7.105427357601002e-16, 5.947623346206196e-17], 'true,false': [-1.5705594006892458e-16, 0.08436992969172509], 'false,true,true': [0.0, 0.0]}
{'': [0.023067457557406888, 0.12462002456163233], 'false': [0.07187055693817593, 0.1617473443835091], 'false,false': [0.06388563115084288, 0.18381885557626043], 'false,false,false': [0.1064947800360325, 0.17237345082394664], 'false,true': [nan, 0.07187055693817593], 'false,false,true': [nan, 0.06388563115084288]}
{'': [0.04174414688194361, 0.11885482347552806], 'false': [nan, 0.11885482347553003], 'false,false': [0.001758049028253415, 0.10785169308107005], 'false,false,false': [0.0848973852970616, 0.1574309258660864], 'true': [0.03229388793808349, 0.09658143937037518], 'true,false': [0.016310811717075973, 0.1098242677819525], 'true,true': [0.03229388793808349, nan], 'false,false,true': [0.0053840251490257325, 0.0]}
{'': [0.044093307378262295, 0.0005143045668583681], 'false': [2.427550857177088e-05, 0.0006875363401241012], 'false,false': [nan, 0.0006875363401241012], 'false,false,false': [nan, 0.0006875363401241012], 'false,true': [nan, 2.427550857178135e-05], 'false,true,false': [2.5450129969669377e-05, 5.594786909660536e-06]}
{'': [0.04120883019323775, 0.08216891041439796], 'false': [0.08299646724533298, 0.07917622977822313], 'false,true': [0.08293619282111542, 0.0], 'false,false': [0.07363786373211484, 0.10429288888192903], 'false,false,true': [0.07251038083555603, 0.01249905601811952], 'true': [0.041288211362940634, 0.0]}
{'': [0.039446979681073274, 0.08878023254291008], 'false': [0.0011651030550451963, 0.09398474301004228], 'false,false': [0.04226055575162119, 0.000518172672744406], 'true': [nan, 0.039446979681073836], 'true,false': [nan, 0.039446979681073274], 'false,false,false': [0.00047152351662265216, 0.0005459031824243166]}
{'': [0.04774308060780162, 0.060963396522433086], 'false': [nan, 0.06096339652243312], 'false,false': [nan, 0.060963396522433086], 'false,false,false': [nan, 0.060963396522433086], 'true': [0.03552083211223663, 0.011052488030082366]}
{'': [0.03301322596396423, 0.044152921266155026], 'false': [nan, 0.04415292126615506], 'false,false': [0.025417980851043475, 0.05967193632498967], 'false,false,false': [0.03966026131101644, 0.08853834327611507], 'true': [0.033578460655759076, 9.316064259101697e-05], 'true,false': [9.316064259101697e-05, nan]}
{'': [0.036655134024166654, 0.03673290399744395], 'false': [0.02234656399647693, 0.05982268221017343], 'false,false': [0.014552515407379785, 0.0006496852792281469], 'false,true': [0.028264118869690602, 4.8116311031326e-05], 'false,true,true': [0.028264118869690602, nan], 'false,false,false': [nan, 0.0006496852792281469]}
{'': [0.023675988610264983, 0.04727577591188764], 'false': [0.03262738014764185, 0.06154166812387898], 'false,false': [0.2222222222222222, 0.054399297965267185], 'false,false,false': [nan, 0.054399297965267275], 'true': [0.022485305527181827, 0.004865618068687675], 'true,true': [0.015007597378525661, 0.05146165144423602], 'true,false': [0.0006879088350790907, 0.015360235205145891], 'true,false,false': [3.055570857411599e-05, 0.03875286712376549]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 20.026
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.62e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004881;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.16584124279182003;  // std dev = 1.664, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return -0.14185106490048768;  // std dev = 4.47e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048768;  // std dev = 4.94e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7993254056877476;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.14185106490048768;  // std dev = 4.94e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else return 0.24703782398840124;  // std dev = 0.487, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.7230815703162273;  // std dev = 0.163, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( tweets(A, E), follows(A, C) )
%   | | then return 0.4694734122109546;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.7194734122109546;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.7296703807693349;  // std dev = 0.158, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.12785847751813287;  // std dev = 0.127, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.6740188667564088;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.12544463852839152;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.207691517495149;  // std dev = 2.506, 36.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=14 */
%   | | | else return 0.18039511755018334;  // std dev = 2.706, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.5574764874063329;  // std dev = 0.104, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else return 0.38825419208664175;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.6141703286453456;  // std dev = 0.066, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5810813496186156;  // std dev = 0.145, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.4920866752585763;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.11239348382716947;  // std dev = 0.817, 125.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=1 */
%   | | | else return -0.022009772159336718;  // std dev = 2.533, 113.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=16 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.05562908036194951;  // std dev = 3.551, 119.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=29 */
%   | | | else return 0.1412363688083819;  // std dev = 2.545, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.4223442099534919;  // std dev = 0.113, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | | else return 0.28472347256593966;  // std dev = 0.800, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.42724591103452775;  // std dev = 0.085, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.5390835778299055;  // std dev = 0.316, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, F) )
%   | | then if ( tweets(A, G), recursion_accounttype(F, B) )
%   | | | then return 0.4370443389927692;  // std dev = 0.148, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5794503640998364;  // std dev = 0.981, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.6502684866376574;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7740513912161229;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.11881281698762716;  // std dev = 0.028, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.304467172229611;  // std dev = 0.967, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | | else return 0.328109694266999;  // std dev = 0.118, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.33725989561752445;  // std dev = 0.112, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.4650228526848911;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3345486647043021;  // std dev = 0.026, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.08586603195488486;  // std dev = 0.598, 116.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=1 */
%   | | | else return -0.02319181948073417;  // std dev = 2.000, 106.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=16 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return -0.006909028115441058;  // std dev = 1.871, 73.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=15 */
%   | | | else return 0.05318712627626557;  // std dev = 3.027, 82.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.259215682127083;  // std dev = 0.124, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.42414195890047035;  // std dev = 0.209, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.08739722653812133;  // std dev = 0.065, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | | else return -0.07449514871252985;  // std dev = 0.092, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2685335387495669;  // std dev = 0.138, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.3743307594960624;  // std dev = 0.410, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.5172855263292402;  // std dev = 0.381, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.12229469626258375;  // std dev = 0.183, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | | | else return -0.12247450911540939;  // std dev = 0.391, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, C) )
%   | | | then return 0.16897953878867694;  // std dev = 1.387, 51.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   | | | else return 0.24723327681718088;  // std dev = 1.323, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | | else return -0.08472737875266617;  // std dev = 0.030, 169.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=1 */
%   | else if ( tweets(F, C), recursion_accounttype(F, B) )
%   | | then return 0.26796820959365947;  // std dev = 0.079, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.08801598816511919;  // std dev = 0.024, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then return 0.01317436731610344;  // std dev = 0.150, 55.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=17 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.3666139896733647;  // std dev = 0.291, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.13175696093358763;  // std dev = 0.037, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else return 0.008091729622735872;  // std dev = 0.307, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, G) )
%   | | | then return 0.1293939976591588;  // std dev = 1.687, 56.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=53 */
%   | | | else return 0.04608221460394919;  // std dev = 1.346, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else return 0.20584538721288925;  // std dev = 0.019, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.24781116903020917;  // std dev = 0.003, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return 0.17388554616892038;  // std dev = 0.036, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(J, I), follows(J, A) )
%   | | | then return -0.06874580057582542;  // std dev = 0.438, 142.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=1 */
%   | | | else return -0.019620422297478433;  // std dev = 1.430, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.008578178017235311;  // std dev = 1.809, 105.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=29 */
%   | | | else return 0.059182112787800625;  // std dev = 1.648, 25.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.10790057401553804;  // std dev = 1.374, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | else return 0.16439624987893312;  // std dev = 0.052, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.1796421443557637;  // std dev = 0.050, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then return 0.16832514456286796;  // std dev = 0.106, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0023234756263686668;  // std dev = 0.892, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.1836428776117861;  // std dev = 0.799, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(J, A) )
%   | then return -0.04186712899057577;  // std dev = 0.127, 286.000 (wgt'ed) examples reached here.  /* #neg=248 #pos=38 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.2979664527757;  // std dev = 0.148, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else return -0.11808906330765905;  // std dev = 0.036, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.1346189406371771;  // std dev = 0.112, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.12020241179921472;  // std dev = 0.974, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.3082005566636325;  // std dev = 0.189, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.06815220270154593;  // std dev = 0.048, 236.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.14330903800665368;  // std dev = 0.039, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.12312369213821539;  // std dev = 1.341, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return -0.0844711958827639;  // std dev = 0.094, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.04626792502045836;  // std dev = 0.945, 28.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=12 */
%   | | | else return 0.005704034275812804;  // std dev = 1.300, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.736', 'seconds']
Refined model CLL: -0.105187


******************************************
Best model found
******************************************
Results 

CLL : -0.101309 

AUC ROC : 0.991646 

AUC PR : 0.300649 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 20.026 

Total Inference Time : 21.372817516326904 

Total revision time: 53.924080984115605
Best scored revision CLL: -0.105187


Results 

CLL : -0.101309 

AUC ROC : 0.991646 

AUC PR : 0.300649 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 53.94807209205628 

Total Inference Time : 21.372817516326904 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.474
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8485335504841266;  // std dev = 0.995, 104.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048835;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | | else return -0.07518439823382113;  // std dev = 0.249, 30.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return 0.26723984419042146;  // std dev = 0.492, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7111165878131346;  // std dev = 1.006, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.02970548504573849;  // std dev = 0.270, 193.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10068491881596522;  // std dev = 0.984, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7452075089279165;  // std dev = 0.089, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.08025756768450755;  // std dev = 3.286, 68.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.526122398333588;  // std dev = 1.779, 74.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=70 */
%   | | else return 0.22734069187302383;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8201556054820436;  // std dev = 0.082, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5835787114402637;  // std dev = 0.120, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5597998653819739;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5597998653819739;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04884799898283079;  // std dev = 3.681, 234.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=21 */
%   | | | else return 0.02888589055042263;  // std dev = 2.796, 60.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5182728721727515;  // std dev = 1.723, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1173657388727229;  // std dev = 0.034, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | | | else return -0.12535474982441688;  // std dev = 2.36e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16488379293939537;  // std dev = 0.175, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3162949574637947;  // std dev = 0.990, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | else return 0.4312964780802341;  // std dev = 0.194, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.302014589293167;  // std dev = 2.58e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5850022111292351;  // std dev = 1.023, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.08534933669996018;  // std dev = 2.305, 249.000 (wgt'ed) examples reached here.  /* #neg=240 #pos=9 */
%   | | else return -0.10507335253936743;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02300911454256529;  // std dev = 3.530, 275.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.11641402804905192;  // std dev = 1.332, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.47925276307125425;  // std dev = 1.394, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1131681873321059;  // std dev = 0.100, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.11535458165607365;  // std dev = 0.168, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2771169834905256;  // std dev = 1.683, 109.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else return -0.07720756891885648;  // std dev = 2.152, 249.000 (wgt'ed) examples reached here.  /* #neg=238 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.025819383268500386;  // std dev = 0.694, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1383521010670417;  // std dev = 2.149, 85.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.2303337734164812;  // std dev = 0.055, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0428380478196543;  // std dev = 0.167, 184.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -3.898549687245568E-4;  // std dev = 1.637, 53.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=13 */
%   | | | else return 0.029467911989080404;  // std dev = 1.741, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1663815296340608;  // std dev = 0.170, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.29064529821531326;  // std dev = 0.662, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09016869553375409;  // std dev = 0.040, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4594003671927287;  // std dev = 0.591, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11087469171892832;  // std dev = 0.156, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1431642900433143;  // std dev = 2.275, 99.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=94 */
%   | | else return 0.15457555277329552;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.083608688085935;  // std dev = 0.030, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08111819921274639;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.06201657285493235;  // std dev = 0.764, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.025561448933634226;  // std dev = 1.005, 37.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20693670687945465;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07857766054363603;  // std dev = 1.305, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.738', 'seconds']
Parameter learned model CLL:-0.110037 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.995, 1, 103], 'true,false,true': [0.0, 190, 0], 'true,false,false': [0.249, 28, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.49e-08, 23, 0], 'false,false': [0.492, 13, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.006, 1, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.27, 171, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.984, 30, 1], 'false,false,false,true': [0.089, 0, 4], 'false,false,false,false': [3.286, 51, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.779, 4, 70], 'true,true,false': [0.707, 1, 1], 'true,false,true': [0.082, 0, 2], 'true,false,false': [0.12, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.681, 213, 21], 'false,false,false,false': [2.796, 49, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.723, 1, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.034, 166, 0], 'false,true,false,false': [2.36e-08, 37, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.175, 29, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.99, 1, 73], 'true,false': [0.194, 0, 4], 'false,true,true': [2.58e-08, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.023, 1, 23], 'false,false,true,false': [2.305, 240, 9], 'false,false,false': [0.0, 12, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.53, 184, 91], 'false,true': [1.332, 2, 13], 'false,false,true': [1.394, 1, 22], 'false,false,false,true': [0.1, 25, 0], 'false,false,false,false': [0.168, 38, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.683, 2, 107], 'true,false': [2.152, 238, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.694, 14, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [2.149, 5, 80], 'true,false,true': [0.055, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.167, 162, 22], 'false,false,false,true': [1.637, 40, 13], 'false,false,false,false': [1.741, 27, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.17, 2, 77], 'false,true,true,true': [0.662, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.04, 206, 0], 'false,false,true': [0.591, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.156, 38, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.275, 5, 94], 'true,true,false': [0.013, 0, 9], 'true,false,true': [0.03, 178, 0], 'true,false,false,true': [0.0, 17, 0], 'true,false,false,false': [0.764, 8, 2], 'false,true': [1.005, 25, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.305, 14, 8]}]
{'': [0.21905006858710765, 0.23268698060941828], 'false': [0.2253061224489791, 0.24173553719008264], 'false,true': [-1.4802973661668753e-16, 9.654113257610057e-18], 'true': [0.009522928994084868, 0.009008264462809753], 'true,false': [-2.220446049250313e-16, 0.062222222222222255], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.012197817461090056, 0.0977994831221844], 'false': [0.0727046597362357, 0.14050916359759702], 'false,false': [0.031217481789802298, 0.1732771627628852], 'false,false,false': [0.001986731201513825, 0.15878871359292207], 'false,true': [nan, 0.0727046597362357], 'false,false,true': [nan, 0.031217481789802298]}
{'': [0.04937334116532771, 0.08779912914608702], 'false': [nan, 0.08779912914608715], 'false,false': [-2.0898315757650005e-16, 0.07366799173642749], 'false,false,false': [0.057918641692462004, 0.1302810743426534], 'true': [0.05049076650181628, 0.015953025075386096], 'true,true': [0.0427494011581435, 0.25000000000000006], 'true,false': [0.0033738131147427186, 0.0035864221242226657], 'false,false,true': [-1.4802973661668753e-16, -1.1102230246251565e-16]}
{'': [0.023372017678236285, 0.0003765550276228376], 'false': [1.5103801035555511e-05, 0.0010502249800556306], 'false,false': [nan, 0.0010502249800556306], 'false,false,false': [nan, 0.0010502249800556306], 'false,true': [nan, 1.5103801035557698e-05], 'false,true,false': [6.837311143923042e-06, 1.50030138462859e-17]}
{'': [0.01369510166799025, 0.05970555176836161], 'false': [3.918434204559376e-17, 0.057071847432923865], 'false,false': [0.0593200045098983, 0.0], 'false,false,true': [0.043603620986618484, 0.021329676421380075], 'true': [0.013250781328446605, 0.009367901269253437], 'false,true': [3.918434204559376e-17, nan]}
{'': [0.04532224262122964, 0.09665205201431833], 'false': [0.11828548703537248, 0.09210652030079829], 'false,false': [0.08448495552177175, 0.0006085558187667564], 'true': [nan, 0.045322242621230066], 'true,false': [nan, 0.04532224262122964], 'false,false,false': [0.0003960501661502436, 0.000746465216735881]}
{'': [0.04742925682536348, 0.021911188115415904], 'true': [0.025988043076390535, 0.018590304196518085], 'false': [nan, 0.021911188115415904], 'false,false': [nan, 0.021911188115415904], 'false,false,false': [nan, 0.021911188115415904]}
{'': [0.053311180303684556, 0.04050148892040722], 'true': [0.0543357013911505, 0.0015029032346922516], 'false': [nan, 0.0405014889204076], 'false,false': [0.02797517140652862, 0.06439479485035066], 'false,false,false': [0.05056570828388443, 0.08422339833767804], 'true,false': [0.0015029032346922516, nan]}
{'': [0.02890818347471653, 0.031181028128587026], 'false': [0.018722870800693965, 0.0762444269759961], 'false,false': [0.020552407661670206, 0.0006386972149003718], 'false,true': [0.013681237702372881, 7.644120995387675e-06], 'false,true,true': [0.013681237702372881, nan], 'false,false,false': [nan, 0.0006386972149003718]}
{'': [0.03000782628196633, 0.04628897208169367], 'false': [0.027321283392992012, 0.07468481568483877], 'false,false': [0.0, 0.0773632302612696], 'false,false,false': [nan, 0.0773632302612696], 'true': [0.04792801155175895, 0.0028708220752202856], 'true,true': [0.05227253315467104, 1.8908412391583423e-05], 'true,false': [5.134391820367933e-06, 0.02168369129908964], 'true,false,false': [-2.44902137784961e-18, 0.05831623220377423]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 24.749
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8459538131482928;  // std dev = 0.110, 82.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=81 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.13223568028510374;  // std dev = 0.098, 208.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7094512365743815;  // std dev = 0.122, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else return 0.6594281704122605;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7320024275302001;  // std dev = 0.080, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12650333056359508;  // std dev = 0.000, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | | else return -0.025014116885103185;  // std dev = 0.285, 41.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.01539221945248396;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return -0.12650333056359506;  // std dev = 7.45e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7801906567465373;  // std dev = 0.045, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.11424253772254969;  // std dev = 3.190, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.5370361661188012;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.5672529762488239;  // std dev = 0.029, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.6903040968281865;  // std dev = 0.099, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.416285309641121;  // std dev = 0.913, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5630128603014352;  // std dev = 0.005, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5867152304680143;  // std dev = 0.267, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11570414338027664;  // std dev = 0.069, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.07449366574116939;  // std dev = 2.179, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.2397114738258459;  // std dev = 2.092, 20.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), tweets(E, F) )
%   | | | then return 0.38078882484192333;  // std dev = 1.693, 68.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=65 */
%   | | | else return 0.23686825297797098;  // std dev = 1.780, 22.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=18 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.4324685049422258;  // std dev = 0.002, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.6341066000895602;  // std dev = 0.161, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.541027568532934;  // std dev = 0.121, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.6634239011924677;  // std dev = 0.055, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.7674458196604895;  // std dev = 0.023, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(I, A) )
%   | then return -0.10406622455837856;  // std dev = 0.004, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else return -0.17350091369387904;  // std dev = 0.228, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.33571663247858297;  // std dev = 0.024, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | else if ( tweets(D, F), tweets(A, F) )
%   | | | then return 0.11846288367571675;  // std dev = 1.242, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.3646581407941619;  // std dev = 0.166, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.4489352968524138;  // std dev = 0.252, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3338439435217378;  // std dev = 0.032, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.06028293487475788;  // std dev = 1.734, 195.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=15 */
%   | | | else return 0.019925150646029104;  // std dev = 2.559, 67.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=17 */
%   | | else return -0.09291851341036207;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | | then return 0.20021110482257506;  // std dev = 1.639, 43.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=40 */
%   | | | else return 0.2844435281939084;  // std dev = 0.214, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.10023590415547483;  // std dev = 0.927, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, G) )
%   | | then return -0.04689962832331137;  // std dev = 0.127, 158.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=15 */
%   | | else return -0.049214441360724684;  // std dev = 0.145, 50.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then if ( follows(A, I), follows(I, J) )
%   | | then return 0.0786140998097347;  // std dev = 0.968, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.26569268096278303;  // std dev = 0.027, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.4993566801205707;  // std dev = 0.111, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.13778198368169864;  // std dev = 0.043, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, A) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.23391005022185343;  // std dev = 0.162, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0.16438522238505743;  // std dev = 0.898, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.3631247096103647;  // std dev = 0.061, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.08626414977522096;  // std dev = 0.045, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.23585319454513726;  // std dev = 0.041, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H) )
%   | | | then return -0.06524631578457649;  // std dev = 0.493, 34.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=1 */
%   | | | else return -0.3098680005652858;  // std dev = 0.522, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.012428952882831436;  // std dev = 1.601, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
%   | | | else return 0.029339160744317822;  // std dev = 1.473, 29.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.14507962782576395;  // std dev = 1.401, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.1843611429453694;  // std dev = 0.038, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.19128113698374474;  // std dev = 0.056, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.26107697461203455;  // std dev = 0.078, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.05349332946633758;  // std dev = 0.145, 237.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=23 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.360564034500072;  // std dev = 0.387, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.13419508284129705;  // std dev = 0.147, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.062132965338523506;  // std dev = 1.148, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | | | else return 0.011233764161382498;  // std dev = 1.252, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.1443490982150179;  // std dev = 0.986, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | | else return 0.031026049582459345;  // std dev = 1.320, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else return 0.18861095103586906;  // std dev = 0.033, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return 0.03711411483658215;  // std dev = 0.429, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return -0.04052389409761904;  // std dev = 0.424, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.20536515868644356;  // std dev = 0.204, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else return -0.07475911557977423;  // std dev = 0.048, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.3817290214790945;  // std dev = 0.058, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.13804601478343057;  // std dev = 0.038, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.09541737089147274;  // std dev = 2.144, 76.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=71 */
%   | | | else return 0.23390435573055282;  // std dev = 0.325, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.02829190474641897;  // std dev = 0.301, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.06568832789942906;  // std dev = 0.041, 223.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.09735960511862668;  // std dev = 0.818, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.001292739175927338;  // std dev = 0.159, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.23639167834822383;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.01755120733313702;  // std dev = 0.670, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.00507590287406949;  // std dev = 0.988, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.780', 'seconds']
Refined model CLL: -0.104574


******************************************
Best model found
******************************************
Results 

CLL : -0.105327 

AUC ROC : 0.995123 

AUC PR : 0.437721 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 24.749 

Total Inference Time : 15.613466024398804 

Total revision time: 50.69085879135132
Best scored revision CLL: -0.104574


Results 

CLL : -0.105327 

AUC ROC : 0.995123 

AUC PR : 0.437721 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 78.33954734611511 

Total Inference Time : 15.613466024398804 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.68
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.821111898062474;  // std dev = 1.963, 108.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else return -0.06341969235146812;  // std dev = 0.269, 51.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.71e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return 0.24797944357408774;  // std dev = 0.488, 59.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7184877103526702;  // std dev = 1.016, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.033431506077040714;  // std dev = 0.264, 176.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.053383543948945865;  // std dev = 1.784, 46.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7459064020066455;  // std dev = 0.129, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.0989390732306194;  // std dev = 5.017, 149.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5250329394893891;  // std dev = 1.847, 71.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7317000829245225;  // std dev = 0.220, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5844427336385712;  // std dev = 0.174, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5970429295902775;  // std dev = 0.177, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5647347143746992;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.020080564684950127;  // std dev = 4.609, 271.000 (wgt'ed) examples reached here.  /* #neg=237 #pos=34 */
%   | | | else return 0.06929996710770242;  // std dev = 4.039, 98.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5392606330678495;  // std dev = 2.497, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1216257914133921;  // std dev = 0.064, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | | | else return -0.1311162211995105;  // std dev = 0.016, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1667045358568765;  // std dev = 0.327, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2893860299671768;  // std dev = 1.731, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   | else return 0.4685344533877912;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2990905043471598;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5021570914522977;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5844716427708554;  // std dev = 1.356, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | | else return -0.10375650129148849;  // std dev = 1.797, 260.000 (wgt'ed) examples reached here.  /* #neg=255 #pos=5 */
%   | | else return 0.006132822231001643;  // std dev = 0.297, 75.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.039241815038133565;  // std dev = 3.063, 233.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25091155109781577;  // std dev = 0.176, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5036657587007892;  // std dev = 1.337, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12123508578578826;  // std dev = 0.180, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | | else return -0.12244953893454798;  // std dev = 0.189, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28068871205300633;  // std dev = 1.832, 123.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=121 */
%   | else return -0.09134199191642371;  // std dev = 1.844, 263.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.014758180327476578;  // std dev = 2.487, 89.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17017030959494;  // std dev = 1.398, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.25444968407877855;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.048240558692986456;  // std dev = 0.142, 195.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.008727068059368858;  // std dev = 2.010, 110.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=28 */
%   | | | else return 0.05382347984424461;  // std dev = 2.409, 74.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16937845395443943;  // std dev = 0.127, 79.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2677281357898344;  // std dev = 1.188, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0930904826136745;  // std dev = 0.110, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3916675890097939;  // std dev = 0.772, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11741052239084758;  // std dev = 0.284, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17854649702938133;  // std dev = 1.119, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.11277767926369661;  // std dev = 1.069, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08350742883122014;  // std dev = 0.033, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09582722790807607;  // std dev = 0.031, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.014663128514496644;  // std dev = 0.947, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.013609537917801548;  // std dev = 1.305, 77.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.16596040425744663;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.008560503458301732;  // std dev = 1.984, 73.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.572', 'seconds']
Parameter learned model CLL:-0.112486 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.963, 4, 104], 'true,false,true': [0.0, 164, 0], 'true,false,false': [0.269, 47, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [4.71e-08, 45, 0], 'false,false': [0.488, 36, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.016, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.264, 157, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.784, 42, 4], 'false,false,false,true': [0.129, 0, 8], 'false,false,false,false': [5.017, 109, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.847, 4, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.22, 0, 3], 'true,false,false': [0.174, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.177, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.609, 237, 34], 'false,false,false,false': [4.039, 75, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.497, 4, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.064, 182, 0], 'false,true,false,false': [0.016, 32, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.327, 98, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.731, 3, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.356, 2, 39], 'false,false,true,false': [1.797, 255, 5], 'false,false,false': [0.297, 62, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.063, 151, 82], 'false,true': [0.176, 0, 22], 'false,false,true': [1.337, 1, 52], 'false,false,false,true': [0.18, 53, 0], 'false,false,false,false': [0.189, 70, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.832, 2, 121], 'true,false': [1.844, 256, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.487, 61, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.398, 2, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.142, 176, 19], 'false,false,false,true': [2.01, 82, 28], 'false,false,false,false': [2.409, 50, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.127, 1, 78], 'false,true,true,true': [1.188, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.11, 228, 0], 'false,false,true': [0.772, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.284, 96, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.119, 1, 85], 'true,true,false': [1.069, 1, 19], 'true,false,true': [0.033, 159, 0], 'true,false,false,true': [0.031, 36, 0], 'true,false,false,false': [0.947, 21, 4], 'false,true': [1.305, 52, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.984, 52, 21]}]
{'': [0.2225651544632867, 0.23363980530016282], 'false': [0.22959183673469508, 0.23786268313703063], 'false,true': [7.105427357601002e-16, 4.9343245538895844e-17], 'true': [0.035665294924556515, 0.018258518117901464], 'true,false': [-1.5705594006892458e-16, 0.07227989234909635], 'false,true,true': [0.0, 0.0]}
{'': [0.012005431867125067, 0.12272447382484329], 'false': [0.06995933670163262, 0.16140590076240804], 'false,false': [0.0691757470948909, 0.18064907140539901], 'false,false,false': [0.0020961088486175505, 0.16890756691102204], 'false,true': [nan, 0.06995933670163262], 'false,false,true': [nan, 0.0691757470948909]}
{'': [0.044302963994964, 0.11444438686191227], 'false': [nan, 0.114444386861912], 'false,false': [0.001704197176189346, 0.1033469511478823], 'false,false,false': [0.07840379259167683, 0.16645524857804367], 'true': [0.04806255387152382, 0.01145213362118353], 'true,true': [0.04806255387152382, nan], 'true,false': [0.016074330352071176, 0.0038047934147213414], 'false,false,true': [0.005219103852080649, -2.3684757858670006e-16]}
{'': [0.03896384889598914, 0.0007749426737113111], 'false': [3.1878081423175814e-05, 0.0010901215087319414], 'false,false': [nan, 0.0010901215087319414], 'false,false,false': [nan, 0.0010901215087319414], 'false,true': [nan, 3.187808142317997e-05], 'false,true,false': [2.252016452769817e-05, 8.501126899051331e-06]}
{'': [0.037381000998158644, 0.07680628198429316], 'false': [0.001878253044652643, 0.0757240272099122], 'false,false': [0.07255935149106349, 0.08821628513024275], 'false,false,true': [0.04481819880288064, 0.01241572149956531], 'true': [0.037452039342560396, 0.0], 'false,true': [8.54480171728067e-06, 0.0]}
{'': [0.04026303553549641, 0.08609753618317441], 'false': [0.0014028340093931472, 0.0929042027758816], 'false,false': [0.03371443428625925, 0.0005543999227125228], 'true': [nan, 0.040263035535496844], 'true,false': [nan, 0.04026303553549641], 'false,false,false': [0.0006114296151254127, 0.0005105847739702638]}
{'': [0.04754788504993651, 0.06947932951236799], 'false': [nan, 0.06947932951236821], 'false,false': [nan, 0.06947932951236799], 'false,false,false': [nan, 0.06947932951236799], 'true': [0.027279580395865522, 0.012923242615052245]}
{'': [0.022615128124859402, 0.03795306561611099], 'false': [nan, 0.03795306561611111], 'false,false': [0.020070026108582998, 0.054003021084437254], 'false,false,false': [0.0367388965318206, 0.07845011817669423], 'true': [0.022981801747635137, 9.177384783470854e-05], 'true,false': [9.177384783470854e-05, nan]}
{'': [0.01623882947752385, 0.035306961476345176], 'false': [0.021568578685659354, 0.05877649178228913], 'false,false': [0.014891085577884678, 0.000838394316307454], 'false,true': [0.036177765200873055, 5.3111021543416594e-05], 'false,true,true': [0.036177765200873055, nan], 'false,false,false': [nan, 0.000838394316307454]}
{'': [0.02372484211595925, 0.03740268096672329], 'false': [0.022103563259644122, 0.0531094076739702], 'false,false': [0.0, 0.05390380050510177], 'false,false,false': [nan, 0.05390380050510167], 'true': [0.02326645541066723, 0.004613151322493293], 'true,true': [0.014572985909276413, 0.057138976006596676], 'true,false': [6.786934174020524e-06, 0.016302873930310907], 'true,false,false': [2.7153746982587336e-05, 0.035852140550150395]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 32.872
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.8228548174524533;  // std dev = 0.185, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.12271230891962706;  // std dev = 0.137, 209.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.13814893509951237;  // std dev = 2.245, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.6889586307132998;  // std dev = 0.201, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | else return 0.6108244224446504;  // std dev = 0.299, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7265413910401293;  // std dev = 7.30e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.12755941381620894;  // std dev = 0.000, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | | else return -0.10313866865370294;  // std dev = 0.159, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(J, A), tweets(J, K) )
%   | | | then return -0.035207772514850876;  // std dev = 1.759, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   | | | else return -0.127559413816209;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.12617632904492376;  // std dev = 4.681, 136.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F), follows(E, D) )
%   | | | then return 0.5167474163683139;  // std dev = 1.578, 52.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=49 */
%   | | | else return 0.5715521129454427;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.23821877961210938;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.6051456685993396;  // std dev = 0.106, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5870341664803469;  // std dev = 0.043, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.561814138934942;  // std dev = 0.941, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.11660792802052379;  // std dev = 0.076, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07480691676205635;  // std dev = 3.590, 97.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=25 */
%   | | | else return 0.2481187707485752;  // std dev = 2.716, 34.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.4393137570252626;  // std dev = 0.124, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | | | else return 0.37679258016445727;  // std dev = 1.306, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | else return 0.67112709743959;  // std dev = 0.311, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, G) )
%   | | | then return 0.2626023162835539;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.48769756130624015;  // std dev = 0.201, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.693911001236052;  // std dev = 0.311, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.10504696227352403;  // std dev = 0.067, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | | else return -0.10591259022477223;  // std dev = 0.015, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return -0.1716321373343755;  // std dev = 0.303, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A) )
%   | | then return 0.34316750249230843;  // std dev = 0.041, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.18721182368815464;  // std dev = 0.912, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.09193565605122934;  // std dev = 0.618, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.5351694383462113;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3342604433506343;  // std dev = 0.037, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.38685256022089876;  // std dev = 0.412, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09621572259549525;  // std dev = 0.057, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.010607403179205294;  // std dev = 2.224, 65.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=15 */
%   | | | else return 0.024121644903233368;  // std dev = 3.091, 98.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then return 0.2660780791227771;  // std dev = 0.012, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return 0.06689060566443927;  // std dev = 0.895, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.011068930629883915;  // std dev = 0.415, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.057291544341443755;  // std dev = 1.174, 156.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=13 */
%   | | | else return -0.06934151267539206;  // std dev = 0.517, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2705324562494695;  // std dev = 0.044, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.3618947745342188;  // std dev = 1.642, 31.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=28 */
%   | | | else return 0.5355227105837994;  // std dev = 0.454, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.12455746250258479;  // std dev = 0.032, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.22165124585865503;  // std dev = 0.024, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( tweets(A, E), tweets(C, F) )
%   | | then return -0.10334030582175802;  // std dev = 0.787, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2147219020731192;  // std dev = 0.022, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(H, A) )
%   | | then return 0.30693915239896025;  // std dev = 0.205, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2196051162985948;  // std dev = 0.015, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.2955082403679635;  // std dev = 0.279, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.08186912609589377;  // std dev = 0.029, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.022338242966699805;  // std dev = 1.965, 69.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=19 */
%   | | | else return 0.04955606410146623;  // std dev = 2.167, 63.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=21 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18340614077889317;  // std dev = 0.015, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else return 0.29317142077805336;  // std dev = 0.002, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( follows(F, E) )
%   | | | then return -0.07911491065759328;  // std dev = 0.766, 131.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=1 */
%   | | | else return -0.046642279537734116;  // std dev = 0.274, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else if ( follows(G, E), recursion_accounttype(G, B) )
%   | | | then return 0.22551730599825248;  // std dev = 0.173, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.07283566861887066;  // std dev = 0.912, 108.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=2 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18432894079996348;  // std dev = 0.013, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.007801727289484641;  // std dev = 2.434, 112.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=29 */
%   | | | else return 0.05578588488496933;  // std dev = 1.706, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1605775875475829;  // std dev = 0.016, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.07487175421115015;  // std dev = 0.415, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.18909618760149488;  // std dev = 0.088, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.15581137783688007;  // std dev = 0.095, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.20826855582303228;  // std dev = 0.285, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07080293555461342;  // std dev = 0.019, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.3876309567670711;  // std dev = 0.127, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.4336310221360741;  // std dev = 0.229, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.13328839904729683;  // std dev = 0.024, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.14537657454212932;  // std dev = 0.025, 87.000 (wgt'ed) examples reached here.  /* #pos=87 */
%   | | else return 0.039791234597900696;  // std dev = 0.293, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | else return -0.06496421200180465;  // std dev = 0.074, 227.000 (wgt'ed) examples reached here.  /* #neg=223 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.2643630147187359;  // std dev = 0.381, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.10785460663862356;  // std dev = 0.029, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.017864099437187926;  // std dev = 0.178, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.13402160481291325;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.004494391266672269;  // std dev = 1.145, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | | else return 0.03489358318559279;  // std dev = 1.295, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.542', 'seconds']
Refined model CLL: -0.105261


******************************************
Best model found
******************************************
Results 

CLL : -0.103438 

AUC ROC : 0.993033 

AUC PR : 0.364709 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 32.872 

Total Inference Time : 17.83639407157898 

Total revision time: 63.08461399269104
Best scored revision CLL: -0.105261


Results 

CLL : -0.103438 

AUC ROC : 0.993033 

AUC PR : 0.364709 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 90.73330254745483 

Total Inference Time : 17.83639407157898 

