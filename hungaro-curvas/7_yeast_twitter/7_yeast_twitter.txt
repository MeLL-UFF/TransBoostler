Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Run: 1
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.297
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.858148935099512;  // std dev = 1.03e-07, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 4.08e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return 0.0010060779566550668;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 5.96e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.03410214655657021;  // std dev = 1.596, 37.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.030315819849546104;  // std dev = 1.210, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.0435389716194778;  // std dev = 1.690, 25.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5553664367462846;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.037972923002166266;  // std dev = 2.181, 67.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=7 */
%   | | | else return 0.055043417882168544;  // std dev = 1.487, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5391387222941646;  // std dev = 0.705, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return -0.12184757242249089;  // std dev = 0.046, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.41751358415830986;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.13132196511296876;  // std dev = 0.009, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1631388445824863;  // std dev = 1.390, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.17568150776585723;  // std dev = 1.494, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.30776182613097025;  // std dev = 0.018, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6128133627055974;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.08958162131529789;  // std dev = 0.881, 45.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=1 */
%   | | else return 0.004308885139445935;  // std dev = 0.302, 28.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.06309119412637441;  // std dev = 1.485, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24635670213090238;  // std dev = 0.016, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.6038792929476441;  // std dev = 0.382, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12473877112462997;  // std dev = 0.102, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.1332999173861798;  // std dev = 0.047, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.30842896730417185;  // std dev = 0.474, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.08264684490407982;  // std dev = 1.038, 62.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.019735101960013282;  // std dev = 0.828, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20280963276881134;  // std dev = 0.042, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.035003625776458984;  // std dev = 0.879, 31.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=4 */
%   | | | else return -0.1122981519843508;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.021833002050753524;  // std dev = 0.962, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
%   | | | else return 0.053333636346957806;  // std dev = 1.055, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1706064996618096;  // std dev = 0.008, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.382154431217417;  // std dev = 0.436, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09844052925856453;  // std dev = 0.081, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.24859077736204693;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.08823059039994768;  // std dev = 0.018, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08341923129675616;  // std dev = 0.980, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1767557222715351;  // std dev = 0.271, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.2096758238717422;  // std dev = 0.195, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.08582060583674178;  // std dev = 0.015, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10377903631357688;  // std dev = 0.013, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.08813006034649007;  // std dev = 0.610, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.14087305439562692;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.043011853128950575;  // std dev = 1.126, 31.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.481', 'seconds']
Parameter learned model CLL:-0.112273 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.03e-07, 0, 24], 'true,false,true': [4.08e-08, 40, 0], 'true,false,false,true': [0.926, 6, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 5], 'false,true,false': [0.0, 0, 1], 'false,false': [0.0, 18, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [5.96e-08, 0, 19], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.596, 33, 4], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.21, 8, 2], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [1.69, 20, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.0, 0, 17], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [2.181, 60, 7], 'false,false,false,false': [1.487, 14, 4]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [0.705, 0, 19], 'true,false': [0.046, 43, 0], 'false,true,true': [1.05e-08, 0, 7], 'false,true,false': [0.009, 7, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.39, 8, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.494, 3, 18], 'true,false': [0.0, 0, 0], 'false,true,true': [0.018, 0, 2], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.017, 0, 5], 'false,false,true,false': [0.881, 44, 1], 'false,false,false': [0.302, 23, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.485, 31, 21], 'false,true': [0.016, 0, 2], 'false,false,true': [0.382, 0, 8], 'false,false,false,true': [0.102, 16, 0], 'false,false,false,false': [0.047, 8, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.474, 0, 25], 'true,false': [1.038, 59, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.828, 13, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,true': 'tweets(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.042, 0, 19], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.879, 27, 4], 'false,false,true,false': [0.0, 4, 0], 'false,false,false,true': [0.962, 20, 3], 'false,false,false,false': [1.055, 10, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.008, 0, 18], 'false,true,true,true': [0.436, 0, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.081, 47, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.018, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.98, 7, 4]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.271, 0, 21], 'true,true,false': [0.195, 0, 3], 'true,false,true': [0.015, 33, 0], 'true,false,false,true': [0.013, 4, 0], 'true,false,false,false': [0.61, 3, 1], 'false,true': [0.0, 0, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.126, 26, 5]}]
{'': [0.22812933941678357, 0.18750000000000014], 'true': [4.440892098500626e-16, 0.020823902218198347], 'false': [-1.4802973661668753e-16, -3.0839528461809902e-18], 'true,false': [4.163336342344337e-17, 0.12244897959183677], 'true,false,false': [0.12244897959183677, nan], 'false,true': [0.0, 0.0]}
{'': [1.8698493046318425e-16, 0.1023864005756916], 'false': [0.06883346942688343, 0.13251172093250113], 'false,false': [0.14644514868699116, 0.12672541641393667], 'false,false,true': [nan, 0.14644514868699116], 'false,false,false': [0.0, 0.11422184199442825], 'false,true': [nan, 0.06883346942688343], 'false,true,false': [0.06883346942688343, nan]}
{'': [-2.4671622769447924e-16, 0.08890669566254325], 'false': [nan, 0.08890669566254325], 'false,false': [0.0, 0.08343390771371041], 'false,false,false': [0.07101125804969477, 0.12285392731679967], 'false,false,true': [0.0, 0.0], 'true': [-2.0898315757650005e-16, 0.0], 'true,false': [nan, 0.0], 'true,true': [-2.0898315757650005e-16, nan]}
{'': [0.1009021789578465, 0.11076014664421335], 'false': [0.07534317468366623, 0.1486932001165333], 'false,false': [nan, 0.1486932001165333], 'false,false,false': [nan, 0.1486932001165333], 'true': [0.02613390876495131, 4.9728790544695125e-05], 'false,true': [9.516197353929913e-17, 7.611929537933953e-05]}
{'': [0.10630309679427563, 0.07203700623185667], 'true': [0.10630309679427563, nan], 'false': [0.00016770304465618668, 0.07134193934451236], 'false,false': [0.05991621971968951, 0.09138643947369729], 'false,false,true': [5.48453464092713e-05, 0.017231612181171575], 'false,true': [0.00016770304465618668, nan]}
{'': [0.04238402392283788, 0.1011234102610996], 'false': [0.00012734235507572828, 0.105287897344447], 'false,false': [0.0182521159562532, 0.0005370834252575821], 'true': [nan, 0.042384023922837875], 'true,false': [nan, 0.04238402392283788], 'false,false,false': [0.0006458419177782157, 0.00027070429000848953]}
{'': [0.04629088587369324, 0.042798946061094086], 'true': [0.00899771457514472, 0.017380095493291003], 'false': [nan, 0.04279894606109408], 'false,false': [nan, 0.042798946061094086], 'false,false,false': [nan, 0.042798946061094086]}
{'': [9.206279315460435e-05, 0.04016068845682358], 'false': [nan, 0.040160688456823516], 'false,false': [0.022695000589046586, 0.05496720659001896], 'false,false,false': [0.04023332104804208, 0.07413941333830588], 'false,false,true': [0.02494059418677507, 0.0], 'true': [9.206279315460435e-05, nan]}
{'': [6.916640465018696e-05, 0.03822783517167476], 'false': [0.032290462345752155, 0.0514583341702476], 'false,false': [0.008693922833548468, 0.08735444827190507], 'false,false,false': [nan, 0.08735444827190507], 'false,true': [0.0238080033545906, 0.0001384282749532695], 'false,true,true': [0.0238080033545906, nan], 'false,false,true': [0.0, 3.0226639691748426e-05]}
{'': [0.023960248086018043, 0.040648123886141634], 'false': [0.0, 0.040902676838441586], 'false,false': [nan, 0.04090267683844157], 'true': [0.004764246813269493, 0.011847345950194337], 'true,false': [6.997313415587423e-06, 0.05579239346213561], 'true,false,false': [4.340361003389061e-05, 0.09312683262379587], 'true,true': [0.0035052081905697008, 0.012629250718971113]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false;follows(E, A), follows(A, E).;true;true
7;false,true;tweets(A, F).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 20.733
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.858148935099512;  // std dev = 1.03e-07, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 4.47e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(A, G) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7194734122109544;  // std dev = 1.05e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.17780077116908896;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.015375036594832933;  // std dev = 0.771, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.1230606705125927;  // std dev = 1.587, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6262477055132997;  // std dev = 0.256, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.12011160265468585;  // std dev = 0.116, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.06380102540321027;  // std dev = 0.795, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return 0.23089140662596414;  // std dev = 1.243, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.4129453948514648;  // std dev = 0.008, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.6019518375640307;  // std dev = 0.239, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.10088703057641532;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else return -0.12941680493211083;  // std dev = 0.013, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | then return 0.41751358415830986;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.10494021236793924;  // std dev = 0.006, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( recursion_accounttype(K, B) )
%   | | | then return 0.5677598152894433;  // std dev = 0.184, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1690378320509388;  // std dev = 0.006, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.10117451028682511;  // std dev = 0.938, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.2383745342028082;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.31616682389100126;  // std dev = 0.011, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.30131764626779184;  // std dev = 0.027, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.3590926596417199;  // std dev = 0.235, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.08799761548185041;  // std dev = 0.674, 47.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=1 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.08217451259615118;  // std dev = 0.521, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | | | else return 4.7739016432850405E-4;  // std dev = 1.273, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.2720376778990561;  // std dev = 3.73e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.2560370276240267;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, F) )
%   | | then return -0.06292316144073441;  // std dev = 0.167, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   | | else return -0.0851362657106845;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.24198186055372461;  // std dev = 0.024, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.18943736545311535;  // std dev = 1.099, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5690411508879434;  // std dev = 0.145, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.12825990205211438;  // std dev = 0.066, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.11893798379898267;  // std dev = 0.085, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(C, D) )
%   then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | then if ( tweets(F, D), follows(A, F) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.21586344959966386;  // std dev = 0.038, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.24731482128546933;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.3263458737364229;  // std dev = 0.168, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.08183273075662208;  // std dev = 0.007, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then return 0.3863876343019995;  // std dev = 0.220, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.09724077651312991;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.1300891285531577;  // std dev = 0.013, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( tweets(A, J) )
%   | | then return -0.10076495058142541;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.1560275615363495;  // std dev = 0.647, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.18399279311346298;  // std dev = 0.009, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.17509204124140978;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(E, A), follows(A, E) )
%   | then if ( tweets(A, F) )
%   | | then return -0.041620775701885535;  // std dev = 0.090, 34.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=4 */
%   | | else return -0.07300020957076635;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, A), follows(H, G) )
%   | | | then return -0.10755729576110869;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.011807442485412893;  // std dev = 0.972, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
%   | | else return -0.06660226163242237;  // std dev = 0.197, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1566906168285112;  // std dev = 0.005, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, G) )
%   | | | then return 0.21103815883328525;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2260802964327701;  // std dev = 0.194, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A), follows(A, H) )
%   | | | then return -0.07078221365189351;  // std dev = 0.009, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.0885574192094249;  // std dev = 0.043, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( tweets(A, I) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.3393739117989736;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return -0.09013194129634697;  // std dev = 0.001, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.012089658634811892;  // std dev = 0.599, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | | else return 0.027083933041852453;  // std dev = 0.728, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return 0.0569554803388083;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.1283349821374099;  // std dev = 0.026, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.18612857386776632;  // std dev = 0.036, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.057885056883707216;  // std dev = 0.057, 44.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.12333307786532643;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.05596819085638668;  // std dev = 0.337, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | | else return 0.012766500875352358;  // std dev = 0.765, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.08409481233032763;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.025505806457958483;  // std dev = 0.549, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '40.517', 'seconds']
Refined model CLL: -0.099707


******************************************
Best model found
******************************************
Results 

CLL : -0.10411 

AUC ROC : 0.99306 

AUC PR : 0.36723 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 20.733 

Total Inference Time : 10.47679090499878 

Total revision time: 35.86622264862061
Best scored revision CLL: -0.099707


Results 

CLL : -0.10411 

AUC ROC : 0.99306 

AUC PR : 0.36723 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 37.39122035980225 

Total Inference Time : 10.47679090499878 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.782
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8116373071925351;  // std dev = 1.381, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.83e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.08629550934493224;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.1418510649004877;  // std dev = 4.93e-09, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7287644022461034;  // std dev = 1.69e-07, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.029903476143099208;  // std dev = 2.285, 70.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.02831010635462176;  // std dev = 1.244, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.13571184988195203;  // std dev = 2.896, 55.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5751686146918967;  // std dev = 0.233, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5645375401624761;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5645375401624761;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.00919463385887962;  // std dev = 3.156, 115.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=16 */
%   | | | else return 0.046381193833171984;  // std dev = 2.190, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5256954093698732;  // std dev = 1.274, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | else return -0.12695744511600002;  // std dev = 0.069, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.42204398453937103;  // std dev = 0.000815, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.12856031352134797;  // std dev = 0.003, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.17150669971595195;  // std dev = 2.018, 27.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.32072625292484636;  // std dev = 0.256, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3146839881547045;  // std dev = 0.016, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5973908650337947;  // std dev = 0.088, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.10257794223965337;  // std dev = 0.912, 92.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=1 */
%   | | else return 0.017450046556741414;  // std dev = 0.315, 58.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03787160585350917;  // std dev = 2.014, 105.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=38 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25108681006779554;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.47580300213012605;  // std dev = 1.437, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12807510532272434;  // std dev = 0.125, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.13297241551380912;  // std dev = 0.143, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.30738981580267016;  // std dev = 0.799, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else return -0.09715185283493195;  // std dev = 1.112, 114.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.022957722486354516;  // std dev = 1.222, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18729377500018027;  // std dev = 0.054, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.03731013388191886;  // std dev = 1.386, 56.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=8 */
%   | | | else return -0.10950923376556322;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.03713065414622432;  // std dev = 1.338, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | | else return 0.04191052113357963;  // std dev = 1.574, 34.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1443696807787901;  // std dev = 0.144, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.31727089294552957;  // std dev = 0.990, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09580418952422375;  // std dev = 0.082, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2920006842491947;  // std dev = 0.233, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.10135157981795294;  // std dev = 0.045, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08909761425667666;  // std dev = 1.445, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.10679447862934952;  // std dev = 1.699, 41.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=38 */
%   | | else return -0.04284426123983909;  // std dev = 0.969, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.08445992093777709;  // std dev = 0.024, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09957140187422882;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0.10837148538057172;  // std dev = 0.664, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.1169055509786294;  // std dev = 0.856, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -1.6777853426949303E-4;  // std dev = 1.759, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.228', 'seconds']
Parameter learned model CLL:-0.11851 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.381, 2, 41], 'true,false,true': [6.83e-08, 68, 0], 'true,false,false,true': [0.972, 17, 1], 'true,false,false,false': [0.0, 1, 0], 'false,true,true': [0.0, 0, 16], 'false,true,false': [0.0, 0, 4], 'false,false': [4.93e-09, 30, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.69e-07, 0, 32], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.285, 62, 8], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.244, 16, 2], 'false,false,false,true': [2.11e-08, 0, 3], 'false,false,false,false': [2.896, 38, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.233, 0, 32], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.05e-08, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [3.156, 99, 16], 'false,false,false,false': [2.19, 32, 9]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.274, 1, 42], 'true,false': [0.069, 86, 0], 'false,true,true': [0.000815, 0, 9], 'false,true,false': [0.003, 20, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.018, 16, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.256, 0, 35], 'true,false': [0.0, 0, 0], 'false,true,true': [0.016, 0, 2], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.088, 0, 12], 'false,false,true,false': [0.912, 91, 1], 'false,false,false': [0.315, 46, 12]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.014, 67, 38], 'false,true': [0.014, 0, 2], 'false,false,true': [1.437, 1, 22], 'false,false,false,true': [0.125, 24, 0], 'false,false,false,false': [0.143, 29, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.799, 0, 53], 'true,false': [1.112, 111, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.222, 18, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,true': 'tweets(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.054, 0, 32], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.386, 48, 8], 'false,false,true,false': [9.13e-09, 16, 0], 'false,false,false,true': [1.338, 25, 11], 'false,false,false,false': [1.574, 23, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.144, 1, 35], 'false,true,true,true': [0.99, 1, 10], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.082, 88, 0], 'false,false,true,true': [0.233, 0, 8], 'false,false,true,false': [0.045, 25, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.445, 14, 9]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.699, 3, 38], 'true,true,false': [0.969, 1, 3], 'true,false,true': [0.024, 59, 0], 'true,false,false,true': [0.0, 11, 0], 'true,false,false,false': [0.664, 3, 1], 'false,true': [0.856, 1, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.759, 45, 17]}]
{'': [0.21869822485207216, 0.23999999999999966], 'false': [-8.881784197001253e-17, 2.590520390792032e-17], 'true': [0.044348296376420925, 0.011362135024441824], 'true,false': [6.857259857978908e-17, 0.04986149584487539], 'true,false,false': [0.052469135802469175, 0.0], 'false,true': [-2.220446049250313e-16, 0.0]}
{'': [8.881784197001252e-16, 0.11957572427684275], 'false': [0.07456673895462393, 0.1502708307237364], 'false,false': [0.0860029823801129, 0.1612823274297062], 'false,false,false': [1.4802973661668753e-16, 0.15245311968677805], 'false,false,true': [nan, 0.0860029823801129], 'false,true': [nan, 0.07456673895462393], 'false,true,false': [0.07456673895462393, nan]}
{'': [0.0015807149771880802, 0.09790325669941594], 'false': [nan, 0.09790325669941603], 'false,false': [0.0, 0.09520119177539846], 'false,false,false': [0.08660708711854899, 0.1170297011755452], 'true': [0.0016952961847516712, 3.700743415417188e-17], 'true,true': [0.0016952961847516712, nan], 'true,false': [nan, 3.700743415417188e-17], 'false,false,true': [0.0, 0.0]}
{'': [0.10726793315679627, 0.11050775195470615], 'false': [0.06489154758599494, 0.1508598941063752], 'false,false': [nan, 0.1508598941063752], 'false,false,false': [nan, 0.15085989410637524], 'true': [0.037723601842264476, 5.484932454264234e-05], 'false,true': [6.649952516547664e-07, 6.726221262759458e-06]}
{'': [0.0018707188180470474, 0.07357274017041164], 'false': [0.00012483808662726303, 0.07321161207414431], 'false,false': [0.05808226315375084, 0.09935047386777306], 'false,false,true': [0.0006493960509685129, 0.009040083863225598], 'true': [0.0018707188180470474, nan], 'false,true': [0.00012483808662726303, nan]}
{'': [0.038648852316575916, 0.10358865526616642], 'false': [9.48991662184373e-05, 0.10530411922950807], 'false,false': [0.08980967969808225, 0.0006862332758203188], 'true': [nan, 0.03864885231657586], 'true,false': [nan, 0.038648852316575916], 'false,false,false': [0.0006543757879261883, 0.0007017375739429575]}
{'': [0.046691098677247654, 0.06219677471746623], 'false': [nan, 0.06219677471746623], 'false,false': [nan, 0.06219677471746623], 'false,false,false': [nan, 0.06219677471746623], 'true': [0.012058661570149773, 0.010854060357070188]}
{'': [9.02129699842033e-05, 0.04619840827057586], 'false': [nan, 0.04619840827057571], 'false,false': [0.02758441855048516, 0.060977030650037865], 'false,false,false': [0.04975347921990774, 0.07284904103606557], 'false,false,true': [0.03430730098814569, 5.204170427930421e-18], 'true': [9.02129699842033e-05, nan]}
{'': [0.020595473382244003, 0.03940444640931706], 'false': [0.02682903197077466, 0.05723922292128019], 'false,false': [0.030117969775729992, 0.09082382027561643], 'false,false,false': [nan, 0.09082382027561643], 'false,false,true': [0.006764282590445203, 8.181545762691922e-05], 'false,true': [0.08918477634353672, 7.556128446904605e-05], 'false,true,true': [0.08918477634353672, nan]}
{'': [0.04456284707950993, 0.0587353582515769], 'false': [0.18306346198612922, 0.04988826860111033], 'false,false': [nan, 0.04988826860111037], 'true': [0.08687078964217224, 0.007935233196406419], 'true,true': [0.07044023784818425, 0.23488257105821175], 'true,false': [9.903580487684657e-06, 0.03781074487452399], 'true,false,false': [-6.308085367188389e-18, 0.1100807807488989]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C), tweets(E, F).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false;follows(E, A), follows(A, E).;true;true
7;false,true;tweets(A, F).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 6.738
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 5.58e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | else if ( follows(F, C), tweets(F, G) )
%   | | | then return -0.10185106490048777;  // std dev = 0.980, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(H, I), follows(A, I) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.6797900184620279;  // std dev = 0.200, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else return 0.7247621399915951;  // std dev = 0.015, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.12544463852839147;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.20343421956812133;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.08006738732066011;  // std dev = 0.872, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.17345537055904148;  // std dev = 2.801, 48.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5621874650330461;  // std dev = 0.005, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return 0.0553664367462845;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.3053664367462845;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.12528950744403033;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0.6146945129344603;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.11521275086501663;  // std dev = 0.047, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | | else return 0.023483657464742128;  // std dev = 1.909, 41.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=8 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.07049692518716;  // std dev = 1.746, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | | else return 0.16867434710988058;  // std dev = 2.166, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.4369664599137131;  // std dev = 0.033, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( follows(A, F), follows(F, A) )
%   | | | then return 0.549560227739764;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.6829347306673494;  // std dev = 0.215, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.12150162655010031;  // std dev = 0.024, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | then return 0.4199708416061465;  // std dev = 0.015, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.1127851881474726;  // std dev = 0.008, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(K, J), recursion_accounttype(K, B) )
%   | | | then return 0.6086308080354532;  // std dev = 0.207, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.16728820693487753;  // std dev = 0.010, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else return 0.012084354580689568;  // std dev = 0.371, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.32364017801206757;  // std dev = 2.98e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.32364017801206774;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.3406209459997103;  // std dev = 0.046, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.10326779151155002;  // std dev = 0.844, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.39414596430970644;  // std dev = 0.046, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.45848090528861835;  // std dev = 0.157, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.09852330326033329;  // std dev = 0.853, 62.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.030403749643307162;  // std dev = 1.334, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | | else return 0.051107956073209525;  // std dev = 1.467, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.26506592330453155;  // std dev = 0.026, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.24867521742241405;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.18326294713502747;  // std dev = 0.358, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, G) )
%   | | then return -0.045996607546575356;  // std dev = 0.120, 58.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=6 */
%   | | else return -0.10266937092922598;  // std dev = 0.006, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3052488894825264;  // std dev = 0.041, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.29398228235484164;  // std dev = 1.414, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.5791807119638303;  // std dev = 0.265, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.13373152617129444;  // std dev = 0.020, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2197082488993127;  // std dev = 0.024, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, D) )
%   | | | then return -0.08009379637518846;  // std dev = 0.013, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | | else return -0.04981850563127291;  // std dev = 0.447, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.3770881457698332;  // std dev = 0.306, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.0929208740460082;  // std dev = 0.031, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H) )
%   | | | then return -0.007548298096163808;  // std dev = 0.782, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return 0.07946144513560292;  // std dev = 1.125, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
%   | | else if ( tweets(A, I) )
%   | | | then return 8.185804931717071E-4;  // std dev = 0.550, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.006577191236623869;  // std dev = 0.904, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.18025812578981149;  // std dev = 0.021, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.183225927010737;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(E, A), follows(A, E) )
%   | then if ( tweets(A, F) )
%   | | then return -0.03500467735890649;  // std dev = 0.109, 61.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=8 */
%   | | else return -0.0844725925482943;  // std dev = 0.012, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.26250205570527496;  // std dev = 1.087, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.12640263194627574;  // std dev = 0.059, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.08571549355476382;  // std dev = 1.051, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return -0.03916481853634288;  // std dev = 1.107, 33.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.15146287791294333;  // std dev = 0.002, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( tweets(A, E) )
%   | | then return -0.007590235505703424;  // std dev = 0.850, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.14040457473408988;  // std dev = 0.765, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.2890651785212006;  // std dev = 0.102, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.0788980441254869;  // std dev = 0.008, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.16297342541228893;  // std dev = 0.970, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.10783759782722671;  // std dev = 0.047, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.08288984138354027;  // std dev = 0.933, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
%   | | | else return 0.010903064945213398;  // std dev = 0.800, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.09660575492647458;  // std dev = 0.182, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | else return 0.20858415779310788;  // std dev = 0.046, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06534931508402769;  // std dev = 0.066, 70.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=1 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( follows(A, G) )
%   | | then if ( recursion_accounttype(F, B), follows(G, F) )
%   | | | then return 0.1950344824063394;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.11473282889882468;  // std dev = 1.199, 24.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=3 */
%   | | else if ( recursion_accounttype(G, B) )
%   | | | then return 0.2662504907955938;  // std dev = 0.142, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.12808076465610374;  // std dev = 0.047, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( tweets(A, H) )
%   | | then return -0.02658632222486986;  // std dev = 0.176, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return 0.10677627368640812;  // std dev = 0.299, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.027', 'seconds']
Refined model CLL: -0.104075


******************************************
Best model found
******************************************
Results 

CLL : -0.102718 

AUC ROC : 0.993677 

AUC PR : 0.393946 

Precision : 0.347107 

Recall : 1.0 

F1 : 0.515337 

Total Learning Time : 6.738 

Total Inference Time : 10.201235294342041 

Total revision time: 24.633312244415283
Best scored revision CLL: -0.104075


Results 

CLL : -0.102718 

AUC ROC : 0.993677 

AUC PR : 0.393946 

Precision : 0.347107 

Recall : 1.0 

F1 : 0.515337 

Total Learning Time : 26.158309955596923 

Total Inference Time : 10.201235294342041 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.5
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7966104735610511;  // std dev = 1.937, 65.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=61 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.94e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1148240378734607;  // std dev = 0.986, 37.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.14185106490048766;  // std dev = 7.90e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7113163145547274;  // std dev = 0.990, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.033233742959941234;  // std dev = 2.811, 110.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.062005425078886386;  // std dev = 1.271, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.5528067455442879;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.11755161276648558;  // std dev = 3.673, 91.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=26 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5644745016677089;  // std dev = 1.052, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | else return -0.261802061657147;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5960526174841312;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5725036135966406;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5725036135966405;  // std dev = 3.65e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0053589657698789464;  // std dev = 3.783, 161.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=23 */
%   | | | else return 0.06696957152013139;  // std dev = 2.626, 55.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=13 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5121699238693526;  // std dev = 1.915, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | else return -0.12571920069858458;  // std dev = 0.091, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4319596013865411;  // std dev = 0.000760, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.12915812889491995;  // std dev = 7.48e-05, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1552924123098302;  // std dev = 2.478, 40.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3372721923723055;  // std dev = 0.347, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3147852110936118;  // std dev = 0.022, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6025837176041184;  // std dev = 0.104, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.10541930909934552;  // std dev = 0.926, 123.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=1 */
%   | | else return 0.030600800608502107;  // std dev = 0.318, 85.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03118529906992247;  // std dev = 2.404, 151.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=50 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2514133240964704;  // std dev = 0.019, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.46997740842661273;  // std dev = 1.730, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12888863155810976;  // std dev = 0.189, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | | else return -0.13253493807239133;  // std dev = 0.176, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28660598466082715;  // std dev = 1.615, 73.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=71 */
%   | else return -0.097227507011603;  // std dev = 1.125, 152.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.032415595113185265;  // std dev = 1.933, 62.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=19 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1761051197564999;  // std dev = 0.996, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.03324381747564717;  // std dev = 1.536, 95.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=12 */
%   | | | else return -0.11177722338416902;  // std dev = 9.13e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0066334212173066575;  // std dev = 1.919, 77.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=18 */
%   | | | else return 0.09852865737109462;  // std dev = 1.840, 37.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14325734244014673;  // std dev = 0.193, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.3098912323098877;  // std dev = 0.729, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09291603186234823;  // std dev = 0.062, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.32693845701532875;  // std dev = 0.351, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.09510479954622808;  // std dev = 0.045, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04694244809439325;  // std dev = 1.867, 40.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=13 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17481288314716223;  // std dev = 1.032, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | else return 0.16298001093051057;  // std dev = 0.282, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, C) )
%   | | then return -0.08413837140601321;  // std dev = 0.034, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09368147080789219;  // std dev = 0.030, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.023067505212954288;  // std dev = 0.766, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.02700422246714011;  // std dev = 0.897, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.07564786010455049;  // std dev = 1.988, 65.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=26 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.217', 'seconds']
Parameter learned model CLL:-0.120922 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.937, 4, 61], 'true,false,true': [8.94e-08, 101, 0], 'true,false,false,true': [0.986, 36, 1], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [5.96e-08, 0, 22], 'false,true,false': [0.949, 1, 9], 'false,false': [7.9e-09, 56, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.99, 1, 48], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.811, 98, 12], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.271, 26, 2], 'false,false,false,true': [0.913, 1, 5], 'false,false,false,false': [3.673, 65, 26]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.052, 1, 41], 'true,true,false': [0.0, 1, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 5], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [3.65e-08, 0, 9], 'false,false,false,true': [3.783, 138, 23], 'false,false,false,false': [2.626, 42, 13]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.915, 2, 67], 'true,false': [0.091, 137, 0], 'false,true,true': [0.00076, 0, 11], 'false,true,false': [7.48e-05, 17, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.478, 25, 15]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.347, 0, 46], 'true,false': [0.0, 0, 0], 'false,true,true': [0.022, 0, 11], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.104, 0, 17], 'false,false,true,false': [0.926, 122, 1], 'false,false,false': [0.318, 67, 18]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.404, 101, 50], 'false,true': [0.019, 0, 10], 'false,false,true': [1.73, 2, 33], 'false,false,false,true': [0.189, 47, 0], 'false,false,false,false': [0.176, 40, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.615, 2, 71], 'true,false': [1.125, 149, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.933, 43, 19]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,true': 'tweets(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.996, 1, 48], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.536, 83, 12], 'false,false,true,false': [9.13e-09, 14, 0], 'false,false,false,true': [1.919, 59, 18], 'false,false,false,false': [1.84, 22, 15]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.193, 2, 46], 'false,true,true,true': [0.729, 0, 21], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.062, 128, 0], 'false,false,true,true': [0.351, 0, 13], 'false,false,true,false': [0.045, 28, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.867, 27, 13]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.032, 1, 50], 'true,true,false': [0.282, 0, 11], 'true,false,true': [0.034, 105, 0], 'true,false,false,true': [0.03, 18, 0], 'true,false,false,false': [0.766, 12, 1], 'false,true': [0.897, 1, 5], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.988, 39, 26]}]
{'': [0.21213812516683278, 0.2281766528925634], 'false': [0.030273437500001332, 5.947623346206196e-17], 'true': [0.057751479289940184, 0.007193866834698496], 'false,true': [1.6148698540002277e-16, 0.08999999999999977], 'true,false': [7.91446116564468e-17, 0.026296566837107443], 'true,false,false': [0.026296566837107443, nan]}
{'': [0.019991670137443553, 0.11424403866806492], 'false': [0.0718359451892206, 0.14347423041753726], 'false,false': [0.057725132863976215, 0.15867653008061733], 'false,false,false': [0.13888888888888892, 0.14826283669224427], 'false,true': [nan, 0.0718359451892206], 'false,true,false': [0.0718359451892206, nan], 'false,false,true': [nan, 0.057725132863976215]}
{'': [0.037198387596421356, 0.10878468193706103], 'false': [nan, 0.10878468193706127], 'false,false': [2.0185873175002846e-16, 0.09915824145228325], 'false,false,false': [0.0888797226189171, 0.12534692585463905], 'true': [0.04125502992149182, 0.0], 'true,true': [0.026359781861927573, 0.0], 'false,false,true': [0.0, 1.4802973661668753e-16], 'true,false': [nan, 0.0]}
{'': [0.10847578274621127, 0.12222517740006482], 'false': [0.0750991217158372, 0.15352622550988587], 'false,false': [nan, 0.15352622550988587], 'false,false,false': [nan, 0.15352622550988587], 'true': [0.05312448920848927, 6.084477945033546e-05], 'false,true': [5.769820957174882e-07, 5.591508354369272e-09]}
{'': [0.0026237233897882578, 0.0768143746900803], 'false': [4.535164365471189e-05, 0.07593306735591339], 'false,false': [0.05968400083895346, 0.10113767254877686], 'false,false,true': [0.0006410881886658823, 0.00697611155064999], 'true': [0.0026237233897882578, nan], 'false,true': [4.535164365471189e-05, nan]}
{'': [0.038281345508477796, 0.09446243693559031], 'false': [3.732470789601372e-05, 0.09887109555691667], 'false,false': [0.08553733348151427, 0.0007697165143489198], 'true': [nan, 0.03828134550847775], 'true,false': [nan, 0.038281345508477796], 'false,false,false': [0.0007598185639432865, 0.0007741639519810467]}
{'': [0.049506751228514265, 0.060254377247483566], 'false': [nan, 0.06025437724748363], 'false,false': [nan, 0.060254377247483566], 'false,false,false': [nan, 0.060254377247483566], 'true': [0.0357316768483185, 0.008322612390361124]}
{'': [0.020240968768448355, 0.04511402687940774], 'false': [nan, 0.045114026879407826], 'false,false': [0.022333487536083087, 0.06444330102582535], 'false,false,false': [0.04784661037091081, 0.09151264211839727], 'false,false,true': [0.02483258290142202, 5.9476233462061954e-18], 'true': [0.020240968768448355, nan]}
{'': [0.03712531456525208, 0.03905758407961312], 'false': [0.02323734158702122, 0.06412392884942894], 'false,false': [0.04161774706124284, 0.08715849184061636], 'false,false,false': [nan, 0.08715849184061636], 'false,false,true': [0.00945696911367889, 7.23018148533939e-05], 'false,true': [0.025308462202249377, 2.9578337807987035e-05], 'false,true,true': [0.025308462202249377, nan]}
{'': [0.022685126301196987, 0.06779722253649322], 'false': [0.13409212683442576, 0.060787204171839145], 'false,false': [nan, 0.06078720417183919], 'true': [0.018467118217452835, 0.004679167740375291], 'true,true': [0.020869719076683425, 0.00721261179796093], 'true,false': [1.1124936182002213e-05, 0.020179315907727067], 'true,false,false': [4.9715401423778035e-05, 0.045155780826955746]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;false;follows(E, A), follows(A, E).;true;true
7;false,true;tweets(A, F).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 7.926
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.8318331456258272;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else return -0.10851773156715441;  // std dev = 0.180, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.14185106490048766;  // std dev = 6.50e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(A, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then return 0.6830872955700787;  // std dev = 0.200, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return 0.558087295570079;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.7396736853460634;  // std dev = 0.064, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.11765030737195481;  // std dev = 0.842, 97.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=1 */
%   | | | else return 0.014961108786990593;  // std dev = 2.371, 55.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=9 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1839511531959182;  // std dev = 2.440, 35.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=13 */
%   | | | else return 0.1151965328127382;  // std dev = 2.588, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5503154398455796;  // std dev = 0.154, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.5911796297440459;  // std dev = 2.11e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.4713850625158048;  // std dev = 0.307, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10236399531455732;  // std dev = 0.851, 75.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=1 */
%   | | | else return -0.017421330066771316;  // std dev = 2.417, 70.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=9 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.08907057664675432;  // std dev = 2.907, 61.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=17 */
%   | | | else return 0.13446696970503202;  // std dev = 2.038, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.4149853360669591;  // std dev = 0.165, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | else return 0.5498907809978852;  // std dev = 0.261, 35.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=32 */
%   | else return -0.12081033368387781;  // std dev = 0.250, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( follows(H, F), recursion_accounttype(H, B) )
%   | | then return 0.4385657629184504;  // std dev = 0.129, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.11127881572297729;  // std dev = 0.049, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.6249510066177514;  // std dev = 0.289, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.147435966320175;  // std dev = 0.028, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.1257423845695457;  // std dev = 0.674, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.13806225583456863;  // std dev = 1.474, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.2933879461853976;  // std dev = 0.195, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else return 0.340362723720429;  // std dev = 0.073, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(F, A) )
%   | | then return 0.16282507453393352;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.32751238670688954;  // std dev = 0.050, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3256091751666693;  // std dev = 0.137, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5645360326310884;  // std dev = 0.160, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.1019231754318881;  // std dev = 0.925, 114.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=1 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.08533431089624853;  // std dev = 0.694, 42.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=1 */
%   | | | else return 0.06686081170966976;  // std dev = 2.471, 56.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.19482923717838402;  // std dev = 1.355, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | | else return 0.26865626847299234;  // std dev = 0.064, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.3260844364928629;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then return -0.036205407703572945;  // std dev = 0.163, 87.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=9 */
%   | | else return -0.09408026952410578;  // std dev = 0.043, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.26187917601698085;  // std dev = 0.119, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.08928341989909293;  // std dev = 0.936, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5093000958213999;  // std dev = 0.554, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.12584233302424816;  // std dev = 0.029, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(A, D), follows(D, C) )
%   | | then return 0.19766912028615147;  // std dev = 0.176, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | else return 0.227845669911372;  // std dev = 0.042, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.2501321793826451;  // std dev = 0.048, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, E) )
%   | | | then return 0.23209575289936393;  // std dev = 1.342, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.3420779853353541;  // std dev = 0.275, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.09831488304866923;  // std dev = 0.189, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.21478862359210998;  // std dev = 0.105, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.022879242806337644;  // std dev = 0.945, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   | | | else return 0.07009801432251944;  // std dev = 1.523, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.10801136778925768;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return 0.19356663182496614;  // std dev = 0.020, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.18559515464317033;  // std dev = 0.036, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.1816810408054475;  // std dev = 0.094, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(G, A), follows(A, G) )
%   | then return -0.033196614533775905;  // std dev = 0.139, 106.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( tweets(A, I), follows(J, H) )
%   | | | then return -0.027304592651522023;  // std dev = 0.956, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   | | | else return -0.09049279356917267;  // std dev = 0.015, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, K) )
%   | | | then return -0.0068470244528778795;  // std dev = 1.502, 76.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=22 */
%   | | | else return 0.0890303269547615;  // std dev = 1.346, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1736722814533093;  // std dev = 0.089, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.019433883766836368;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.21460260082768112;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.10441292472141454;  // std dev = 0.700, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.03234236853394783;  // std dev = 0.144, 162.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=21 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.25562026032485236;  // std dev = 0.204, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.11365213629582388;  // std dev = 0.076, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.017248405221404157;  // std dev = 1.155, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
%   | | | else return 0.10343838534828566;  // std dev = 1.064, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.15270521067602147;  // std dev = 0.121, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.21612335140347294;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3484575672174245;  // std dev = 0.830, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.06754943648608018;  // std dev = 0.079, 106.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=1 */
%   else if ( follows(A, G), tweets(A, H) )
%   | then return -0.01566002306305834;  // std dev = 0.127, 40.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=12 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.2907574033289748;  // std dev = 0.151, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11240453922449728;  // std dev = 7.45e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.045179532228470834;  // std dev = 0.645, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.039216794976052086;  // std dev = 1.246, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.144', 'seconds']
Refined model CLL: -0.110667


******************************************
Best model found
******************************************
Results 

CLL : -0.107401 

AUC ROC : 0.993046 

AUC PR : 0.36665 

Precision : 0.339779 

Recall : 0.97619 

F1 : 0.504098 

Total Learning Time : 7.926 

Total Inference Time : 12.6408531665802 

Total revision time: 31.308147789001467
Best scored revision CLL: -0.110667


Results 

CLL : -0.107401 

AUC ROC : 0.993046 

AUC PR : 0.36665 

Precision : 0.339779 

Recall : 0.97619 

F1 : 0.504098 

Total Learning Time : 32.83314550018311 

Total Inference Time : 12.6408531665802 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.905
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8236661764788223;  // std dev = 1.702, 87.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=84 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048788;  // std dev = 0.000, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.09929787341112603;  // std dev = 1.384, 47.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=2 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995118;  // std dev = 1.58e-07, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.14185106490048766;  // std dev = 8.12e-09, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7128854698620621;  // std dev = 0.997, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.03145017784493375;  // std dev = 3.214, 145.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03497934016575874;  // std dev = 1.765, 39.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=4 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.4337591264966688;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.08757071819066539;  // std dev = 4.140, 126.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=32 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5593432257828488;  // std dev = 1.053, 54.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=53 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.3737220873900594;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return 0.624359073881086;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5873026747215049;  // std dev = 0.098, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5654837837764541;  // std dev = 5.16e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.012050903803015817;  // std dev = 4.187, 206.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=28 */
%   | | | else return 0.05393413241933491;  // std dev = 3.207, 86.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=19 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5016680391632984;  // std dev = 2.211, 92.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=89 */
%   | else return -0.12610975980103972;  // std dev = 0.155, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4474922308270933;  // std dev = 0.076, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.12831627254657266;  // std dev = 0.001, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.419736708538063;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1501768887787779;  // std dev = 2.923, 55.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=20 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.32106360767200937;  // std dev = 1.158, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.31055402503272483;  // std dev = 0.022, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.4109583268135375;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6101052807401093;  // std dev = 0.085, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.10628368971614201;  // std dev = 0.929, 171.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=1 */
%   | | else return 0.022941484680702777;  // std dev = 0.309, 121.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=24 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03952586067086972;  // std dev = 2.728, 188.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=66 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25254290739652824;  // std dev = 0.068, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.48363180039743975;  // std dev = 1.965, 44.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12498724293439904;  // std dev = 0.168, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | | else return -0.13089576948277548;  // std dev = 0.152, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3152932919722504;  // std dev = 1.070, 94.000 (wgt'ed) examples reached here.  /* #pos=94 */
%   | else return -0.09227316442385734;  // std dev = 1.453, 174.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04718263647211504;  // std dev = 2.093, 68.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=25 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1744860584374589;  // std dev = 0.998, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.20770752580093477;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.035606574582237226;  // std dev = 1.754, 129.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=16 */
%   | | | else return -0.11869214615113824;  // std dev = 0.181, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02738095850662227;  // std dev = 2.141, 105.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=20 */
%   | | | else return 0.05565413419078066;  // std dev = 2.310, 65.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13912671209937852;  // std dev = 0.207, 62.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=59 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.21179760082875645;  // std dev = 1.771, 36.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=33 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09536257274736008;  // std dev = 0.131, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.26362988939842086;  // std dev = 0.894, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.09103428740975697;  // std dev = 0.053, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06586597060075912;  // std dev = 2.201, 51.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=18 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17486448134166827;  // std dev = 1.243, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0.17653267803254216;  // std dev = 0.390, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, C) )
%   | | then return -0.08452201591196488;  // std dev = 0.038, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09356440420460804;  // std dev = 0.032, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.01879726551039685;  // std dev = 1.192, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.14979648645675234;  // std dev = 0.038, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03464325638638019;  // std dev = 2.431, 104.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=32 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.668', 'seconds']
Parameter learned model CLL:-0.117917 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.702, 3, 84], 'true,false,true': [0.0, 130, 0], 'true,false,false,true': [1.384, 45, 2], 'true,false,false,false': [0.707, 1, 1], 'false,true,true': [1.58e-07, 0, 27], 'false,true,false': [0.0, 0, 10], 'false,false': [8.12e-09, 68, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.997, 1, 67], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.214, 129, 16], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.765, 35, 4], 'false,false,false,true': [1.195, 2, 5], 'false,false,false,false': [4.14, 94, 32]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.053, 1, 53], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.707, 1, 1], 'true,false,false': [0.0, 0, 5], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.098, 0, 5], 'false,false,true,false': [5.16e-08, 0, 13], 'false,false,false,true': [4.187, 178, 28], 'false,false,false,false': [3.207, 67, 19]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.211, 3, 89], 'true,false': [0.155, 196, 0], 'false,true,true': [0.076, 0, 14], 'false,true,false': [0.001, 23, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.923, 35, 20]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.158, 1, 59], 'true,false': [0.0, 0, 0], 'false,true,true': [0.022, 0, 17], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.085, 0, 22], 'false,false,true,false': [0.929, 170, 1], 'false,false,false': [0.309, 97, 24]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.728, 122, 66], 'false,true': [0.068, 0, 17], 'false,false,true': [1.965, 3, 41], 'false,false,false,true': [0.168, 43, 0], 'false,false,false,false': [0.152, 46, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.07, 0, 94], 'true,false': [1.453, 169, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.093, 43, 25]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.998, 1, 66], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.754, 113, 16], 'false,false,true,false': [0.181, 25, 0], 'false,false,false,true': [2.141, 85, 20], 'false,false,false,false': [2.31, 44, 21]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.207, 3, 59], 'false,true,true,true': [1.771, 3, 33], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.131, 168, 0], 'false,false,true,true': [0.894, 1, 14], 'false,false,true,false': [0.053, 40, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.201, 33, 18]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.243, 1, 67], 'true,true,false': [0.39, 0, 17], 'true,false,true': [0.038, 138, 0], 'true,false,false,true': [0.032, 22, 0], 'true,false,false,false': [1.192, 13, 3], 'false,true': [0.038, 0, 5], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.431, 72, 32]}]
{'': [0.22009440895471846, 0.22820861678004684], 'false': [1.8243664837083652e-15, 6.857259857978908e-17], 'true': [0.03329369797859672, 0.0164788864267656], 'true,false': [-3.75767792950053e-17, 0.0574760516451477], 'true,false,false': [0.04074241738343139, 0.25], 'false,true': [9.210739167260557e-16, -8.881784197001253e-17]}
{'': [0.014623530507220858, 0.10812690907056337], 'false': [0.0712318540283399, 0.13415629674651317], 'false,false': [0.07984346962615514, 0.14558937596766874], 'false,false,false': [0.20408163265306128, 0.13603210014942055], 'false,false,true': [nan, 0.07984346962615514], 'false,true': [nan, 0.0712318540283399], 'false,true,false': [0.0712318540283399, nan]}
{'': [0.027863402808144318, 0.1080153637645963], 'false': [nan, 0.10801536376459761], 'false,false': [0.0006244666693847477, 0.0961546782806271], 'false,false,false': [0.08510099823846806, 0.11956042274154838], 'true': [0.0205491998072562, 0.08424875489740875], 'true,false': [0.25000000000000006, -4.4408920985006264e-17], 'true,true': [0.0205491998072562, nan], 'false,false,true': [0.00190425600828803, 2.049642507000289e-16]}
{'': [0.10273598771812315, 0.12559088365843396], 'false': [0.08018843309300783, 0.15388553524842657], 'false,false': [0.0, 0.15538590949204203], 'false,false,false': [nan, 0.155385909492042], 'true': [0.053137295005126116, 0.000122365190177421], 'false,true': [0.005822002401609794, 1.549208935790614e-06]}
{'': [0.022344246245911314, 0.07351214988086299], 'false': [0.000555439658447522, 0.07205807916946298], 'false,false': [0.05633861074298152, 0.09574072300456142], 'false,false,true': [0.0003312195373587169, 0.005043258394938262], 'true': [0.022344246245911314, nan], 'false,true': [2.8055700860886354e-05, 0.0]}
{'': [0.03959257851234399, 0.10276307545350556], 'false': [0.0002735356352710723, 0.11226326281236802], 'false,false': [0.08778970455536288, 0.0005856794247419008], 'true': [nan, 0.039592578512343955], 'true,false': [nan, 0.03959257851234399], 'false,false,false': [0.0006566913762235612, 0.0005024317268487781]}
{'': [0.04997571232950686, 0.0644166963091458], 'false': [nan, 0.06441669630914575], 'false,false': [nan, 0.0644166963091458], 'false,false,false': [nan, 0.0644166963091458], 'true': [0.012181444129716093, 0.012130696764865279]}
{'': [0.014650105675666387, 0.04222758718184962], 'false': [nan, 0.04222758718184923], 'false,false': [0.021127444648302476, 0.05998330123127567], 'false,false,false': [0.04367531939208373, 0.08206839481978997], 'false,false,true': [0.023847382574924775, 0.0013100040756451325], 'true': [0.014852533588542131, 0.0], 'true,false': [0.0, nan]}
{'': [0.04283132014720064, 0.043436727772868305], 'false': [0.029168322596720083, 0.06711551368322158], 'false,false': [0.0395481950301366, 0.09496622173636537], 'false,false,false': [nan, 0.09496622173636537], 'false,false,true': [0.053341213606923524, 7.035534265360243e-05], 'false,true': [0.08710908799891964, 0.00010290802013536107], 'false,true,true': [0.08710908799891964, nan]}
{'': [0.02647277767869119, 0.05483343206290738], 'false': [0.00028918131315741613, 0.056847482709774085], 'false,false': [nan, 0.05684748270977407], 'true': [0.019954131783303224, 0.008464943608926266], 'true,true': [0.02270818842144539, 0.00893567892657496], 'true,false': [1.0668805278668536e-05, 0.03877253055470827], 'true,false,false': [4.541929683967766e-05, 0.08878592035987161]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
7;false;follows(G, A), follows(A, G).;true;true
7;false,true;tweets(A, H).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 17.507
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995126;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | | else if ( tweets(A, F), follows(A, G) )
%   | | | then return 0.7993254056877476;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 5.58e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | | else if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.058148935099512224;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
%   | | | else return -0.1418510649004877;  // std dev = 2.79e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else if ( recursion_accounttype(J, B) )
%   | then if ( follows(J, K), follows(A, K) )
%   | | then return 0.8581489350995118;  // std dev = 1.58e-07, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.14185106490048766;  // std dev = 7.88e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then return 0.7040887968263387;  // std dev = 0.123, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else return 0.5023355672866043;  // std dev = 0.910, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.744494618053885;  // std dev = 0.160, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.448295606241962;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.1284525167594165;  // std dev = 0.008, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(K, J), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return -0.12544463852839158;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else if ( tweets(A, L) )
%   | | | then return 0.21252258176734698;  // std dev = 1.309, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.335419752783979;  // std dev = 1.395, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5386063657022859;  // std dev = 0.144, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | else return 0.5591621219443416;  // std dev = 2.11e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(F, A) )
%   | | then return 0.7305385071689807;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.3886997700796179;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5739009553855061;  // std dev = 0.050, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5924197360943574;  // std dev = 0.224, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11335994810951082;  // std dev = 0.066, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.05272881201625455;  // std dev = 2.717, 89.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=22 */
%   | | | else return 0.21249274756728223;  // std dev = 1.909, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( tweets(A, G), tweets(E, G) )
%   | | | then return 0.3852651533978746;  // std dev = 1.713, 72.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=69 */
%   | | | else return 0.15169444747968927;  // std dev = 0.893, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5536002060596066;  // std dev = 0.058, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.10922725151660681;  // std dev = 0.018, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else if ( follows(H, A), tweets(H, I) )
%   | then if ( follows(J, H), recursion_accounttype(J, B) )
%   | | then return 0.42968047181690494;  // std dev = 0.036, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.10122713195298119;  // std dev = 1.05e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | then return 0.46645410540545895;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, L) )
%   | | | then return 0.13524072540065052;  // std dev = 1.894, 36.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=14 */
%   | | | else return 0.08216504457181442;  // std dev = 1.568, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.3341292815227712;  // std dev = 0.012, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else if ( tweets(A, E) )
%   | | then return 0.1846151602665374;  // std dev = 0.808, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.07482452220071456;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.32753499723529383;  // std dev = 0.007, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.5279743401602335;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.3625673830321334;  // std dev = 0.182, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.09225232138500476;  // std dev = 0.664, 162.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=1 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.0719595066285222;  // std dev = 0.765, 49.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=2 */
%   | | | else return 0.059318249667667126;  // std dev = 2.666, 68.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=22 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.26400039317697177;  // std dev = 0.011, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else return -0.06474975711131255;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then return -0.052197338233287385;  // std dev = 0.125, 116.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=13 */
%   | | else return -0.08652282254012128;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.26795817076427725;  // std dev = 0.033, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.3393662434280148;  // std dev = 0.281, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.5016380796278702;  // std dev = 0.185, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.11508720048549083;  // std dev = 0.143, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | | else return -0.1378952258417193;  // std dev = 0.450, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), tweets(A, D) )
%   then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(C, D), follows(E, C) )
%   | | | then return 0.18457146407654812;  // std dev = 0.984, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return 0.016829528592677234;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.27301077569871085;  // std dev = 0.278, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.17482893802814153;  // std dev = 0.958, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return -0.08270083752140446;  // std dev = 0.004, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.20923450873306293;  // std dev = 0.005, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(H, A) )
%   | | then return -0.05713532482642788;  // std dev = 0.093, 41.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=2 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.05751785807878049;  // std dev = 1.343, 32.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=12 */
%   | | | else return 0.0046190236631131155;  // std dev = 1.656, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.1656997394757778;  // std dev = 0.992, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return 0.18900707243742396;  // std dev = 0.047, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.0443708033469277;  // std dev = 0.340, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | else return 0.2774934912872141;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), follows(A, F) )
%   | then return -0.042415182689182276;  // std dev = 0.092, 145.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=16 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then if ( tweets(I, G), recursion_accounttype(I, B) )
%   | | | then return 0.3638774624818824;  // std dev = 0.105, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.07500164131572255;  // std dev = 0.036, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.01632583015801502;  // std dev = 1.746, 86.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=27 */
%   | | | else return 0.051705449998205824;  // std dev = 1.484, 29.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.16266874525974015;  // std dev = 0.010, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | else return 0.12106392422275163;  // std dev = 0.520, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.23561723005466306;  // std dev = 0.130, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.20401822970021663;  // std dev = 0.048, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return -0.07216651230956557;  // std dev = 0.004, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.25348996631637366;  // std dev = 0.210, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.09425537217820963;  // std dev = 0.162, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0339983635898338;  // std dev = 1.251, 29.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=10 */
%   | | | else return 0.13224847442475174;  // std dev = 1.155, 15.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.155144294032543;  // std dev = 0.030, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   | else if ( follows(A, C) )
%   | | then return -0.06722188258724048;  // std dev = 0.000515, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | else if ( follows(E, C), follows(E, A) )
%   | | | then return -0.06411699371126046;  // std dev = 0.017, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.021557921890176728;  // std dev = 0.478, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then return 0.19962746485040048;  // std dev = 0.113, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.26895259895166695;  // std dev = 0.390, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return -0.10709260782708627;  // std dev = 0.253, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.009737372816065314;  // std dev = 0.696, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.03602728072861756;  // std dev = 1.154, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '48.424', 'seconds']
Refined model CLL: -0.106365


******************************************
Best model found
******************************************
Results 

CLL : -0.098135 

AUC ROC : 0.993489 

AUC PR : 0.383092 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 17.507 

Total Inference Time : 49.858603715896606 

Total revision time: 81.28427988243104
Best scored revision CLL: -0.106365


Results 

CLL : -0.098135 

AUC ROC : 0.993489 

AUC PR : 0.383092 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 82.80927759361268 

Total Inference Time : 49.858603715896606 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.413
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8036034805540564;  // std dev = 2.382, 110.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004883;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.10018439823382107;  // std dev = 1.384, 48.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=2 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8068668838174602;  // std dev = 1.377, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.93e-09, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.709163102513892;  // std dev = 1.405, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.04138318092077102;  // std dev = 3.552, 190.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05388949231606831;  // std dev = 1.796, 47.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=4 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.6185952159767028;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.12984771909953938;  // std dev = 4.526, 132.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5451718179855568;  // std dev = 1.575, 70.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7075345740730814;  // std dev = 0.219, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5925550383268731;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5886647192477032;  // std dev = 0.095, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5713186930880046;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.016313199201676638;  // std dev = 4.621, 262.000 (wgt'ed) examples reached here.  /* #neg=228 #pos=34 */
%   | | | else return 0.036494562038332845;  // std dev = 3.600, 111.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5157108463013798;  // std dev = 2.025, 117.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=115 */
%   | else return -0.1247339594739489;  // std dev = 0.147, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.47001735156419555;  // std dev = 0.096, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12529599162177685;  // std dev = 0.001, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.42520762677757695;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12379557680610162;  // std dev = 3.218, 70.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3234792497363234;  // std dev = 1.135, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return 0.37976225359629834;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.26343996002671;  // std dev = 0.977, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.4081333001733882;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.610708591866002;  // std dev = 0.106, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.1010064160842438;  // std dev = 1.361, 202.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=3 */
%   | | else return 0.022783225638434344;  // std dev = 0.311, 142.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=28 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.026614737311957955;  // std dev = 3.288, 249.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2167993853587153;  // std dev = 0.985, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5051549833295047;  // std dev = 1.626, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12846830346118515;  // std dev = 0.222, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | | else return -0.12667928505710302;  // std dev = 0.194, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2906085527212692;  // std dev = 2.070, 124.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=121 */
%   | else return -0.09346180961624521;  // std dev = 1.660, 267.000 (wgt'ed) examples reached here.  /* #neg=260 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.010443258440714708;  // std dev = 2.428, 93.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1996145161758612;  // std dev = 0.107, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.20884821231169304;  // std dev = 0.011, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.03033975714227092;  // std dev = 1.896, 140.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=18 */
%   | | | else return -0.0888215112860501;  // std dev = 0.646, 35.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.005822534781138535;  // std dev = 2.079, 125.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=28 */
%   | | | else return 0.03580146112327334;  // std dev = 2.568, 86.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14766147945005628;  // std dev = 0.178, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.300886889960599;  // std dev = 0.913, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09317516555640232;  // std dev = 0.146, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3270269012236257;  // std dev = 0.426, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.09625170515964551;  // std dev = 0.055, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01660179809831483;  // std dev = 2.517, 83.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1560219143759671;  // std dev = 1.852, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   | | else return 0.17245918151262024;  // std dev = 0.377, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08334112387912714;  // std dev = 0.040, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0921202839180019;  // std dev = 0.021, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return 0.001821156219797715;  // std dev = 0.938, 20.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.07183060773158416;  // std dev = 1.279, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04122785799695369;  // std dev = 2.770, 123.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.463', 'seconds']
Parameter learned model CLL:-0.116253 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [2.382, 6, 104], 'true,false,true': [0.0, 179, 0], 'true,false,false,true': [1.384, 46, 2], 'true,false,false,false': [1.0, 2, 2], 'false,true,true': [1.377, 2, 37], 'false,true,false': [0.0, 0, 11], 'false,false': [8.93e-09, 96, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.405, 2, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.552, 171, 19], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.796, 43, 4], 'false,false,false,true': [0.943, 1, 8], 'false,false,false,false': [4.526, 92, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.575, 3, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.219, 0, 3], 'true,false,false': [0.0, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.095, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.621, 228, 34], 'false,false,false,false': [3.6, 88, 23]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.025, 2, 115], 'true,false': [0.147, 228, 0], 'false,true,true': [0.096, 0, 17], 'false,true,false': [0.001, 25, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.218, 47, 23]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.135, 1, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.977, 1, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.106, 0, 26], 'false,false,true,false': [1.361, 199, 3], 'false,false,false': [0.311, 114, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.288, 167, 82], 'false,true': [0.985, 1, 22], 'false,false,true': [1.626, 2, 52], 'false,false,false,true': [0.222, 84, 0], 'false,false,false,false': [0.194, 72, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.07, 3, 121], 'true,false': [1.66, 260, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.428, 65, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.107, 0, 83], 'true,false,true': [0.011, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.896, 122, 18], 'false,false,true,false': [0.646, 34, 1], 'false,false,false,true': [2.079, 97, 28], 'false,false,false,false': [2.568, 62, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.178, 3, 78], 'false,true,true,true': [0.913, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.146, 225, 0], 'false,false,true,true': [0.426, 0, 19], 'false,false,true,false': [0.055, 47, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.517, 62, 21]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.852, 3, 85], 'true,true,false': [0.377, 0, 19], 'true,false,true': [0.04, 151, 0], 'true,false,false,true': [0.021, 28, 0], 'true,false,false,false': [0.938, 16, 4], 'false,true': [1.279, 2, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.77, 83, 40]}]
{'': [0.21640680764699516, 0.2206793019328212], 'false': [0.0384000000000006, 7.864079757761526e-17], 'true': [0.051570247933886745, 0.017016172860328596], 'false,true': [0.04865220249835817, -1.6148698540002277e-16], 'true,false': [-1.9847562451399445e-16, 0.07100591715976316], 'true,false,false': [0.03993055555555552, 0.25]}
{'': [0.022680912310966164, 0.1136079858406855], 'false': [0.0663909306054705, 0.15021389302790816], 'false,false': [0.06866580141640084, 0.16584744917173583], 'false,false,false': [0.09876543209876523, 0.1551739390819873], 'false,false,true': [nan, 0.06866580141640084], 'false,true': [nan, 0.0663909306054705], 'false,true,false': [0.0663909306054705, nan]}
{'': [0.03228286378300177, 0.10444399501522782], 'false': [nan, 0.10444399501522608], 'false,false': [0.000491240201686592, 0.09255942752804365], 'false,false,false': [0.08148636296827662, 0.11673705976021197], 'true': [0.03541708983260098, 0.006979601351421717], 'true,true': [0.03541708983260098, nan], 'true,false': [0.015977112610669586, 0.0], 'false,false,true': [0.0015044231176647809, 0.0]}
{'': [0.10387371332399523, 0.125579672910374], 'false': [0.08910671197635044, 0.1470982926000036], 'false,false': [0.0, 0.14792013024665146], 'false,false,false': [nan, 0.14792013024665143], 'true': [0.035041570923481154, 9.449303856098148e-05], 'false,true': [0.009193205160911835, 1.0965684819441712e-06]}
{'': [0.016358621151475978, 0.0765016425746261], 'false': [0.044310245906984076, 0.0742175639327916], 'false,false': [0.05935022829906041, 0.09696924465850028], 'false,false,true': [0.00042962386799710444, 0.009170934411592318], 'false,true': [0.04546861385853128, 0.0], 'true': [0.016528248626668025, 0.0]}
{'': [0.043415243493818846, 0.08775562779803663], 'false': [0.04216803961414592, 0.08948876249063943], 'false,false': [0.04893295437029727, 0.0005588810696777163], 'true': [nan, 0.04341524349381885], 'true,false': [nan, 0.043415243493818846], 'false,false,false': [0.0005877614088932196, 0.000523463947673827]}
{'': [0.049959448920983175, 0.0633868698026638], 'false': [nan, 0.06338686980266382], 'false,false': [nan, 0.0633868698026638], 'false,false,false': [nan, 0.0633868698026638], 'true': [0.0345718776696748, 0.010325058022965938]}
{'': [0.00013764656400743334, 0.03985318242067355], 'false': [nan, 0.0398531824206732], 'false,false': [0.02348064579329103, 0.05215018284854517], 'false,false,false': [0.03458403936754038, 0.07665597179292427], 'false,false,true': [0.025687949153056704, 0.011915339900041703], 'true': [0.00013761115825739983, 5.5860902878873686e-05], 'true,false': [5.5860902878873686e-05, nan]}
{'': [0.03174924943002279, 0.03679584458344339], 'false': [0.02244654235034159, 0.060062411995659086], 'false,false': [0.039528043781739436, 0.07635507111495611], 'false,false,false': [nan, 0.07635507111495611], 'false,false,true': [0.009564329757633562, 6.329525723695382e-05], 'false,true': [0.02194674664371719, 9.435025108784048e-05], 'false,true,true': [0.02194674664371719, nan]}
{'': [0.027572274561992557, 0.07086488809369429], 'false': [0.16365179387513956, 0.062360168294380264], 'false,false': [nan, 0.062360168294380305], 'true': [0.03342322641961803, 0.005122477971080711], 'true,true': [0.03897681955326174, 0.007479114182564493], 'true,false': [1.0750624835003227e-05, 0.020503574240856273], 'true,false,false': [1.5521191828126286e-05, 0.04403893524065007]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 10.523
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else return 0.7711924133603816;  // std dev = 0.282, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048807;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else if ( tweets(A, F), follows(A, G) )
%   | | | then return 0.08037115732173453;  // std dev = 1.764, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
%   | | | else return -0.14185106490048774;  // std dev = 3.16e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(H, I), follows(A, I) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.56e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then return 0.7071277331986081;  // std dev = 0.110, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else return 0.7709164564304128;  // std dev = 0.141, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.5366846563336448;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.7484105896416403;  // std dev = 0.149, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return -0.12793960238606775;  // std dev = 0.107, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.7580193346218546;  // std dev = 2.98e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4246860012885212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.11244490973802608;  // std dev = 3.857, 103.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=29 */
%   | | | else return 0.18435864674270172;  // std dev = 2.230, 30.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5420388274029937;  // std dev = 0.125, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | else return 0.32033130924392333;  // std dev = 0.459, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0.6288525269757816;  // std dev = 0.055, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.43650721583070284;  // std dev = 0.363, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.5584128904770321;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5227390339373079;  // std dev = 0.992, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.11383060691606171;  // std dev = 0.090, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.13361920464453644;  // std dev = 3.690, 89.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=29 */
%   | | | else return 0.08057160304301711;  // std dev = 2.338, 40.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then return 0.43641847495449754;  // std dev = 0.339, 88.000 (wgt'ed) examples reached here.  /* #pos=88 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.45908380927454;  // std dev = 0.130, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.6643161535187482;  // std dev = 0.041, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.11598777900486655;  // std dev = 0.333, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   else if ( follows(H, A), tweets(H, I) )
%   | then if ( follows(J, H), recursion_accounttype(J, B) )
%   | | then return 0.4251755249280385;  // std dev = 0.023, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.10123097643766776;  // std dev = 7.45e-09, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | then return 0.43399433465771264;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, L) )
%   | | | then return 0.1454422037716941;  // std dev = 2.550, 43.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=16 */
%   | | | else return 0.06507388355020718;  // std dev = 1.873, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3127275491445497;  // std dev = 0.147, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.4652501250026988;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.3429040591080918;  // std dev = 0.012, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.25642854041564833;  // std dev = 0.969, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0.462045408011158;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.42220252478940645;  // std dev = 0.437, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.09559756948419289;  // std dev = 1.091, 199.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=3 */
%   | | else if ( follows(L, A) )
%   | | | then return -0.07051152559407481;  // std dev = 0.729, 56.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=3 */
%   | | | else return 0.06137383144229564;  // std dev = 3.342, 84.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.26492077372201567;  // std dev = 0.203, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.25121040864755123;  // std dev = 0.022, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.08353894654622708;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | | else return -0.0723929761789433;  // std dev = 0.078, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2733990788972512;  // std dev = 0.120, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.22049636650824994;  // std dev = 0.893, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.5258817179505705;  // std dev = 0.682, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.14320431341265208;  // std dev = 0.288, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | | else return -0.11889711601382313;  // std dev = 0.328, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(C, D) )
%   | then if ( follows(A, E), follows(C, E) )
%   | | then if ( tweets(A, D), follows(E, C) )
%   | | | then return 0.1272550744537763;  // std dev = 1.658, 36.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=33 */
%   | | | else return 0.21165990496458623;  // std dev = 0.004, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.1214948455058344;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.21958447388808428;  // std dev = 0.021, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(F, A) )
%   | then return -0.048268756499202994;  // std dev = 0.113, 224.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=23 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.3220845197541937;  // std dev = 1.221, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return -0.15836040732478246;  // std dev = 1.039, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.20404286306082234;  // std dev = 0.723, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.08383641621569823;  // std dev = 1.642, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.1262140961046971;  // std dev = 1.682, 49.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=46 */
%   | | | else return 0.1789695926834397;  // std dev = 0.026, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.1820535644656733;  // std dev = 0.053, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.2493105186188;  // std dev = 0.001, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.04809610148182005;  // std dev = 0.133, 212.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=23 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.19625070469424535;  // std dev = 1.079, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.11017144197972033;  // std dev = 0.186, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.03801542859540782;  // std dev = 1.880, 45.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=16 */
%   | | | else return 0.11276348405186036;  // std dev = 1.387, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.16489924137523823;  // std dev = 0.058, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.03978907396746312;  // std dev = 1.314, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else return -0.12596100642467953;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.2411500742266548;  // std dev = 0.084, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(F, A) )
%   | then return -0.029363418686674473;  // std dev = 0.102, 241.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=38 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.22191009339754722;  // std dev = 0.194, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.0976846542913076;  // std dev = 0.124, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.021427425317736358;  // std dev = 1.585, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
%   | | | else return -0.004983948641760025;  // std dev = 1.638, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1148865262703749;  // std dev = 0.221, 111.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=104 */
%   | else return -0.0633129616409252;  // std dev = 0.050, 213.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=4 */
%   else if ( follows(A, E), tweets(A, F) )
%   | then if ( follows(E, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(G, F), follows(G, E) )
%   | | | then return 0.14748216360511102;  // std dev = 0.075, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.11013901104866569;  // std dev = 0.890, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.08549080950271808;  // std dev = 0.139, 41.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=2 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3844933012173135;  // std dev = 0.244, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.15367273872813067;  // std dev = 0.055, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.0017714278665205293;  // std dev = 0.586, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return -0.030292633871264484;  // std dev = 1.484, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '19.868', 'seconds']
Refined model CLL: -0.10613


******************************************
Best model found
******************************************
Results 

CLL : -0.103267 

AUC ROC : 0.993203 

AUC PR : 0.369979 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 10.523 

Total Inference Time : 21.780312299728394 

Total revision time: 49.39188445663452
Best scored revision CLL: -0.10613


Results 

CLL : -0.103267 

AUC ROC : 0.993203 

AUC PR : 0.369979 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 50.91688216781616 

Total Inference Time : 21.780312299728394 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.321
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 5.96e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.034102146556570206;  // std dev = 1.596, 37.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=4 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.05156934971293952;  // std dev = 1.503, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.45622071755974336;  // std dev = 1.264, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.05011723009254304;  // std dev = 1.606, 47.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=4 */
%   | | | else return 0.016694484518483276;  // std dev = 1.073, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.451674587926807;  // std dev = 1.167, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | else return -0.11671833346005991;  // std dev = 0.027, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.49546766010694093;  // std dev = 0.094, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.12248555413298351;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1464123955325747;  // std dev = 0.968, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3580032044880176;  // std dev = 0.236, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.31144686434539637;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6397768754594078;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.07029956575123787;  // std dev = 1.000, 42.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=2 */
%   | | else return -0.002651090379333682;  // std dev = 0.277, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.014696888798045035;  // std dev = 1.537, 56.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=17 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2504694282021791;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5727637168937384;  // std dev = 0.372, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.15060984713465667;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.11262073943312374;  // std dev = 0.047, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25875723090025343;  // std dev = 0.969, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | else return -0.07294060028523394;  // std dev = 1.159, 57.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.010734553000262576;  // std dev = 0.240, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.2066425064527107;  // std dev = 0.045, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.040828012830025476;  // std dev = 0.806, 28.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=3 */
%   | | | else return -0.028734250138499968;  // std dev = 0.418, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.015915891960226494;  // std dev = 0.788, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else return 0.0863898935508259;  // std dev = 0.746, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.20097605669800905;  // std dev = 0.069, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.2410701811528931;  // std dev = 0.311, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09091881836925815;  // std dev = 0.042, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.5108195394105248;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.08929640062591508;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.49447927445278084;  // std dev = 0.058, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1902494395541601;  // std dev = 0.355, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.14646868772912564;  // std dev = 0.007, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.08596654078387726;  // std dev = 0.028, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08213610187397412;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.07830551680781538;  // std dev = 0.020, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.10055442044103491;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.041010623808621485;  // std dev = 0.866, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.252', 'seconds']
Parameter learned model CLL:-0.116222 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.0, 0, 20], 'true,false,true': [2.98e-08, 32, 0], 'true,false,false,true': [0.0, 7, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 5], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 8, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [5.96e-08, 0, 16], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.596, 33, 4], 'false,true,false,false': [0.0, 1, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 7, 0], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [1.503, 15, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.264, 2, 13], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [1.606, 43, 4], 'false,false,false,false': [1.073, 10, 2]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.167, 1, 20], 'true,false': [0.027, 41, 0], 'false,true,true': [0.094, 0, 3], 'false,true,false': [0.003, 9, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.968, 4, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.236, 0, 14], 'true,false': [0.0, 0, 0], 'false,true,true': [0.008, 0, 5], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [1.0, 40, 2], 'false,false,false': [0.277, 12, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.537, 39, 17], 'false,true': [0.0, 0, 3], 'false,false,true': [0.372, 0, 5], 'false,false,false,true': [0.0, 2, 0], 'false,false,false,false': [0.047, 3, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.969, 1, 20], 'true,false': [1.159, 53, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.24, 2, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,true': 'tweets(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.045, 0, 16], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.806, 25, 3], 'false,false,true,false': [0.418, 5, 1], 'false,false,false,true': [0.788, 11, 3], 'false,false,false,false': [0.746, 4, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.069, 0, 14], 'false,true,true,true': [0.311, 0, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.042, 54, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.003, 3, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.058, 0, 2]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.355, 0, 18], 'true,true,false': [0.007, 0, 2], 'true,false,true': [0.028, 30, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.02, 4, 0], 'false,true': [0.0, 0, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.866, 7, 4]}]
{'': [0.22407354208560717, 0.2366863905325442], 'false': [0.0, -6.938893903907228e-18], 'true': [-8.881784197001253e-17, 4.2700885562506023e-17], 'true,false': [2.7755575615628914e-17, -7.93016446160826e-18], 'false,true': [0.0, nan], 'true,false,false': [-7.93016446160826e-18, nan]}
{'': [2.220446049250313e-16, 0.08522261461764519], 'false': [0.06723584881943498, 0.10791925332037365], 'false,false': [-1.982541115402065e-18, 0.13421305884621773], 'false,false,false': [0.0, 0.11897211221358263], 'false,true': [nan, 0.06723584881943498], 'false,true,false': [0.06883346942688343, 0.0], 'false,false,true': [nan, -1.982541115402065e-18]}
{'': [0.10047192079040801, 0.08416397661077041], 'true': [0.10655568174103831, 0.0], 'true,true': [0.10655568174103831, nan], 'false': [nan, 0.08416397661077038], 'false,false': [-4.4408920985006264e-17, 0.06392624311126648], 'false,false,false': [0.05486177634447438, 0.09587282532353947], 'true,false': [nan, 0.0], 'false,false,true': [0.0, 0.0]}
{'': [0.0943491154390825, 0.10420148381559613], 'false': [0.07379665376742915, 0.15628476583059447], 'false,false': [nan, 0.15628476583059447], 'false,false,false': [nan, 0.15628476583059447], 'true': [0.06487576792045752, 1.8110995749337363e-05], 'false,true': [0.008759928896490096, 9.018310378700662e-06]}
{'': [0.003967555746757461, 0.056921899215110074], 'false': [1.3970096741611204e-05, 0.05260277960202853], 'false,false': [0.04462077606421172, 0.07673989194846843], 'false,false,true': [0.0, 0.0238270043624861], 'true': [0.003967555746757461, nan], 'false,true': [1.3970096741611204e-05, nan]}
{'': [0.04221051564337163, 0.10547182737844812], 'false': [0.0, 0.1369325072916785], 'false,false': [0.027676170038286284, 0.0007826067021765831], 'true': [nan, 0.04221051564337165], 'true,false': [nan, 0.04221051564337163], 'false,false,false': [0.0, 0.0007270755820441682]}
{'': [0.050899407252030494, 0.01914837695544284], 'true': [0.044701824633000875, 0.023561028760762617], 'false': [nan, 0.01914837695544284], 'false,false': [nan, 0.01914837695544284], 'false,false,false': [nan, 0.01914837695544284]}
{'': [0.00012881782424255944, 0.038804321203193166], 'false': [nan, 0.0388043212031931], 'false,false': [0.024269851296352986, 0.05989988350648405], 'false,false,false': [0.04430182306351628, 0.09281874844327455], 'false,false,true': [0.02320935157259577, 0.029098401339893772], 'true': [0.00012881782424255944, nan]}
{'': [0.004755824148615528, 0.02879236483357509], 'false': [0.01281355126291377, 0.08634008041491943], 'false,false': [0.0864346796159976, 0.0017108459585731817], 'false,false,true': [0.0, 2.142765667971271e-06], 'false,true': [0.013844025348732572, 3.21537375796895e-05], 'false,true,true': [0.013844025348732572, nan], 'false,false,false': [nan, 0.0017108459585731817]}
{'': [0.018806050772917013, 0.06282361622873617], 'false': [0.0, 0.06823939875792867], 'false,false': [nan, 0.06823939875792867], 'true': [0.006483412552780959, 3.65930866318055e-05], 'true,true': [0.007009078899687073, 2.7336623297086887e-05], 'true,false': [2.5219542812429662e-05, 5.318064189006964e-05], 'true,false,false': [0.0, 9.902459280560372e-05]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 3.943
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.7194734122109544;  // std dev = 1.05e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.038039322934665956;  // std dev = 1.386, 29.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=3 */
%   | | | else return -0.040952833454456807;  // std dev = 0.802, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7518526675222027;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.26446527527187264;  // std dev = 1.308, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5626476302778847;  // std dev = 0.023, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.39394571644812154;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.588232901061704;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5753897189581847;  // std dev = 0.069, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return -0.09446647619195497;  // std dev = 0.834, 34.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=1 */
%   | | | else return 0.00502284391174559;  // std dev = 0.780, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.10427137296451532;  // std dev = 1.038, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.4137313674478363;  // std dev = 0.700, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.24856194713058044;  // std dev = 1.293, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.4146404674453141;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.6517014461867058;  // std dev = 0.244, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I), follows(G, I) )
%   | | | then return -0.11134406638486519;  // std dev = 0.008, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.11734258186406288;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.16799275624817542;  // std dev = 0.009, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( follows(J, A), tweets(J, K) )
%   | then if ( follows(L, J), recursion_accounttype(L, B) )
%   | | then return 0.5454831460505822;  // std dev = 0.120, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.11132572849748527;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.055086482754721645;  // std dev = 0.954, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3542892411449076;  // std dev = 0.011, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.42896984930463605;  // std dev = 0.168, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.3343299926153712;  // std dev = 0.044, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5921070765728412;  // std dev = 0.017, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.07192795359263245;  // std dev = 0.870, 35.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=2 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.10112929397647244;  // std dev = 0.001, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return 0.09911657287483702;  // std dev = 0.901, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then return 0.2770452938704778;  // std dev = 0.010, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.286185709465528;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.16211668072979346;  // std dev = 0.906, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.09549979857469162;  // std dev = 0.016, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return -0.03774387650068247;  // std dev = 0.156, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.25062421767620274;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.33295478241492893;  // std dev = 0.892, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.13145158260476067;  // std dev = 0.149, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.18975709502674296;  // std dev = 0.213, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( follows(A, C) )
%   | | then return 0.227907158078609;  // std dev = 5.27e-09, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.22344471602721397;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.014309145648484622;  // std dev = 0.880, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( tweets(A, G), follows(F, E) )
%   | | | then return -0.06672483292462027;  // std dev = 0.494, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   | | | else return -0.08818805337047247;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(E, H), recursion_accounttype(H, B) )
%   | | | then return 0.3830755120155655;  // std dev = 0.053, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.0887604911375924;  // std dev = 0.021, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.024488518876429693;  // std dev = 0.567, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.2323431604443691;  // std dev = 0.642, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.1138339455309717;  // std dev = 0.268, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.19350335906603922;  // std dev = 0.024, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then return 0.1304664914918276;  // std dev = 0.909, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, G), tweets(E, H) )
%   | | | then return -0.08167957571457007;  // std dev = 0.021, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.07342445113620942;  // std dev = 0.000468, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.07042914415037908;  // std dev = 0.551, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.2430722151976776;  // std dev = 0.577, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.17739026535247152;  // std dev = 0.011, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.22771083676852213;  // std dev = 0.105, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.23843617535397982;  // std dev = 0.207, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.17872414920745508;  // std dev = 0.825, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, I) )
%   | | | then return -0.07665747873874114;  // std dev = 0.024, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.06845607059359152;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( tweets(A, J) )
%   | | then if ( recursion_accounttype(K, B) )
%   | | | then return 0.343358623846192;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.157150656324601;  // std dev = 0.052, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.41606290364643544;  // std dev = 0.065, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.15368156606293956;  // std dev = 0.057, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.25776846316843616;  // std dev = 0.110, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.1570458865958661;  // std dev = 0.021, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.07076688900878356;  // std dev = 0.002, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return -0.07308112848623885;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.12262297331766303;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return -0.11849919973639893;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.014330767722973859;  // std dev = 0.468, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return -0.19375972826911858;  // std dev = 0.326, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '25.153', 'seconds']
Refined model CLL: -0.121739


******************************************
Best model found
******************************************
Results 

CLL : -0.125356 

AUC ROC : 0.994506 

AUC PR : 0.359244 

Precision : 0.347932 

Recall : 0.916667 

F1 : 0.504409 

Total Learning Time : 3.943 

Total Inference Time : 4.658798933029175 

Total revision time: 12.886990369796752
Best scored revision CLL: -0.116222


Results 

CLL : -0.125356 

AUC ROC : 0.994506 

AUC PR : 0.359244 

Precision : 0.347932 

Recall : 0.916667 

F1 : 0.504409 

Total Learning Time : 14.411988080978393 

Total Inference Time : 4.658798933029175 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.965
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8105298874804642;  // std dev = 1.380, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.88e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.640747952828559;  // std dev = 1.654, 34.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=31 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.026856805589014893;  // std dev = 2.411, 78.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=9 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.1338991299155577;  // std dev = 1.991, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5706074930496858;  // std dev = 0.886, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5863076717117135;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5863076717117135;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04779965707979072;  // std dev = 2.136, 78.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=7 */
%   | | | else return 0.03987493451521771;  // std dev = 1.954, 34.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5057222495312381;  // std dev = 0.705, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else return -0.11847457040823982;  // std dev = 0.072, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.5074361375618212;  // std dev = 0.106, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.12612795789747733;  // std dev = 0.003, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.165050764010376;  // std dev = 1.605, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.34311921300416415;  // std dev = 0.262, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.3018063246483276;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.32219808980684017;  // std dev = 0.000467, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6360832517000956;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.08973545592665921;  // std dev = 0.973, 71.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=2 */
%   | | else return 0.01562438226999071;  // std dev = 0.298, 38.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04079798077302215;  // std dev = 2.051, 102.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=35 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2561933833128545;  // std dev = 0.000292, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.43497187581151964;  // std dev = 1.355, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.129582373710353;  // std dev = 0.123, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.13090714299760192;  // std dev = 0.127, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2943075375306936;  // std dev = 0.944, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | else return -0.07854149003302134;  // std dev = 1.418, 123.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.021003068973474717;  // std dev = 0.371, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1368369671523469;  // std dev = 1.360, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.040214972882348404;  // std dev = 1.176, 61.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=7 */
%   | | | else return -0.06391501031590253;  // std dev = 0.863, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.04827294671270869;  // std dev = 1.102, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   | | | else return 0.05647376112823497;  // std dev = 1.337, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15449739703012694;  // std dev = 0.195, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.2781620033315206;  // std dev = 0.502, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0920033107653403;  // std dev = 0.074, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.5328544322741764;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return -0.08941164558402254;  // std dev = 0.000172, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1277125369630601;  // std dev = 1.202, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14354662732607607;  // std dev = 1.531, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | else return 0.15495418952060638;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.08659742587586798;  // std dev = 0.057, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07515093327802615;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.08020509482291245;  // std dev = 0.029, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.11956927422034191;  // std dev = 0.003, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.07036847108614179;  // std dev = 1.330, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.564', 'seconds']
Parameter learned model CLL:-0.114118 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.38, 2, 40], 'true,false,true': [7.88e-08, 84, 0], 'true,false,false,true': [0.0, 12, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 10], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 13, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.654, 3, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.411, 69, 9], 'false,true,false,false': [0.0, 2, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 7, 0], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [1.991, 18, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.886, 1, 25], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 7], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [2.136, 71, 7], 'false,false,false,false': [1.954, 27, 7]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [0.705, 0, 37], 'true,false': [0.072, 77, 0], 'false,true,true': [0.106, 0, 7], 'false,true,false': [0.003, 14, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.605, 10, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.262, 0, 26], 'true,false': [0.0, 0, 1], 'false,true,true': [0.000467, 0, 9], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 5], 'false,false,true,false': [0.973, 69, 2], 'false,false,false': [0.298, 31, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.051, 67, 35], 'false,true': [0.000292, 0, 5], 'false,false,true': [1.355, 1, 10], 'false,false,false,true': [0.123, 18, 0], 'false,false,false,false': [0.127, 14, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.944, 1, 42], 'true,false': [1.418, 117, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.371, 7, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,true': 'tweets(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.36, 2, 31], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.176, 54, 7], 'false,false,true,false': [0.863, 12, 2], 'false,false,false,true': [1.102, 23, 4], 'false,false,false,false': [1.337, 14, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.195, 1, 27], 'false,true,true,true': [0.502, 0, 15], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.074, 103, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.000172, 11, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.202, 8, 6]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.531, 2, 37], 'true,true,false': [0.006, 0, 3], 'true,false,true': [0.057, 91, 0], 'true,false,false,true': [0.0, 3, 0], 'true,false,false,false': [0.029, 5, 0], 'false,true': [0.003, 0, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.33, 16, 8]}]
{'': [0.20583910943079312, 0.2457466918714556], 'false': [-8.881784197001253e-17, -1.2810265668751807e-17], 'true': [0.045351473922903854, 7.864079757761526e-17], 'true,false': [7.401486830834377e-17, -1.1564823173178714e-17], 'true,false,false': [-1.1564823173178714e-17, nan], 'false,true': [-8.881784197001253e-17, nan]}
{'': [0.0804498269896193, 0.09955841681254622], 'false': [0.07289063130211604, 0.14592491562464205], 'false,false': [-1.982541115402065e-18, 0.16426541016816332], 'false,false,false': [0.0, 0.1524085509442034], 'false,true': [nan, 0.07289063130211604], 'false,true,false': [0.07451663282823208, 0.0], 'false,false,true': [nan, -1.982541115402065e-18]}
{'': [0.028060009556090688, 0.09619702043985998], 'false': [nan, 0.09619702043985999], 'false,false': [0.0, 0.07647741181259238], 'false,false,false': [0.05851967494625098, 0.11232124202957067], 'true': [0.0302018797012615, 0.0], 'true,true': [0.0302018797012615, nan], 'false,false,true': [0.0, 0.0], 'true,false': [nan, 0.0]}
{'': [0.08981569242850751, 0.12397043826106473], 'false': [0.09296920651265896, 0.1610279678898705], 'false,false': [nan, 0.1610279678898705], 'false,false,false': [nan, 0.1610279678898705], 'false,true': [0.01129061340651738, 7.348714010103301e-06], 'true': [0.013424745269504074, 6.687461378956855e-05]}
{'': [0.0026045398067989574, 0.06397581173073995], 'false': [2.4205399548924177e-08, 0.060318423161347084], 'false,false': [0.04482283038822156, 0.08909710760744924], 'false,false,true': [0.0, 0.013320631138125023], 'true': [0.0026415012760749013, 0.0], 'false,true': [2.4205399548924177e-08, nan]}
{'': [0.041243004221497744, 0.09884274234113073], 'false': [1.7057795043129433e-08, 0.10424643900069011], 'false,false': [0.1669947998518739, 0.0009757881076264616], 'true': [nan, 0.04124300422149778], 'true,false': [nan, 0.041243004221497744], 'false,false,false': [0.0008363457163357722, 0.00115408398695681]}
{'': [0.044164412054121124, 0.015317203618518136], 'true': [0.02070913087961318, 0.01635395419399496], 'false': [nan, 0.015317203618518136], 'false,false': [nan, 0.015317203618518136], 'false,false,false': [nan, 0.015317203618518136]}
{'': [0.056067808237216396, 0.0435236720907412], 'true': [0.056067808237216396, nan], 'false': [nan, 0.043523672090741275], 'false,false': [0.028464073207247906, 0.06652461292820408], 'false,false,false': [0.044953585702621764, 0.08934250892327371], 'false,false,true': [0.022680287801154643, 0.053208009833515]}
{'': [0.038022907585278216, 0.03129408589968651], 'false': [0.017382915396457064, 0.08147535734881065], 'false,false': [0.0504066979953703, 0.10322983106507079], 'false,false,false': [nan, 0.10322983106507079], 'false,false,true': [0.0, 2.6912657380417926e-09], 'false,true': [0.01677364124531988, 5.354806205291009e-05], 'false,true,true': [0.01677364124531988, nan]}
{'': [0.027740317648256317, 0.06825601874048622], 'false': [4.727768198358601e-06, 0.07375741716542941], 'false,false': [nan, 0.07375741716542941], 'true': [0.05578196043630334, 4.676888287023153e-05], 'true,true': [0.06006260232820587, 1.2778543149655208e-05], 'true,false': [3.5316455754035984e-05, 0.00011390554083118461], 'true,false,false': [0.0, 0.00017266965948421477]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 4.772
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.30e-08, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( recursion_accounttype(F, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), follows(A, E) )
%   | | then return 0.7194734122109543;  // std dev = 1.05e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.7609104304538484;  // std dev = 0.051, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.5528067455442879;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.021682772648120893;  // std dev = 2.094, 57.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=7 */
%   | | | else return -0.03156485511290851;  // std dev = 1.127, 18.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.2194734122109545;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.11596051882570765;  // std dev = 2.020, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.49981088119072914;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.5777272871548098;  // std dev = 0.051, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.7244857998274784;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.6731303773666394;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5800614591014799;  // std dev = 0.029, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return -0.08427261021976198;  // std dev = 1.433, 66.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=3 */
%   | | | else return 0.07756010248131034;  // std dev = 1.278, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.06982491104572221;  // std dev = 1.251, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return 0.27837837633575957;  // std dev = 1.319, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.4295116980904649;  // std dev = 0.018, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.6407155182298312;  // std dev = 0.088, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.12169865121225425;  // std dev = 0.017, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( follows(H, F), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.2965464836707267;  // std dev = 0.827, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5382926361486992;  // std dev = 0.210, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.11550193793581373;  // std dev = 0.006, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( recursion_accounttype(K, B) )
%   | | | then return 0.6804989317625806;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14728377629174944;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.30995657034035917;  // std dev = 0.886, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.33524626312421246;  // std dev = 0.019, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.4115549378878464;  // std dev = 0.096, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.3562980421626183;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( tweets(A, H), follows(A, I) )
%   | | then return 0.31277116596665877;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.35199611080916626;  // std dev = 0.053, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, J), follows(A, K) )
%   | | then if ( follows(K, L), recursion_accounttype(L, B) )
%   | | | then return 0.5846376979474627;  // std dev = 0.043, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.09050620996049218;  // std dev = 0.822, 66.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=2 */
%   | | else if ( follows(M, A) )
%   | | | then return -0.07331649028297924;  // std dev = 0.677, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | | | else return 0.09970810017633983;  // std dev = 1.397, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.27341292988742744;  // std dev = 0.030, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.368543434294171;  // std dev = 0.264, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09568567374741756;  // std dev = 0.028, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else return -0.0017479742353921181;  // std dev = 0.217, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.27055046467400057;  // std dev = 0.054, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return -0.06390315733923353;  // std dev = 0.827, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5104710609402234;  // std dev = 0.053, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.11617965390469387;  // std dev = 0.057, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return -0.14614121210456754;  // std dev = 0.238, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A), tweets(A, D) )
%   | then return 0.20987019208131805;  // std dev = 0.005, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(C, A) )
%   | | then return 0.2508867287841203;  // std dev = 5.27e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2805177382504927;  // std dev = 0.061, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.20386676180627514;  // std dev = 0.058, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.38613978712984115;  // std dev = 0.238, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.09246207453403013;  // std dev = 0.011, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.2317861632015842;  // std dev = 0.036, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.20648512238745056;  // std dev = 0.411, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 1.6792224703410745E-4;  // std dev = 0.848, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.17416909096853173;  // std dev = 0.008, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return 0.20332395565907518;  // std dev = 0.012, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(H, A), follows(H, G) )
%   | | | then return -0.05119436473997585;  // std dev = 0.711, 59.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=5 */
%   | | | else return -0.0041523339572049345;  // std dev = 0.808, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | else return -0.08861017413753207;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(A, J), follows(I, J) )
%   | | | then return -0.04504990451788841;  // std dev = 0.331, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return 0.10276477259087598;  // std dev = 0.501, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.08344267113301473;  // std dev = 0.493, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.01738716329951395;  // std dev = 0.855, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1562246916576944;  // std dev = 0.008, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.23312189834408095;  // std dev = 0.053, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.153605045360518;  // std dev = 0.054, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.31134907520628907;  // std dev = 0.197, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07887879655660245;  // std dev = 0.006, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return -0.046424802903235286;  // std dev = 0.918, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.12116691296199138;  // std dev = 0.072, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07061923065370601;  // std dev = 0.484, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.04736420231340082;  // std dev = 0.816, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.10139462885950566;  // std dev = 0.966, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.23161668919210884;  // std dev = 0.200, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.14465421071252146;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.07361362188663464;  // std dev = 0.005, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.19454470539335184;  // std dev = 0.006, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return -0.09093832004909795;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.020320057681219247;  // std dev = 0.551, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.15713885194021637;  // std dev = 0.337, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.04197219500085777;  // std dev = 0.899, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '24.029', 'seconds']
Refined model CLL: -0.111564


******************************************
Best model found
******************************************
Results 

CLL : -0.11569 

AUC ROC : 0.994694 

AUC PR : 0.406244 

Precision : 0.339956 

Recall : 0.987179 

F1 : 0.505747 

Total Learning Time : 4.772 

Total Inference Time : 7.967177152633667 

Total revision time: 19.889523994445803
Best scored revision CLL: -0.111564


Results 

CLL : -0.11569 

AUC ROC : 0.994694 

AUC PR : 0.406244 

Precision : 0.339956 

Recall : 0.987179 

F1 : 0.505747 

Total Learning Time : 21.414521705627443 

Total Inference Time : 7.967177152633667 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.305
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.810529887480465;  // std dev = 1.690, 63.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=60 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.94e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.08629550934493224;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004877;  // std dev = 5.89e-09, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7079517920558884;  // std dev = 0.989, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.02576138522302181;  // std dev = 3.005, 120.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=14 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08166743038995856;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.15619471171805746;  // std dev = 2.288, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.4861982045955536;  // std dev = 2.052, 46.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=41 */
%   | | else return 0.7340427128873941;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.717800911110976;  // std dev = 0.226, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.569918421055993;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5699184210559929;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.030347324505042225;  // std dev = 2.744, 105.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=12 */
%   | | | else return 0.006914855490358751;  // std dev = 1.992, 42.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4855466128398826;  // std dev = 1.652, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | else return -0.12769258727153263;  // std dev = 0.371, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.41096937626487035;  // std dev = 0.304, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return -0.12338796155061749;  // std dev = 1.11e-05, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07202854924597465;  // std dev = 1.748, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.34071763927393905;  // std dev = 1.158, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | else return 0.3495551496897056;  // std dev = 0.146, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3188911850930069;  // std dev = 0.021, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6200831700996842;  // std dev = 0.079, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.0948120125550367;  // std dev = 0.969, 100.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=2 */
%   | | else return 0.006137885264154344;  // std dev = 0.288, 44.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02425151840997501;  // std dev = 2.930, 165.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=54 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24739597031603222;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5417202493598352;  // std dev = 0.576, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11900978908682984;  // std dev = 0.084, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.1235352605235296;  // std dev = 0.108, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.29842565991102915;  // std dev = 1.392, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | else return -0.08223383663060267;  // std dev = 1.402, 146.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03903429416096794;  // std dev = 0.474, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.205587320084428;  // std dev = 0.068, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.13414164591786615;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.03306331095986508;  // std dev = 1.486, 88.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=11 */
%   | | | else return -0.04564427277945238;  // std dev = 0.868, 26.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.038451143983889886;  // std dev = 1.256, 39.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=8 */
%   | | | else return 0.015878445662121862;  // std dev = 1.585, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.20042201278347152;  // std dev = 0.070, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.28651091853901023;  // std dev = 0.583, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09363163980187068;  // std dev = 0.189, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.1679325711744967;  // std dev = 1.041, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.09284913048176259;  // std dev = 0.000466, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08197118571023948;  // std dev = 1.285, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1444418430949526;  // std dev = 1.788, 59.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   | | else return 0.14401035915889648;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.08472852897176449;  // std dev = 0.044, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0820723571446375;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.07169687920224707;  // std dev = 0.557, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.10286574641443569;  // std dev = 0.000577, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.032384601557130445;  // std dev = 1.555, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.762', 'seconds']
Parameter learned model CLL:-0.114801 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.69, 3, 60], 'true,false,true': [8.94e-08, 99, 0], 'true,false,false,true': [0.972, 17, 1], 'true,false,false,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 13], 'false,true,false': [0.0, 0, 0], 'false,false': [5.89e-09, 35, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.989, 1, 47], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.005, 106, 14], 'false,true,false,false': [0.0, 2, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.975, 19, 1], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [2.288, 22, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [2.052, 5, 41], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.226, 0, 2], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 7], 'false,false,true,false': [0.0, 0, 3], 'false,false,false,true': [2.744, 93, 12], 'false,false,false,false': [1.992, 35, 7]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.652, 2, 58], 'true,false': [0.371, 114, 0], 'false,true,true': [0.304, 1, 11], 'false,true,false': [1.11e-05, 21, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.748, 17, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.158, 1, 43], 'true,false': [0.146, 0, 3], 'false,true,true': [0.021, 0, 10], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.079, 0, 10], 'false,false,true,false': [0.969, 98, 2], 'false,false,false': [0.288, 37, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.93, 111, 54], 'false,true': [0.041, 0, 7], 'false,false,true': [0.576, 0, 14], 'false,false,false,true': [0.084, 22, 0], 'false,false,false,false': [0.108, 24, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.392, 1, 66], 'true,false': [1.402, 140, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.474, 13, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.068, 0, 46], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.486, 77, 11], 'false,false,true,false': [0.868, 23, 3], 'false,false,false,true': [1.256, 31, 8], 'false,false,false,false': [1.585, 15, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.07, 0, 46], 'false,true,true,true': [0.583, 0, 18], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.189, 129, 0], 'false,false,true,true': [1.041, 1, 5], 'false,false,true,false': [0.000466, 8, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.285, 12, 6]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.788, 3, 56], 'true,true,false': [0.005, 0, 4], 'true,false,true': [0.044, 111, 0], 'true,false,false,true': [3.73e-09, 9, 0], 'true,false,false,false': [0.557, 6, 2], 'false,true': [0.000577, 0, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.555, 28, 11]}]
{'': [0.22520680076920743, 0.19748263888888837], 'true': [0.045351473922901994, 0.01666187877046824], 'false': [-2.7328566760003855e-16, 3.489272363107635e-17], 'true,false': [8.074349270001139e-17, 0.09418282548476457], 'true,false,false': [0.052469135802469175, 0.0], 'false,true': [-2.7328566760003855e-16, nan]}
{'': [0.020392895341793855, 0.09764694613488781], 'false': [0.0741622602359984, 0.140211473329505], 'false,false': [0.04750000000000001, 0.1666706469918696], 'false,false,false': [0.0, 0.15864144721448348], 'false,true': [nan, 0.0741622602359984], 'false,true,false': [0.07523540034939276, 0.0], 'false,false,true': [nan, 0.04750000000000001]}
{'': [0.08675902746722582, 0.09421250464093497], 'false': [nan, 0.094212504640935], 'false,false': [-1.7763568394002506e-16, 0.07847813978597538], 'true': [0.09084601757853653, 0.019330920500693405], 'true,true': [0.0915139756788287, 0.0], 'false,false,false': [0.0716938123372217, 0.09444719408071005], 'true,false': [0.025469361770319998, 0.0], 'false,false,true': [-1.2688263138573217e-16, 0.0]}
{'': [0.10144290969278509, 0.11331579839664259], 'false': [0.09974310265116532, 0.13278894699625327], 'false,false': [nan, 0.13278894699625327], 'false,false,false': [nan, 0.13278894699625327], 'true': [0.04551064214063245, 0.0012042843661066078], 'false,true': [0.09258768195214384, 1.2381205320248037e-10]}
{'': [0.02900879114334181, 0.06308741941013458], 'false': [4.264646803966432e-05, 0.060197047476510356], 'false,false': [0.05082171924976599, 0.08271173921026688], 'false,false,true': [0.0006258007572066849, 0.009379936355119417], 'true': [0.03049565297151966, 0.007128367947611902], 'false,true': [4.264646803966432e-05, nan]}
{'': [0.05202571601140355, 0.07997724131404886], 'false': [0.00024525319150150597, 0.08449261033894691], 'false,false': [0.02366109784470925, 0.00041224394431366406], 'true': [nan, 0.05202571601140361], 'true,false': [nan, 0.05202571601140355], 'false,false,false': [0.000319889675116662, 0.0004871072935862415]}
{'': [0.04957435524265249, 0.014022728450267398], 'true': [0.028924182882176273, 0.013471411223296545], 'false': [nan, 0.014022728450267398], 'false,false': [nan, 0.014022728450267398], 'false,false,false': [nan, 0.014022728450267398]}
{'': [0.00020334411594692, 0.04083423348848966], 'false': [nan, 0.04083423348848935], 'false,false': [0.0260084681314729, 0.06882488474031707], 'false,false,false': [0.04047246482009042, 0.11956077107566312], 'false,false,true': [0.02508557451702129, 0.029009926541283166], 'true': [9.915859005526568e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.004956895953317526, 0.033115096992153044], 'false': [0.018079753784556854, 0.09372862541432096], 'false,false': [0.0940061398670988, 0.09177321470349172], 'false,false,true': [0.18048642576592724, 2.7192091396274765e-08], 'false,false,false': [nan, 0.09177321470349172], 'false,true': [0.018860748447510498, 0.000275875989734183], 'false,true,true': [0.018860748447510498, nan]}
{'': [0.02989386338406631, 0.059200289460482974], 'false': [1.6628468004452335e-07, 0.06199387166282501], 'false,false': [nan, 0.06199387166282501], 'true': [0.05076985722880386, 0.002451080271430292], 'true,true': [0.05421150361209086, 5.398717783679924e-06], 'true,false': [1.7306538662124132e-05, 0.018292906467206427], 'true,false,false': [1.5419764230904951e-18, 0.03881543477911971]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C), tweets(E, F).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 7.14
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.8295775065280829;  // std dev = 0.986, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.94e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else if ( follows(H, C), tweets(H, I) )
%   | | | then return -0.09423201728144018;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( recursion_accounttype(J, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7250303570612371;  // std dev = 0.087, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.023581660125388815;  // std dev = 2.642, 90.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=11 */
%   | | | else return -0.013880063432752263;  // std dev = 1.446, 24.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=3 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.06923730988370862;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return -0.1307626901162914;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.11977704750366765;  // std dev = 2.378, 37.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5328720456942347;  // std dev = 0.985, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | | else return 0.7378110234181905;  // std dev = 0.035, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.7695427499822921;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.700997509075266;  // std dev = 0.094, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5539938162480563;  // std dev = 1.05e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return -0.09262826044340561;  // std dev = 1.668, 107.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=4 */
%   | | | else return 0.043517673787675806;  // std dev = 1.539, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.05144193396303608;  // std dev = 1.656, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   | | | else return 0.2181840690640656;  // std dev = 1.544, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.4290295973713114;  // std dev = 0.080, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.16649632584085636;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.43758936262957904;  // std dev = 0.964, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.7111553159724561;  // std dev = 0.088, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.11863945253909684;  // std dev = 0.117, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   else if ( follows(H, A), tweets(H, I) )
%   | then if ( follows(J, H), recursion_accounttype(J, B) )
%   | | then return 0.4860726648198361;  // std dev = 0.114, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.11557172449276923;  // std dev = 0.019, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, K), follows(K, L) )
%   | | then return 0.23955355856505642;  // std dev = 0.997, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.054557103358981826;  // std dev = 0.363, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.33041954242456884;  // std dev = 0.069, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0.45725844746781164;  // std dev = 0.095, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.3095713575325147;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.15948516104607366;  // std dev = 0.813, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3326691938848455;  // std dev = 0.092, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5545549746972896;  // std dev = 0.093, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.09437621996450028;  // std dev = 0.877, 103.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=2 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.07784285280166829;  // std dev = 0.754, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | | | else return 0.18814869864384587;  // std dev = 1.416, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.22525588150040193;  // std dev = 0.982, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.1302176357863206;  // std dev = 0.931, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.38095964103600566;  // std dev = 0.123, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.2473160818608403;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.06084833438896059;  // std dev = 0.149, 119.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=8 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2812063106278958;  // std dev = 0.082, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.21986991382306625;  // std dev = 1.259, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.5666301925951104;  // std dev = 0.056, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.1439535194172488;  // std dev = 0.053, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(C, A) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.21845494246431843;  // std dev = 0.026, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.1405906173643475;  // std dev = 0.963, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.31374544617971867;  // std dev = 0.232, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.032393839178977625;  // std dev = 1.091, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.21501720378924186;  // std dev = 0.067, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.4794743332393878;  // std dev = 0.233, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09029805008744264;  // std dev = 0.064, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.0013298114832653778;  // std dev = 1.067, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
%   | | | else return 0.014041243882764553;  // std dev = 1.188, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, F) )
%   | | | then return 0.14904926526175327;  // std dev = 0.944, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.18539931474049096;  // std dev = 0.050, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.1877291167499853;  // std dev = 0.058, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.2704307146624002;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A) )
%   | then return -0.0419126367433006;  // std dev = 0.127, 150.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=15 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3349534534004515;  // std dev = 0.284, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.10698438139437721;  // std dev = 0.002, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.019865559124546548;  // std dev = 0.841, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return -0.02648106129902086;  // std dev = 0.944, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.1665865168509016;  // std dev = 0.041, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.014484751493708441;  // std dev = 0.935, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.28240084230895224;  // std dev = 0.078, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.18948923620393043;  // std dev = 0.835, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then return -0.03895012019087164;  // std dev = 0.117, 147.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=18 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.31478408901961996;  // std dev = 0.151, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.09679621004690046;  // std dev = 0.002, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.048841664671934196;  // std dev = 0.803, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.030753541565163942;  // std dev = 0.893, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.08020683260802036;  // std dev = 1.681, 45.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=42 */
%   | | | else return 0.26746771503044575;  // std dev = 0.773, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.1761979119047548;  // std dev = 0.031, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.07206534687322955;  // std dev = 0.044, 136.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.10303522892610499;  // std dev = 0.687, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.13961301476397475;  // std dev = 1.036, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.1356635365386425;  // std dev = 0.264, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.01403716628323473;  // std dev = 0.508, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.08504017574702752;  // std dev = 0.823, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '23.171', 'seconds']
Refined model CLL: -0.112867


******************************************
Best model found
******************************************
Results 

CLL : -0.118454 

AUC ROC : 0.994817 

AUC PR : 0.406904 

Precision : 0.342222 

Recall : 0.987179 

F1 : 0.508251 

Total Learning Time : 7.14 

Total Inference Time : 11.355395317077637 

Total revision time: 28.00135404586792
Best scored revision CLL: -0.112867


Results 

CLL : -0.118454 

AUC ROC : 0.994817 

AUC PR : 0.406904 

Precision : 0.342222 

Recall : 0.987179 

F1 : 0.508251 

Total Learning Time : 29.52635175704956 

Total Inference Time : 11.355395317077637 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.689
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8346195233348062;  // std dev = 1.397, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004879;  // std dev = 0.000, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.07042249347191636;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004877;  // std dev = 4.93e-09, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6938231603859095;  // std dev = 1.393, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.012407788736992465;  // std dev = 3.544, 149.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=20 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06682617742049689;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7319131893798131;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.11376726978442799;  // std dev = 2.671, 44.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5488173933569943;  // std dev = 1.460, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | | else return 0.7266691394819942;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7178703056611676;  // std dev = 0.221, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5676913016789913;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5674751838219949;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5674751838219949;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04373031873558339;  // std dev = 3.224, 162.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=16 */
%   | | | else return 0.015104165855842639;  // std dev = 2.427, 59.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4563118919444293;  // std dev = 2.306, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   | else return -0.12339872000731307;  // std dev = 0.252, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.5094115291215574;  // std dev = 0.119, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.10672508204973973;  // std dev = 0.099, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11724947664824346;  // std dev = 1.867, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.29479869862686275;  // std dev = 1.805, 59.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   | else return 0.3466564723567495;  // std dev = 0.112, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3276428941499997;  // std dev = 0.130, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6329532428280539;  // std dev = 0.031, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.09526357954851906;  // std dev = 1.268, 148.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=3 */
%   | | else return -0.011747563930487422;  // std dev = 0.280, 68.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02544855965575859;  // std dev = 3.298, 234.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=73 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24946913784352154;  // std dev = 0.034, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.49579481066658054;  // std dev = 1.124, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13449828940600556;  // std dev = 0.233, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.12243316128321376;  // std dev = 0.120, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3087421848279639;  // std dev = 1.384, 87.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=86 */
%   | else return -0.08436104298574897;  // std dev = 1.888, 197.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=8 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.044709444261759906;  // std dev = 0.549, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16896809375799743;  // std dev = 1.389, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.21866707219409415;  // std dev = 0.114, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.038793640026098926;  // std dev = 1.732, 131.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=15 */
%   | | | else return -0.030061416838684837;  // std dev = 1.165, 36.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.021210984579582013;  // std dev = 1.316, 53.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=9 */
%   | | | else return 0.06563004128725101;  // std dev = 1.523, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1975199714235709;  // std dev = 0.063, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.29717204533354463;  // std dev = 0.739, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09538531120210113;  // std dev = 0.216, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.41344095990900426;  // std dev = 0.324, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.08886933171847394;  // std dev = 0.002, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05870224624345108;  // std dev = 1.490, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15048217934994237;  // std dev = 2.056, 80.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=76 */
%   | | else return 0.13931290735897559;  // std dev = 0.015, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.08567497812658355;  // std dev = 0.071, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09026157359831355;  // std dev = 6.45e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.03231341533683227;  // std dev = 0.473, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.11376177457486908;  // std dev = 0.004, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04453053101555371;  // std dev = 1.868, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.680', 'seconds']
Parameter learned model CLL:-0.115526 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.397, 2, 83], 'true,false,true': [0.0, 133, 0], 'true,false,false,true': [0.964, 13, 1], 'true,false,false,false': [0.0, 0, 1], 'false,true,true': [0.968, 1, 15], 'false,true,false': [0.0, 0, 0], 'false,false': [4.93e-09, 29, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.393, 2, 64], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.544, 129, 20], 'false,true,false,false': [0.0, 5, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.966, 14, 1], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [2.671, 31, 13]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.46, 2, 54], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.221, 0, 2], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 9], 'false,false,true,false': [1.49e-08, 0, 6], 'false,false,false,true': [3.224, 146, 16], 'false,false,false,false': [2.427, 49, 10]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.306, 4, 77], 'true,false': [0.252, 154, 0], 'false,true,true': [0.119, 0, 15], 'false,true,false': [0.099, 29, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.867, 16, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.805, 3, 56], 'true,false': [0.112, 0, 3], 'false,true,true': [0.13, 0, 15], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.031, 0, 13], 'false,false,true,false': [1.268, 145, 3], 'false,false,false': [0.28, 58, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.298, 161, 73], 'false,true': [0.034, 0, 11], 'false,false,true': [1.124, 2, 16], 'false,false,false,true': [0.233, 26, 0], 'false,false,false,false': [0.12, 31, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.384, 1, 86], 'true,false': [1.888, 189, 8], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.549, 7, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.389, 2, 62], 'true,false,true': [0.114, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.732, 116, 15], 'false,false,true,false': [1.165, 31, 5], 'false,false,false,true': [1.316, 44, 9], 'false,false,false,false': [1.523, 17, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.063, 0, 59], 'false,true,true,true': [0.739, 0, 28], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.216, 159, 0], 'false,false,true,true': [0.324, 0, 6], 'false,false,true,false': [0.002, 16, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.49, 17, 7]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [2.056, 4, 76], 'true,true,false': [0.015, 0, 7], 'true,false,true': [0.071, 139, 0], 'true,false,false,true': [6.45e-09, 12, 0], 'true,false,false,false': [0.473, 10, 2], 'false,true': [0.004, 0, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.868, 28, 13]}]
{'': [0.23172281677688011, 0.2222222222222217], 'true': [0.022975778546712552, 0.013330898466033475], 'false': [0.05859374999999978, 2.2970131543968756e-17], 'false,true': [0.05859374999999978, nan], 'true,false': [-5.0085249231210067e-17, 0.11555555555555559], 'true,false,false': [0.06632653061224494, 0.0]}
{'': [0.02938075145399426, 0.10414916558731624], 'false': [0.08193793662110929, 0.152220198299588], 'false,false': [0.06222222222222221, 0.1709828888401371], 'false,false,false': [0.0, 0.16214160451059179], 'false,true': [nan, 0.08193793662110929], 'false,true,false': [0.08427268345224483, 0.0], 'false,false,true': [nan, 0.06222222222222221]}
{'': [0.037144611292556536, 0.09073526649372281], 'false': [nan, 0.0907352664937228], 'false,false': [-5.921189464667501e-17, 0.07435445517943459], 'false,false,false': [0.06415225205539136, 0.09982989746509296], 'true': [0.03795856607879911, 0.01783441457003343], 'true,true': [0.03808146351768001, 0.0], 'true,false': [0.024391962521527755, 0.0], 'false,false,true': [4.9343245538895844e-17, 3.700743415417188e-17]}
{'': [0.09881450884710645, 0.11463367001938755], 'false': [0.09562794061851755, 0.15158995477399384], 'false,false': [nan, 0.15158995477399384], 'false,false,false': [nan, 0.15158995477399384], 'true': [0.06567368675000497, 0.00041075926804715453], 'false,true': [0.014169086212425786, 0.009815926613013067]}
{'': [0.05290023111133924, 0.061927238785971825], 'false': [0.001134617032154095, 0.05808452649560505], 'false,false': [0.049358266921183634, 0.07831574902336526], 'true': [0.05524653182973743, 0.004197212255792042], 'false,false,true': [7.37326160853595e-05, 0.010868080157120909], 'false,true': [0.001134617032154095, nan]}
{'': [0.04648640942182035, 0.08318372740126737], 'false': [0.00010225071982251543, 0.08873678850003856], 'false,false': [0.07014280185481184, 0.0012387783737754772], 'true': [nan, 0.04648640942182035], 'true,false': [nan, 0.04648640942182035], 'false,false,false': [0.002085692621506178, 0.00046206407138042705]}
{'': [0.052124030135896594, 0.02321108941579214], 'true': [0.022002178595497798, 0.018088112965111123], 'false': [nan, 0.02321108941579214], 'false,false': [nan, 0.02321108941579214], 'false,false,false': [nan, 0.02321108941579214]}
{'': [0.02950259941302407, 0.03536744343473573], 'false': [nan, 0.0353674434347358], 'false,false': [0.026086921434548372, 0.054243467387564116], 'false,false,false': [0.03269793435321065, 0.09663237734057935], 'true': [0.030146945469892182, 0.006488385270731492], 'false,false,true': [0.022887340865807, 0.03767002539036451], 'true,false': [0.006488385270731492, nan]}
{'': [0.003911443928782275, 0.03428578782524065], 'false': [0.022789312496951573, 0.07448444379438203], 'false,false': [0.05481207279989697, 0.09246393737305782], 'false,false,false': [nan, 0.09246393737305782], 'false,false,true': [0.01747484501062868, 1.7983681389194262e-07], 'false,true': [0.01951008507181968, 0.0002927983336994072], 'false,true,true': [0.01951008507181968, nan]}
{'': [0.03012544400954125, 0.08140460490502072], 'false': [6.831650653302615e-06, 0.08515229938200568], 'false,false': [nan, 0.08515229938200568], 'true': [0.04857704112636997, 0.0015999146402018412], 'true,true': [0.052814755320199726, 3.130669998640296e-05], 'true,false': [3.5883923078091925e-05, 0.010151080308790762], 'true,false,false': [3.469446951953614e-18, 0.018623166094632698]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C), tweets(E, F).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 7.705
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.8303711573217337;  // std dev = 0.986, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048796;  // std dev = 0.000, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | | else if ( follows(G, C), tweets(G, H) )
%   | | | then return -0.09639651944594235;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.684231514645845;  // std dev = 0.199, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   | else return 0.7194734122109544;  // std dev = 5.96e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.018621644029057947;  // std dev = 3.075, 116.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=15 */
%   | | | else return 0.07572632593335764;  // std dev = 1.649, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
%   | | else return -0.12544463852839136;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then if ( follows(A, K), tweets(A, L) )
%   | | | then return -0.03960777021280262;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | | else return -0.1398924690385905;  // std dev = 0.145, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, M), recursion_accounttype(M, B) )
%   | | | then return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.09603099837445678;  // std dev = 2.624, 49.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=13 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5082402067866113;  // std dev = 1.683, 51.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=48 */
%   | | | else return 0.5807629235968994;  // std dev = 0.921, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.7039386974868798;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.7064170841134563;  // std dev = 0.098, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5588402759501218;  // std dev = 0.004, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7187677296850192;  // std dev = 0.029, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.12453315728332245;  // std dev = 0.101, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.030846381150020752;  // std dev = 1.832, 30.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=6 */
%   | | | else return 0.14805717876146823;  // std dev = 1.817, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.4448478460799566;  // std dev = 0.071, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.3443713596989232;  // std dev = 0.957, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0.6019977283559822;  // std dev = 0.075, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return -0.11796740522023791;  // std dev = 0.203, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.45434547774042794;  // std dev = 0.051, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4887312428117642;  // std dev = 0.132, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.11828076659541253;  // std dev = 0.032, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.27935296549124955;  // std dev = 1.018, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.11939208256360583;  // std dev = 1.343, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(D, E), recursion_accounttype(D, B) )
%   | | | then return 0.31077308120074865;  // std dev = 0.985, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return -0.10473034248134849;  // std dev = 0.887, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.38431432366100277;  // std dev = 0.059, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.4238119034394399;  // std dev = 0.272, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.336027374681279;  // std dev = 0.051, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4436936875702872;  // std dev = 0.216, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.0889752250933581;  // std dev = 1.127, 150.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=3 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.07017800768516495;  // std dev = 0.873, 45.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=3 */
%   | | | else return 0.08394035009103204;  // std dev = 1.753, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.2794777331626023;  // std dev = 0.235, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else return 0.02045049677992809;  // std dev = 0.803, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then return -0.0550816096690967;  // std dev = 0.114, 139.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=13 */
%   | | else return -0.03399766519218145;  // std dev = 0.166, 34.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.28050594189490435;  // std dev = 0.029, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.12278207787176988;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.34070911444848795;  // std dev = 0.257, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5604324075280305;  // std dev = 0.242, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.13430126741637707;  // std dev = 0.042, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(C, D), follows(D, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.21898030830691897;  // std dev = 0.023, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.1423672490643633;  // std dev = 0.959, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0.22315631000392047;  // std dev = 0.125, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.2949975562775031;  // std dev = 0.076, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(E, A), follows(A, E) )
%   | then return -0.04437189834769687;  // std dev = 0.131, 165.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=18 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.22189881902134412;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09952868982302833;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.08878549271754468;  // std dev = 0.072, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return 0.028087680146486153;  // std dev = 1.710, 46.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.16787574343243603;  // std dev = 0.140, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | else return 0.23169409348375283;  // std dev = 0.144, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.08367973615716943;  // std dev = 0.102, 110.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=3 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.26630840079200324;  // std dev = 1.098, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.08638275178603759;  // std dev = 0.063, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3106310118924714;  // std dev = 0.316, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.10639265706814736;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07781743227834471;  // std dev = 0.823, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.016218822605790377;  // std dev = 1.089, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1439413077117233;  // std dev = 0.137, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.06126939584686075;  // std dev = 0.771, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.18199793973211983;  // std dev = 0.184, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.07175684384630628;  // std dev = 0.690, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.029140372172161214;  // std dev = 0.122, 186.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=28 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2995849390748937;  // std dev = 0.136, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.0966929041365696;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0034121032244945645;  // std dev = 0.879, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.013436178883256015;  // std dev = 1.086, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.11750012418578389;  // std dev = 1.366, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | | | else return 0.2799407719981297;  // std dev = 0.334, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.18627082940310827;  // std dev = 0.032, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.07294593305075867;  // std dev = 0.033, 178.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.09072197031753393;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3050701351752657;  // std dev = 0.274, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.13121840832898193;  // std dev = 0.243, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.10057058164713717;  // std dev = 0.463, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.011118472273870568;  // std dev = 1.084, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.345', 'seconds']
Refined model CLL: -0.110383


******************************************
Best model found
******************************************
Results 

CLL : -0.114575 

AUC ROC : 0.99456 

AUC PR : 0.357 

Precision : 0.338428 

Recall : 0.99359 

F1 : 0.504886 

Total Learning Time : 7.705 

Total Inference Time : 13.126354217529297 

Total revision time: 33.96104044342041
Best scored revision CLL: -0.110383


Results 

CLL : -0.114575 

AUC ROC : 0.99456 

AUC PR : 0.357 

Precision : 0.338428 

Recall : 0.99359 

F1 : 0.504886 

Total Learning Time : 35.48603815460205 

Total Inference Time : 13.126354217529297 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.305
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8391013160518921;  // std dev = 1.401, 105.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1033895264389493;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 6.45e-09, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7009346259829425;  // std dev = 1.405, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.021070137746483353;  // std dev = 3.739, 176.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=22 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09639199428830603;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.10159394901600825;  // std dev = 2.982, 63.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5006813866590597;  // std dev = 2.356, 76.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=70 */
%   | | else return 0.7274986988752097;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8050215176671589;  // std dev = 0.107, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5646274564342336;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.45351634532312246;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03558152804111853;  // std dev = 3.646, 195.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=21 */
%   | | | else return 0.009911087160336078;  // std dev = 2.528, 67.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.46508525630687925;  // std dev = 2.494, 102.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=97 */
%   | else return -0.12043477967533843;  // std dev = 0.081, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.41208125961641623;  // std dev = 0.292, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | else return -0.1090047800874097;  // std dev = 0.088, 38.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.20621779204854745;  // std dev = 1.841, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3008096813841624;  // std dev = 1.961, 77.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=73 */
%   | else return 0.39253517303790075;  // std dev = 0.116, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.33735458955966885;  // std dev = 0.126, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6248723783999957;  // std dev = 0.063, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09325721491579621;  // std dev = 1.406, 182.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=4 */
%   | | else return -0.012032517598665377;  // std dev = 0.268, 78.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04385478294120489;  // std dev = 3.530, 257.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2692018794379163;  // std dev = 0.079, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5263308008910025;  // std dev = 0.710, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11852757587775141;  // std dev = 0.140, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.12231787408532105;  // std dev = 0.156, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3033815350532629;  // std dev = 1.496, 108.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=107 */
%   | else return -0.08465385385411926;  // std dev = 2.014, 243.000 (wgt'ed) examples reached here.  /* #neg=232 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.007905263066637386;  // std dev = 0.728, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1934461522222876;  // std dev = 0.986, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.25840645986677885;  // std dev = 0.049, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.05251340397163775;  // std dev = 1.988, 176.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=17 */
%   | | | else return -0.03253132015908955;  // std dev = 1.218, 38.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01135114809740494;  // std dev = 1.648, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.0624331609736295;  // std dev = 1.547, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17060120358485004;  // std dev = 0.156, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.24065637372542556;  // std dev = 1.595, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09306509555304837;  // std dev = 0.102, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.37629658275576394;  // std dev = 0.381, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09073020866705998;  // std dev = 0.000565, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04555593414384595;  // std dev = 1.527, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15871198850237886;  // std dev = 2.196, 98.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=94 */
%   | | else return 0.15326084225043804;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08595228853912446;  // std dev = 0.069, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08419567253365587;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.028974257430886823;  // std dev = 0.467, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.12231228603776326;  // std dev = 0.052, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.012711249718788672;  // std dev = 2.205, 69.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.685', 'seconds']
Parameter learned model CLL:-0.113442 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.401, 2, 103], 'true,false,true': [0.0, 174, 0], 'true,false,false,true': [0.981, 25, 1], 'true,false,false,false': [0.866, 3, 1], 'false,true,true': [0.0, 0, 21], 'false,true,false': [0.0, 0, 0], 'false,false': [6.45e-09, 37, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.405, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.739, 154, 22], 'false,true,false,false': [0.0, 6, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.983, 29, 1], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [2.982, 46, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [2.356, 6, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.107, 0, 2], 'true,false,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 9], 'false,false,true,false': [0.943, 1, 8], 'false,false,false,true': [3.646, 174, 21], 'false,false,false,false': [2.528, 56, 11]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.494, 5, 97], 'true,false': [0.081, 211, 0], 'false,true,true': [0.292, 2, 19], 'false,true,false': [0.088, 37, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.841, 12, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.961, 4, 73], 'true,false': [0.116, 0, 4], 'false,true,true': [0.126, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.063, 0, 17], 'false,false,true,false': [1.406, 178, 4], 'false,false,false': [0.268, 67, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.53, 166, 91], 'false,true': [0.079, 0, 13], 'false,false,true': [0.71, 0, 22], 'false,false,false,true': [0.14, 33, 0], 'false,false,false,false': [0.156, 33, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.496, 1, 107], 'true,false': [2.014, 232, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.728, 17, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.986, 1, 80], 'true,false,true': [0.049, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.988, 159, 17], 'false,false,true,false': [1.218, 33, 5], 'false,false,false,true': [1.648, 45, 13], 'false,false,false,false': [1.547, 19, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.156, 2, 77], 'false,true,true,true': [1.595, 2, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.102, 233, 0], 'false,false,true,true': [0.381, 0, 9], 'false,false,true,false': [0.000565, 22, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.527, 19, 8]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [2.196, 4, 94], 'true,true,false': [0.002, 0, 9], 'true,false,true': [0.069, 168, 0], 'true,false,false,true': [0.0, 14, 0], 'true,false,false,false': [0.467, 12, 2], 'false,true': [0.052, 0, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.205, 52, 17]}]
{'': [0.22433782637383573, 0.23097502972651607], 'false': [0.0, 3.900783600034334e-17], 'true': [0.01868480725623786, 0.009707804690503488], 'true,false': [-1.8376105235175005e-16, 0.062222222222222255], 'true,false,false': [0.03698224852071011, 0.18750000000000003], 'false,true': [0.0, nan]}
{'': [0.023484013212648338, 0.09674726966812502], 'false': [0.07714154913746797, 0.12820800047678277], 'false,false': [0.032222222222222256, 0.1541250816558216], 'false,false,false': [0.0, 0.14111826195958033], 'false,true': [nan, 0.07714154913746797], 'false,true,false': [0.0794122306186583, -6.938893903907228e-18], 'false,false,true': [nan, 0.032222222222222256]}
{'': [0.06983030494255071, 0.09112738758332231], 'false': [nan, 0.09112738758332228], 'false,false': [0.0524691358024691, 0.0755190753804538], 'false,false,false': [0.06817430079795017, 0.09535532332140052], 'true': [0.0727266646836735, 0.015763410770386715], 'true,true': [0.07301546340264993, 0.0], 'false,false,true': [4.9343245538895844e-17, 0.09876543209876545], 'true,false': [0.005738459358087811, 0.0]}
{'': [0.09521298641791569, 0.11752727618901673], 'false': [0.09747271014683213, 0.16145495535024298], 'false,false': [nan, 0.16145495535024298], 'false,false,false': [nan, 0.16145495535024298], 'false,true': [0.08504032971243765, 0.007696729799102184], 'true': [0.06099747282770382, 3.101899772060106e-05]}
{'': [0.048057007171077644, 0.06038257624997002], 'false': [0.0009324172158534846, 0.05638382276557305], 'false,false': [0.05024440501823313, 0.07176336978937185], 'false,false,true': [0.00023214268650479145, 0.010860242294662516], 'true': [0.04996370083416616, 0.0033550730693118203], 'false,true': [0.0009324172158534846, nan]}
{'': [0.04847324617746763, 0.07964910204251603], 'false': [0.0004740944809283033, 0.0846581428239578], 'false,false': [0.02290949937410438, 0.0006684931667688519], 'true': [nan, 0.04847324617746733], 'true,false': [nan, 0.04847324617746763], 'false,false,false': [0.0005967074700967656, 0.0007330956831897977]}
{'': [0.05000686353019698, 0.021185210408977792], 'true': [0.02072478009699304, 0.016691441897073268], 'false': [nan, 0.021185210408977792], 'false,false': [nan, 0.021185210408977792], 'false,false,false': [nan, 0.021185210408977792]}
{'': [0.011833712386636976, 0.03630051240608371], 'false': [nan, 0.036300512406083986], 'false,false': [0.025451945679112166, 0.06058575895507331], 'false,false,false': [0.04680674366898281, 0.08545638621442257], 'false,false,true': [0.022453363118326606, 0.039011734705319226], 'true': [0.011994455649947182, 0.001205451582687464], 'true,false': [0.001205451582687464, nan]}
{'': [0.024467082418315262, 0.031280074889340405], 'false': [0.021943567219504755, 0.06672801472070758], 'false,false': [0.049630141314913535, 0.0863586462159574], 'false,false,false': [nan, 0.0863586462159574], 'false,false,true': [0.016157631432884328, 1.4516614333583776e-08], 'false,true': [0.07482817652283173, 4.454977519125246e-05], 'false,true,true': [0.07482817652283173, nan]}
{'': [0.02995546302152531, 0.06755963921387288], 'false': [0.0006806662280680713, 0.0704377027585208], 'false,false': [nan, 0.0704377027585208], 'true': [0.04508754281231143, 0.0013522194258221273], 'true,true': [0.04922568407889992, 5.667505845617803e-07], 'true,false': [2.8519200690051216e-05, 0.008555186754134983], 'true,false,false': [-9.912705577010326e-19, 0.015585671165293797]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 9.157
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048832;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.14185106490048768;  // std dev = 4.47e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then return 0.674697292807969;  // std dev = 0.207, 67.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=64 */
%   | | else return 0.7298994364382695;  // std dev = 0.099, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.6083623010998431;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(E, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.03238524941165381;  // std dev = 3.322, 154.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=17 */
%   | | | else return 0.008203132788952952;  // std dev = 1.765, 31.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=5 */
%   | | else return -0.12544463852839133;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.106734133800375;  // std dev = 0.177, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.11714494037976768;  // std dev = 2.944, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.5649908340194494;  // std dev = 1.081, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | | else return 0.5201137488085315;  // std dev = 0.825, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.7424320786002034;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6579055361643363;  // std dev = 0.087, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5668222280999187;  // std dev = 0.015, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.10327189595498187;  // std dev = 1.461, 131.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=3 */
%   | | | else return -0.007171101814298605;  // std dev = 2.747, 82.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.05868094193330923;  // std dev = 2.186, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
%   | | | else return 0.16444060830178753;  // std dev = 1.882, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.4136714718888875;  // std dev = 0.122, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.7036743818853167;  // std dev = 0.195, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.5500592709223394;  // std dev = 0.973, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return -0.11874726361836163;  // std dev = 0.205, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.4597601888749872;  // std dev = 0.058, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5964397667628278;  // std dev = 0.336, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.11863938910735854;  // std dev = 0.030, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.03248124622588433;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.0811696387692911;  // std dev = 1.539, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | | then return 0.29306566222784786;  // std dev = 1.670, 60.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=57 */
%   | | | else return 0.13512048143892846;  // std dev = 1.063, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.34609588014848697;  // std dev = 0.126, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.37982121677739505;  // std dev = 0.235, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3300990234327433;  // std dev = 0.116, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5686459621539117;  // std dev = 0.053, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.0951036003101658;  // std dev = 1.327, 202.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=4 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.06740155337414626;  // std dev = 1.163, 56.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=3 */
%   | | | else return 0.06503660691687306;  // std dev = 1.963, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(D, E), tweets(A, E) )
%   | | | then return 0.2018450249982424;  // std dev = 1.658, 44.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | | else return 0.2693686335951461;  // std dev = 0.048, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.3995188649383312;  // std dev = 0.063, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), follows(G, A) )
%   | | | then return -0.04562792946270775;  // std dev = 1.759, 142.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=14 */
%   | | | else return 0.03591675627310505;  // std dev = 0.453, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return -0.05400956878312509;  // std dev = 0.178, 52.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2777726464109432;  // std dev = 0.098, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.49348198795137127;  // std dev = 0.145, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.13512655232554419;  // std dev = 0.035, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.22820651899650798;  // std dev = 0.130, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.056362275914816;  // std dev = 1.116, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.08736666720688986;  // std dev = 0.052, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.4146296347923733;  // std dev = 0.458, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.10125875434592055;  // std dev = 0.070, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.1513456843586792;  // std dev = 1.564, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return -0.10764717675212694;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.04687267351658802;  // std dev = 0.974, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.10059898987739992;  // std dev = 1.171, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then return 0.17400627846248065;  // std dev = 0.129, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.12154188151607291;  // std dev = 0.974, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.0738510719486965;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.21523291094683172;  // std dev = 0.037, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(H, A) )
%   | then return -0.04694678254023749;  // std dev = 0.134, 245.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=23 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.29870740221907244;  // std dev = 0.456, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.1230303880199357;  // std dev = 0.155, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.060745533275214356;  // std dev = 0.857, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.06539627810904997;  // std dev = 1.179, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1512425412010973;  // std dev = 0.122, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then return -0.07710082111242343;  // std dev = 0.448, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | else return 0.16146787136135585;  // std dev = 0.157, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.2821508276604613;  // std dev = 0.128, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.08064634640355746;  // std dev = 0.107, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else if ( tweets(A, I) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.29828309680855153;  // std dev = 0.280, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09363962312486994;  // std dev = 0.044, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.047091436599155;  // std dev = 0.815, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.04671666183980583;  // std dev = 1.163, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.14496779238850796;  // std dev = 0.080, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | | else return 0.2691024154693887;  // std dev = 0.965, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else return 0.034740377906226375;  // std dev = 0.299, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.07202272128927294;  // std dev = 0.031, 217.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.09900621463070225;  // std dev = 0.903, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.24193483854225212;  // std dev = 0.245, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.0854549622136274;  // std dev = 0.026, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.06308013989987338;  // std dev = 0.782, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return -0.06820629932622778;  // std dev = 1.295, 26.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '22.011', 'seconds']
Refined model CLL: -0.108673


******************************************
Best model found
******************************************
Results 

CLL : -0.111503 

AUC ROC : 0.994514 

AUC PR : 0.362898 

Precision : 0.342857 

Recall : 1.0 

F1 : 0.510638 

Total Learning Time : 9.157 

Total Inference Time : 18.831570148468018 

Total revision time: 42.77200828742981
Best scored revision CLL: -0.108673


Results 

CLL : -0.111503 

AUC ROC : 0.994514 

AUC PR : 0.362898 

Precision : 0.342857 

Recall : 1.0 

F1 : 0.510638 

Total Learning Time : 44.29700599861145 

Total Inference Time : 18.831570148468018 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.682
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8268989350995116;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048766;  // std dev = 6.32e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.665131113496221;  // std dev = 1.371, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839158;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5451396721156988;  // std dev = 0.174, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360628;  // std dev = 5.74e-09, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4409839460040689;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.10159632948783627;  // std dev = 2.79e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.44098394600406876;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.10159632948783634;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3054235095545827;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926105;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | else return -0.09269127618926094;  // std dev = 1.86e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2721825706219969;  // std dev = 6.32e-08, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839679;  // std dev = 2.08e-09, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.16109863111756176;  // std dev = 1.371, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109169;  // std dev = 3.33e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16390456329529543;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333704;  // std dev = 1.05e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.17068745806594907;  // std dev = 1.86e-09, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420271;  // std dev = 1.05e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return -0.06842697784420272;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14786435365184059;  // std dev = 5.59e-09, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.883', 'seconds']
Parameter learned model CLL:-0.087932 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.984, 1, 31], 'false,true': [6.32e-08, 62, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.371, 2, 31], 'false,true': [0.0, 56, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.174, 1, 31], 'false,true': [0.0, 0, 0], 'false,false': [5.74e-09, 60, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 28], 'true,false': [2.79e-08, 48, 0], 'false,true,true': [0.0, 0, 3], 'false,true,false': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.984, 1, 31], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 48, 0], 'false,false,false': [1.86e-09, 15, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [6.32e-08, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.08e-09, 70, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.371, 2, 31], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.33e-08, 68, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.984, 1, 31], 'true,false': [0.0, 0, 0], 'false,true': [1.05e-08, 55, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.63e-09, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [1.86e-09, 0, 31], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.05e-08, 45, 0], 'false,false,false': [0.0, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [5.59e-09, 0, 31], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 57, 0]}]
{'': [0.030273437500001332, 6.446456272017038e-17], 'false': [6.446456272017038e-17, nan]}
{'': [0.05693296602387555, -3.766828119263924e-17], 'false': [-3.766828119263924e-17, nan]}
{'': [0.0302734375, 3.3306690738754695e-17], 'false': [nan, 3.3306690738754695e-17]}
{'': [0.06850150096853538, 0.05519875412866344], 'true': [-3.172065784643304e-17, 1.61907524424502e-17], 'false': [0.05519875412866344, nan], 'false,true': [0.0, -6.1679056923619804e-18]}
{'': [0.030273437499999903, -5.28677630773884e-18], 'true': [0.030273437499999903, nan], 'false': [nan, -5.28677630773884e-18], 'false,false': [-3.469446951953614e-18, 3.7007434154171884e-18], 'false,false,true': [nan, -3.469446951953614e-18]}
{'': [1.2892912544034077e-16, 4.758098676964957e-18], 'false': [nan, 4.758098676964957e-18], 'false,false': [nan, 4.758098676964957e-18]}
{'': [0.05693296602387513, 1.6326809185664067e-17], 'false': [nan, 1.6326809185664067e-17], 'false,false': [nan, 1.6326809185664067e-17], 'false,false,false': [1.6326809185664067e-17, nan]}
{'': [0.030273437500000045, -1.6821560979169039e-18], 'true': [0.030273437500000045, nan], 'false': [2.0185873175002845e-18, 6.30808536718839e-19], 'false,false': [nan, 6.30808536718839e-19]}
{'': [0.0, 4.956352788505163e-18], 'false': [nan, 4.956352788505163e-18], 'false,false': [2.4671622769447924e-18, 6.30808536718839e-19], 'false,false,true': [nan, 2.4671622769447924e-18]}
{'': [3.223228136008519e-17, -2.921639538487254e-18], 'false': [nan, -2.921639538487254e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 9.246
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.14185106490048766;  // std dev = 5.96e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7221758264441864;  // std dev = 0.061, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(E, A) )
%   | | then return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.7298326667716779;  // std dev = 0.057, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.1254446385283916;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5647168386661789;  // std dev = 0.150, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else return -0.1123163781936063;  // std dev = 3.49e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.3557618048716263;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.1366941461319282;  // std dev = 0.785, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.42996288920001013;  // std dev = 0.105, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.10159632948783623;  // std dev = 3.33e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.1853761387265926;  // std dev = 0.893, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.10159632948783628;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.3432197571601529;  // std dev = 0.206, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(A, D) )
%   | then return -0.09269127618926105;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(D, F), follows(D, E) )
%   | | | then return 0.26037446832088135;  // std dev = 1.49e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.270476014055517;  // std dev = 0.043, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3344724222652473;  // std dev = 0.080, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return -0.021163166881198275;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.08699251721498287;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.24492203250521047;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, I) )
%   | then if ( follows(I, A) )
%   | | then return -0.08518475138839685;  // std dev = 2.63e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return -0.08518475138839682;  // std dev = 3.48e-09, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return -0.08518475138839686;  // std dev = 2.28e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(D, A), tweets(A, F) )
%   | | then if ( recursion_accounttype(D, B), tweets(D, F) )
%   | | | then return 0.21342583327770215;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.22052186231401963;  // std dev = 0.034, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.31302040592138475;  // std dev = 0.010, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.22260854007708805;  // std dev = 0.070, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.06919924746276172;  // std dev = 0.892, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, G) )
%   | then return -0.07877675473109177;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else if ( tweets(A, H) )
%   | | then return -0.07877675473109173;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07877675473109173;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( tweets(D, E), follows(D, F) )
%   | | | then return 0.17947491373878002;  // std dev = 0.003, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.19300645824929027;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.2499249445205106;  // std dev = 0.009, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.18731927201145185;  // std dev = 0.062, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.2388868040668898;  // std dev = 0.051, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, A) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( tweets(A, I) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.07324622576333704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.16061816901116385;  // std dev = 0.014, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.011258885150712574;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( follows(A, F) )
%   | | then if ( tweets(A, G), follows(F, H) )
%   | | | then return 0.1974806362636736;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.15863997108334754;  // std dev = 0.058, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.1983560399256582;  // std dev = 0.045, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.06842697784420274;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return -0.06842697784420272;  // std dev = 9.31e-10, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( follows(K, A) )
%   | | then return -0.06842697784420272;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.06842697784420272;  // std dev = 1.86e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | | then return 0.13721689563563355;  // std dev = 0.022, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.14875498740908633;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.17048056425756436;  // std dev = 0.040, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return -0.15294075686709627;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.13881955091065903;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06419184008202625;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.034', 'seconds']
Refined model CLL: -0.085791


******************************************
Best model found
******************************************
Results 

CLL : -0.092354 

AUC ROC : 0.992935 

AUC PR : 0.380849 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 9.246 

Total Inference Time : 2.320772409439087 

Total revision time: 17.50547197151184
Best scored revision CLL: -0.085791


Results 

CLL : -0.092354 

AUC ROC : 0.992935 

AUC PR : 0.380849 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 17.53923323440552 

Total Inference Time : 2.320772409439087 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.705
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995126;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048785;  // std dev = 0.000, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6882234122109542;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839105;  // std dev = 8.16e-08, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5630691875243453;  // std dev = 1.29e-08, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936062;  // std dev = 8.33e-09, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.38753677401537506;  // std dev = 1.389, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | else return -0.1015963294878363;  // std dev = 2.11e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.42325105972966043;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783635;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.24320449473118733;  // std dev = 2.340, 68.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926097;  // std dev = 4.83e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else return -0.09269127618926104;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.26408160657647867;  // std dev = 0.991, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 5.96e-09, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21404727665076143;  // std dev = 0.991, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109153;  // std dev = 7.60e-08, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1783494220705553;  // std dev = 0.991, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333707;  // std dev = 4.15e-08, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333707;  // std dev = 8.33e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13658084183216296;  // std dev = 0.174, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420267;  // std dev = 4.15e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | | else return -0.06842697784420276;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13365732539617672;  // std dev = 0.125, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.466', 'seconds']
Parameter learned model CLL:-0.086191 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.0, 0, 62], 'false,true': [0.0, 127, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.392, 2, 62], 'false,true': [8.16e-08, 129, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [1.29e-08, 0, 62], 'false,true': [0.0, 0, 0], 'false,false': [8.33e-09, 134, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.389, 2, 54], 'true,false': [2.11e-08, 104, 0], 'false,true,true': [7.45e-09, 0, 8], 'false,true,false': [0.0, 26, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.34, 6, 62], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.83e-08, 100, 0], 'false,false,false': [0.0, 17, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.991, 1, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.96e-09, 128, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.991, 1, 62], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.6e-08, 135, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.991, 1, 62], 'true,false': [0.0, 0, 0], 'false,true': [4.15e-08, 90, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [8.33e-09, 21, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.174, 2, 62], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.15e-08, 84, 0], 'false,false,false': [0.0, 23, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.125, 1, 62], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 121, 0]}]
{'': [-6.87622002348484e-16, -2.4477358023231797e-17], 'false': [-2.4477358023231797e-17, nan]}
{'': [0.030273437500000056, 5.163828021512356e-17], 'false': [5.163828021512356e-17, nan]}
{'': [1.71905500587121e-16, 6.959607020038295e-17], 'false': [nan, 6.959607020038295e-17]}
{'': [0.0664832178230319, 0.04956459744760538], 'true': [0.0344387755102038, 4.270088556250602e-18], 'false': [0.04956459744760538, nan], 'false,true': [5.551115123125783e-17, -2.135044278125301e-18]}
{'': [0.08050466117238567, 4.364979413056171e-17], 'true': [0.08050466117238567, nan], 'false': [nan, 4.364979413056171e-17], 'false,false': [2.3314683517128286e-17, -1.6326809185664067e-18], 'false,false,true': [nan, 2.3314683517128286e-17]}
{'': [0.015597890703136268, 3.5561831257524545e-17], 'false': [nan, 3.5561831257524545e-17], 'false,false': [nan, 3.5561831257524545e-17]}
{'': [0.01560012501558432, 4.2764146133709734e-17], 'false': [nan, 4.2764146133709734e-17], 'false,false': [nan, 4.2764146133709734e-17], 'false,false,false': [4.2764146133709734e-17, nan]}
{'': [0.015602122357145833, 1.6003214769371626e-17], 'true': [0.015602122357145833, nan], 'false': [1.912050764632214e-17, 3.3042351923367752e-18], 'false,false': [nan, 3.3042351923367752e-18]}
{'': [0.030237488844586, 2.490219868318108e-17], 'false': [nan, 2.490219868318108e-17], 'false,false': [2.048625819248801e-17, -4.2236745502044e-18], 'false,false,true': [nan, 2.048625819248801e-17]}
{'': [0.01574602547962301, -1.7892023950570704e-17], 'false': [nan, -1.7892023950570704e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 22.107
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995126;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else return -0.14185106490048785;  // std dev = 0.000, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 8.43e-08, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   else return -0.12544463852839105;  // std dev = 8.02e-08, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.555366436746284;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.22203310341295093;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( tweets(A, G), follows(H, A) )
%   | | | then return 0.3886997700796176;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5553664367462844;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.11231637819360621;  // std dev = 8.69e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.41751358415830997;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.30640247304719875;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.43324168952211617;  // std dev = 0.149, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.10159632948783634;  // std dev = 0.000, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.44313950650273315;  // std dev = 0.056, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.2807118471601495;  // std dev = 0.980, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.012050826184067867;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.32804204066963827;  // std dev = 0.054, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.34092372813482064;  // std dev = 0.135, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926097;  // std dev = 4.83e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else return -0.09269127618926104;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.26247097098573896;  // std dev = 0.009, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.2788073311752185;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.31585625334689443;  // std dev = 0.065, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2712732697996593;  // std dev = 0.027, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.26702423162544064;  // std dev = 0.056, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.2508145902096397;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2480331537619394;  // std dev = 0.002, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( tweets(A, L) )
%   | then return -0.08518475138839682;  // std dev = 5.43e-09, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return -0.08518475138839687;  // std dev = 1.67e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, D) )
%   | | then if ( follows(E, A), tweets(E, F) )
%   | | | then return 0.2214401274870046;  // std dev = 0.075, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.14282938897651049;  // std dev = 0.972, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return -0.11031792663981888;  // std dev = 0.770, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.21888851417299884;  // std dev = 0.014, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.22558428976298847;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.2057312255058941;  // std dev = 0.003, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.2021684641575513;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(K, A) )
%   | then return -0.07877675473109164;  // std dev = 5.10e-09, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else return -0.0787767547310918;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.1796959860395963;  // std dev = 0.008, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.19208566688177195;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.20763084710583007;  // std dev = 0.034, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.22376604917441986;  // std dev = 0.051, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A), tweets(A, I) )
%   | | then if ( follows(A, J), follows(J, H) )
%   | | | then return 0.1837770972089915;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.1886205640104024;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.1741376895025962;  // std dev = 0.003, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.17151032028944482;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07324622576333713;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.15599397716419053;  // std dev = 0.020, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.1627603823178458;  // std dev = 0.003, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.18553154317369486;  // std dev = 0.043, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.15571489740365624;  // std dev = 0.019, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then return -0.06797592798536445;  // std dev = 0.872, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.15661284007241624;  // std dev = 0.043, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.14897336578254203;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, K) )
%   | then return -0.06842697784420267;  // std dev = 4.27e-09, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   | else return -0.06842697784420276;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.13654166673469412;  // std dev = 0.018, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.14177919383569784;  // std dev = 0.002, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.16839234616617807;  // std dev = 0.071, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(G, B), follows(H, G) )
%   | | | then return -0.03645575812271766;  // std dev = 0.890, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.08189774044314689;  // std dev = 0.979, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0.13320113035412057;  // std dev = 0.008, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06419184008202626;  // std dev = 0.000, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.888', 'seconds']
Refined model CLL: -0.085171


******************************************
Best model found
******************************************
Results 

CLL : -0.092001 

AUC ROC : 0.994529 

AUC PR : 0.468469 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 22.107 

Total Inference Time : 3.9349348545074463 

Total revision time: 36.096239053726194
Best scored revision CLL: -0.085171


Results 

CLL : -0.092001 

AUC ROC : 0.994529 

AUC PR : 0.468469 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 36.13000031661987 

Total Inference Time : 3.9349348545074463 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.278
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7975428744934507;  // std dev = 2.374, 99.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=93 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004882;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7315414044636411;  // std dev = 1.46e-07, 93.000 (wgt'ed) examples reached here.  /* #pos=93 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283915;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5462650677408041;  // std dev = 0.144, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360653;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3958800267970761;  // std dev = 1.701, 84.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=81 */
%   | else return -0.10159632948783646;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4315943125113621;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.29591943126297476;  // std dev = 1.960, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926071;  // std dev = 7.30e-08, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | | else return -0.09269127618926096;  // std dev = 0.000, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24331538372414332;  // std dev = 1.703, 96.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.51e-09, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2077759940223623;  // std dev = 1.398, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109146;  // std dev = 7.30e-08, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1835326082261075;  // std dev = 1.000, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333686;  // std dev = 6.23e-08, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1460071768584383;  // std dev = 0.144, 95.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420264;  // std dev = 6.14e-08, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | | else return -0.06842697784420265;  // std dev = 2.95e-09, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1371203775608838;  // std dev = 0.103, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.187', 'seconds']
Parameter learned model CLL:-0.08821 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.374, 6, 93], 'false,true': [0.0, 167, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.46e-07, 0, 93], 'false,true': [0.0, 174, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.144, 2, 93], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 184, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.701, 3, 81], 'true,false': [0.0, 154, 0], 'false,true,true': [0.0, 0, 12], 'false,true,false': [0.0, 35, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.96, 4, 93], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.3e-08, 147, 0], 'false,false,false': [0.0, 31, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.703, 3, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.51e-09, 182, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.398, 2, 93], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.3e-08, 212, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.0, 1, 93], 'true,false': [0.0, 0, 0], 'false,true': [6.23e-08, 138, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 26, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.144, 2, 93], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.14e-08, 135, 0], 'false,false,false': [2.95e-09, 34, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.103, 1, 93], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 187, 0]}]
{'': [0.056932966023876305, -1.6753066000331702e-16], 'false': [-1.6753066000331702e-16, nan]}
{'': [2.2920733411616134e-16, -1.2761184191093753e-17], 'false': [-1.2761184191093753e-17, nan]}
{'': [0.020609418282548305, -7.240584943207542e-18], 'false': [nan, -7.240584943207542e-18]}
{'': [0.06867340815282585, 0.0540528517431043], 'true': [0.03443877551020374, -6.488316377679486e-17], 'false': [0.0540528517431043, nan], 'false,true': [-1.4802973661668753e-16, -9.516197353929913e-18]}
{'': [0.03961996008017067, 3.867068962177512e-17], 'true': [0.03961996008017067, nan], 'false': [nan, 3.867068962177512e-17], 'false,false': [3.6252180395923476e-17, -3.581364595565021e-18], 'false,false,true': [nan, 3.6252180395923476e-17]}
{'': [0.030223668378929897, 3.050063254464716e-17], 'false': [nan, 3.050063254464716e-17], 'false,false': [nan, 3.050063254464716e-17]}
{'': [0.020580462374901527, 2.51371250858526e-17], 'false': [nan, 2.51371250858526e-17], 'false,false': [nan, 2.51371250858526e-17], 'false,false,false': [2.51371250858526e-17, nan]}
{'': [0.010630429562687801, 5.00954291599156e-17], 'true': [0.010630429562687801, nan], 'false': [2.8157830334696e-17, -4.270088556250602e-18], 'false,false': [nan, -4.270088556250602e-18]}
{'': [0.02068761875518923, 2.4963594636541983e-17], 'false': [nan, 2.4963594636541983e-17], 'false,false': [2.7961172472040977e-17, 9.79608551139844e-18], 'false,false,true': [nan, 2.7961172472040977e-17]}
{'': [0.010515233817551864, -3.562212913235797e-18], 'false': [nan, -3.562212913235797e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 17.815
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else if ( tweets(A, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.14185106490048835;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7194734122109537;  // std dev = 2.53e-07, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | else if ( follows(E, A) )
%   | | then return 0.7247621399915951;  // std dev = 0.045, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.50517232473028;  // std dev = 0.853, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else return -0.12544463852839147;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), follows(G, E) )
%   | | then return 0.555366436746284;  // std dev = 1.63e-07, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return 0.3724794238194326;  // std dev = 0.385, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | else return 0.5634433026332292;  // std dev = 0.166, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.11231637819360657;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.4180016740420072;  // std dev = 0.045, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.19420083806989044;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.4161395240869012;  // std dev = 0.005, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return -0.10159632948783645;  // std dev = 0.000, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4746386627847123;  // std dev = 0.088, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.24653144920074727;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | else return 0.31922523638823647;  // std dev = 0.003, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.337923010102677;  // std dev = 0.095, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.11928940320081405;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.32188683642201665;  // std dev = 0.049, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.00909960256796997;  // std dev = 0.803, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.15676888990393956;  // std dev = 0.941, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, I) )
%   | then return -0.09269127618926068;  // std dev = 7.45e-08, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | else return -0.09269127618926094;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.26335553924967936;  // std dev = 0.049, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.1732916692972225;  // std dev = 0.922, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.267198719873422;  // std dev = 0.148, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.28761996747823376;  // std dev = 0.047, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then return 0.07528886592423346;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.3476026116968054;  // std dev = 0.072, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(I, A) )
%   | then if ( follows(A, I) )
%   | | then return -0.08518475138839678;  // std dev = 3.61e-09, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   | | else return -0.08518475138839678;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return -0.08518475138839678;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.2151929511460558;  // std dev = 0.045, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return 0.2332565565216236;  // std dev = 0.121, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return -0.11188848165372796;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.21515930968382438;  // std dev = 0.065, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(H, A) )
%   | | then return 0.2561971899383633;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.11016319996195564;  // std dev = 1.100, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( tweets(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.07877675473109158;  // std dev = 4.93e-09, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | else return -0.07877675473109176;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else return -0.07877675473109177;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(F, A), follows(G, F) )
%   | | | then return 0.18555982354993886;  // std dev = 0.061, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.19578289817236555;  // std dev = 0.111, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.2237712575386189;  // std dev = 0.027, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A), follows(I, H) )
%   | | | then return 0.17380791398029674;  // std dev = 0.003, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.18411657093821995;  // std dev = 0.081, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.036467871752813186;  // std dev = 0.833, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, J) )
%   | then if ( follows(K, A) )
%   | | then return -0.07324622576333704;  // std dev = 0.000, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else return -0.07324622576333703;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else return -0.07324622576333702;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.0919258184758602;  // std dev = 1.365, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   | | | else return 0.16908505122793638;  // std dev = 0.085, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0.08055500593012102;  // std dev = 0.917, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.1007070706608028;  // std dev = 0.790, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.15902690218887663;  // std dev = 0.067, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.15062015407964913;  // std dev = 0.027, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.26764933246668876;  // std dev = 0.113, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, I) )
%   | then return -0.06842697784420261;  // std dev = 3.23e-09, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | else return -0.06842697784420264;  // std dev = 5.27e-09, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.1478035014524213;  // std dev = 0.054, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.13487367521297422;  // std dev = 0.040, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(G, A), recursion_accounttype(D, B) )
%   | | | then return -0.08886102480118871;  // std dev = 0.862, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.1424366898884641;  // std dev = 0.116, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.15373432350148375;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.15532227876156277;  // std dev = 1.153, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else return -0.06419184008202625;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.777', 'seconds']
Refined model CLL: -0.086216


******************************************
Best model found
******************************************
Results 

CLL : -0.09202 

AUC ROC : 0.994287 

AUC PR : 0.423302 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 17.815 

Total Inference Time : 5.131031513214111 

Total revision time: 37.04848176765442
Best scored revision CLL: -0.086216


Results 

CLL : -0.09202 

AUC ROC : 0.994287 

AUC PR : 0.423302 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 37.0822430305481 

Total Inference Time : 5.131031513214111 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.289
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.834526887855416;  // std dev = 1.711, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048846;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.678062427938908;  // std dev = 2.392, 130.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=124 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839186;  // std dev = 0.000, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5554890918399555;  // std dev = 0.125, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360679;  // std dev = 0.000, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3879243583871732;  // std dev = 2.185, 110.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=105 */
%   | else return -0.10159632948783655;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.38337890384171813;  // std dev = 0.218, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return -0.10159632948783627;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3417948716199429;  // std dev = 0.004, 124.000 (wgt'ed) examples reached here.  /* #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926051;  // std dev = 6.14e-08, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | | else return -0.09269127618926079;  // std dev = 2.95e-09, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2615107740025267;  // std dev = 0.996, 125.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.67e-09, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.17505367297084673;  // std dev = 2.393, 130.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 5.96e-08, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1689037039010069;  // std dev = 1.712, 127.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=124 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333668;  // std dev = 1.11e-07, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1288594889007145;  // std dev = 0.193, 129.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6.41e-08, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | | else return -0.06842697784420262;  // std dev = 2.63e-09, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11165090384676327;  // std dev = 0.193, 129.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=124 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 1.32e-09, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.479', 'seconds']
Parameter learned model CLL:-0.08733 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.711, 3, 124], 'false,true': [0.0, 230, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.392, 6, 124], 'false,true': [0.0, 248, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.125, 2, 124], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 235, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [2.185, 5, 105], 'true,false': [0.0, 211, 0], 'false,true,true': [0.218, 1, 19], 'false,true,false': [0.0, 39, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.004, 0, 124], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.14e-08, 207, 0], 'false,false,false': [2.95e-09, 49, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.996, 1, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.67e-09, 227, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.393, 6, 124], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.96e-08, 253, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.712, 3, 124], 'true,false': [0.0, 0, 0], 'false,true': [1.11e-07, 188, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 48, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.193, 5, 124], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.41e-08, 200, 0], 'false,false,false': [2.63e-09, 46, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.193, 5, 124], 'false,true': [0.0, 0, 0], 'false,false': [1.32e-09, 235, 0]}]
{'': [0.0230640461280963, -2.0852884636437723e-16], 'false': [-2.0852884636437723e-16, nan]}
{'': [0.044023668639054575, -7.699933880464796e-17], 'false': [-7.699933880464796e-17, nan]}
{'': [0.01562106324011103, -8.12588766959689e-17], 'false': [nan, -8.12588766959689e-17]}
{'': [0.06884511455712639, 0.06880401092088011], 'true': [0.04338842975206586, -8.629221613200269e-17], 'false': [0.06880401092088011, nan], 'false,true': [0.04749999999999999, -2.846725704167068e-17]}
{'': [1.3581261500363444e-07, 4.683753385137379e-17], 'true': [1.3581261500363444e-07, nan], 'false': [nan, 4.683753385137379e-17], 'false,false': [1.8235547264374553e-17, 7.93016446160826e-18], 'false,false,true': [nan, 1.8235547264374553e-17]}
{'': [0.007938281318878878, 3.1301442103969174e-17], 'false': [nan, 3.1301442103969174e-17], 'false,false': [nan, 3.1301442103969174e-17]}
{'': [0.04403431922287713, 1.4042346556523718e-17], 'false': [nan, 1.4042346556523718e-17], 'false,false': [nan, 1.4042346556523718e-17], 'false,false,false': [1.4042346556523718e-17, nan]}
{'': [0.02306910917222345, 6.491982093147102e-17], 'true': [0.02306910917222345, nan], 'false': [6.495985782381235e-17, -1.0408340855860843e-17], 'false,false': [nan, -1.0408340855860843e-17]}
{'': [0.03726467567582169, -1.8052406904474092e-18], 'false': [nan, -1.8052406904474092e-18], 'false,false': [2.0539125955565396e-17, 7.240584943207542e-18], 'false,false,true': [nan, 2.0539125955565396e-17]}
{'': [0.03724673012140777, 2.362176648138631e-18], 'false': [nan, 2.362176648138631e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 56.421
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.8581489350995123;  // std dev = 8.43e-08, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.6914822684328455;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then return 0.8581489350995116;  // std dev = 2.46e-07, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.14185106490048827;  // std dev = 0.000, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.7218312021652307;  // std dev = 0.074, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.619331057205124;  // std dev = 1.332, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.7217408194115956;  // std dev = 0.037, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.7280700052924225;  // std dev = 0.059, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.12544463852839183;  // std dev = 0.000, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( tweets(F, E), follows(D, F) )
%   | | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | | then return 0.5303938972798592;  // std dev = 0.988, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | | else return 0.5807848255417428;  // std dev = 0.157, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return 0.39625327225000756;  // std dev = 0.923, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.46830267405963893;  // std dev = 0.907, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.5571143115796351;  // std dev = 0.034, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.21990930973543935;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4678116127249776;  // std dev = 1.309, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   else return -0.11231637819360675;  // std dev = 0.000, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.42680523188737346;  // std dev = 0.080, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.2500091207568303;  // std dev = 1.520, 13.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=10 */
%   | | | else return 0.42989653601007166;  // std dev = 0.089, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else return -0.10159632948783648;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4416513006412121;  // std dev = 0.135, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return -0.1015963294878362;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, F) )
%   | | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | | then return 0.2992310243219915;  // std dev = 0.988, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | | else return 0.34668056813745984;  // std dev = 0.185, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.2375318152448224;  // std dev = 0.256, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.3473993571073569;  // std dev = 0.221, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926051;  // std dev = 6.14e-08, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.2623060719128849;  // std dev = 0.006, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.2972369131654146;  // std dev = 0.114, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(D, E), follows(A, D) )
%   | | | then return 0.26136812744890736;  // std dev = 0.015, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.24937264756531086;  // std dev = 0.039, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.26575311972579757;  // std dev = 2.36e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.1486507575501527;  // std dev = 1.585, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.2683939463610725;  // std dev = 0.070, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.28621035578478254;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.08518475138839678;  // std dev = 5.74e-09, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D) )
%   | | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | | then return 0.21587946815496442;  // std dev = 0.109, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | | | else return 0.24349136782367387;  // std dev = 0.066, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.10061807445060178;  // std dev = 0.769, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.29924389980594923;  // std dev = 0.024, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.2209232910636092;  // std dev = 0.059, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.24710586403535853;  // std dev = 0.055, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, I) )
%   | then if ( follows(I, A) )
%   | | then return -0.07877675473109153;  // std dev = 5.82e-09, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else return -0.07877675473109164;  // std dev = 2.79e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | else return -0.0787767547310917;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.18221295122751974;  // std dev = 0.064, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return 0.24016834032996742;  // std dev = 0.020, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(D, G), follows(D, A) )
%   | | | then return 0.11043443973223509;  // std dev = 0.933, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.12505830427538953;  // std dev = 0.800, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(I, J) )
%   | | | then return 0.1728147264479905;  // std dev = 0.023, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.1834930980685448;  // std dev = 0.008, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.19848671646397015;  // std dev = 0.072, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.183243492208054;  // std dev = 0.025, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.07324622576333673;  // std dev = 8.01e-09, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(G, E) )
%   | | | then return 0.155335397149681;  // std dev = 0.021, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.18900663194065642;  // std dev = 0.039, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(E, H), follows(H, A) )
%   | | | then return -0.30743500442307714;  // std dev = 0.963, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.0897463379722903;  // std dev = 0.975, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.16381675224247869;  // std dev = 0.014, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.20957776630252942;  // std dev = 0.039, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.15591459917734646;  // std dev = 0.032, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.1710181175069033;  // std dev = 0.051, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.06842697784420274;  // std dev = 0.000, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, E), follows(G, F) )
%   | | | then return 0.1354590836594243;  // std dev = 0.016, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.1545000915555266;  // std dev = 0.043, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.005814610495621173;  // std dev = 1.247, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.10488706226041673;  // std dev = 0.918, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else if ( follows(H, A), tweets(H, I) )
%   | | then if ( follows(H, J), follows(J, A) )
%   | | | then return 0.08754703967381458;  // std dev = 0.969, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.09976753660247993;  // std dev = 1.177, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.06844024761964772;  // std dev = 0.898, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.1477588216660706;  // std dev = 0.043, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06419184008202625;  // std dev = 2.11e-08, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.856', 'seconds']
Refined model CLL: -0.085336


******************************************
Best model found
******************************************
Results 

CLL : -0.090821 

AUC ROC : 0.99479 

AUC PR : 0.435503 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 56.421 

Total Inference Time : 9.609462022781372 

Total revision time: 84.56141444206239
Best scored revision CLL: -0.085336


Results 

CLL : -0.090821 

AUC ROC : 0.99479 

AUC PR : 0.435503 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 84.59517570495606 

Total Inference Time : 9.609462022781372 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.135
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8454907072514085;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004878;  // std dev = 1.23e-07, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6909652277659507;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839208;  // std dev = 0.000, 331.000 (wgt'ed) examples reached here.  /* #neg=331 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5466393765094106;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936066;  // std dev = 0.000, 331.000 (wgt'ed) examples reached here.  /* #neg=331 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3921010981670337;  // std dev = 2.194, 133.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=128 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4296950831294401;  // std dev = 1.75e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.10159632948783616;  // std dev = 3.23e-09, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.2988021620136524;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0926912761892605;  // std dev = 1.13e-07, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   | | else return -0.092691276189261;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24173859416582358;  // std dev = 2.198, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.11e-09, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22114751877087188;  // std dev = 0.996, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 2.98e-08, 328.000 (wgt'ed) examples reached here.  /* #neg=328 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1599696570226244;  // std dev = 2.199, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333675;  // std dev = 1.21e-07, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1548420070616752;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420275;  // std dev = 1.49e-08, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
%   | | else return -0.06842697784420264;  // std dev = 3.36e-09, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.09822644706325005;  // std dev = 0.215, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202593;  // std dev = 7.03e-09, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.098', 'seconds']
Parameter learned model CLL:-0.087163 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.405, 2, 156], 'false,true': [1.23e-07, 306, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.201, 5, 156], 'false,true': [0.0, 331, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 331, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [2.194, 5, 128], 'true,false': [0.0, 260, 0], 'false,true,true': [1.75e-08, 0, 28], 'false,true,false': [3.23e-09, 60, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.404, 6, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.13e-07, 241, 0], 'false,false,false': [0.0, 46, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.198, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.11e-09, 322, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.996, 1, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.98e-08, 328, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [2.199, 5, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.21e-07, 244, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 55, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.49e-08, 252, 0], 'false,false,false': [3.36e-09, 47, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.215, 8, 156], 'false,true': [0.0, 0, 0], 'false,false': [7.03e-09, 309, 0]}]
{'': [0.012497997115852777, 4.9343245538895844e-17], 'false': [4.9343245538895844e-17, nan]}
{'': [0.030091431657726965, -9.391614709820055e-17], 'false': [-9.391614709820055e-17, nan]}
{'': [0.018511925952297545, -4.561641430484027e-17], 'false': [nan, -4.561641430484027e-17]}
{'': [0.066815314240134, 0.06123638292911262], 'true': [0.036180677257052964, -6.490534605500916e-17], 'false': [0.06123638292911262, nan], 'false,true': [2.854859206178974e-16, 7.401486830834377e-18]}
{'': [0.03566790840945807, 9.129360063119754e-17], 'true': [0.03566790840945807, nan], 'false': [nan, 9.129360063119754e-17], 'false,false': [5.3438120687351934e-17, -1.9308226515220113e-17], 'false,false,true': [nan, 5.3438120687351934e-17]}
{'': [0.03001922561487059, 3.7237293993638793e-17], 'false': [nan, 3.7237293993638793e-17], 'false,false': [nan, 3.7237293993638793e-17]}
{'': [0.006320258329186152, 2.7078610356711136e-18], 'false': [nan, 2.7078610356711136e-18], 'false,false': [nan, 2.7078610356711136e-18], 'false,false,false': [2.7078610356711136e-18, nan]}
{'': [0.030033928944724668, 3.193283615978711e-17], 'true': [0.030033928944724668, nan], 'false': [6.006124559447569e-17, -1.1102230246251566e-17], 'false,false': [nan, -1.1102230246251566e-17]}
{'': [0.012478610735577423, -5.049843857826799e-17], 'false': [nan, -5.049843857826799e-17], 'false,false': [8.8112938462314e-19, 1.1810883240693155e-17], 'false,false,true': [nan, 8.8112938462314e-19]}
{'': [0.04638049905372462, 5.0301366811495766e-17], 'false': [nan, 5.0301366811495766e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 39.031
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, F), follows(F, G) )
%   | | | then return 0.8581489350995124;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.7914822684328456;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(A, H), follows(D, H) )
%   | | | then return 0.5803711573217345;  // std dev = 1.900, 18.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=13 */
%   | | | else return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.8581489350995122;  // std dev = 1.69e-07, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   else return -0.14185106490048777;  // std dev = 1.37e-07, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.7275541527995579;  // std dev = 0.153, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.6967602624461865;  // std dev = 0.945, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return 0.7298975742099006;  // std dev = 0.032, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.6285643213018636;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5944734122109545;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.1254446385283921;  // std dev = 0.000, 345.000 (wgt'ed) examples reached here.  /* #neg=345 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.5538327497047429;  // std dev = 0.008, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.5191582742418538;  // std dev = 0.985, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | else if ( tweets(A, F), follows(D, G) )
%   | | | then return 0.44998587049462396;  // std dev = 1.272, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.22390022901172676;  // std dev = 0.812, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then return 0.5997381812242509;  // std dev = 0.093, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(I, A), tweets(A, J) )
%   | | | then return 0.5192214622245954;  // std dev = 0.964, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.5655883704938396;  // std dev = 0.083, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   else return -0.11231637819360679;  // std dev = 0.000, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.42045815565424977;  // std dev = 0.053, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | | else return 0.3341271342425834;  // std dev = 1.607, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | else return 0.4325127440940945;  // std dev = 0.152, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.43679038630326883;  // std dev = 0.033, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.10575487189827408;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4336040289476507;  // std dev = 0.053, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.10159632948783613;  // std dev = 3.65e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, F) )
%   | | then if ( follows(F, A), follows(E, F) )
%   | | | then return 0.2833384768744243;  // std dev = 1.349, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   | | | else return 0.3630267741404295;  // std dev = 0.203, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.33684369850170237;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.2588789325936107;  // std dev = 1.293, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   | else return 0.3338152492460119;  // std dev = 0.122, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else if ( follows(A, H) )
%   | then return -0.09269127618926046;  // std dev = 1.01e-07, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
%   | else return -0.092691276189261;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | | then return 0.22463094817707902;  // std dev = 0.981, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.27979616592734863;  // std dev = 0.177, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.2599155736315468;  // std dev = 0.036, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.09367741989322384;  // std dev = 1.259, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.30059523230873314;  // std dev = 0.074, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.28076095132320766;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.26105175557733656;  // std dev = 0.042, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.2704891690183128;  // std dev = 0.111, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.08518475138839678;  // std dev = 6.11e-09, 333.000 (wgt'ed) examples reached here.  /* #neg=333 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.1927095659465478;  // std dev = 0.994, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | | else return 0.21437025506741955;  // std dev = 0.031, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.15314091259316343;  // std dev = 1.905, 45.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=41 */
%   | | | else return 0.06004854769321157;  // std dev = 0.933, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.21254679247940103;  // std dev = 0.017, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.201053757514118;  // std dev = 0.002, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.22186145303947172;  // std dev = 0.116, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.22626205275907402;  // std dev = 0.035, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.07877675473109143;  // std dev = 2.11e-08, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(A, F) )
%   | | | then return 0.19393164526404977;  // std dev = 0.189, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | | else return 0.15384564419090055;  // std dev = 0.918, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.23708424587234367;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.19406821691260354;  // std dev = 0.019, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.18245786228768046;  // std dev = 0.106, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.09319502588930519;  // std dev = 0.945, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.18590183981778008;  // std dev = 0.039, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.06006801980121525;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.07324622576333706;  // std dev = 4.47e-09, 329.000 (wgt'ed) examples reached here.  /* #neg=329 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.15639887281784876;  // std dev = 0.043, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.2176514745997847;  // std dev = 0.018, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.09082118305081398;  // std dev = 0.316, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(F, G) )
%   | | | then return 0.14789653287764565;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.15869147412434284;  // std dev = 0.020, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(H, A), tweets(A, I) )
%   | | | then return 0.19017406552693006;  // std dev = 0.079, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.16563362723421934;  // std dev = 0.064, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else if ( follows(A, J) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   | else return -0.06842697784420262;  // std dev = 2.11e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(D, A), follows(E, D) )
%   | | | then return 0.07002924919732625;  // std dev = 1.669, 44.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | | else return 0.14461923829471643;  // std dev = 0.111, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return -0.03452299885971651;  // std dev = 1.256, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return -0.46506029431499357;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.15666604323779476;  // std dev = 0.047, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.08977918605721517;  // std dev = 1.186, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.13709368397253957;  // std dev = 0.023, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.14635310721273323;  // std dev = 0.097, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else return -0.0641918400820258;  // std dev = 8.17e-09, 336.000 (wgt'ed) examples reached here.  /* #neg=336 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.806', 'seconds']
Refined model CLL: -0.085391


******************************************
Best model found
******************************************
Results 

CLL : -0.091453 

AUC ROC : 0.993897 

AUC PR : 0.40682 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 39.031 

Total Inference Time : 10.636085748672485 

Total revision time: 71.69091497993469
Best scored revision CLL: -0.085391


Results 

CLL : -0.091453 

AUC ROC : 0.993897 

AUC PR : 0.40682 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 71.72467624282837 

Total Inference Time : 10.636085748672485 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.391
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7194734122109544;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839155;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5169048982847462;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360636;  // std dev = 1.86e-09, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4268958854224712;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return -0.10159632948783627;  // std dev = 1.97e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.42689588542247103;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3270796767938737;  // std dev = 2.11e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926105;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.1015963294878363;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2595127064370048;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08550417797566762;  // std dev = 0.002, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21281910986817765;  // std dev = 2.58e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07927804615455201;  // std dev = 0.012, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1052645755684954;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07319053393551511;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07973224110033889;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12590389427256313;  // std dev = 0.192, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06837822755737123;  // std dev = 1.49e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.07407446968323357;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1477947274176357;  // std dev = 4.17e-09, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06424887868476897;  // std dev = 0.000700, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.445', 'seconds']
Parameter learned model CLL:-0.090439 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.33e-07, 0, 25], 'false,true': [4.59e-08, 44, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 48, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 1, 25], 'false,true': [0.0, 0, 0], 'false,false': [1.86e-09, 42, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.0, 0, 24], 'true,false': [1.97e-08, 48, 0], 'false,true,true': [0.0, 0, 1], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.11e-08, 0, 25], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 36, 0], 'false,false,false': [0.0, 3, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.0, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.002, 47, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.58e-08, 0, 25], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.012, 40, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.361, 2, 25], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 50, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 1, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.192, 1, 25], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.49e-08, 36, 0], 'false,false,false': [0.0, 3, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [4.17e-09, 0, 25], 'false,true': [0.0, 0, 0], 'false,false': [0.0007, 50, 0]}]
{'': [7.105427357601002e-16, 4.794144879063176e-17], 'false': [4.794144879063176e-17, nan]}
{'': [-7.105427357601002e-17, -3.0068540250264654e-17], 'false': [-3.0068540250264654e-17, nan]}
{'': [0.036982248520709755, 0.0], 'false': [nan, 0.0]}
{'': [0.06206756027128953, 0.0], 'true': [-1.1102230246251565e-16, 8.0953762212251e-18], 'false': [0.0, nan], 'false,true': [0.0, nan]}
{'': [1.7763568394002505e-17, 5.630767402390979e-06], 'false': [nan, 5.630767402390979e-06], 'false,false': [-9.25185853854297e-18, -1.1564823173178713e-18], 'true': [1.7763568394002505e-17, nan], 'false,false,true': [nan, -9.25185853854297e-18]}
{'': [-5.329070518200751e-17, 2.29575025475398e-06], 'false': [nan, 2.29575025475398e-06], 'false,false': [nan, 2.29575025475398e-06]}
{'': [2.6645352591003756e-17, 3.3925072590951234e-06], 'false': [nan, 3.3925072590951234e-06], 'false,false': [nan, 3.3925072590951234e-06], 'false,false,false': [3.3925072590951234e-06, nan]}
{'': [0.06858710562414266, 8.226438414012132e-07], 'true': [0.06858710562414266, nan], 'false': [-1.3322676295501878e-17, 0.0], 'false,false': [nan, 0.0]}
{'': [0.03698224852071007, 2.3039413744283476e-06], 'false': [nan, 2.3039413744283476e-06], 'false,false': [6.1679056923619804e-18, -1.1564823173178713e-18], 'false,false,true': [nan, 6.1679056923619804e-18]}
{'': [1.7763568394002505e-17, 4.905171889413307e-07], 'false': [nan, 4.905171889413307e-07]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 6.666
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.14185106490048768;  // std dev = 4.08e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7194734122109544;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.12544463852839155;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5553664367462846;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.11231637819360636;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.41751358415830997;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return -0.10159632948783624;  // std dev = 3.16e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return 0.0022256532413929718;  // std dev = 0.464, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.3207118471601496;  // std dev = 2.11e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(E, A) )
%   | | then return 0.019465369369093155;  // std dev = 0.858, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.32071184716014967;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926105;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return -0.10179965511533462;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then return 0.2551722425694895;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.32796878997813733;  // std dev = 0.112, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F) )
%   | then return -0.0851847513883968;  // std dev = 1.83e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return -0.0928614932915544;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then return 0.20975771563253556;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.26124764487911567;  // std dev = 0.098, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07877675473109179;  // std dev = 5.27e-09, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.1770964977452774;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.2205278058677881;  // std dev = 0.075, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return -0.15623683558805598;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.17709649774527736;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1712990637449451;  // std dev = 0.014, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, H) )
%   | then return -0.07324622576333704;  // std dev = 7.45e-09, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return -0.0793782883089502;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.15274385809367078;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.15089845240057864;  // std dev = 0.005, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.17688387009073392;  // std dev = 0.048, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15311974593768501;  // std dev = 0.000752, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.18224432101181517;  // std dev = 0.072, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F) )
%   | then return -0.06842697784420272;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else return -0.0737678011815764;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.13400703000801117;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.13256557082968315;  // std dev = 0.004, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.15266892000439558;  // std dev = 0.043, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.13430042985513124;  // std dev = 0.000674, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.1569015368410511;  // std dev = 0.064, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), follows(F, G) )
%   | then return -0.06419184008202623;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then return -0.0641918400820262;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.06653758380252983;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '5.482', 'seconds']
Refined model CLL: -0.089921


******************************************
Best model found
******************************************
Results 

CLL : -0.087429 

AUC ROC : 0.995735 

AUC PR : 0.460358 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 6.666 

Total Inference Time : 1.640500783920288 

Total revision time: 13.095166522979737
Best scored revision CLL: -0.089921


Results 

CLL : -0.087429 

AUC ROC : 0.995735 

AUC PR : 0.460358 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 13.128927785873413 

Total Inference Time : 1.640500783920288 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.143
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8196873966379739;  // std dev = 1.387, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048763;  // std dev = 8.43e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7271702392772506;  // std dev = 1.79e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283914;  // std dev = 0.000, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4888757179904774;  // std dev = 0.262, 54.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360621;  // std dev = 7.79e-09, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.42006146920390675;  // std dev = 0.989, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | else return -0.10159632948783624;  // std dev = 4.71e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4413380649485875;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.34130330721880064;  // std dev = 0.009, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926101;  // std dev = 3.49e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2307301736037321;  // std dev = 1.386, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839682;  // std dev = 5.51e-09, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15221311038879062;  // std dev = 1.924, 54.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109161;  // std dev = 5.27e-08, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.18302379181521777;  // std dev = 0.894, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333707;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333707;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15330276016235708;  // std dev = 0.139, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420265;  // std dev = 4.47e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | | else return -0.06842697784420275;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11366825981622639;  // std dev = 0.192, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.943', 'seconds']
Parameter learned model CLL:-0.093353 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.387, 2, 50], 'false,true': [8.43e-08, 106, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.79e-07, 0, 50], 'false,true': [0.0, 89, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.262, 4, 50], 'false,true': [0.0, 0, 0], 'false,false': [7.79e-09, 92, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.989, 1, 46], 'true,false': [4.71e-08, 94, 0], 'false,true,true': [0.0, 0, 4], 'false,true,false': [0.0, 6, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.009, 0, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.49e-08, 93, 0], 'false,false,false': [0.0, 6, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.386, 2, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.51e-09, 95, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.924, 4, 50], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.27e-08, 92, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.894, 1, 50], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 107, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 4, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.139, 1, 50], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [4.47e-08, 93, 0], 'false,false,false': [0.0, 2, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 2, 50], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 98, 0]}]
{'': [0.03698224852071041, 6.70323335622736e-17], 'false': [6.70323335622736e-17, nan]}
{'': [6.394884621840901e-16, -1.7464182409833923e-17], 'false': [-1.7464182409833923e-17, nan]}
{'': [0.06858710562414355, 6.033820786006285e-17], 'false': [nan, 6.033820786006285e-17]}
{'': [0.06741393605849177, 0.07074666159889112], 'false': [0.07074666159889112, nan], 'false,true': [0.0, -2.3129646346357427e-18], 'true': [0.020823902218198173, 2.362176648138631e-17]}
{'': [1.6743559022103227e-06, 2.2428747972225384e-17], 'true': [1.6743559022103227e-06, nan], 'false': [nan, 2.2428747972225384e-17], 'false,false': [1.3131670183738411e-17, 0.0], 'false,false,true': [nan, 1.3131670183738411e-17]}
{'': [0.03695881804660466, 3.0385051200267444e-17], 'false': [nan, 3.0385051200267444e-17], 'false,false': [nan, 3.0385051200267444e-17]}
{'': [0.06854737166872196, 3.0169103930031426e-17], 'false': [nan, 3.0169103930031426e-17], 'false,false': [nan, 3.0169103930031426e-17], 'false,false,false': [3.0169103930031426e-17, nan]}
{'': [0.015677604812748817, -4.0008036923429064e-18], 'true': [0.015677604812748817, nan], 'false': [-3.112774835397635e-18, 0.0], 'false,false': [nan, 0.0]}
{'': [0.019331210616138787, 2.162013258480568e-17], 'false': [nan, 2.162013258480568e-17], 'false,false': [2.1488187573390126e-17, 0.0], 'false,false,true': [nan, 2.1488187573390126e-17]}
{'': [0.03696663925713251, -1.4727448285843914e-17], 'false': [nan, -1.4727448285843914e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 8.722
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.8581489350995115;  // std dev = 2.53e-07, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.14185106490048763;  // std dev = 8.69e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7223293252125008;  // std dev = 0.080, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else return -0.12544463852839133;  // std dev = 0.000, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5582976690988263;  // std dev = 0.102, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else return -0.11231637819360621;  // std dev = 7.45e-08, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.4161068490540844;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.41610684905408396;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1969637157135232;  // std dev = 1.228, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else return -0.10159632948783617;  // std dev = 5.77e-08, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4161068490540841;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, D) )
%   | | | then return 0.2572582999621265;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.3197582999621267;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.17690115710498366;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.3435647693243841;  // std dev = 0.178, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926103;  // std dev = 3.49e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.26455445310380304;  // std dev = 0.019, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.2825629328501381;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.2500308901869248;  // std dev = 7.45e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.01545606791517887;  // std dev = 1.257, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.25452148175898653;  // std dev = 1.29e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2500308901869248;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.29332194205626294;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( tweets(A, J) )
%   | then return -0.08518475138839682;  // std dev = 5.27e-09, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | else return -0.0851847513883969;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then return 0.21745881357412533;  // std dev = 0.003, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.20733162561804133;  // std dev = 0.005, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.2219132310151637;  // std dev = 0.031, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.2373507251178403;  // std dev = 0.046, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.206119239900214;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2902759030972745;  // std dev = 0.132, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( tweets(A, I) )
%   | then if ( follows(J, A) )
%   | | then return -0.07877675473109169;  // std dev = 4.17e-09, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return -0.0787767547310918;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return -0.0787767547310918;  // std dev = 0.000, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.12079900155762058;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.1784772821470666;  // std dev = 0.032, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(D, F), tweets(A, G) )
%   | | | then return 0.18463469890615755;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.2827897601049095;  // std dev = 1.026, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( tweets(A, I), tweets(H, I) )
%   | | | then return 0.18407963358999133;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2430711478455409;  // std dev = 0.088, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1755736719118445;  // std dev = 0.004, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.18802383346895568;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.07324622576333707;  // std dev = 0.000, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then return 0.16490393699612044;  // std dev = 0.004, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.15037154422373644;  // std dev = 0.010, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.16077885976555253;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.07645857815268636;  // std dev = 0.960, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.1599735831500061;  // std dev = 0.761, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.21603669885484664;  // std dev = 0.161, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, J) )
%   | then if ( follows(K, A) )
%   | | then return -0.06842697784420265;  // std dev = 4.56e-09, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | else return -0.06842697784420274;  // std dev = 2.63e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.06842697784420275;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then return 0.14343223829198692;  // std dev = 0.003, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.13215321476667674;  // std dev = 0.009, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.1402749754550783;  // std dev = 0.021, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.1576729617324288;  // std dev = 0.026, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.23103519593501845;  // std dev = 0.079, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.16209564958747544;  // std dev = 0.059, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.13389354412047483;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else return -0.06419184008202626;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.279', 'seconds']
Refined model CLL: -0.092779


******************************************
Best model found
******************************************
Results 

CLL : -0.086937 

AUC ROC : 0.99557 

AUC PR : 0.424593 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 8.722 

Total Inference Time : 3.11279034614563 

Total revision time: 20.226635208129885
Best scored revision CLL: -0.092779


Results 

CLL : -0.086937 

AUC ROC : 0.99557 

AUC PR : 0.424593 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 20.26039647102356 

Total Inference Time : 3.11279034614563 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.837
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8321749091254866;  // std dev = 1.396, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048793;  // std dev = 0.000, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6987117541100454;  // std dev = 1.396, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839105;  // std dev = 8.30e-08, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5162423061056818;  // std dev = 0.219, 79.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360622;  // std dev = 8.01e-09, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.424641394406031;  // std dev = 0.993, 72.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | else return -0.10159632948783644;  // std dev = 0.000, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4385302832949195;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.10159632948783633;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.2994799682834215;  // std dev = 1.698, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926078;  // std dev = 7.74e-08, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.27448425527648806;  // std dev = 0.005, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0851847513883968;  // std dev = 5.89e-09, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22331134023213214;  // std dev = 0.005, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109153;  // std dev = 7.74e-08, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17381908581739144;  // std dev = 0.993, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333731;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333707;  // std dev = 2.63e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13600404503499636;  // std dev = 0.159, 77.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420264;  // std dev = 6.41e-08, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | | else return -0.06842697784420275;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.058972843844196175;  // std dev = 0.279, 82.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=75 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.158', 'seconds']
Parameter learned model CLL:-0.093318 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.396, 2, 75], 'false,true': [0.0, 135, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.396, 2, 75], 'false,true': [8.3e-08, 126, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.219, 4, 75], 'false,true': [0.0, 0, 0], 'false,false': [8.01e-09, 149, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.993, 1, 71], 'true,false': [0.0, 143, 0], 'false,true,true': [0.0, 0, 4], 'false,true,false': [0.0, 4, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.698, 3, 75], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.74e-08, 131, 0], 'false,false,false': [0.0, 8, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.005, 0, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 135, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.005, 0, 75], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.74e-08, 137, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [0.993, 1, 75], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 151, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.63e-09, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.159, 2, 75], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.41e-08, 139, 0], 'false,false,false': [0.0, 5, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.279, 7, 75], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 152, 0]}]
{'': [0.025299375948725576, -5.921189464667501e-17], 'false': [-5.921189464667501e-17, nan]}
{'': [0.025299375948725947, 5.4630021846634684e-17], 'false': [5.4630021846634684e-17, nan]}
{'': [0.04806921967633453, 6.258975440839808e-17], 'false': [nan, 6.258975440839808e-17]}
{'': [0.0662681546225067, 0.07293418945904327], 'false': [0.07293418945904327, nan], 'false,true': [0.0, 0.0], 'true': [0.013695987654320514, -5.124106267500723e-17]}
{'': [0.036970483076892956, 4.792329602698517e-17], 'true': [0.036970483076892956, nan], 'false': [nan, 4.792329602698517e-17], 'false,false': [4.57649185723347e-17, 0.0], 'false,false,true': [nan, 4.57649185723347e-17]}
{'': [3.8407864095072833e-07, 3.536265930287536e-17], 'false': [nan, 3.536265930287536e-17], 'false,false': [nan, 3.536265930287536e-17]}
{'': [2.909759518487931e-07, 4.3760615569166756e-17], 'false': [nan, 4.3760615569166756e-17], 'false,false': [nan, 4.3760615569166756e-17], 'false,false,false': [4.3760615569166756e-17, nan]}
{'': [0.012982072165902555, -1.654990844161724e-17], 'true': [0.012982072165902555, nan], 'false': [-1.0293458506458405e-17, 6.938893903907229e-19], 'false,false': [nan, 6.938893903907229e-19]}
{'': [0.025294483262762728, 3.0068540250264654e-17], 'false': [nan, 3.0068540250264654e-17], 'false,false': [2.955269921664086e-17, -6.938893903907229e-19], 'false,false,true': [nan, 2.955269921664086e-17]}
{'': [0.07810256796959258, -9.495328500083576e-18], 'false': [nan, -9.495328500083576e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 24.828
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995127;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   else return -0.14185106490048796;  // std dev = 0.000, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.6668418332635857;  // std dev = 0.973, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.7194734122109542;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.7194734122109542;  // std dev = 5.96e-08, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then return 0.46947341221095434;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.7194734122109543;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.1254446385283912;  // std dev = 6.99e-08, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.5603282369143638;  // std dev = 0.043, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(G, A), recursion_accounttype(F, B) )
%   | | | then return 0.4886997700796178;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.15536643674628428;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.5718882340748407;  // std dev = 0.089, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.11231637819360617;  // std dev = 9.88e-08, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), tweets(A, F) )
%   | | | then return 0.4248692876835877;  // std dev = 0.031, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.2858726077865709;  // std dev = 1.615, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.4365657404660234;  // std dev = 0.040, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.3671276313003304;  // std dev = 0.907, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.10159632948783642;  // std dev = 0.000, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.4135011088508814;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.10159632948783634;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.3061151611618815;  // std dev = 0.972, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.0989124262443033;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.34861101997452043;  // std dev = 0.164, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return 0.1179927530950345;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, F) )
%   | then return -0.09269127618926072;  // std dev = 8.30e-08, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   | else return -0.09269127618926097;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B), follows(E, D) )
%   | | | then return 0.2657480680007184;  // std dev = 2.98e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.259190038751874;  // std dev = 0.035, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.2789372477364946;  // std dev = 0.031, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2929696768190473;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return 0.13640821908773967;  // std dev = 1.303, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return 0.27590075072504905;  // std dev = 0.059, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.30883597111855693;  // std dev = 0.084, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.27331029450351313;  // std dev = 0.058, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.0851847513883968;  // std dev = 5.96e-09, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.21447473962658606;  // std dev = 0.018, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.22276002054046892;  // std dev = 0.024, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.22643125641364395;  // std dev = 0.027, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2361373947528168;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(J, A) )
%   | | | then return 0.2928001466622638;  // std dev = 0.026, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.218859979489703;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.24122253449338169;  // std dev = 0.071, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.22315140262461763;  // std dev = 0.066, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.07877675473109151;  // std dev = 6.72e-09, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.18046154391878994;  // std dev = 0.017, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.19062074776776206;  // std dev = 0.017, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.236046782136903;  // std dev = 0.022, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.18721157222489326;  // std dev = 0.030, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A), follows(A, I) )
%   | | then return -0.0571068867639081;  // std dev = 0.840, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.20758742541481756;  // std dev = 0.062, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1895114459031417;  // std dev = 0.045, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, L) )
%   | then return -0.07324622576333721;  // std dev = 0.000, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, F), recursion_accounttype(E, B) )
%   | | | then return 0.15653730977648786;  // std dev = 0.010, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.04338640137994843;  // std dev = 1.528, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.15811626861887224;  // std dev = 0.022, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.17865680722688845;  // std dev = 0.041, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.16402631706424028;  // std dev = 0.043, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.1811574491794894;  // std dev = 0.046, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.1587509926589905;  // std dev = 0.014, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, J) )
%   | then return -0.06842697784420264;  // std dev = 5.35e-09, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | else return -0.06842697784420275;  // std dev = 1.32e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.09635311121228328;  // std dev = 0.961, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.14702711701132526;  // std dev = 0.023, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(D, G) )
%   | | | then return 0.14437301752818593;  // std dev = 0.028, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.16579224967372364;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(H, J) )
%   | | | then return 0.20036213963547417;  // std dev = 0.029, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.13873045808229445;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.14912032969905922;  // std dev = 0.044, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.13865209801462797;  // std dev = 0.042, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06419184008202626;  // std dev = 0.000, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.970', 'seconds']
Refined model CLL: -0.092936


******************************************
Best model found
******************************************
Results 

CLL : -0.08685 

AUC ROC : 0.994411 

AUC PR : 0.367996 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 24.828 

Total Inference Time : 6.35178804397583 

Total revision time: 41.16388610839844
Best scored revision CLL: -0.092936


Results 

CLL : -0.08685 

AUC ROC : 0.994411 

AUC PR : 0.367996 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 41.19764737129211 

Total Inference Time : 6.35178804397583 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.468
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8482479450005014;  // std dev = 0.995, 101.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=100 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048832;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7018595507585663;  // std dev = 1.400, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283916;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5055462687540218;  // std dev = 0.231, 106.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936065;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4158138509884208;  // std dev = 1.400, 97.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=95 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.26976574102278444;  // std dev = 0.373, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.10159632948783621;  // std dev = 1.32e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3299216392594526;  // std dev = 0.999, 101.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926057;  // std dev = 9.06e-08, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | | else return -0.09269127618926089;  // std dev = 1.86e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22246099676965056;  // std dev = 2.186, 105.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.35e-09, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.17313790668777185;  // std dev = 2.333, 106.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109147;  // std dev = 7.45e-08, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17987501820961002;  // std dev = 1.403, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333673;  // std dev = 9.94e-08, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1626301833391474;  // std dev = 0.097, 101.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420262;  // std dev = 7.38e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | | else return -0.0684269778442027;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.07638780393271542;  // std dev = 0.262, 108.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=100 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.768', 'seconds']
Parameter learned model CLL:-0.092931 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.995, 1, 100], 'false,true': [0.0, 185, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.4, 2, 100], 'false,true': [0.0, 193, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.231, 6, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 184, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.4, 2, 95], 'true,false': [0.0, 175, 0], 'false,true,true': [0.373, 1, 5], 'false,true,false': [1.32e-09, 12, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.999, 1, 100], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [9.06e-08, 195, 0], 'false,false,false': [1.86e-09, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.186, 5, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.35e-09, 193, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.333, 6, 100], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [7.45e-08, 197, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.403, 2, 100], 'true,false': [0.0, 0, 0], 'false,true': [9.94e-08, 174, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.097, 1, 100], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.38e-08, 172, 0], 'false,false,false': [0.0, 9, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.262, 8, 100], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 202, 0]}]
{'': [0.00980296049407087, -2.1124243495570547e-16], 'false': [-2.1124243495570547e-16, nan]}
{'': [0.019223375624760546, -2.7611764343009074e-17], 'false': [-2.7611764343009074e-17, nan]}
{'': [0.05339978640085313, -2.172175482962263e-17], 'false': [nan, -2.172175482962263e-17]}
{'': [0.06862587431621904, 0.0769429157216152], 'false': [0.0769429157216152, nan], 'false,true': [0.13888888888888892, 0.0], 'true': [0.020193431820596863, -8.374253671458324e-17]}
{'': [0.00988826657042802, 4.311545726699637e-17], 'true': [0.00988826657042802, nan], 'false': [nan, 4.311545726699637e-17], 'false,false': [4.2131540421672605e-17, 2.523234146875356e-18], 'false,false,true': [nan, 4.2131540421672605e-17]}
{'': [0.04552577635282551, 2.8762254523967783e-17], 'false': [nan, 2.8762254523967783e-17], 'false,false': [nan, 2.8762254523967783e-17]}
{'': [0.05136633947204623, 2.817824935596844e-17], 'false': [nan, 2.817824935596844e-17], 'false,false': [nan, 2.817824935596844e-17], 'false,false,false': [2.817824935596844e-17, nan]}
{'': [0.01929737644685085, 6.301265815440077e-17], 'true': [0.01929737644685085, nan], 'false': [5.67872696503672e-17, -1.261617073437678e-18], 'false,false': [nan, -1.261617073437678e-18]}
{'': [0.009424585584905193, 3.128252721319502e-17], 'false': [nan, 3.128252721319502e-17], 'false,false': [3.162844663176318e-17, 7.709882115452476e-19], 'false,false,true': [nan, 3.162844663176318e-17]}
{'': [0.06840625491140209, -1.648846076175975e-18], 'false': [nan, -1.648846076175975e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 22.863
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995126;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.724815601766179;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.14185106490048838;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.7194734122109548;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.386140078877621;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.7194734122109542;  // std dev = 2.98e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.1403599577641482;  // std dev = 1.105, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.6819570964928708;  // std dev = 0.990, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return 0.7194734122109542;  // std dev = 7.30e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.12544463852839163;  // std dev = 0.000, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.567669951222346;  // std dev = 0.270, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.3553664367462845;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.11231637819360658;  // std dev = 0.000, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( recursion_accounttype(E, B), follows(F, A) )
%   | | | then return 0.39763557162655516;  // std dev = 0.849, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return 0.44537248607966345;  // std dev = 0.260, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.4167663106229484;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2816976033284886;  // std dev = 0.935, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.41452449001686353;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.10159632948783623;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.32486043810788884;  // std dev = 0.092, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.15052842150379742;  // std dev = 0.907, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(G, A), tweets(A, H) )
%   | | | then return 0.06176299129692168;  // std dev = 1.120, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.3544112280096164;  // std dev = 0.061, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.33775995870790676;  // std dev = 0.233, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else if ( follows(A, I) )
%   | then return -0.09269127618926057;  // std dev = 9.19e-08, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else return -0.09269127618926087;  // std dev = 5.27e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.2560629576953863;  // std dev = 0.089, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.28455446430415143;  // std dev = 0.011, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(D, F), tweets(A, G) )
%   | | | then return 0.14704324885742953;  // std dev = 1.752, 26.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=22 */
%   | | | else return 0.2685077274871752;  // std dev = 0.073, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.083527547609683;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( tweets(A, H) )
%   | then if ( follows(I, A) )
%   | | then if ( tweets(I, H) )
%   | | | then return -0.08518475138839678;  // std dev = 4.83e-08, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | | | else return -0.08518475138839679;  // std dev = 4.56e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return -0.08518475138839678;  // std dev = 7.45e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return -0.08518475138839678;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(D, A), recursion_accounttype(E, B) )
%   | | | then return 0.17656556021747047;  // std dev = 0.984, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.23114877805819847;  // std dev = 0.156, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( follows(F, A), tweets(D, G) )
%   | | | then return -0.09485751849939657;  // std dev = 0.758, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.24450943606629844;  // std dev = 0.033, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.21803358627364963;  // std dev = 0.053, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.271670185211736;  // std dev = 0.144, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.2002892222959053;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.21860943212050107;  // std dev = 0.043, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.07877675473109146;  // std dev = 4.47e-09, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.18207484841444932;  // std dev = 0.028, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.10809894985063874;  // std dev = 0.971, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(E, A), tweets(A, F) )
%   | | | then return 0.2296732313532819;  // std dev = 0.135, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.18894710910587184;  // std dev = 0.098, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then return -0.007356562018494129;  // std dev = 0.800, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.19795295232529742;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1958758688277921;  // std dev = 0.023, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, J) )
%   | then return -0.07324622576333678;  // std dev = 6.72e-09, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | else return -0.07324622576333703;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(D, E) )
%   | | | then return 0.11725552201979539;  // std dev = 1.392, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | | else return -0.07013810387404039;  // std dev = 1.175, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( follows(D, F), tweets(D, G) )
%   | | | then return 0.19111310622305597;  // std dev = 0.024, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.16575790693191894;  // std dev = 0.035, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.16066027176041123;  // std dev = 0.034, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.1867392584977327;  // std dev = 0.111, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.15453976248390572;  // std dev = 0.027, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.1666560331177745;  // std dev = 0.013, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06842697784420262;  // std dev = 5.67e-09, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.14258062641286945;  // std dev = 0.023, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.15344546598834188;  // std dev = 0.042, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, G), follows(D, H) )
%   | | | then return 0.17284194389912683;  // std dev = 0.034, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.15531965071622114;  // std dev = 0.100, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(K, A), recursion_accounttype(K, B) )
%   | | | then return 0.12935607005053157;  // std dev = 0.012, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.01552985941731334;  // std dev = 1.585, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | | else if ( tweets(A, L) )
%   | | | then return 0.1485067635710441;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.14159618368352145;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06419184008202626;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.606', 'seconds']
Refined model CLL: -0.091884


******************************************
Best model found
******************************************
Results 

CLL : -0.085771 

AUC ROC : 0.995568 

AUC PR : 0.456566 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 22.863 

Total Inference Time : 6.731777906417847 

Total revision time: 42.27751198387146
Best scored revision CLL: -0.091884


Results 

CLL : -0.085771 

AUC ROC : 0.995568 

AUC PR : 0.456566 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 42.31127324676514 

Total Inference Time : 6.731777906417847 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.535
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.834893121146022;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048835;  // std dev = 0.000, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.678688575932759;  // std dev = 2.393, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839183;  // std dev = 0.000, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5403498181812609;  // std dev = 0.173, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360692;  // std dev = 0.000, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.40406917170129997;  // std dev = 1.967, 122.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=118 */
%   | else return -0.10159632948783655;  // std dev = 0.000, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43685605694720264;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783621;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.2810497096676982;  // std dev = 2.741, 134.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926047;  // std dev = 8.16e-08, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
%   | | else return -0.09269127618926086;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2425225641421477;  // std dev = 2.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.74e-09, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21877955683576486;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 6.66e-08, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16738465461986235;  // std dev = 1.925, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333668;  // std dev = 1.26e-07, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333699;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14899621771582933;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 5.58e-08, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   | | else return -0.06842697784420265;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1364058593920076;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202619;  // std dev = 3.48e-09, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.308', 'seconds']
Parameter learned model CLL:-0.092754 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 240, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.393, 6, 126], 'false,true': [0.0, 238, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.173, 4, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 266, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.967, 4, 118], 'true,false': [0.0, 220, 0], 'false,true,true': [0.0, 0, 8], 'false,true,false': [0.0, 27, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.741, 8, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [8.16e-08, 237, 0], 'false,false,false': [0.0, 21, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.74e-09, 247, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.403, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.66e-08, 235, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.925, 4, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.26e-07, 231, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 17, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.58e-08, 234, 0], 'false,false,false': [0.0, 23, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false': [3.48e-09, 259, 0]}]
{'': [0.022714981070853308, -1.6653345369377348e-16], 'false': [-1.6653345369377348e-16, nan]}
{'': [0.0433884297520674, -5.784355254349555e-17], 'false': [-5.784355254349555e-17, nan]}
{'': [0.02982248520709961, -1.0350951507783414e-16], 'false': [nan, -1.0350951507783414e-16]}
{'': [0.06998795441876128, 0.05112252249048083], 'true': [0.03171190540177449, -8.276208001751167e-17], 'false': [0.05112252249048083, nan], 'false,true': [0.0, -1.850371707708594e-17]}
{'': [0.056087982193848404, 4.819572820078199e-17], 'true': [0.056087982193848404, nan], 'false': [nan, 4.819572820078199e-17], 'false,false': [2.810691201582675e-17, -6.6084703846735505e-18], 'false,false,true': [nan, 2.810691201582675e-17]}
{'': [0.03668296452965357, 3.3261742438162584e-17], 'false': [nan, 3.3261742438162584e-17], 'false,false': [nan, 3.3261742438162584e-17]}
{'': [0.015371452824762759, 1.8897413185109047e-17], 'false': [nan, 1.8897413185109047e-17], 'false,false': [nan, 1.8897413185109047e-17], 'false,false,false': [1.8897413185109047e-17, nan]}
{'': [0.02849255954747452, 5.819717467793159e-17], 'true': [0.02849255954747452, nan], 'false': [6.920870802858119e-17, 0.0], 'false,false': [nan, 0.0]}
{'': [0.022702871128789322, -1.5551762212648107e-17], 'false': [nan, -1.5551762212648107e-17], 'false,false': [1.3284719952779651e-17, -1.206764157201257e-18], 'false,false,true': [nan, 1.3284719952779651e-17]}
{'': [0.015373712229196246, 1.200241107702872e-17], 'false': [nan, 1.200241107702872e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 40.401
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(D, E), follows(D, A) )
%   | | | then return 0.8581489350995126;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.8287371703936299;  // std dev = 0.985, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | else if ( follows(D, F), tweets(A, G) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.1418510649004884;  // std dev = 0.000, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.719719150658265;  // std dev = 0.008, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.5476117505537171;  // std dev = 1.822, 23.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=19 */
%   | | else if ( follows(D, F), tweets(D, G) )
%   | | | then return 0.44650206816821053;  // std dev = 1.194, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.7273860259028219;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.5944734122109542;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.7253711349463979;  // std dev = 2.98e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.7300906395982253;  // std dev = 0.056, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.12544463852839174;  // std dev = 0.000, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.5158774126029082;  // std dev = 1.334, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | | | else return 0.5771359796649205;  // std dev = 0.070, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.5760900384354061;  // std dev = 0.154, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.6069228806044911;  // std dev = 0.083, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3681574236201082;  // std dev = 1.282, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.5528100123621256;  // std dev = 0.000634, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.11231637819360692;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), tweets(A, F) )
%   | | | then return 0.4007243506116919;  // std dev = 1.377, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   | | | else return 0.4347072360272753;  // std dev = 0.141, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.14166572242162803;  // std dev = 1.112, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.38463241158240513;  // std dev = 1.007, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.43677415410822906;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), tweets(E, F) )
%   | | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | | then return 0.31661437874773707;  // std dev = 1.000, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return 0.33714066852028496;  // std dev = 0.105, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return 0.3824488544220628;  // std dev = 0.165, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.32838065421049123;  // std dev = 0.082, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.06681618869631999;  // std dev = 1.118, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.3403583311904061;  // std dev = 0.070, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, I) )
%   | then return -0.0926912761892605;  // std dev = 6.99e-08, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else return -0.09269127618926087;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E), tweets(A, F) )
%   | | | then return 0.26582492935243757;  // std dev = 0.045, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.23967184904774277;  // std dev = 0.961, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else if ( follows(D, G), follows(G, D) )
%   | | | then return 0.10893195865500191;  // std dev = 1.245, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.33210588436087907;  // std dev = 0.054, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( tweets(A, J), follows(K, A) )
%   | | | then return 0.26019341982178634;  // std dev = 0.060, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.28930062057029465;  // std dev = 0.086, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, L) )
%   | | | then return 0.2528536463069121;  // std dev = 0.012, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.26343724368615934;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.08518475138839678;  // std dev = 5.67e-09, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, D) )
%   | | | then return 0.1765159070767577;  // std dev = 1.387, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.2204758134727388;  // std dev = 0.067, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.2758127842920697;  // std dev = 0.087, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2171847811609784;  // std dev = 0.087, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.21785717475399927;  // std dev = 0.062, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2765816304361623;  // std dev = 0.055, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.09876143123621556;  // std dev = 1.378, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.21559915145178704;  // std dev = 0.037, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.07877675473109143;  // std dev = 3.84e-09, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.1638717091666058;  // std dev = 1.373, 68.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=66 */
%   | | | else return -0.05251979156362474;  // std dev = 1.135, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.21007657288567774;  // std dev = 0.104, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.1772999594903793;  // std dev = 0.016, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(J, A), follows(J, I) )
%   | | | then return 0.05697052735248495;  // std dev = 1.309, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return -0.10492062713219046;  // std dev = 0.762, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.2435654085447939;  // std dev = 0.054, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.18139969574066228;  // std dev = 0.033, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.0732462257633367;  // std dev = 8.28e-09, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(D, F), follows(G, D) )
%   | | then if ( follows(G, A), tweets(G, F) )
%   | | | then return 0.1322501087146285;  // std dev = 1.378, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | | | else return 0.17413393454795803;  // std dev = 0.102, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.16472610517043174;  // std dev = 0.804, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.17162943259040972;  // std dev = 0.038, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.1951302491700026;  // std dev = 0.129, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1473586940527123;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.16202262692605116;  // std dev = 0.053, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, K) )
%   | then return -0.06842697784420261;  // std dev = 4.47e-09, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else return -0.06842697784420268;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), follows(F, E) )
%   | | | then return 0.14882614483932413;  // std dev = 0.084, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | | else return 0.1801162097095383;  // std dev = 0.046, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, G), follows(D, A) )
%   | | | then return 0.0932275212532074;  // std dev = 0.959, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.15480711162342298;  // std dev = 0.138, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return 0.028125804609167075;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( tweets(A, H) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.003', 'seconds']
Refined model CLL: -0.091451


******************************************
Best model found
******************************************
Results 

CLL : -0.085686 

AUC ROC : 0.996093 

AUC PR : 0.500911 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 40.401 

Total Inference Time : 12.683483362197876 

Total revision time: 69.34435738182069
Best scored revision CLL: -0.091451


Results 

CLL : -0.085686 

AUC ROC : 0.996093 

AUC PR : 0.500911 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 69.37811864471436 

Total Inference Time : 12.683483362197876 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.374
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7581489350995123;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.05851773156715445;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6810528950755189;  // std dev = 0.975, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.043096862253162595;  // std dev = 1.645, 42.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03487591597187419;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.13824701438973322;  // std dev = 2.123, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.6179964629744625;  // std dev = 0.202, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8691419880834599;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6354595655938855;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6199980898189609;  // std dev = 0.075, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5892336347248712;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01974173431361167;  // std dev = 2.204, 61.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=8 */
%   | | | else return -0.023707890676605392;  // std dev = 1.332, 22.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5682833427196754;  // std dev = 0.605, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.1293645579463067;  // std dev = 0.102, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4378239621180765;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.11829710799185912;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.4355603957450933;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.019535766274277073;  // std dev = 1.407, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.36247565606921206;  // std dev = 0.333, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3195886063829098;  // std dev = 0.031, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.39472746505195366;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5859401106564992;  // std dev = 0.078, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.09711421106464678;  // std dev = 0.675, 45.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=1 */
%   | | else return 0.008604939675226672;  // std dev = 0.295, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.006994995182075505;  // std dev = 1.313, 53.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=14 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26731017630057846;  // std dev = 0.048, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4976633531589419;  // std dev = 0.515, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12456913349577144;  // std dev = 0.052, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.12466476873435811;  // std dev = 0.039, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3177659763722944;  // std dev = 0.626, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return -0.08371480233575739;  // std dev = 0.750, 51.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.010341631405386485;  // std dev = 0.674, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19057225634978517;  // std dev = 0.053, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.19666233925210208;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.03041020998727072;  // std dev = 0.844, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | | | else return -0.10019427809425475;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.054439213391030646;  // std dev = 0.968, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
%   | | | else return 0.0272080773608067;  // std dev = 0.945, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1409218731831873;  // std dev = 0.222, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.11239242824295914;  // std dev = 1.042, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0929835409072358;  // std dev = 0.078, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3038426428541647;  // std dev = 0.253, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.09942147047726949;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -8.854170871152076E-5;  // std dev = 1.026, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19832289333908662;  // std dev = 0.347, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.15518062082610468;  // std dev = 0.033, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.08105069921372712;  // std dev = 0.004, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09412423824757948;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.08943727172271193;  // std dev = 0.381, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.21634849116598628;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04478288109992216;  // std dev = 1.143, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.832', 'seconds']
Parameter learned model CLL:-0.114276 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.342, 2, 18], 'true,false,true': [2.58e-08, 28, 0], 'true,false,false,true': [0.957, 11, 1], 'true,false,false,false': [0.707, 1, 1], 'false,true,true': [0.0, 0, 10], 'false,true,false': [0.0, 0, 1], 'false,false': [0.0, 19, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.975, 1, 15], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.645, 38, 4], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.949, 9, 1], 'false,false,false,true': [0.816, 1, 2], 'false,false,false,false': [2.123, 19, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.202, 0, 11], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.075, 0, 3], 'false,false,true,false': [0.0, 0, 3], 'false,false,false,true': [2.204, 53, 8], 'false,false,false,false': [1.332, 19, 3]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [0.605, 0, 23], 'true,false': [0.102, 40, 0], 'false,true,true': [0.003, 0, 4], 'false,true,false': [0.0, 2, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.407, 15, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [0.333, 0, 14], 'true,false': [0.0, 0, 0], 'false,true,true': [0.031, 0, 5], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.078, 0, 6], 'false,false,true,false': [0.675, 44, 1], 'false,false,false': [0.295, 20, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.313, 39, 14], 'false,true': [0.048, 0, 5], 'false,false,true': [0.515, 0, 12], 'false,false,false,true': [0.052, 16, 0], 'false,false,false,false': [0.039, 12, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.626, 0, 25], 'true,false': [0.75, 49, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.674, 11, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.053, 0, 14], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.844, 26, 4], 'false,false,true,false': [0.0, 6, 0], 'false,false,false,true': [0.968, 14, 9], 'false,false,false,false': [0.945, 10, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.222, 1, 14], 'false,true,true,true': [1.042, 1, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.078, 49, 0], 'false,false,true,true': [0.253, 0, 6], 'false,false,true,false': [2.63e-09, 5, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.026, 10, 3]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.347, 0, 14], 'true,true,false': [0.033, 0, 4], 'true,false,true': [0.004, 28, 0], 'true,false,false,true': [0.012, 3, 0], 'true,false,false,false': [0.381, 2, 2], 'false,true': [0.816, 1, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.143, 17, 9]}]
{'': [0.2185223725286156, 0.23222222222222175], 'false': [-1.6148698540002277e-16, 0.0], 'true': [0.08999999999999968, 0.045351473922902556], 'true,false': [2.3790493384824782e-17, 0.12244897959183677], 'true,false,false': [0.07638888888888894, 0.25], 'false,true': [-8.881784197001253e-17, 0.0]}
{'': [0.05942028578770947, 0.11749552026016015], 'false': [0.0644209844460139, 0.15935065451141542], 'false,false': [0.08999999999999994, 0.17224540170569094], 'false,false,false': [0.22222222222222224, 0.16094387416258282], 'false,false,true': [nan, 0.08999999999999994], 'false,true': [nan, 0.0644209844460139], 'false,true,false': [0.0644209844460139, nan]}
{'': [0.007056418321187545, 0.09919626479995312], 'false': [nan, 0.09919626479995353], 'false,false': [0.0011830646215453082, 0.07991282036637237], 'false,false,false': [0.07963993541517338, 0.0806578950192157], 'true': [0.0037228513001197946, 0.012134994351243508], 'true,false': [0.0, 0.0], 'true,true': [0.0037228513001197946, nan], 'false,false,true': [0.0018929033944724931, 0.0]}
{'': [0.11879181979852334, 0.11472798270779094], 'true': [0.01591322564501469, 0.00025828689736242806], 'false': [0.06873308568839508, 0.11448772596994933], 'false,false': [0.0, 0.10994749641761992], 'false,false,false': [nan, 0.1099474964176199], 'false,true': [9.41365918596948e-06, 0.0]}
{'': [0.00792268506609747, 0.07015393822990137], 'false': [0.0009447523329964754, 0.06708981564908922], 'false,false': [0.05747248483295614, 0.08708932175580737], 'false,false,true': [0.001014117493002879, 0.010110478154134066], 'true': [0.00792268506609747, nan], 'false,true': [0.00019272811924799793, 0.0]}
{'': [0.03254660558878758, 0.08247966590321267], 'false': [0.0004627174719022853, 0.08805147989518587], 'false,false': [0.02209375098056406, 0.00015179537233530566], 'true': [nan, 0.03254660558878758], 'true,false': [nan, 0.03254660558878758], 'false,false,false': [0.000168240389030282, 0.00012986345706645272]}
{'': [0.04814413759354317, 0.030309191933486454], 'true': [0.01568858147630694, 0.01103174508604033], 'false': [nan, 0.030309191933486457], 'false,false': [nan, 0.030309191933486454], 'false,false,false': [nan, 0.030309191933486454]}
{'': [0.00018963823939961434, 0.03760516989443422], 'false': [nan, 0.03760516989443416], 'false,false': [0.020467234002500705, 0.05098928605532349], 'false,false,false': [0.0407043767004311, 0.06871190581979238], 'false,false,true': [0.023749044776074157, -1.1564823173178713e-18], 'true': [0.00020071122061100986, 0.0], 'true,false': [0.0, nan]}
{'': [0.04946985811809161, 0.04009901142433182], 'false': [0.024344902067252663, 0.06860206400335392], 'false,false': [0.046142703541611256, 0.08093673208781765], 'false,false,false': [nan, 0.08093673208781765], 'false,false,true': [0.010675890537959495, 1.3877787807814458e-18], 'false,true': [0.12058247774821379, 0.00012355061612875974], 'false,true,true': [0.12058247774821379, nan]}
{'': [0.021300674980470037, 0.0743395081248193], 'false': [0.2222222222222222, 0.05022202214891853], 'false,false': [nan, 0.05022202214891853], 'true': [0.007069154089538769, 0.007151054838762511], 'true,false': [7.028386325386557e-07, 0.029007916208718176], 'true,false,false': [4.9195499027623185e-05, 0.036286316194168916], 'true,true': [0.008598529867290825, 0.00026869556261872526]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
7;false;follows(G, A), follows(A, G).;true;true
7;false,true;tweets(A, H).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 4.002
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7254245937825996;  // std dev = 0.086, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.7621891678716269;  // std dev = 0.081, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return -0.05197350368149175;  // std dev = 1.142, 23.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=2 */
%   | | | else return -0.14638552851938297;  // std dev = 0.144, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.18179828901318912;  // std dev = 1.906, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
%   | | | else return -0.03921512584355492;  // std dev = 0.824, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5522416119648319;  // std dev = 0.012, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(E, A) )
%   | | then return 0.6636632321472102;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6255083634779771;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5932041418181396;  // std dev = 0.096, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.553896404326439;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.3965093507076201;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.12016454412189644;  // std dev = 0.076, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.13323996786767348;  // std dev = 1.668, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return 0.050230291014942884;  // std dev = 1.247, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.33431118603674553;  // std dev = 0.965, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.18406590457612515;  // std dev = 0.843, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.5849621745864507;  // std dev = 0.106, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(G, A) )
%   | | then return -0.10972471246365366;  // std dev = 0.014, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return -0.15930171596022327;  // std dev = 0.011, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( follows(H, A), tweets(H, I) )
%   | then if ( follows(J, H), recursion_accounttype(J, B) )
%   | | then return 0.41672583742603436;  // std dev = 0.000348, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.09899859690251318;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | then return 0.4069043182006583;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.0938594141957166;  // std dev = 0.377, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.16876844333309685;  // std dev = 0.910, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.3293682206562267;  // std dev = 0.018, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.3981309072151356;  // std dev = 0.180, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.29577796032051246;  // std dev = 0.039, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.38657316544189113;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5080034948735176;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.0969697723141331;  // std dev = 0.629, 40.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=1 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.030379892268170002;  // std dev = 1.215, 14.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=3 */
%   | | | else return -0.046216401927283435;  // std dev = 0.648, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(D, A) )
%   | | then return 0.288676889910652;  // std dev = 0.036, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.26505813928750366;  // std dev = 0.050, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, F) )
%   | | then return -0.050461837218693614;  // std dev = 0.123, 32.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=3 */
%   | | else return -0.09304413465089587;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2538256868508936;  // std dev = 0.059, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.39104841947998537;  // std dev = 0.202, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.62592850933968;  // std dev = 0.057, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.14288179397219408;  // std dev = 0.065, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.12977029595251338;  // std dev = 0.084, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then return 0.06846050546710658;  // std dev = 0.903, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then return 0.24285391016193977;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2060074155102082;  // std dev = 0.015, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(G, A) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then return 0.2965561265936484;  // std dev = 0.188, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(I, G) )
%   | | | then return -0.08435481553445803;  // std dev = 0.597, 56.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=1 */
%   | | | else return -0.2457270906641288;  // std dev = 0.459, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(K, J), recursion_accounttype(K, B) )
%   | | | then return 0.354898267975014;  // std dev = 0.329, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.12924577712013316;  // std dev = 0.055, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else return -0.04629411851394429;  // std dev = 0.177, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.2146471866860684;  // std dev = 0.042, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.1798678779006809;  // std dev = 0.826, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.18118968780621186;  // std dev = 0.021, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.20669022493883815;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), follows(A, G) )
%   | then if ( tweets(A, H) )
%   | | then return -0.03639922650613676;  // std dev = 0.113, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | | else return -0.07911601136476644;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.23831226740682174;  // std dev = 0.169, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.016422669779141766;  // std dev = 1.026, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | | else return -0.061651471030545565;  // std dev = 0.617, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then return 0.18431452037050833;  // std dev = 0.029, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.21664284599467373;  // std dev = 0.129, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.14969679883005887;  // std dev = 0.027, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.24881270316303075;  // std dev = 0.164, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1682123718519197;  // std dev = 0.029, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.0747277624649971;  // std dev = 0.020, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( tweets(A, J) )
%   | | then if ( recursion_accounttype(K, B) )
%   | | | then return 0.28378315351287126;  // std dev = 0.211, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.10313058240355662;  // std dev = 0.012, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.029688052667741716;  // std dev = 0.242, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16584567844196463;  // std dev = 0.048, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.14600034875647866;  // std dev = 0.026, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.07081339714777093;  // std dev = 0.007, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.062102955791600724;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.014483948870569016;  // std dev = 0.379, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(G, H) )
%   | | | then return 0.16087658423699255;  // std dev = 0.068, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.3654502519994103;  // std dev = 0.090, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.11229681640656267;  // std dev = 0.021, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.0068429606925384055;  // std dev = 0.432, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.119', 'seconds']
Refined model CLL: -0.105285


******************************************
Best model found
******************************************
Results 

CLL : -0.10451 

AUC ROC : 0.991483 

AUC PR : 0.306793 

Precision : 0.344262 

Recall : 1.0 

F1 : 0.512195 

Total Learning Time : 4.002 

Total Inference Time : 4.337814807891846 

Total revision time: 13.149946046829225
Best scored revision CLL: -0.105285


Results 

CLL : -0.10451 

AUC ROC : 0.991483 

AUC PR : 0.306793 

Precision : 0.344262 

Recall : 1.0 

F1 : 0.512195 

Total Learning Time : 13.176813674926759 

Total Inference Time : 4.337814807891846 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.92
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995116;  // std dev = 2.46e-07, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.50e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.06492798797741087;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.7993254056877476;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.14185106490048768;  // std dev = 6.45e-09, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7232611099571609;  // std dev = 0.123, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.05359511985333869;  // std dev = 2.155, 78.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06746302149180951;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.3978578579130931;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.12654330052843077;  // std dev = 3.128, 64.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=19 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.569711917296447;  // std dev = 0.237, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.8735138323524658;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6463004664144547;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5885124139093055;  // std dev = 0.152, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5544309282104058;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.026036346099837276;  // std dev = 2.851, 106.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=13 */
%   | | | else return 0.10772453152833346;  // std dev = 2.340, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5326304866861528;  // std dev = 0.917, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else return -0.12441312078198838;  // std dev = 0.114, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.41403780765053755;  // std dev = 0.002, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.13255737922674804;  // std dev = 0.003, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.4085597583476378;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14247094156603554;  // std dev = 2.216, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.24359912668941028;  // std dev = 1.486, 29.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.2999802968430368;  // std dev = 0.040, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.4619355558876458;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6069594184751274;  // std dev = 0.043, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09135414276693132;  // std dev = 0.982, 73.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=2 */
%   | | else return 0.07036898974339724;  // std dev = 0.346, 48.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.006303126343386675;  // std dev = 1.990, 102.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=29 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25191471796475945;  // std dev = 0.109, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4790854708116529;  // std dev = 1.364, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.14127244734301997;  // std dev = 0.200, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return -0.1280992738544499;  // std dev = 0.123, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3070080727588545;  // std dev = 1.178, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else return -0.0826594873845151;  // std dev = 1.216, 122.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.008536817408855394;  // std dev = 1.374, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1639085058199073;  // std dev = 0.991, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.23623893076789126;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.040324708358905455;  // std dev = 1.173, 66.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=7 */
%   | | | else return -0.11647258439263385;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.012902275902389798;  // std dev = 1.381, 57.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=11 */
%   | | | else return 0.017828227799458474;  // std dev = 1.884, 37.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1669559561056255;  // std dev = 0.170, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.23731499814133414;  // std dev = 0.447, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09176623397297116;  // std dev = 0.085, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3732375342278441;  // std dev = 0.312, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.09536413873996771;  // std dev = 0.045, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10342800599627305;  // std dev = 1.574, 26.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19131371803679104;  // std dev = 0.448, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return 0.1397135723564785;  // std dev = 0.032, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.0832494689539769;  // std dev = 0.054, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09152423771060939;  // std dev = 0.017, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.0248111985342664;  // std dev = 0.538, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.14680780363910317;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03826345130870969;  // std dev = 1.932, 55.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=19 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.676', 'seconds']
Parameter learned model CLL:-0.120575 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [2.46e-07, 0, 39], 'true,false,true': [6.5e-08, 64, 0], 'true,false,false,true': [0.961, 12, 1], 'true,false,false,false': [0.866, 3, 1], 'false,true,true': [0.97, 1, 16], 'false,true,false': [0.0, 0, 5], 'false,false': [6.45e-09, 39, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.123, 0, 33], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.155, 71, 7], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.966, 14, 1], 'false,false,false,true': [0.816, 1, 2], 'false,false,false,false': [3.128, 45, 19]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.237, 0, 23], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.152, 0, 5], 'false,false,true,false': [0.0, 0, 7], 'false,false,false,true': [2.851, 93, 13], 'false,false,false,false': [2.34, 27, 11]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [0.917, 0, 42], 'true,false': [0.114, 87, 0], 'false,true,true': [0.002, 0, 8], 'false,true,false': [0.003, 7, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.216, 20, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.486, 3, 26], 'true,false': [0.0, 0, 0], 'false,true,true': [0.04, 0, 11], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.043, 0, 9], 'false,false,true,false': [0.982, 71, 2], 'false,false,false': [0.346, 35, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.99, 73, 29], 'false,true': [0.109, 0, 11], 'false,false,true': [1.364, 2, 22], 'false,false,false,true': [0.2, 35, 0], 'false,false,false,false': [0.123, 28, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.178, 1, 45], 'true,false': [1.216, 117, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.374, 27, 12]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.991, 1, 32], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.173, 59, 7], 'false,false,true,false': [0.0, 8, 0], 'false,false,false,true': [1.381, 46, 11], 'false,false,false,false': [1.884, 26, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.17, 1, 26], 'false,true,true,true': [0.447, 0, 17], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.085, 86, 0], 'false,false,true,true': [0.312, 0, 8], 'false,false,true,false': [0.045, 27, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.574, 15, 11]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.448, 0, 30], 'true,true,false': [0.032, 0, 9], 'true,false,true': [0.054, 63, 0], 'true,false,false,true': [0.017, 4, 0], 'true,false,false,false': [0.538, 10, 2], 'false,true': [0.0, 0, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.932, 36, 19]}]
{'': [0.22493055555555677, 0.22574576726686382], 'false': [0.04338842975206614, 4.2700885562506023e-17], 'true': [1.548618783066885e-15, 0.02408169486358791], 'false,true': [0.055363321799307655, 0.0], 'true,false': [6.591949208711867e-17, 0.10380622837370246], 'true,false,false': [0.07100591715976336, 0.18750000000000003]}
{'': [0.00045909293493109817, 0.1106965554244], 'false': [0.05952106216910184, 0.14772754509083844], 'false,false': [0.06222222222222219, 0.15909617877779475], 'false,false,false': [0.22222222222222224, 0.15284110419064373], 'false,false,true': [nan, 0.06222222222222219], 'false,true': [nan, 0.05952106216910184], 'false,true,false': [0.05952106216910184, nan]}
{'': [0.0058610627974126, 0.1128013247336689], 'false': [nan, 0.11280132473366908], 'false,false': [0.002218233392688451, 0.09794776179919878], 'false,false,false': [0.07669697370174404, 0.144055796294332], 'true': [0.0024518405882004665, 0.011472425257973281], 'true,false': [0.0, 0.0], 'true,true': [0.0024518405882004665, nan], 'false,false,true': [0.004646190669777272, -6.344131569286608e-17]}
{'': [0.10141222485412521, 0.12973627393463597], 'false': [0.07436409240583912, 0.15567066117323727], 'false,false': [0.0, 0.15847969357912473], 'false,false,false': [nan, 0.15847969357912473], 'true': [0.02002066676022054, 0.00014916095191392766], 'false,true': [2.580396182921829e-06, 6.651790443990399e-06]}
{'': [0.07618694493028949, 0.08337117702773905], 'false': [0.0021350387222320855, 0.08342701776072238], 'false,false': [0.05943377065890564, 0.11984970286925573], 'true': [0.07618694493028949, nan], 'false,false,true': [0.00020725684596407175, 0.013214005374204665], 'false,true': [0.00014334099050873248, 0.0]}
{'': [0.0388297790191437, 0.09138485439672775], 'false': [0.0010819295580142274, 0.09747722289423773], 'false,false': [0.07750422924954936, 0.0009165613226115856], 'true': [nan, 0.03882977901914377], 'true,false': [nan, 0.0388297790191437], 'false,false,false': [0.0011387659556684891, 0.0005423985869793198]}
{'': [0.04724736147569566, 0.04844225249148669], 'false': [nan, 0.04844225249148669], 'false,false': [nan, 0.04844225249148669], 'false,false,false': [nan, 0.04844225249148669], 'true': [0.03015196014009205, 0.012117709359923226]}
{'': [0.0290061095037094, 0.04162481661649971], 'false': [nan, 0.04162481661649963], 'false,false': [0.01916707967297458, 0.058299969614850226], 'false,false,false': [0.03347136189745801, 0.09597680019959813], 'true': [0.029731209272704034, 0.0], 'false,false,true': [0.02086349729817777, -6.938893903907228e-18], 'true,false': [0.0, nan]}
{'': [0.028984209354075113, 0.03718707666712572], 'false': [0.016930981995437227, 0.06649596327181678], 'false,false': [0.041555933624441765, 0.09524607580363062], 'false,false,false': [nan, 0.09524607580363062], 'false,false,true': [0.01215333876176658, 7.637863329992627e-05], 'false,true': [0.011737876834290577, 8.368356699943554e-05], 'false,true,true': [0.011737876834290577, nan]}
{'': [0.018946683392915883, 0.06591376747627603], 'false': [0.0, 0.06789723257540997], 'false,false': [nan, 0.06789723257540994], 'true': [0.005646306048163774, 0.004156395019949239], 'true,true': [0.006692672425065497, 0.00011028348344306759], 'true,false': [4.699933375051747e-05, 0.018946436677274435], 'true,false,false': [7.435443077250317e-05, 0.02412447336040567]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
7;false;follows(G, A), follows(A, G).;true;true
7;false,true;tweets(A, H).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 5.936
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.99e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else return -0.07733493586822972;  // std dev = 0.246, 31.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=2 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(H, I), follows(A, I) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7317198231520298;  // std dev = 0.159, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   else if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.608523059139151;  // std dev = 0.914, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.7336614886487065;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12658402635166977;  // std dev = 0.022, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.09774126166690777;  // std dev = 2.712, 53.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=14 */
%   | | | else return 0.2733268642218787;  // std dev = 1.449, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.561767735813557;  // std dev = 0.147, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(E, A) )
%   | | then return 0.7805392929610118;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5825689108912737;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.6163080344405042;  // std dev = 0.164, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.5822476537938901;  // std dev = 0.052, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5694526052707138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.11420462421805687;  // std dev = 0.027, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09919959155848242;  // std dev = 2.349, 39.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=11 */
%   | | | else return 0.2471628236664632;  // std dev = 1.753, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.43301391952751317;  // std dev = 0.243, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.25872267678191935;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.6175779021001486;  // std dev = 0.086, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.1172529570081532;  // std dev = 0.228, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   else if ( follows(H, A), tweets(H, I) )
%   | then if ( follows(J, H), recursion_accounttype(J, B) )
%   | | then return 0.42711641866616534;  // std dev = 0.069, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10373128764873688;  // std dev = 0.009, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | then return 0.4610349699386864;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, L) )
%   | | | then return 0.1365810798230258;  // std dev = 1.882, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | | | else return -0.026976089160728904;  // std dev = 1.297, 15.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=3 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.31368140830109376;  // std dev = 0.003, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return 0.38860811926943734;  // std dev = 0.186, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3501645650115987;  // std dev = 0.069, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.47794661170392283;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4178878715136024;  // std dev = 0.306, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.08655526090461127;  // std dev = 0.848, 84.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=2 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.09620549766946976;  // std dev = 0.028, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return 0.15899300039864778;  // std dev = 2.198, 31.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.2501516069468355;  // std dev = 0.004, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 3.2948267927021546E-4;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.2667362389742772;  // std dev = 0.103, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.08421196410420598;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else return -0.08451101118415405;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2858262412994771;  // std dev = 0.029, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.4101253323749854;  // std dev = 0.314, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.6076682010795483;  // std dev = 0.035, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.13787007819657274;  // std dev = 0.045, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then if ( tweets(A, E), tweets(C, E) )
%   | | then if ( tweets(D, E), recursion_accounttype(D, B) )
%   | | | then return 0.2061184232258281;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1277462304198584;  // std dev = 1.154, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.2066554799270039;  // std dev = 0.001, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.23545521167144193;  // std dev = 0.024, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.23122744678005935;  // std dev = 0.047, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.07808489973096265;  // std dev = 0.002, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.17431525384105015;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0016693036437204758;  // std dev = 1.193, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | | else return 0.07253098137207022;  // std dev = 1.640, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18804102476445847;  // std dev = 0.108, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return 0.25208954651710047;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), follows(A, E) )
%   | then if ( tweets(A, F) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.32878178830302796;  // std dev = 1.033, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.051133320213642024;  // std dev = 0.501, 55.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=5 */
%   | | else return -0.07275147723824428;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), follows(J, H) )
%   | | | then return 0.04248508748505966;  // std dev = 0.283, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.07277659014231294;  // std dev = 0.001, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( tweets(A, K), follows(A, L) )
%   | | | then return 0.0902233536629132;  // std dev = 0.908, 17.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=8 */
%   | | | else return 0.0342685997582292;  // std dev = 1.775, 36.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.15803175075665504;  // std dev = 0.074, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.18415150987019968;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.17943365610130105;  // std dev = 0.000709, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2381324358746612;  // std dev = 0.125, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then return -0.03373250648906856;  // std dev = 0.084, 114.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=17 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.3413394424611672;  // std dev = 0.094, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.12801315889039283;  // std dev = 0.088, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.03144802413406158;  // std dev = 1.321, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
%   | | | else return 0.07262745876318315;  // std dev = 0.950, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.06837193836205063;  // std dev = 1.324, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return 0.19474147017367877;  // std dev = 0.085, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.1664492467071681;  // std dev = 0.027, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06141379856417369;  // std dev = 0.042, 92.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.13948274155761708;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3600888379352438;  // std dev = 0.291, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.1443325764198304;  // std dev = 0.232, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.0913396556990892;  // std dev = 0.610, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.018890533130552556;  // std dev = 0.990, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '23.070', 'seconds']
Refined model CLL: -0.115732


******************************************
Best model found
******************************************
Results 

CLL : -0.108653 

AUC ROC : 0.994353 

AUC PR : 0.496071 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 5.936 

Total Inference Time : 10.941252946853638 

Total revision time: 24.694022232055666
Best scored revision CLL: -0.115732


Results 

CLL : -0.108653 

AUC ROC : 0.994353 

AUC PR : 0.496071 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 24.7208898601532 

Total Inference Time : 10.941252946853638 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.251
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8268989350995126;  // std dev = 1.392, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.74e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.07935106490048778;  // std dev = 1.369, 32.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=2 */
%   | | | else return 0.024815601766178873;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.14185106490048766;  // std dev = 8.12e-09, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7093100805819701;  // std dev = 1.001, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.04806447374378489;  // std dev = 2.566, 110.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04314466048951065;  // std dev = 1.575, 32.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=3 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.5528067455442879;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.08309522038680446;  // std dev = 3.518, 93.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=23 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5749919480732428;  // std dev = 0.233, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7189922256988456;  // std dev = 0.217, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5960526174841312;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5952752308713326;  // std dev = 0.163, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.565567970308191;  // std dev = 4.21e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02227742306059249;  // std dev = 3.398, 147.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=18 */
%   | | | else return 0.03343539426881819;  // std dev = 2.905, 76.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5052710100585959;  // std dev = 1.584, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | else return -0.12280524193740258;  // std dev = 0.077, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4510416935034265;  // std dev = 0.088, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.12447374557782935;  // std dev = 0.002, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.41787952699378483;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11673427326030424;  // std dev = 2.637, 48.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.30618896138318813;  // std dev = 1.101, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3091830244545509;  // std dev = 0.024, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.49133288742161296;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5366779298111491;  // std dev = 0.985, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.09224297512617574;  // std dev = 1.341, 132.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=3 */
%   | | else return 0.05129974333579929;  // std dev = 0.333, 78.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.024609347245614015;  // std dev = 2.351, 146.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=45 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2533420471968739;  // std dev = 0.126, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4356236485000113;  // std dev = 2.228, 35.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=31 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12666756736287357;  // std dev = 0.154, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return -0.1221838932492152;  // std dev = 0.075, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3097553009430614;  // std dev = 1.410, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else return -0.08437927884525062;  // std dev = 1.527, 160.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.014028170301833034;  // std dev = 1.731, 61.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=18 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1905931756968127;  // std dev = 0.093, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.25178738543844337;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.0475941683830437;  // std dev = 1.408, 99.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=9 */
%   | | | else return -0.06694144116918113;  // std dev = 0.626, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.015509306219504453;  // std dev = 2.049, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
%   | | | else return 0.07486334593656815;  // std dev = 1.977, 45.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15475249124877014;  // std dev = 0.165, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.24456864832041386;  // std dev = 1.402, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09535990127591493;  // std dev = 0.117, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.38511030046523737;  // std dev = 0.322, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09236053715733078;  // std dev = 0.041, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.047110466806721756;  // std dev = 1.981, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.12947190909271508;  // std dev = 1.799, 51.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=48 */
%   | | else return 0.09201129055440296;  // std dev = 1.051, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else if ( follows(A, C) )
%   | | then return -0.08257007236876063;  // std dev = 0.045, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09862886581148791;  // std dev = 0.021, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return 0.010757819854806602;  // std dev = 0.936, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.024395859310800794;  // std dev = 0.886, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03051603191701182;  // std dev = 2.216, 81.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=23 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.684', 'seconds']
Parameter learned model CLL:-0.116759 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.392, 2, 62], 'true,false,true': [7.74e-08, 82, 0], 'true,false,false,true': [1.369, 30, 2], 'true,false,false,false': [0.913, 5, 1], 'false,true,true': [5.96e-08, 0, 22], 'false,true,false': [0.0, 0, 6], 'false,false': [8.12e-09, 61, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.001, 1, 52], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.566, 100, 10], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.575, 29, 3], 'false,false,false,true': [0.913, 1, 5], 'false,false,false,false': [3.518, 70, 23]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.233, 0, 36], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.217, 0, 2], 'true,false,false': [0.0, 0, 5], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.163, 0, 6], 'false,false,true,false': [4.21e-08, 0, 11], 'false,false,false,true': [3.398, 129, 18], 'false,false,false,false': [2.905, 61, 15]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.584, 1, 66], 'true,false': [0.077, 144, 0], 'false,true,true': [0.088, 0, 11], 'false,true,false': [0.002, 24, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.637, 33, 15]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.101, 1, 43], 'true,false': [0.0, 0, 0], 'false,true,true': [0.024, 0, 16], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.985, 1, 12], 'false,false,true,false': [1.341, 129, 3], 'false,false,false': [0.333, 60, 18]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.351, 101, 45], 'false,true': [0.126, 0, 17], 'false,false,true': [2.228, 4, 31], 'false,false,false,true': [0.154, 39, 0], 'false,false,false,false': [0.075, 30, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.41, 1, 69], 'true,false': [1.527, 154, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.731, 43, 18]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.093, 0, 51], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.408, 90, 9], 'false,false,true,false': [0.626, 14, 1], 'false,false,false,true': [2.049, 59, 16], 'false,false,false,false': [1.977, 30, 15]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.165, 1, 43], 'false,true,true,true': [1.402, 1, 27], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.117, 128, 0], 'false,false,true,true': [0.322, 0, 9], 'false,false,true,false': [0.041, 29, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.981, 32, 14]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.799, 3, 48], 'true,true,false': [1.051, 1, 14], 'true,false,true': [0.045, 95, 0], 'true,false,false,true': [0.021, 20, 0], 'true,false,false,false': [0.936, 14, 3], 'false,true': [0.886, 1, 5], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.216, 58, 23]}]
{'': [0.22846762759924397, 0.21562933972983336], 'true': [0.030273437499999334, 0.024374999999999918], 'false': [1.0150610510858574e-15, 6.188128333976282e-17], 'true,false': [7.311224796312007e-17, 0.07271468144044306], 'true,false,false': [0.05859375000000002, 0.13888888888888892], 'false,true': [1.6148698540002277e-16, -1.4802973661668753e-16]}
{'': [0.01891383089528269, 0.10367886064527122], 'false': [0.05987689902092889, 0.13368386171912597], 'false,false': [0.0775380411472657, 0.1459854513664221], 'false,false,false': [0.13888888888888892, 0.13307184459989188], 'false,false,true': [nan, 0.0775380411472657], 'false,true': [nan, 0.05987689902092889], 'false,true,false': [0.05987689902092889, nan]}
{'': [0.003291234400027569, 0.10615224212851919], 'false': [nan, 0.10615224212851913], 'false,false': [0.0017589352462833113, 0.09033609743781844], 'false,false,false': [0.0785682529409221, 0.11105150565068331], 'true': [0.0015097930675756427, 0.009809949034088763], 'true,false': [0.023539002142176746, 0.0], 'false,false,true': [0.004412606650832096, 1.6148698540002277e-16], 'true,true': [0.0015097930675756427, nan]}
{'': [0.09740361176739806, 0.11564819628216483], 'false': [0.07380595442517969, 0.14369415109613592], 'false,false': [0.0, 0.14483699426751898], 'false,false,false': [nan, 0.14483699426751898], 'true': [0.03744126088049755, 4.140972829234461e-05], 'false,true': [0.0077068163760569885, 4.30050255735559e-06]}
{'': [0.027528058397358543, 0.07583101478915064], 'false': [0.001870978419789553, 0.07397504516702393], 'false,false': [0.05136700875629946, 0.11106351251301244], 'false,false,true': [0.0745673543778344, 0.013619784435219108], 'true': [0.027528058397358543, nan], 'false,true': [3.6233831089985125e-05, 0.0]}
{'': [0.03786636137138702, 0.10599109136826187], 'false': [0.0009383430844681563, 0.11811880531462839], 'false,false': [0.141814157499075, 0.00043209349958045566], 'true': [nan, 0.037866361371387026], 'true,false': [nan, 0.03786636137138702], 'false,false,false': [0.0006101166337138459, 0.00018930067145716729]}
{'': [0.051679929265106006, 0.04913636518959576], 'true': [0.028420807949255902, 0.014577774454079154], 'false': [nan, 0.04913636518959581], 'false,false': [nan, 0.04913636518959576], 'false,false,false': [nan, 0.04913636518959576]}
{'': [0.0002371132189566459, 0.04697243939906456], 'false': [nan, 0.046972439399064654], 'false,false': [0.020860938486904162, 0.06949104218723495], 'false,false,false': [0.05598614968871592, 0.08689468619035644], 'false,false,true': [0.02001602296495402, 0.026112316199654175], 'true': [0.00016974843418466977, 0.0], 'true,false': [0.0, nan]}
{'': [0.02708881677356784, 0.04377930216359641], 'false': [0.02970664274908774, 0.06677267048918688], 'false,false': [0.04397205643737813, 0.08529300788222084], 'false,false,false': [nan, 0.08529300788222084], 'false,false,true': [0.011488734053135477, 5.820312688068887e-05], 'false,true': [0.07021029523564659, 0.0001064705159953671], 'false,true,true': [0.07021029523564659, nan]}
{'': [0.03552237690878323, 0.06568801529537192], 'false': [0.13086083708512083, 0.06065244605283179], 'false,false': [nan, 0.06065244605283162], 'true': [0.06605005613024453, 0.007720723083295758], 'true,true': [0.06348637839407803, 0.07368219384222703], 'true,false': [2.0891318195588666e-05, 0.026648777298651276], 'true,false,false': [2.2760987677324095e-05, 0.05150569318062493]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 7.794
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.8278459047964812;  // std dev = 0.985, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.16e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
%   | | else return -0.05613677918620208;  // std dev = 0.280, 35.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=3 */
%   else if ( recursion_accounttype(F, B) )
%   | then if ( follows(F, G), follows(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.14185106490048766;  // std dev = 6.14e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7278756789352635;  // std dev = 0.148, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return -0.1279082021681516;  // std dev = 0.035, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.6757507683790553;  // std dev = 0.977, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.12821873540005413;  // std dev = 0.031, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7294362599990306;  // std dev = 0.054, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.12544463852839147;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.20076919849871236;  // std dev = 2.104, 26.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
%   | | | else return 0.07572632593335761;  // std dev = 1.649, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5651580987444585;  // std dev = 0.076, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return 0.6351700796101297;  // std dev = 0.067, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5869952025002889;  // std dev = 0.185, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.5532906732886848;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2199573399553513;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5860234759391314;  // std dev = 0.189, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.11411312417885443;  // std dev = 0.043, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.03735841567935462;  // std dev = 1.757, 40.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=9 */
%   | | | else return 0.14682208591496523;  // std dev = 2.507, 40.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=14 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.4334237034317868;  // std dev = 0.217, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.23632545689783652;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.46593533152678995;  // std dev = 0.072, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.10617896155453979;  // std dev = 0.076, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | then return 0.43467222921463927;  // std dev = 0.030, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.10246841393627638;  // std dev = 0.013, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.40781152946023014;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.13283539609775205;  // std dev = 2.116, 30.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=11 */
%   | | | else return 0.14782606318798852;  // std dev = 1.315, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.3220833691876625;  // std dev = 0.041, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.19478250120486487;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.09452949283219708;  // std dev = 0.656, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.41636957829347504;  // std dev = 0.074, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.32960503382232187;  // std dev = 0.055, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), follows(H, A) )
%   | | | then return -0.09361101945159504;  // std dev = 0.027, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | | else return -0.00260496713430169;  // std dev = 1.224, 47.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=10 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.011050846772960397;  // std dev = 1.247, 32.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
%   | | | else return 0.03846682864370587;  // std dev = 2.649, 58.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2652616733718866;  // std dev = 0.021, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.30405612684586963;  // std dev = 0.072, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08706706694933365;  // std dev = 0.033, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | | else return -0.06994423919169256;  // std dev = 0.087, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( tweets(A, H) )
%   | | then return 0.25617456245211406;  // std dev = 0.050, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.2935452043302054;  // std dev = 0.056, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.18456627818629429;  // std dev = 0.983, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5300343254535858;  // std dev = 0.499, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.13052442842796805;  // std dev = 0.041, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then return 0.21008208620274293;  // std dev = 0.099, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | else return 0.25251221104525035;  // std dev = 0.144, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.07907630384776884;  // std dev = 0.012, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.2104083556064951;  // std dev = 0.981, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return -0.08624032806315873;  // std dev = 0.025, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.15133040603958267;  // std dev = 1.336, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return -0.09516594407048934;  // std dev = 0.004, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.025161363287200575;  // std dev = 1.678, 32.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
%   | | | else return 0.061105509240212456;  // std dev = 1.206, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.1798000853777861;  // std dev = 0.023, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.07306965584332636;  // std dev = 0.011, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | | else return -0.11406908841174747;  // std dev = 0.416, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.241659821193768;  // std dev = 0.178, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.0793614108839539;  // std dev = 0.010, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2564493125142153;  // std dev = 0.079, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.08718926897482598;  // std dev = 0.003, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.04911922361901871;  // std dev = 1.616, 28.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
%   | | | else return -0.0036563382591328214;  // std dev = 1.265, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.16020387469451836;  // std dev = 0.024, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else return 0.07791847326945932;  // std dev = 0.794, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.15582780238924185;  // std dev = 0.143, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.19251119361793126;  // std dev = 0.134, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.07035848072045249;  // std dev = 0.041, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.22342796824824854;  // std dev = 0.006, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.0809549653528973;  // std dev = 0.005, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.06288129001755602;  // std dev = 1.595, 26.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=10 */
%   | | | else return 0.03394953296488618;  // std dev = 1.088, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.11954049382869501;  // std dev = 0.136, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.12577558096778557;  // std dev = 0.002, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.17985366132511946;  // std dev = 0.849, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.0595442998559464;  // std dev = 0.045, 147.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=3 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.06438217568433806;  // std dev = 0.798, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.3378522736856327;  // std dev = 0.518, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12092563884270033;  // std dev = 0.057, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else if ( tweets(A, I) )
%   | | then return -0.01861492796134453;  // std dev = 0.108, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else return -0.03510780614870232;  // std dev = 0.265, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.297', 'seconds']
Refined model CLL: -0.104067


******************************************
Best model found
******************************************
Results 

CLL : -0.098219 

AUC ROC : 0.994212 

AUC PR : 0.418546 

Precision : 0.345205 

Recall : 1.0 

F1 : 0.513238 

Total Learning Time : 7.794 

Total Inference Time : 13.045002698898315 

Total revision time: 31.659340305328367
Best scored revision CLL: -0.104067


Results 

CLL : -0.098219 

AUC ROC : 0.994212 

AUC PR : 0.418546 

Precision : 0.345205 

Recall : 1.0 

F1 : 0.513238 

Total Learning Time : 31.6862079334259 

Total Inference Time : 13.045002698898315 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.934
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8343394112899883;  // std dev = 1.397, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 5.16e-08, 118.000 (wgt'ed) examples reached here.  /* #neg=118 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.10263537862597792;  // std dev = 1.386, 51.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=2 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.7936328060672536;  // std dev = 1.368, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.14185106490048766;  // std dev = 8.12e-09, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7241131194726749;  // std dev = 0.007, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.033086121659824434;  // std dev = 3.107, 138.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05267362166453268;  // std dev = 1.584, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.6073086016879355;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.13440479959346716;  // std dev = 4.005, 99.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=31 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5384645041934609;  // std dev = 1.334, 53.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=51 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.6634465950288922;  // std dev = 0.260, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5984614557842621;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5591158762449222;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5600949634232181;  // std dev = 5.16e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.019501811158728736;  // std dev = 4.063, 200.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=26 */
%   | | | else return 0.03608627497565444;  // std dev = 3.168, 89.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=18 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5224797788792739;  // std dev = 1.329, 92.000 (wgt'ed) examples reached here.  /* #pos=92 */
%   | else return -0.12826295760103895;  // std dev = 0.370, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.44837129410197374;  // std dev = 0.079, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.1264659148488777;  // std dev = 0.001, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.42126845972962224;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.14034324810096102;  // std dev = 2.842, 52.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=18 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.30043362368301835;  // std dev = 1.385, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | else return 0.2752417340593888;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.30434179462358374;  // std dev = 0.029, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.2965339901713915;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.608019612144489;  // std dev = 0.064, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.09771747429646437;  // std dev = 1.367, 160.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=3 */
%   | | else return 0.01592842597765474;  // std dev = 0.309, 119.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=23 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04260113221450491;  // std dev = 2.711, 173.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=63 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2418070170353332;  // std dev = 0.037, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5425440634775978;  // std dev = 0.961, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13228281602160769;  // std dev = 0.286, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | | else return -0.12767886567097814;  // std dev = 0.194, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27515763016032446;  // std dev = 2.152, 98.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=95 */
%   | else return -0.09044832502838869;  // std dev = 1.500, 189.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=6 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.025671517187854116;  // std dev = 1.874, 71.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=23 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19316971303365588;  // std dev = 0.083, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.15209337454883354;  // std dev = 0.008, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.04110535491574377;  // std dev = 1.728, 117.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=14 */
%   | | | else return -0.10322539375805176;  // std dev = 0.847, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.014303811132825068;  // std dev = 2.079, 102.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=23 */
%   | | | else return 0.05146184811781953;  // std dev = 2.152, 58.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=18 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16320249126076916;  // std dev = 0.142, 62.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=61 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.2795098738087089;  // std dev = 0.876, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09419528200491437;  // std dev = 0.147, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2731170516844256;  // std dev = 1.113, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.09777673078894389;  // std dev = 0.058, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06250267277852084;  // std dev = 2.080, 50.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16199698848379676;  // std dev = 1.395, 68.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=66 */
%   | | else return 0.10743044797390844;  // std dev = 0.763, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else if ( follows(A, C) )
%   | | then return -0.08437740930238169;  // std dev = 0.038, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09182934820237568;  // std dev = 0.010, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return 0.0056759467619691;  // std dev = 0.950, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.12575917145242968;  // std dev = 0.035, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02303941132133844;  // std dev = 2.458, 106.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=31 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.331', 'seconds']
Parameter learned model CLL:-0.118869 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.397, 2, 82], 'true,false,true': [5.16e-08, 118, 0], 'true,false,false,true': [1.386, 49, 2], 'true,false,false,false': [0.0, 0, 2], 'false,true,true': [1.368, 2, 29], 'false,true,false': [0.0, 0, 9], 'false,false': [8.12e-09, 69, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.007, 0, 68], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.107, 123, 15], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.584, 34, 3], 'false,false,false,true': [0.935, 1, 7], 'false,false,false,false': [4.005, 68, 31]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.334, 2, 51], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.26, 0, 3], 'true,false,false': [0.0, 0, 7], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.005, 0, 6], 'false,false,true,false': [5.16e-08, 0, 13], 'false,false,false,true': [4.063, 174, 26], 'false,false,false,false': [3.168, 71, 18]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.329, 0, 92], 'true,false': [0.37, 184, 0], 'false,true,true': [0.079, 0, 13], 'false,true,false': [0.001, 22, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.842, 34, 18]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.385, 2, 60], 'true,false': [0.0, 0, 1], 'false,true,true': [0.029, 0, 18], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.064, 0, 18], 'false,false,true,false': [1.367, 157, 3], 'false,false,false': [0.309, 96, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.711, 110, 63], 'false,true': [0.037, 0, 20], 'false,false,true': [0.961, 0, 41], 'false,false,false,true': [0.286, 72, 0], 'false,false,false,false': [0.194, 56, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.152, 3, 95], 'true,false': [1.5, 183, 6], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.874, 48, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.083, 0, 66], 'true,false,true': [0.008, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.728, 103, 14], 'false,false,true,false': [0.847, 18, 1], 'false,false,false,true': [2.079, 79, 23], 'false,false,false,false': [2.152, 40, 18]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.142, 1, 61], 'false,true,true,true': [0.876, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.147, 180, 0], 'false,false,true,true': [1.113, 1, 14], 'false,false,true,false': [0.058, 37, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.08, 33, 17]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.395, 2, 66], 'true,true,false': [0.763, 1, 16], 'true,false,true': [0.038, 135, 0], 'true,false,false,true': [0.01, 21, 0], 'true,false,false,false': [0.95, 12, 4], 'false,true': [0.035, 0, 7], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.458, 75, 31]}]
{'': [0.22351403306420686, 0.22708526218331931], 'false': [0.04750000000000139, 6.75787928032704e-17], 'true': [0.023242630385487066, 0.022844635956362543], 'false,true': [0.06035379812695236, -2.9605947323337506e-16], 'true,false': [2.258080728051166e-17, 0.06977572089711626], 'true,false,false': [0.03767781622452899, 0.0]}
{'': [6.523298003207187e-07, 0.11910503467562834], 'false': [0.06994678423292232, 0.15582738560939408], 'false,false': [0.06781816463549, 0.17354747412723023], 'false,false,false': [0.10937499999999978, 0.16201253002007043], 'false,true': [nan, 0.06994678423292232], 'false,true,false': [0.06994678423292232, nan], 'false,false,true': [nan, 0.06781816463549]}
{'': [0.030306665889455808, 0.10510550012746085], 'false': [nan, 0.10510550012746091], 'false,false': [1.720721283775773e-06, 0.09251985041368344], 'false,false,false': [0.08255402587078192, 0.11277652899858268], 'true': [0.03357528232300676, 0.007666967131847446], 'true,true': [0.03357528232300676, nan], 'true,false': [0.022600409280307526, -1.2688263138573217e-16], 'false,false,true': [4.793058513641313e-06, 2.049642507000289e-16]}
{'': [0.10099879741421024, 0.1250788324614699], 'false': [0.07949467926562045, 0.15381585734014436], 'false,false': [0.0, 0.1552848173414288], 'false,false,false': [nan, 0.1552848173414288], 'true': [0.019193785346335476, 0.0007459337541848962], 'false,true': [0.006318630569227426, 1.025439203658748e-06]}
{'': [0.0304734635259683, 0.07344890660687967], 'false': [4.609385712682125e-05, 0.07224130757080655], 'false,false': [0.055798625589444664, 0.09576492746661716], 'false,false,true': [0.00022595478287307854, 0.01168444412705498], 'true': [0.030954897489450597, 0.0], 'false,true': [4.544611063228565e-05, 0.0]}
{'': [0.04247471681479714, 0.0840347417765843], 'false': [6.874801898204552e-05, 0.08935590035263302], 'false,false': [0.02252968755616267, 0.0009401573824727207], 'true': [nan, 0.04247471681479707], 'true,false': [nan, 0.04247471681479714], 'false,false,false': [0.0011383241988237344, 0.0006734485238932513]}
{'': [0.0540275188500223, 0.04946151388257798], 'true': [0.047238363718606735, 0.011905187301675113], 'false': [nan, 0.04946151388257795], 'false,false': [nan, 0.04946151388257798], 'false,false,false': [nan, 0.04946151388257798]}
{'': [0.00015146370896274998, 0.04437768058637627], 'false': [nan, 0.044377680586375916], 'false,false': [0.02768090976455294, 0.05695315407694067], 'false,false,false': [0.04236077395222193, 0.07985835044095567], 'false,false,true': [0.025511650546720794, 0.03771919138036493], 'true': [0.00010555990882745186, 2.864898844083183e-05], 'true,false': [2.864898844083183e-05, nan]}
{'': [0.020295536498722747, 0.03841538824816633], 'false': [0.02162234091721835, 0.06970864839191669], 'false,false': [0.052135838235566126, 0.08653657334599561], 'false,false,false': [nan, 0.08653657334599561], 'false,false,true': [0.08263125517676634, 9.14281336456426e-05], 'false,true': [0.023999085576699122, 0.00011972649833941812], 'false,true,true': [0.023999085576699122, nan]}
{'': [0.025484035529781044, 0.05408328500444284], 'false': [0.00017416047849588834, 0.056989698132841084], 'false,false': [nan, 0.05698969813284102], 'true': [0.03020807253180348, 0.005957256153040565], 'true,true': [0.02859765399985517, 0.034267740785022975], 'true,false': [1.0613462219323368e-05, 0.026708713615005288], 'true,false,false': [5.237192161180354e-06, 0.056361001191129724]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C), tweets(E, F).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 7.461
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048785;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.09423201728144012;  // std dev = 1.380, 42.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=2 */
%   | | | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995117;  // std dev = 1.79e-07, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return -0.14185106490048766;  // std dev = 6.66e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.6990652489456486;  // std dev = 0.141, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | else return 0.7298994364382694;  // std dev = 0.140, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.11426571919939317;  // std dev = 0.114, 112.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.6782691648783371;  // std dev = 1.008, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.12962289164730434;  // std dev = 0.109, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.12544463852839144;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.11034644539886768;  // std dev = 2.485, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | | | else return 0.05700900029456971;  // std dev = 1.909, 28.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.5456011274152481;  // std dev = 0.129, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | else return 0.4694909642790055;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.6045539562255645;  // std dev = 0.078, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5773478322105322;  // std dev = 0.126, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.48136185596542963;  // std dev = 0.258, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.10748808071453399;  // std dev = 0.866, 99.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=1 */
%   | | | else return 0.0014144289517965506;  // std dev = 2.220, 71.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.14665514002395985;  // std dev = 2.688, 53.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=19 */
%   | | | else return 0.24360238885238394;  // std dev = 1.956, 25.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=12 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.42987218592802706;  // std dev = 0.186, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.5734027089525833;  // std dev = 0.381, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.47765747163497385;  // std dev = 0.216, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.11252859956872527;  // std dev = 0.153, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else if ( follows(G, A), tweets(G, H) )
%   | then if ( follows(I, G), recursion_accounttype(I, B) )
%   | | then return 0.4513019180158334;  // std dev = 0.119, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.10836359265080446;  // std dev = 0.023, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.40965392768259756;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.09549805367047795;  // std dev = 2.336, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
%   | | | else return 0.24946087176000942;  // std dev = 1.517, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.3267228220843878;  // std dev = 0.040, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return 0.03520829035474843;  // std dev = 1.097, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.35332009633141626;  // std dev = 0.275, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.4446096450533581;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3328253836799321;  // std dev = 0.029, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.3841538246985565;  // std dev = 0.795, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.08987663013238065;  // std dev = 1.015, 143.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=3 */
%   | | else if ( follows(L, A) )
%   | | | then return -0.07575471066786643;  // std dev = 0.744, 47.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=2 */
%   | | | else return 0.12163265409122885;  // std dev = 2.790, 54.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.22170787382380824;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.1324221595380941;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.2824015594874163;  // std dev = 0.049, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.04773855662567161;  // std dev = 0.131, 129.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=12 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.27607910308855255;  // std dev = 0.051, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.19065719771235923;  // std dev = 0.257, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.30311407389812256;  // std dev = 0.803, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.6007036348033838;  // std dev = 0.167, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.1391484524376037;  // std dev = 0.048, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.22158845843775887;  // std dev = 0.135, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, D), follows(A, E) )
%   | | | then return -0.05609546337596057;  // std dev = 1.170, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.2747282466153173;  // std dev = 1.277, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else return -0.08493709875600536;  // std dev = 0.069, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.28964726053403755;  // std dev = 1.198, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return -0.13308744306107997;  // std dev = 0.243, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return -0.08617322654268794;  // std dev = 0.951, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.027011152734569138;  // std dev = 1.455, 27.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=10 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1688515857311179;  // std dev = 0.122, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | else return 0.2508558139473151;  // std dev = 0.018, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.3151905406014158;  // std dev = 0.341, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.08163900195644606;  // std dev = 0.690, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.07898161968447916;  // std dev = 0.081, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.28161962988114975;  // std dev = 0.584, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return -0.1208125202746842;  // std dev = 0.301, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.10481206041381064;  // std dev = 0.531, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.03259371034794544;  // std dev = 1.171, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.1577640822470983;  // std dev = 0.018, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.03904549772524002;  // std dev = 0.929, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.1673564513394953;  // std dev = 0.041, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.16785970610406767;  // std dev = 0.070, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(G, A) )
%   | then return -0.033787040203757494;  // std dev = 0.112, 215.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=32 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.20609328272389682;  // std dev = 0.203, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.07848978328616438;  // std dev = 0.089, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.007617533377075103;  // std dev = 1.287, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
%   | | | else return -0.035376381268282915;  // std dev = 1.324, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.12028462445330214;  // std dev = 1.010, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return 0.16675101539648407;  // std dev = 0.051, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.250989727864544;  // std dev = 0.072, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.06368856986049423;  // std dev = 0.053, 181.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.10610201647005521;  // std dev = 0.073, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.1565897886164838;  // std dev = 0.143, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.07002282299365259;  // std dev = 0.014, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.056196675078266575;  // std dev = 1.245, 29.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | | | else return 0.027224216205112974;  // std dev = 1.293, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '19.366', 'seconds']
Refined model CLL: -0.108332


******************************************
Best model found
******************************************
Results 

CLL : -0.104332 

AUC ROC : 0.993199 

AUC PR : 0.347326 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 7.461 

Total Inference Time : 17.17577290534973 

Total revision time: 38.71549441337586
Best scored revision CLL: -0.108332


Results 

CLL : -0.104332 

AUC ROC : 0.993199 

AUC PR : 0.347326 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 38.74236204147339 

Total Inference Time : 17.17577290534973 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.24
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048824;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.09929787341112603;  // std dev = 1.384, 47.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=2 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8068668838174602;  // std dev = 1.377, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048766;  // std dev = 8.33e-09, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7246389875467016;  // std dev = 0.082, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.03416345290336442;  // std dev = 3.500, 175.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.014347105775135437;  // std dev = 1.740, 32.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=4 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7297063270878138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1553085801431509;  // std dev = 4.434, 120.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.530573443643596;  // std dev = 1.667, 70.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.6881458708026159;  // std dev = 0.231, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4543673739883315;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5713331888780023;  // std dev = 0.069, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5587474024138126;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.008529931760175184;  // std dev = 4.571, 236.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=34 */
%   | | | else return 0.051115051408232595;  // std dev = 3.518, 103.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5152696293560903;  // std dev = 1.800, 116.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=115 */
%   | else return -0.1276098495675589;  // std dev = 0.239, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.460324244838056;  // std dev = 0.094, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.128134542209525;  // std dev = 0.002, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.4169629935169912;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13881376403805737;  // std dev = 3.145, 65.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.3072913194513094;  // std dev = 1.389, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.3423430609913901;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.30352925747101756;  // std dev = 0.024, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.3691052054356808;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6008460621413122;  // std dev = 0.096, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.10539020264218944;  // std dev = 1.375, 203.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=3 */
%   | | else return 0.009454798757894104;  // std dev = 0.305, 147.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=28 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.029249255168292174;  // std dev = 3.328, 236.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2456785164512983;  // std dev = 0.060, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5133689397632476;  // std dev = 1.440, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1398986931203025;  // std dev = 0.254, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | | else return -0.12621404023736393;  // std dev = 0.181, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2990283385778819;  // std dev = 1.623, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else return -0.09158346521335403;  // std dev = 1.631, 241.000 (wgt'ed) examples reached here.  /* #neg=234 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.030831762801585814;  // std dev = 2.110, 86.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17957538715439245;  // std dev = 0.999, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.1832842798776365;  // std dev = 0.010, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.0407084963243596;  // std dev = 1.954, 152.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=18 */
%   | | | else return -0.08628592050174448;  // std dev = 0.634, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01639819792740435;  // std dev = 2.302, 121.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=28 */
%   | | | else return 0.04695107578306148;  // std dev = 2.574, 73.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14229668962982056;  // std dev = 0.198, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.25896318368092025;  // std dev = 1.438, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09628941954736785;  // std dev = 0.223, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3205385961225665;  // std dev = 0.421, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.09744337739779518;  // std dev = 0.067, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.026000641938573994;  // std dev = 2.460, 72.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=21 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1890340164090501;  // std dev = 0.776, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else return 0.16444330875394728;  // std dev = 0.369, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08359246012213932;  // std dev = 0.048, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0948226513792451;  // std dev = 0.018, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.04103677590760475;  // std dev = 0.991, 31.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.03271828168124254;  // std dev = 0.860, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.017026572182451065;  // std dev = 2.737, 144.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.669', 'seconds']
Parameter learned model CLL:-0.117824 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 170, 0], 'true,false,false,true': [1.384, 45, 2], 'true,false,false,false': [0.816, 1, 2], 'false,true,true': [1.377, 2, 37], 'false,true,false': [0.0, 0, 11], 'false,false': [8.33e-09, 73, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.082, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.5, 156, 19], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.74, 28, 4], 'false,false,false,true': [0.0, 0, 8], 'false,false,false,false': [4.434, 80, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.667, 3, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.231, 0, 3], 'true,false,false': [0.943, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.069, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.571, 202, 34], 'false,false,false,false': [3.518, 80, 23]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.8, 1, 115], 'true,false': [0.239, 229, 0], 'false,true,true': [0.094, 0, 17], 'false,true,false': [0.002, 26, 0], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [3.145, 42, 23]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.389, 2, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.024, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.096, 0, 26], 'false,false,true,false': [1.375, 200, 3], 'false,false,false': [0.305, 119, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.328, 154, 82], 'false,true': [0.06, 0, 22], 'false,false,true': [1.44, 1, 52], 'false,false,false,true': [0.254, 73, 0], 'false,false,false,false': [0.181, 74, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.623, 1, 121], 'true,false': [1.631, 234, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.11, 58, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.999, 1, 83], 'true,false,true': [0.01, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.954, 134, 18], 'false,false,true,false': [0.634, 28, 1], 'false,false,false,true': [2.302, 93, 28], 'false,false,false,false': [2.574, 49, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.198, 3, 78], 'false,true,true,true': [1.438, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.223, 214, 0], 'false,false,true,true': [0.421, 0, 19], 'false,false,true,false': [0.067, 55, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.46, 51, 21]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.776, 0, 85], 'true,true,false': [0.369, 0, 19], 'true,false,true': [0.048, 162, 0], 'true,false,false,true': [0.018, 28, 0], 'true,false,false,false': [0.991, 27, 4], 'false,true': [0.86, 1, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.737, 104, 40]}]
{'': [0.22153637698069403, 0.2379535990481861], 'false': [0.0384000000000006, 6.995925908596876e-17], 'true': [0.01851192595229848, 0.017851239669421377], 'false,true': [0.04865220249835817, -1.6148698540002277e-16], 'true,false': [-1.750233944703188e-16, 0.07359999999999985], 'true,false,false': [0.04074241738343139, 0.22222222222222224]}
{'': [7.826155740422578e-05, 0.12337297914287591], 'false': [0.07000354650917785, 0.16400965775729853], 'false,false': [0.09460484692634297, 0.17291024404057453], 'false,false,false': [-2.220446049250313e-16, 0.1638167954123346], 'false,false,true': [nan, 0.09460484692634297], 'false,true': [nan, 0.07000354650917785], 'false,true,false': [0.07000354650917785, nan]}
{'': [0.04690520120137655, 0.10992226852236116], 'false': [nan, 0.10992226852236228], 'false,false': [0.00025861554436259907, 0.09889279156026608], 'false,false,false': [0.08853292816919463, 0.12015332989203097], 'true': [0.03968426164957174, 0.08875804582937707], 'true,false': [0.017746597841652445, 0.0987654320987654], 'true,true': [0.03968426164957174, nan], 'false,false,true': [0.0007920101046109777, -5.921189464667501e-17]}
{'': [0.10179548132498677, 0.12583944559799257], 'false': [0.0862796823086429, 0.1510279980127132], 'false,false': [0.0, 0.15217927849475446], 'false,false,false': [nan, 0.15217927849475446], 'true': [0.02792989075679042, 0.00024948385414307587], 'false,true': [0.008848122762541225, 5.134148131802352e-06]}
{'': [0.024146789118193658, 0.07365410788580144], 'false': [0.00022315579254904096, 0.0723958386809794], 'false,false': [0.058489747333590136, 0.09332737608991631], 'false,false,true': [0.00035429594883625763, 0.00930679732857258], 'true': [0.02443708686933939, 0.0], 'false,true': [2.9541917821052088e-05, 0.0]}
{'': [0.04692157529407192, 0.08697571911837002], 'false': [0.00016523115812697417, 0.09226223246900325], 'false,false': [0.039104219765752894, 0.0007095887061559703], 'true': [nan, 0.04692157529407195], 'true,false': [nan, 0.04692157529407192], 'false,false,false': [0.0008867892049622645, 0.00044178491827374743]}
{'': [0.048626816855000664, 0.05178774811745374], 'false': [nan, 0.0517877481174538], 'false,false': [nan, 0.05178774811745374], 'false,false,false': [nan, 0.05178774811745374], 'true': [0.021590286394584938, 0.011033841576749814]}
{'': [0.011598741695711073, 0.04444578634771825], 'false': [nan, 0.044445786347717994], 'false,false': [0.023585854043196425, 0.06242381182180871], 'false,false,false': [0.043800404539546214, 0.09078971219019863], 'false,false,true': [0.02511126011149471, 0.013846147969617029], 'true': [0.011873501540475147, 4.539223469557374e-05], 'true,false': [4.539223469557374e-05, nan]}
{'': [0.039225073662763316, 0.038387336800163194], 'false': [0.024824416941937457, 0.05965629733721066], 'false,false': [0.03579575669085832, 0.08404785309672291], 'false,false,false': [nan, 0.08404785309672291], 'false,false,true': [0.009327565031762597, 8.161551794775593e-05], 'false,true': [0.05301728923381856, 0.00023202851346102284], 'false,true,true': [0.05301728923381856, nan]}
{'': [0.020617028009954262, 0.053815392050070715], 'false': [0.08219310922318317, 0.05202730062398679], 'false,false': [nan, 0.05202730062398676], 'true': [0.007184768363818932, 0.004705025795362522], 'true,true': [0.0070785290024207815, 0.007165821383276267], 'true,false': [1.4410432577100021e-05, 0.017371743454582946], 'true,false,false': [1.1937489408372518e-05, 0.0316786568209311]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
0;false,true;follows(G, H), follows(A, H).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
3;false,false;follows(H, A), recursion_accounttype(H, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,true;follows(G, F), follows(F, G).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 11.442
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(E, A) )
%   | | | then return 0.8368723393548312;  // std dev = 0.989, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048813;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.006297083247660414;  // std dev = 1.846, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   | | | else return -0.14185106490048774;  // std dev = 2.11e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else if ( recursion_accounttype(I, B) )
%   | then if ( follows(I, J), follows(A, J) )
%   | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.94e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7262223567516819;  // std dev = 0.023, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else return 0.6569734122109542;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.34447341221095445;  // std dev = 0.484, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.06098718191915996;  // std dev = 2.934, 168.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=13 */
%   | | | else return -0.0941513773898971;  // std dev = 0.829, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.011226819020603608;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return -0.0797733925424808;  // std dev = 1.162, 37.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.10474228399023071;  // std dev = 4.566, 146.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(D, B), follows(F, D) )
%   | | | then return 0.5414665865538598;  // std dev = 0.991, 62.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=61 */
%   | | | else return 0.6893429236222938;  // std dev = 0.201, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.22386700396649153;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.4442553256351735;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5749399247232336;  // std dev = 0.039, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.11157634720359248;  // std dev = 0.847, 131.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=1 */
%   | | | else return 0.03690220283450458;  // std dev = 3.127, 85.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.11418759389916693;  // std dev = 3.491, 83.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=25 */
%   | | | else return 0.17582498417830525;  // std dev = 2.557, 40.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.39397232257901116;  // std dev = 0.213, 66.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=63 */
%   | | else return 0.6069749543037571;  // std dev = 0.132, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else return -0.12216278451099868;  // std dev = 0.019, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   else if ( follows(F, A), tweets(F, G) )
%   | then if ( follows(H, F), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.35757210052195104;  // std dev = 0.917, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.5787257728345401;  // std dev = 0.301, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.11257077444350806;  // std dev = 0.008, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.41112631120555676;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.15223577830556823;  // std dev = 2.513, 42.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=16 */
%   | | | else return 0.10104522497789527;  // std dev = 1.790, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( tweets(A, F), follows(G, A) )
%   | | then return 0.2796156046714413;  // std dev = 0.244, 60.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=56 */
%   | | else return 0.350238660771515;  // std dev = 0.025, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return 0.49604141116331135;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then if ( follows(I, H), follows(H, I) )
%   | | then return 0.24147457352031418;  // std dev = 0.212, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.47142259903610517;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, J), follows(A, K) )
%   | | then if ( follows(K, L), recursion_accounttype(L, B) )
%   | | | then return 0.5602337223749145;  // std dev = 0.163, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return -0.09960184619143413;  // std dev = 1.251, 205.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=3 */
%   | | else if ( follows(M, A) )
%   | | | then return -0.06569849015060414;  // std dev = 1.183, 59.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=3 */
%   | | | else return 0.05901427028937002;  // std dev = 3.321, 86.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.26107850401311167;  // std dev = 0.125, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return -0.04891570665700426;  // std dev = 1.971, 158.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=14 */
%   | | | else return -0.08817060903138452;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.06751507398609878;  // std dev = 0.135, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.28803250156354715;  // std dev = 0.141, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.1836501870532892;  // std dev = 0.235, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.22054319961811722;  // std dev = 1.021, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.5403365738271655;  // std dev = 0.712, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return -0.13603296528322595;  // std dev = 0.034, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.2284412314371152;  // std dev = 0.011, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else return 0.15703494165723536;  // std dev = 0.253, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | else return 0.3544301058669356;  // std dev = 0.227, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), follows(A, F) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.4611124389534385;  // std dev = 0.074, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.08917799075515995;  // std dev = 0.006, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2334243991334514;  // std dev = 1.363, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return -0.10425177435310323;  // std dev = 0.166, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else if ( follows(J, A), tweets(J, K) )
%   | | | then return 0.02979672590378895;  // std dev = 0.609, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.09385880552849869;  // std dev = 2.341, 55.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=22 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18668965368455986;  // std dev = 0.013, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(F, E), follows(F, A) )
%   | | | then return -0.07308703714906996;  // std dev = 0.462, 123.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=1 */
%   | | | else return -0.058294890180413575;  // std dev = 0.289, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.36164170514957117;  // std dev = 0.442, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.09259828305965896;  // std dev = 0.075, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.20819750730644207;  // std dev = 0.943, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return -0.10357171422532041;  // std dev = 0.047, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.06439747101017636;  // std dev = 1.946, 41.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=16 */
%   | | | else return 0.07395462673523927;  // std dev = 1.330, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1471669141217319;  // std dev = 0.120, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else return 0.1951275045803968;  // std dev = 0.057, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.16904671311094802;  // std dev = 1.319, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | else return 0.2705127218284026;  // std dev = 0.257, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.0766765025451895;  // std dev = 0.008, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2216998813782947;  // std dev = 0.184, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.09528060152454611;  // std dev = 0.049, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.00850714448416439;  // std dev = 1.986, 46.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=14 */
%   | | | else return 0.10952995434991131;  // std dev = 1.228, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then return 0.0020923651686786202;  // std dev = 0.134, 325.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=108 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.22027273975576175;  // std dev = 0.458, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.10134563165734088;  // std dev = 0.858, 38.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=2 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.2807618538530554;  // std dev = 0.588, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.14418988761434276;  // std dev = 0.258, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.23975164420870865;  // std dev = 0.034, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.09790706508185178;  // std dev = 0.027, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.05757151324093035;  // std dev = 0.691, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.053425612753406064;  // std dev = 1.270, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.807', 'seconds']
Refined model CLL: -0.115086


******************************************
Best model found
******************************************
Results 

CLL : -0.110245 

AUC ROC : 0.993201 

AUC PR : 0.368908 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 11.442 

Total Inference Time : 17.576048374176025 

Total revision time: 45.99068744850159
Best scored revision CLL: -0.115086


Results 

CLL : -0.110245 

AUC ROC : 0.993201 

AUC PR : 0.368908 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 46.01755507659912 

Total Inference Time : 17.576048374176025 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.43
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7672398441904211;  // std dev = 1.348, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7374506595744974;  // std dev = 5.96e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return 0.009309290136683909;  // std dev = 1.783, 31.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1385922523276542;  // std dev = 1.567, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.58578385155745;  // std dev = 0.156, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.5732954857711153;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5732954857711153;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.031061252499464877;  // std dev = 2.140, 43.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=8 */
%   | | | else return -0.07998564010031663;  // std dev = 0.798, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5429856453268977;  // std dev = 0.617, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.13000005255738392;  // std dev = 0.042, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.42788774099982485;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.03935014663886668;  // std dev = 0.192, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07786103501738526;  // std dev = 0.727, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.19566336569366333;  // std dev = 1.243, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.350579149522346;  // std dev = 0.110, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.592682810857726;  // std dev = 0.062, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.06714724701207322;  // std dev = 0.918, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | | else return -0.07601683542118927;  // std dev = 0.187, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02274041468057401;  // std dev = 1.600, 62.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=19 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2365747871050824;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5348912062269048;  // std dev = 0.253, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1273436965610647;  // std dev = 0.007, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.11249589262433286;  // std dev = 0.041, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26489359281836017;  // std dev = 1.094, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else return -0.08733096785048335;  // std dev = 1.114, 60.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03948600157753455;  // std dev = 0.259, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.21195535199924104;  // std dev = 0.037, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.29383116881133475;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.02829057214939858;  // std dev = 1.143, 26.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=5 */
%   | | | else return -0.1003435864460858;  // std dev = 0.000795, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.029262864288729432;  // std dev = 0.783, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.03290134165487212;  // std dev = 0.642, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.19512479222198503;  // std dev = 0.049, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.3097779176713472;  // std dev = 0.284, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09560231494249104;  // std dev = 0.043, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.343907427644327;  // std dev = 0.222, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1041965465004994;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2423457517174287;  // std dev = 0.504, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19946271361580595;  // std dev = 0.336, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.13120196435270648;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then return -0.0906211620446701;  // std dev = 0.018, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07866881901401078;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.08139445966214393;  // std dev = 0.030, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.06575823576214636;  // std dev = 0.828, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.666', 'seconds']
Parameter learned model CLL:-0.112296 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.348, 2, 20], 'true,false,true': [3.49e-08, 35, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 5], 'false,true,false': [0.0, 0, 0], 'false,false': [0.0, 7, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [5.96e-08, 0, 15], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [1.783, 26, 5], 'false,true,false,false': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 3, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.567, 11, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,true': 'follows(A, G)', 'false,false,false': 'tweets(A, H)'}, {'true,true,true': [0.156, 0, 13], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [2.14, 35, 8], 'false,false,false,false': [0.798, 14, 1]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [0.617, 0, 21], 'true,false': [0.042, 39, 0], 'false,true,true': [0.0, 0, 2], 'false,true,false': [0.192, 6, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.727, 3, 1]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.243, 2, 13], 'true,false': [0.0, 0, 0], 'false,true,true': [0.11, 0, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.062, 0, 6], 'false,false,true,false': [0.918, 25, 2], 'false,false,false': [0.187, 17, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.6, 43, 19], 'false,true': [0.0, 0, 1], 'false,false,true': [0.253, 0, 5], 'false,false,false,true': [0.007, 2, 0], 'false,false,false,false': [0.041, 6, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.094, 1, 21], 'true,false': [1.114, 57, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.259, 5, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.037, 0, 14], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.143, 21, 5], 'false,false,true,false': [0.000795, 10, 0], 'false,false,false,true': [0.783, 11, 4], 'false,false,false,false': [0.642, 4, 1]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.049, 0, 13], 'false,true,true,true': [0.284, 0, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.043, 40, 0], 'false,false,true,true': [0.222, 0, 4], 'false,false,true,false': [0.002, 9, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.504, 1, 1]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.336, 0, 19], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.018, 31, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.03, 5, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.828, 7, 5]}]
{'': [0.2203708680462237, 0.24305555555555536], 'false': [0.0, -7.93016446160826e-18], 'true': [0.08264462809917356, 4.2700885562506023e-17], 'true,false': [3.489272363107635e-17, 0.0], 'false,true': [0.0, nan], 'true,false,false': [0.0, nan]}
{'': [2.3684757858670006e-16, 0.11798624831677648], 'false': [0.10254264247457515, 0.1384267475694248], 'false,false': [0.0, 0.15337405541244023], 'false,false,false': [nan, 0.15337405541244023], 'false,true': [nan, 0.10254264247457515], 'false,true,false': [0.10254264247457515, nan], 'false,false,true': [nan, 0.0]}
{'': [0.0018715113601594031, 0.10298494689280535], 'false': [nan, 0.10298494689280534], 'false,false': [-3.700743415417188e-17, 0.09227957636300528], 'false,false,false': [0.10646459415788762, 0.04247360469622334], 'true': [0.0018715113601594031, nan], 'true,true': [0.0018715113601594031, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.10940904351024935, 0.08667068292533911], 'true': [0.01812113670542869, 4.56579064287165e-05], 'false': [0.06640437216751398, 0.13214593215765377], 'false,false': [nan, 0.13214593215765377], 'false,false,false': [nan, 0.13214593215765377], 'false,true': [0.0, 0.036863440230757175]}
{'': [0.1030309579483393, 0.07682936125299464], 'true': [0.1030309579483393, nan], 'false': [0.004053907267605257, 0.0745654548847773], 'false,false': [0.09040669927727336, 0.034782380086973784], 'false,false,true': [0.0006347271979561716, 0.031196807266290066], 'false,true': [0.004053907267605257, nan]}
{'': [0.04126456851305477, 0.0985703706976921], 'false': [0.0, 0.10540431025759976], 'false,false': [0.012757071073405023, 0.00025884524903401797], 'true': [nan, 0.041264568513054725], 'true,false': [nan, 0.04126456851305477], 'false,false,false': [2.3857595879653304e-05, 0.00028206014631624216]}
{'': [0.054095585004548974, 0.011140698449557958], 'true': [0.0544016825771837, 0.020698384532258654], 'false': [nan, 0.011140698449557958], 'false,false': [nan, 0.011140698449557958], 'false,false,false': [nan, 0.011140698449557958]}
{'': [0.000508561857062606, 0.04372297011449121], 'false': [nan, 0.043722970114491215], 'false,false': [0.03735295044024653, 0.05122980121592585], 'false,false,false': [0.04085727895406656, 0.08233743911334575], 'false,false,true': [0.05027732418545109, 6.318604229699209e-08], 'true': [9.797774541914217e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.002400920461840193, 0.03392091987943869], 'false': [0.02258559056988128, 0.062345304949481345], 'false,false': [0.046571410546298125, 0.1271403205659295], 'false,false,false': [nan, 0.1271403205659295], 'false,false,true': [0.012342905939676366, 3.3413900228805736e-07], 'false,true': [0.011526251950277264, 4.58273611131127e-05], 'false,true,true': [0.011526251950277264, nan]}
{'': [0.01995831670830868, 0.057079592326481306], 'false': [nan, 0.057079592326481306], 'false,false': [nan, 0.057079592326481306], 'true': [0.0058819879869007495, 5.009740294112108e-05], 'true,true': [0.005958589807502804, 0.0], 'true,false': [1.03343473469351e-05, 0.00010261977057827843], 'true,false,false': [0.0, 0.00018141375728856352]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(F, A), recursion_accounttype(F, B).;true;true
2;false,true;follows(A, G).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;follows(E, A), tweets(E, F).;true;true
3;false,true;follows(G, E), recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
7;false;follows(G, A), follows(A, G).;true;true
7;false,true;tweets(A, H).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 4.206
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.6511211183472403;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.7239677240518403;  // std dev = 0.016, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7518526675222027;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.1254446385283914;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.1254446385283914;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.1303477201746149;  // std dev = 1.029, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.3815061919152162;  // std dev = 0.926, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5842493954304689;  // std dev = 0.015, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.5742623597105081;  // std dev = 0.028, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5765904800891262;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.588232901061704;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11297080035348876;  // std dev = 0.028, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.2537271005617388;  // std dev = 1.164, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return -0.053130003627461196;  // std dev = 0.746, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(A, F) )
%   | | | then return 0.44567611740489727;  // std dev = 0.029, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.44104290256110534;  // std dev = 0.008, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.6059986669609567;  // std dev = 0.060, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, G) )
%   | | | then return -0.1015366129940425;  // std dev = 2.11e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return -0.10153661299404253;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.18178345120162637;  // std dev = 0.035, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(H, A), tweets(H, I) )
%   | then if ( follows(J, H), recursion_accounttype(J, B) )
%   | | then return 0.4094194018651163;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.037364988231323684;  // std dev = 0.170, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | else return 0.05357462673757035;  // std dev = 0.688, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2647145943076505;  // std dev = 0.256, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3654673692127763;  // std dev = 0.069, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.28658945105697103;  // std dev = 0.679, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.07166939122252941;  // std dev = 0.735, 38.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=2 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.09756308457161131;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.09636917925216097;  // std dev = 0.661, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(E, A) )
%   | | | then return 0.28638611833309774;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2743685984209895;  // std dev = 0.014, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.08679015450819923;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.28578962542079117;  // std dev = 0.061, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.0898723465321377;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2545846245790575;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.46692515224233533;  // std dev = 0.166, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.14290300596846622;  // std dev = 0.011, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.1615776902718445;  // std dev = 0.087, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.23006237768581267;  // std dev = 0.004, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.21246362548629769;  // std dev = 0.007, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, A) )
%   | | | then return -0.11830729485769316;  // std dev = 0.813, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.23541122858362798;  // std dev = 0.044, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, E) )
%   | | | then return -0.08086258745615062;  // std dev = 0.006, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.0730372435530572;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.3213282479560128;  // std dev = 0.023, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.13788123373563835;  // std dev = 0.028, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.008791136292745597;  // std dev = 0.567, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.04119524919149887;  // std dev = 0.362, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else return 0.1943435352026405;  // std dev = 0.043, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2304659178609033;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), follows(A, G) )
%   | then if ( tweets(A, H) )
%   | | then return -0.0551066170907711;  // std dev = 0.170, 30.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=5 */
%   | | else return -0.0768504791777856;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(A, J) )
%   | | | then return -0.10018990672047934;  // std dev = 0.034, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.032251953462403324;  // std dev = 0.389, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.14562215225305347;  // std dev = 0.573, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return -0.068244020636997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1806604246302927;  // std dev = 0.014, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.20682361345348932;  // std dev = 0.030, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.19562383816677176;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G) )
%   | | | then return -0.07087294449868954;  // std dev = 0.002, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | | else return -0.06403039226446221;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2389491193944066;  // std dev = 0.001, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11186088321366035;  // std dev = 0.047, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.03854817639876414;  // std dev = 0.560, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.16420173786036713;  // std dev = 0.039, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.13972658658793027;  // std dev = 0.027, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.16634540275537524;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then return -0.06627218367908948;  // std dev = 0.000276, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( follows(G, C), follows(G, A) )
%   | | | then return -0.06029847142878109;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | | | else return -0.07492839410604739;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   else if ( tweets(A, H) )
%   | then return 0.09804355090908112;  // std dev = 0.347, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else return -0.029534847165489597;  // std dev = 0.561, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '32.858', 'seconds']
Refined model CLL: -0.099469


******************************************
Best model found
******************************************
Results 

CLL : -0.105326 

AUC ROC : 0.994804 

AUC PR : 0.409996 

Precision : 0.3309 

Recall : 0.871795 

F1 : 0.479718 

Total Learning Time : 4.206 

Total Inference Time : 6.385444402694702 

Total revision time: 14.940182767868041
Best scored revision CLL: -0.099469


Results 

CLL : -0.105326 

AUC ROC : 0.994804 

AUC PR : 0.409996 

Precision : 0.3309 

Recall : 0.871795 

F1 : 0.479718 

Total Learning Time : 14.967050395965575 

Total Inference Time : 6.385444402694702 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.702
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8126943896449664;  // std dev = 1.382, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.99e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004877;  // std dev = 4.17e-09, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6792827819599737;  // std dev = 1.284, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.020722410737267563;  // std dev = 2.407, 72.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=9 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08956541662969841;  // std dev = 2.000, 28.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5824114854363934;  // std dev = 0.153, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.7326340525011283;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.6819110759142397;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5764025827538037;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5764025827538037;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.026393646326516706;  // std dev = 2.665, 96.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=11 */
%   | | | else return -0.042775060965281095;  // std dev = 1.412, 30.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5241271450254118;  // std dev = 0.845, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else return -0.12209695399275722;  // std dev = 0.093, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.40745597366074265;  // std dev = 0.347, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return -0.09085634134759488;  // std dev = 0.117, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06407983808313386;  // std dev = 0.832, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.2226752121083511;  // std dev = 1.583, 29.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | else return 0.4289734312732963;  // std dev = 0.054, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.33283881884519506;  // std dev = 0.133, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6216606708466892;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.0893236076399861;  // std dev = 1.015, 71.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=2 */
%   | | else return -7.641602875087503E-4;  // std dev = 0.274, 22.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03478369730629835;  // std dev = 2.369, 114.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=38 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2549660720727539;  // std dev = 0.044, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5546512322447535;  // std dev = 0.289, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1102980507349454;  // std dev = 0.040, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.10920554064403862;  // std dev = 0.040, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2598880242964515;  // std dev = 1.628, 46.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=43 */
%   | else return -0.08382509855139929;  // std dev = 1.113, 96.000 (wgt'ed) examples reached here.  /* #neg=93 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10430188468758295;  // std dev = 0.335, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.12470322858766177;  // std dev = 1.656, 35.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=32 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.2543946450272736;  // std dev = 0.077, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.04127966238634544;  // std dev = 1.126, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   | | | else return -0.019689658773028806;  // std dev = 0.983, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.014294593240154398;  // std dev = 1.045, 36.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=6 */
%   | | | else return -0.04676242856932781;  // std dev = 0.827, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14833443376651992;  // std dev = 0.215, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.31338624836260964;  // std dev = 0.585, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.095028886570416;  // std dev = 0.100, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3629690207522012;  // std dev = 0.286, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.09128763716331746;  // std dev = 0.000163, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.049149426129645145;  // std dev = 0.733, 15.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.21723579782677316;  // std dev = 0.575, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0.12756043288172714;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.08647619617249684;  // std dev = 0.034, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08860584820648353;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return 0.03490295014749966;  // std dev = 0.153, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.050423793560432056;  // std dev = 1.049, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.688', 'seconds']
Parameter learned model CLL:-0.109226 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.382, 2, 42], 'true,false,true': [6.99e-08, 71, 0], 'true,false,false,true': [0.0, 9, 0], 'true,false,false,false': [0.707, 1, 1], 'false,true,true': [0.935, 1, 7], 'false,true,false': [0.0, 0, 0], 'false,false': [4.17e-09, 25, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.284, 2, 34], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.407, 63, 9], 'false,true,false,false': [0.0, 1, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.45e-09, 13, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.0, 21, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.153, 0, 26], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [2.665, 85, 11], 'false,false,false,false': [1.412, 27, 3]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [0.845, 0, 39], 'true,false': [0.093, 81, 0], 'false,true,true': [0.347, 1, 9], 'false,true,false': [0.117, 20, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.832, 12, 1]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.583, 3, 26], 'true,false': [0.054, 0, 2], 'false,true,true': [0.133, 0, 8], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.011, 0, 9], 'false,false,true,false': [1.015, 69, 2], 'false,false,false': [0.274, 19, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.369, 76, 38], 'false,true': [0.044, 0, 5], 'false,false,true': [0.289, 0, 7], 'false,false,false,true': [0.04, 19, 0], 'false,false,false,false': [0.04, 15, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.628, 3, 43], 'true,false': [1.113, 93, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.335, 2, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.656, 3, 32], 'true,false,true': [0.077, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.126, 48, 6], 'false,false,true,false': [0.983, 18, 3], 'false,false,false,true': [1.045, 30, 6], 'false,false,false,false': [0.827, 6, 1]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.215, 2, 28], 'false,true,true,true': [0.585, 0, 15], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.1, 81, 0], 'false,false,true,true': [0.286, 0, 6], 'false,false,true,false': [0.000163, 13, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.733, 14, 1]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [0.575, 0, 38], 'true,true,false': [0.0, 0, 4], 'true,false,true': [0.034, 57, 0], 'true,false,false,true': [2.63e-09, 6, 0], 'true,false,false,false': [0.153, 1, 1], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.049, 14, 7]}]
{'': [0.22480473670949966, 0.16712580348944003], 'true': [0.04338842975206727, 0.012046400951814466], 'false': [0.10937499999999978, 1.3322676295501878e-17], 'false,true': [0.10937499999999978, nan], 'true,false': [6.880255363874209e-17, 0.0826446280991736], 'true,false,false': [-9.25185853854297e-18, 0.25]}
{'': [0.045787370636331995, 0.09007024162026267], 'false': [0.07953933535239131, 0.1076059867046781], 'false,false': [4.270088556250602e-18, 0.14290783081917852], 'false,false,false': [nan, 0.14290783081917852], 'false,true': [nan, 0.07953933535239131], 'false,true,false': [0.08049381895992365, 0.0], 'false,false,true': [nan, 4.270088556250602e-18]}
{'': [0.001918189159314362, 0.08861478190095513], 'false': [nan, 0.08861478190095513], 'false,false': [0.0, 0.07226614871803126], 'false,false,false': [0.07400612378179218, 0.06649377080308785], 'true': [0.001674092739328022, 0.0], 'true,true': [0.000902672786220266, 0.0], 'false,false,true': [0.0, 0.0], 'true,false': [0.0, nan]}
{'': [0.09762937660277345, 0.09160906811705943], 'true': [0.0182907237317857, 0.00010765322649167975], 'false': [0.1024097133827573, 0.05320864134090171], 'false,true': [0.12038016287802486, 0.013750690903162357], 'false,false': [nan, 0.05320864134090171], 'false,false,false': [nan, 0.05320864134090171]}
{'': [0.0834605297972616, 0.06902026964192695], 'true': [0.08637079383921782, 0.0014484850054055365], 'false': [0.0022276522979295804, 0.06583543127183147], 'false,false': [0.06334639835364211, 0.0748288062562758], 'false,false,true': [1.2919027492674928e-05, 0.014505988395146385], 'false,true': [0.0022276522979295804, nan]}
{'': [0.049227464066198684, 0.06376920840696457], 'false': [0.00039561349383923086, 0.06463138743478532], 'false,false': [0.01195831307942414, 9.492961626539669e-05], 'true': [nan, 0.049227464066198955], 'true,false': [nan, 0.049227464066198684], 'false,false,false': [8.305439499294094e-05, 0.00010930456357295948]}
{'': [0.05325599429160349, 0.018685168635297286], 'true': [0.05758556537050472, 0.012911121546673475], 'false': [nan, 0.018685168635297286], 'false,false': [nan, 0.018685168635297286], 'false,false,false': [nan, 0.018685168635297286]}
{'': [0.07512194992614789, 0.03413297676639563], 'true': [0.07833537906997884, 0.0029762582217023326], 'false': [nan, 0.03413297676639561], 'false,false': [0.02987191331898324, 0.041409305417235386], 'false,false,false': [0.030313851811717314, 0.09758908541038978], 'false,false,true': [0.02346824314968901, 0.046002881409974807], 'true,false': [0.0029762582217023326, nan]}
{'': [0.04604550856006885, 0.03118410395666592], 'false': [0.02566121618124853, 0.04567331289534732], 'false,false': [0.048888374156947724, 0.035865153251692636], 'false,false,true': [0.013626946386988525, 2.041362228827764e-09], 'false,false,false': [nan, 0.035865153251692636], 'false,true': [0.022823234793109867, 0.00012381165854401672], 'false,true,true': [0.022823234793109867, nan]}
{'': [0.024142678972278484, 0.052358383124051985], 'false': [nan, 0.052358383124051985], 'false,false': [nan, 0.052358383124051985], 'true': [0.008573662439438759, 0.0008185485850668182], 'true,true': [0.008710279786534988, 0.0], 'true,false': [1.9760822370508195e-05, 0.005785203318082183], 'true,false,false': [1.1564823173178713e-18, 0.011699995819195072]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C), tweets(E, F).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 7.152
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995116;  // std dev = 2.23e-07, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 5.77e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else if ( follows(G, C), tweets(G, H) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7228184733586193;  // std dev = 0.112, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.03328571477765509;  // std dev = 1.989, 54.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=6 */
%   | | | else return -0.0017822728339924108;  // std dev = 1.389, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.15389749670472053;  // std dev = 1.697, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
%   | | | else return -0.026896624031435445;  // std dev = 0.819, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5634909181015235;  // std dev = 0.228, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.7819329943665566;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.708001853753413;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5545402733128562;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.5545402733128562;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7243395557989417;  // std dev = 0.008, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.11980729740984739;  // std dev = 0.043, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.30979377205063535;  // std dev = 1.372, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
%   | | | else return -0.02836865251127712;  // std dev = 0.799, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.4200093579773655;  // std dev = 0.024, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.5816578806154145;  // std dev = 0.106, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.6173132433726735;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then return -0.10785428919031409;  // std dev = 0.003, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return -0.1846194240957199;  // std dev = 0.004, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( follows(A, I), recursion_accounttype(I, B) )
%   | then return 0.4491543401397054;  // std dev = 0.189, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( recursion_accounttype(K, B) )
%   | | | then return 0.48575295947662184;  // std dev = 0.138, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.11278810644169243;  // std dev = 0.015, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else return 0.1638263995803332;  // std dev = 0.694, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( tweets(A, F), follows(G, A) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.31767707042800597;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.3734427556957777;  // std dev = 0.193, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.15429483407905997;  // std dev = 0.860, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.47559225383818426;  // std dev = 0.051, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3160892983524275;  // std dev = 0.006, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.4390251996370533;  // std dev = 0.070, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.08996467407446958;  // std dev = 0.810, 77.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=2 */
%   | | else if ( follows(L, A) )
%   | | | then return -0.04622357816436367;  // std dev = 0.716, 20.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=2 */
%   | | | else return 0.03507435958423828;  // std dev = 0.741, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.19754480075680664;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.24270421322521596;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2658154574190635;  // std dev = 0.016, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.21112044525512713;  // std dev = 0.833, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.09148166044813118;  // std dev = 0.010, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | else return -0.021631762925666966;  // std dev = 0.184, 21.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.26964911002150804;  // std dev = 0.065, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.44320148529009223;  // std dev = 0.115, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.12072542645121999;  // std dev = 0.026, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(C, D), follows(D, A) )
%   | | then return 0.21707778627933264;  // std dev = 0.006, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.05387423089765366;  // std dev = 0.916, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.35566251443938857;  // std dev = 0.103, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), tweets(A, G) )
%   | | then return -0.125398970257631;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.20397388131341462;  // std dev = 0.012, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.08504899008246333;  // std dev = 0.031, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | | else return -0.02393234001928657;  // std dev = 1.026, 44.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=7 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0849042575261149;  // std dev = 0.767, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | | else return -0.05083256069319667;  // std dev = 0.674, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( follows(A, D), tweets(C, E) )
%   | | then return 0.18690677667816083;  // std dev = 0.014, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.17428197074825796;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.20692415287155352;  // std dev = 0.046, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.28371825595798583;  // std dev = 0.034, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07873062338625515;  // std dev = 0.003, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.3178538033962091;  // std dev = 0.240, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.10680767534276607;  // std dev = 0.117, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.057872900501749;  // std dev = 0.551, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.001995746746454178;  // std dev = 0.660, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.11934712705041313;  // std dev = 0.202, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else return 0.1905025784604656;  // std dev = 0.072, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.16080420677042057;  // std dev = 0.062, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2149456247468694;  // std dev = 0.442, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return -0.07600826719726858;  // std dev = 0.007, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.24478903236720065;  // std dev = 0.176, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.1355995809822037;  // std dev = 0.024, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.08681209213568303;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.05849337497741562;  // std dev = 0.626, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1443357133313638;  // std dev = 0.064, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.22887464572801658;  // std dev = 0.169, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.1323526379664769;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.07035391056640139;  // std dev = 0.004, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else if ( follows(G, C), follows(G, A) )
%   | | | then return -0.06287346063381052;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.03231821522845551;  // std dev = 0.206, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.2034404412573454;  // std dev = 0.155, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.13397138205881198;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.038396060241487825;  // std dev = 0.222, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '39.503', 'seconds']
Refined model CLL: -0.103774


******************************************
Best model found
******************************************
Results 

CLL : -0.102067 

AUC ROC : 0.994835 

AUC PR : 0.385212 

Precision : 0.337156 

Recall : 0.942308 

F1 : 0.496622 

Total Learning Time : 7.152 

Total Inference Time : 12.1355721950531 

Total revision time: 26.01959338569641
Best scored revision CLL: -0.103774


Results 

CLL : -0.102067 

AUC ROC : 0.994835 

AUC PR : 0.385212 

Precision : 0.337156 

Recall : 0.942308 

F1 : 0.496622 

Total Learning Time : 26.046461013793945 

Total Inference Time : 12.1355721950531 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.23
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.842019902841448;  // std dev = 0.992, 62.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=61 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.16e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004877;  // std dev = 4.93e-09, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7026523288642115;  // std dev = 0.990, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.025207329781530657;  // std dev = 2.872, 110.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=13 */
%   | | | else return -0.1254446385283914;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.11428347635821472;  // std dev = 2.502, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5719106296414166;  // std dev = 0.226, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.7277402134850218;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.5595161809215461;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.39682074222644753;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5634874088931142;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.02613255332018176;  // std dev = 3.046, 127.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=15 */
%   | | | else return 0.05013990091408305;  // std dev = 1.966, 33.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5069801646065477;  // std dev = 0.978, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else return -0.12404260000106655;  // std dev = 0.258, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.451015857064811;  // std dev = 0.235, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return -0.10736332899313057;  // std dev = 0.106, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13196111686401632;  // std dev = 1.355, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.22587273945916417;  // std dev = 1.865, 43.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=39 */
%   | else return 0.12361685104838571;  // std dev = 0.802, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.33918477704063593;  // std dev = 0.173, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6075144212276862;  // std dev = 0.064, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.09438285849767053;  // std dev = 1.218, 114.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=3 */
%   | | else return -0.034603834340511806;  // std dev = 0.244, 61.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.025076159305208734;  // std dev = 2.900, 167.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=54 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24993532515862454;  // std dev = 0.050, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5332758428495257;  // std dev = 0.446, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1092745716723673;  // std dev = 0.059, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.10983259936700301;  // std dev = 0.110, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2934162291965804;  // std dev = 1.427, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | else return -0.08511387738385191;  // std dev = 1.359, 136.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.010519751346435128;  // std dev = 0.960, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.14421186739245812;  // std dev = 1.682, 50.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=47 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.2584567724946773;  // std dev = 0.106, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.05138212144484683;  // std dev = 1.489, 89.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=9 */
%   | | | else return -0.02911050960981399;  // std dev = 1.144, 31.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0072018438059160495;  // std dev = 1.193, 42.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=9 */
%   | | | else return 0.03079728397871811;  // std dev = 1.113, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16931476060278378;  // std dev = 0.159, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.19175756234882113;  // std dev = 1.731, 24.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09437342156680091;  // std dev = 0.229, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3459209724896071;  // std dev = 0.338, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.0933087948559605;  // std dev = 7.86e-05, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0055408395316991705;  // std dev = 1.132, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.12939412276710044;  // std dev = 2.299, 60.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=55 */
%   | | else return 0.15062473067480775;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.08516147419111585;  // std dev = 0.060, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07770093059493136;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.2472519840888463;  // std dev = 0.753, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.12429290094978984;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02843290021521429;  // std dev = 1.423, 41.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=12 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.631', 'seconds']
Parameter learned model CLL:-0.11141 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [0.992, 1, 61], 'true,false,true': [8.16e-08, 110, 0], 'true,false,false,true': [0.0, 16, 0], 'true,false,false,false': [0.0, 0, 1], 'false,true,true': [0.0, 0, 13], 'false,true,false': [0.0, 0, 0], 'false,false': [4.93e-09, 29, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.99, 1, 49], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [2.872, 97, 13], 'false,true,false,false': [0.0, 5, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.45e-09, 15, 0], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [2.502, 29, 12]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.226, 0, 39], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.913, 1, 5], 'false,false,true,false': [0.0, 0, 6], 'false,false,false,true': [3.046, 112, 15], 'false,false,false,false': [1.966, 26, 7]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [0.978, 0, 57], 'true,false': [0.258, 116, 0], 'false,true,true': [0.235, 1, 13], 'false,true,false': [0.106, 29, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.355, 8, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.865, 4, 39], 'true,false': [0.802, 1, 3], 'false,true,true': [0.173, 0, 11], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.064, 0, 12], 'false,false,true,false': [1.218, 111, 3], 'false,false,false': [0.244, 54, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.9, 113, 54], 'false,true': [0.05, 0, 8], 'false,false,true': [0.446, 0, 13], 'false,false,false,true': [0.059, 11, 0], 'false,false,false,false': [0.11, 17, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.427, 2, 64], 'true,false': [1.359, 131, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.96, 7, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.682, 3, 47], 'true,false,true': [0.106, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.489, 80, 9], 'false,false,true,false': [1.144, 27, 4], 'false,false,false,true': [1.193, 33, 9], 'false,false,false,false': [1.113, 12, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.159, 1, 42], 'false,true,true,true': [1.731, 3, 21], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.229, 117, 0], 'false,false,true,true': [0.338, 0, 8], 'false,false,true,false': [7.86e-05, 13, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.132, 14, 4]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [2.299, 5, 55], 'true,true,false': [0.0, 0, 6], 'true,false,true': [0.06, 98, 0], 'true,false,false,true': [0.0, 3, 0], 'true,false,false,false': [0.753, 4, 1], 'false,true': [0.0, 0, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.423, 29, 12]}]
{'': [0.2204305590548979, 0.2137188208616775], 'true': [0.01586888657648215, 0.007812015624031231], 'false': [-2.7328566760003855e-16, 2.2970131543968756e-17], 'true,false': [6.055761952500853e-17, 0.055363321799308], 'true,false,false': [-6.938893903907228e-18, 0.0], 'false,true': [-2.7328566760003855e-16, nan]}
{'': [0.019597611200916843, 0.09269096044561591], 'false': [0.07212823496055147, 0.1285941121356881], 'false,false': [3.7007434154171884e-18, 0.1575243129640288], 'false,false,false': [0.0, 0.15264601560498933], 'false,true': [nan, 0.07212823496055147], 'false,true,false': [0.07496994248360839, 0.0], 'false,false,true': [nan, 3.7007434154171884e-18]}
{'': [0.0017980409451206995, 0.09824645913132195], 'false': [nan, 0.09824645913132236], 'false,false': [0.07638888888888869, 0.083096616318213], 'false,false,false': [0.07304454492328662, 0.11716423025300743], 'false,false,true': [0.13888888888888887, -7.401486830834377e-17], 'true': [0.0018716670022568937, 4.305094180034885e-06], 'true,true': [0.0013125869838314923, 0.0], 'true,false': [0.0, 0.0]}
{'': [0.0938877633710696, 0.10637529099829875], 'false': [0.09284605660729078, 0.15299539366260773], 'false,false': [nan, 0.15299539366260773], 'false,false,false': [nan, 0.15299539366260773], 'true': [0.016793579325405292, 0.0005747903658278061], 'false,true': [0.0550169570215145, 0.011294581506754097]}
{'': [0.08846992601078478, 0.06014440947392834], 'true': [0.08086896288683848, 0.1606139079180773], 'false': [0.002735301372569095, 0.05595585023043911], 'false,false': [0.05425032839359919, 0.05944506758999422], 'false,false,true': [0.000336116443483044, 0.013005528476411992], 'false,true': [0.002735301372569095, nan]}
{'': [0.050350117194031895, 0.08263215064657287], 'false': [0.00031522255956317746, 0.09473573901552407], 'false,false': [0.015332148904682331, 0.0005532747327880687], 'true': [nan, 0.05035011719403189], 'true,false': [nan, 0.050350117194031895], 'false,false,false': [0.00031423348976557366, 0.0007078261445593673]}
{'': [0.05073817680940256, 0.07083349133339233], 'false': [nan, 0.07083349133339233], 'false,false': [nan, 0.07083349133339233], 'false,false,false': [nan, 0.07083349133339233], 'true': [0.030840776460242705, 0.013578363478119148]}
{'': [0.05510459345894145, 0.035454837867412874], 'true': [0.05658073296519483, 0.005651203550862155], 'false': [nan, 0.03545483786741292], 'false,false': [0.02948170093848339, 0.04620038755515786], 'false,false,false': [0.03391512735363859, 0.07740358841310253], 'false,false,true': [0.024909928561734775, 0.0422392269744172], 'true,false': [0.005651203550862155, nan]}
{'': [0.025328066609389036, 0.04061741645211519], 'false': [0.03317716292073942, 0.06143924019447418], 'false,false': [0.05092540923266816, 0.07118055095806203], 'false,false,false': [nan, 0.07118055095806203], 'false,false,true': [0.014250805569528402, 4.746958552732832e-10], 'false,true': [0.12478698094197825, 0.0004499262363856198], 'false,true,true': [0.12478698094197825, nan]}
{'': [0.04666265409988919, 0.04840762290535363], 'false': [0.0, 0.049369507593304114], 'false,false': [nan, 0.049369507593304114], 'true': [0.08015021296248319, 0.0065720298858137184], 'true,true': [0.08812425801217416, 0.0], 'true,false': [3.69431417801037e-05, 0.07765522313933507], 'true,false,false': [-1.1564823173178713e-18, 0.11346802212009996]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;true,false,false;follows(E, C), tweets(E, F).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 10.575
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995121;  // std dev = 1.69e-07, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else if ( follows(G, C), tweets(G, H) )
%   | | | then return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then return 0.6588673516048942;  // std dev = 0.239, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   | | else return 0.7194734122109545;  // std dev = 2.98e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.5766162693538116;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(F, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.0354986582036737;  // std dev = 2.470, 87.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=9 */
%   | | | else return -0.005403173181019652;  // std dev = 1.616, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   | | else return -0.1254446385283914;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.1642415502965274;  // std dev = 2.373, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.578015406995044;  // std dev = 0.286, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.7680359676190318;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.570277568703877;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.05536643674628447;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5744249460727908;  // std dev = 0.017, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6517828714925377;  // std dev = 0.952, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return -0.1262882432053136;  // std dev = 0.333, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.13198918591397413;  // std dev = 1.792, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
%   | | | else return 0.11470245169043952;  // std dev = 1.538, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.42935812523244377;  // std dev = 0.053, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.6146887269981729;  // std dev = 0.068, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.6446121729193096;  // std dev = 0.109, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.114934612612955;  // std dev = 0.028, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( follows(I, A), follows(I, G) )
%   | | then if ( tweets(G, J), tweets(I, J) )
%   | | | then return 0.030894967821491842;  // std dev = 1.339, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | | else return 0.13446835992227885;  // std dev = 0.687, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( recursion_accounttype(H, B) )
%   | | | then return 0.5563409530173629;  // std dev = 0.255, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.13385667842811633;  // std dev = 0.056, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return 0.00448490805950621;  // std dev = 0.328, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(D, E), follows(A, D) )
%   | | | then return 0.2864270483280578;  // std dev = 0.980, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | | else return 0.3266704221715017;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.384174992750334;  // std dev = 0.041, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.4671004762200024;  // std dev = 0.103, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3454224973933682;  // std dev = 0.034, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4712932538864547;  // std dev = 0.085, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.0939722539216471;  // std dev = 1.102, 116.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=3 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.051565095660093235;  // std dev = 1.067, 38.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=3 */
%   | | | else return 0.04434223022198396;  // std dev = 1.283, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, E), follows(E, D) )
%   | | | then return 0.28015385308303414;  // std dev = 0.193, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.0665133143778422;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.1178352319500916;  // std dev = 0.909, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then return -0.0458658247537461;  // std dev = 0.127, 83.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=9 */
%   | | else return 0.004091685717039699;  // std dev = 0.233, 24.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2773363442050003;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.33572244950269403;  // std dev = 0.362, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.1322388952201256;  // std dev = 0.150, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.11788058457119002;  // std dev = 0.175, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(C, D), follows(D, A) )
%   | then if ( tweets(A, E), tweets(C, E) )
%   | | then return 0.010182541936293584;  // std dev = 0.141, 112.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=35 */
%   | | else return -0.0385308005791173;  // std dev = 0.204, 25.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=6 */
%   | else if ( follows(C, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.18857945634946788;  // std dev = 0.782, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.38124518801803137;  // std dev = 0.372, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.09323476494889149;  // std dev = 0.026, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else if ( follows(A, H), follows(H, I) )
%   | then if ( recursion_accounttype(I, B) )
%   | | then return 0.3271013622520485;  // std dev = 0.065, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.12059941478714872;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else if ( tweets(A, J) )
%   | | then return 0.162039142131256;  // std dev = 0.692, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return -0.019522349596141488;  // std dev = 0.277, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(A, D) )
%   then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | then if ( recursion_accounttype(C, B) )
%   | | then return 0.21819087200021864;  // std dev = 0.018, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.2726096237821932;  // std dev = 0.026, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.08352191404592492;  // std dev = 0.061, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.23871142617182425;  // std dev = 0.125, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.3058261103877409;  // std dev = 0.362, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.10359167677247676;  // std dev = 0.051, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.40480238957347203;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.13851782207673555;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.003503382891479334;  // std dev = 0.289, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.14680225569644062;  // std dev = 0.933, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.1733232351308568;  // std dev = 0.002, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.20288458462796097;  // std dev = 0.082, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.2061543652060044;  // std dev = 0.030, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A) )
%   | then return -0.03006979360588087;  // std dev = 0.116, 130.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=21 */
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.23685830168832167;  // std dev = 0.165, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.10583838999341973;  // std dev = 0.045, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.04772916457994536;  // std dev = 0.432, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.0029793885193954706;  // std dev = 0.914, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1429922987473652;  // std dev = 1.033, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | | else return 0.25650076200614935;  // std dev = 0.276, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.1885268690895323;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.0760084039671287;  // std dev = 0.021, 135.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=1 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.11414120361482549;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.013339681766794917;  // std dev = 0.423, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
%   | | | else return 0.07995822144466033;  // std dev = 0.389, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.028959093550399356;  // std dev = 0.514, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return -0.015671866982900882;  // std dev = 0.924, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '40.781', 'seconds']
Refined model CLL: -0.109632


******************************************
Best model found
******************************************
Results 

CLL : -0.110203 

AUC ROC : 0.994591 

AUC PR : 0.3497 

Precision : 0.339535 

Recall : 0.935897 

F1 : 0.498294 

Total Learning Time : 10.575 

Total Inference Time : 19.331624031066895 

Total revision time: 39.69846694946289
Best scored revision CLL: -0.109632


Results 

CLL : -0.110203 

AUC ROC : 0.994591 

AUC PR : 0.3497 

Precision : 0.339535 

Recall : 0.935897 

F1 : 0.498294 

Total Learning Time : 39.725334577560425 

Total Inference Time : 19.331624031066895 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.857
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8220043567862592;  // std dev = 1.700, 83.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=80 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048796;  // std dev = 0.000, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.1033895264389493;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048774;  // std dev = 2.63e-09, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7127493140937637;  // std dev = 0.999, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.029904108037914684;  // std dev = 3.412, 159.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=18 */
%   | | | else return -0.12544463852839136;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08427078216709394;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.1380061275764993;  // std dev = 2.808, 51.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=16 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5272365343640069;  // std dev = 1.748, 56.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=53 */
%   | | else return 0.7326089260757342;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7947872625027232;  // std dev = 0.120, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5659255155687389;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5659255155687389;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.038228009656590595;  // std dev = 3.366, 173.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=18 */
%   | | | else return 0.02615344492209856;  // std dev = 2.374, 54.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.44798284800369587;  // std dev = 2.535, 83.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=77 */
%   | else return -0.12034097113067128;  // std dev = 0.099, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.45267896238941013;  // std dev = 0.219, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.10988161238190965;  // std dev = 0.088, 38.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13200184009415025;  // std dev = 1.793, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.29858690054976234;  // std dev = 1.805, 58.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=55 */
%   | else return 0.39466303141130915;  // std dev = 0.103, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.3303476281080881;  // std dev = 0.127, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6281014703203701;  // std dev = 0.086, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.08807571567176427;  // std dev = 1.395, 134.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=4 */
%   | | else return 0.0011547502831142282;  // std dev = 0.287, 61.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04052507618441057;  // std dev = 3.049, 211.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=70 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2598806242204765;  // std dev = 0.066, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5458675061049154;  // std dev = 0.588, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12173373593055892;  // std dev = 0.099, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.12467295333646804;  // std dev = 0.160, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3156940726776949;  // std dev = 0.978, 84.000 (wgt'ed) examples reached here.  /* #pos=84 */
%   | else return -0.0834306202957494;  // std dev = 1.931, 206.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=9 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.030426577665235814;  // std dev = 0.612, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.2005826629949337;  // std dev = 0.074, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.25250109808912174;  // std dev = 0.058, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.04070243529151881;  // std dev = 1.693, 125.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=14 */
%   | | | else return -0.04538962409709988;  // std dev = 1.131, 37.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.018747851598089216;  // std dev = 1.605, 56.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=12 */
%   | | | else return 0.12287687548691643;  // std dev = 1.340, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17576112008829367;  // std dev = 0.145, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.29753935947735133;  // std dev = 0.753, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09385921236269659;  // std dev = 0.104, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.36766761899423006;  // std dev = 0.381, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.0931618520520876;  // std dev = 0.000424, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0351524035580704;  // std dev = 1.424, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17493955839169456;  // std dev = 1.457, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | | else return 0.1338383428813018;  // std dev = 5.27e-09, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.08594160917881476;  // std dev = 0.059, 141.000 (wgt'ed) examples reached here.  /* #neg=141 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08691264837968825;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.032229027948029905;  // std dev = 0.469, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.10477503132803634;  // std dev = 0.006, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.023149095442834288;  // std dev = 1.757, 56.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=16 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.636', 'seconds']
Parameter learned model CLL:-0.115632 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.7, 3, 80], 'true,false,true': [0.0, 137, 0], 'true,false,false,true': [0.981, 25, 1], 'true,false,false,false': [0.816, 2, 1], 'false,true,true': [0.0, 0, 18], 'false,true,false': [0.0, 0, 0], 'false,false': [2.63e-09, 23, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [0.999, 1, 63], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.412, 141, 18], 'false,true,false,false': [0.0, 3, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.977, 21, 1], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [2.808, 35, 16]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.748, 3, 53], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.12, 0, 2], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.98e-08, 0, 7], 'false,false,true,false': [2.98e-08, 0, 7], 'false,false,false,true': [3.366, 155, 18], 'false,false,false,false': [2.374, 44, 10]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [2.535, 6, 77], 'true,false': [0.099, 155, 0], 'false,true,true': [0.219, 1, 15], 'false,true,false': [0.088, 37, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.793, 14, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.805, 3, 55], 'true,false': [0.103, 0, 3], 'false,true,true': [0.127, 0, 14], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.086, 0, 14], 'false,false,true,false': [1.395, 130, 4], 'false,false,false': [0.287, 51, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.049, 141, 70], 'false,true': [0.066, 0, 11], 'false,false,true': [0.588, 0, 19], 'false,false,false,true': [0.099, 19, 0], 'false,false,false,false': [0.16, 36, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.978, 0, 84], 'true,false': [1.931, 197, 9], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.612, 10, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [0.074, 0, 61], 'true,false,true': [0.058, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.693, 111, 14], 'false,false,true,false': [1.131, 33, 4], 'false,false,false,true': [1.605, 44, 12], 'false,false,false,false': [1.34, 11, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.145, 1, 58], 'false,true,true,true': [0.753, 0, 26], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.104, 183, 0], 'false,false,true,true': [0.381, 0, 9], 'false,false,true,false': [0.000424, 12, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.424, 17, 7]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.457, 2, 73], 'true,true,false': [5.27e-09, 0, 7], 'true,false,true': [0.059, 141, 0], 'true,false,false,true': [0.0, 10, 0], 'true,false,false,false': [0.469, 11, 2], 'false,true': [0.006, 0, 2], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.757, 40, 16]}]
{'': [0.22086740536443017, 0.2462819750148716], 'false': [-2.9605947323337506e-16, 9.654113257610057e-18], 'true': [0.034838147771809706, 0.011903033822034961], 'true,false': [-6.807206866314829e-17, 0.06420927467300835], 'true,false,false': [0.03698224852071011, 0.22222222222222224], 'false,true': [-2.9605947323337506e-16, nan]}
{'': [0.01560729667635996, 0.09630721298316841], 'false': [0.0720272202493493, 0.13891157212279173], 'false,false': [0.04338842975206612, 0.1610674210681082], 'false,false,false': [0.0, 0.1546251413481683], 'false,true': [nan, 0.0720272202493493], 'false,true,false': [0.07321718749821218, 0.0], 'false,false,true': [nan, 0.04338842975206612]}
{'': [0.0532125528881178, 0.09007756555576013], 'false': [nan, 0.09007756555576016], 'false,false': [1.9032394707859825e-16, 0.07549099963567146], 'false,false,false': [0.06549547430584743, 0.10435475797025114], 'true': [0.05432511872445458, 0.017918316343274954], 'true,true': [0.054555248388539805, 0.0], 'true,false': [0.007175466783602369, 0.0], 'false,false,true': [1.2688263138573217e-16, 1.2688263138573217e-16]}
{'': [0.10039927064755862, 0.1056867059112855], 'false': [0.08570203905130665, 0.15300434632454604], 'false,false': [nan, 0.15300434632454604], 'false,false,false': [nan, 0.15300434632454604], 'true': [0.07742265096724593, 6.282543428003492e-05], 'false,true': [0.04813667952927275, 0.007748839856627278]}
{'': [0.053991103902158576, 0.06762554559843466], 'false': [0.0011468738311051377, 0.06463193205535395], 'false,false': [0.05712091996308886, 0.08252852406555973], 'false,false,true': [0.0005282053291238828, 0.014515100666273754], 'true': [0.05614700962447844, 0.003533602077688177], 'false,true': [0.0011468738311051377, nan]}
{'': [0.04405933776125983, 0.08405072353274377], 'false': [0.0003939412391648987, 0.09069002232115944], 'false,false': [0.01817580107671275, 0.0006456171753299075], 'true': [nan, 0.04405933776125941], 'true,false': [nan, 0.04405933776125983], 'false,false,false': [0.0005189339499102432, 0.0007094933850650008]}
{'': [0.048931242818688485, 0.021996272285854677], 'true': [0.011389357888569233, 0.018097364503551216], 'false': [nan, 0.021996272285854677], 'false,false': [nan, 0.021996272285854677], 'false,false,false': [nan, 0.021996272285854677]}
{'': [0.00022393235731546545, 0.03796394305255207], 'false': [nan, 0.03796394305255214], 'false,false': [0.025585262854462262, 0.06279569403563925], 'false,false,false': [0.04602569767355643, 0.09979031948308197], 'false,false,true': [0.022922115271441945, 0.03456543110834152], 'true': [8.998588448100946e-05, 0.0016993480635219826], 'true,false': [0.0016993480635219826, nan]}
{'': [0.021085121889503785, 0.03091734581214183], 'false': [0.019450961474037614, 0.0737385491057433], 'false,false': [0.05891601175628713, 0.08447459813215713], 'false,false,false': [nan, 0.08447459813215713], 'false,false,true': [0.016119930475304578, 1.4980668794582302e-08], 'false,true': [0.021802578144084466, 5.936926016771288e-05], 'false,true,true': [0.021802578144084466, nan]}
{'': [0.023969476013836304, 0.05346181481804471], 'false': [2.0280142156501105e-05, 0.05514068955960256], 'false,false': [nan, 0.05514068955960256], 'true': [0.026025918491283568, 0.0015755578947782161], 'true,true': [0.028310794834026657, 3.96508223080413e-18], 'true,false': [2.4814540603463365e-05, 0.01031175002667594], 'true,false,false': [-4.163336342344337e-18, 0.01694373571724011]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
1;false,false;follows(F, A), follows(G, F).;true;true
1;false,false,false;follows(A, I), recursion_accounttype(I, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 8.046
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.8359267128772897;  // std dev = 0.989, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( recursion_accounttype(J, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7100096962842151;  // std dev = 0.133, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | else return 0.5944734122109545;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(E, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.04584906092058717;  // std dev = 3.021, 147.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=14 */
%   | | | else return -0.01675981358093086;  // std dev = 1.597, 30.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=4 */
%   | | else return -0.12544463852839133;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.012447465731286364;  // std dev = 0.921, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return -0.13415379646256909;  // std dev = 0.060, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.14973601820819704;  // std dev = 2.777, 49.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=16 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5480915788925306;  // std dev = 0.182, 55.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=53 */
%   | | else return 0.1519295722730416;  // std dev = 0.833, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else return 0.6681138707414336;  // std dev = 0.121, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5577021139903843;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.4609815224154468;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.1138552737650496;  // std dev = 0.860, 108.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=1 */
%   | | | else return 0.03469449718017112;  // std dev = 2.554, 58.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=11 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.05779647099635324;  // std dev = 1.915, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
%   | | | else return 0.182399004713641;  // std dev = 1.945, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.4159265328666749;  // std dev = 0.141, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.5723928772438294;  // std dev = 0.316, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6444801053377036;  // std dev = 0.929, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else return -0.12059097726666318;  // std dev = 0.265, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.43773845290039654;  // std dev = 0.037, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.714493086383674;  // std dev = 0.005, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.12067922174656444;  // std dev = 0.045, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.12522673283468008;  // std dev = 0.954, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.10487331413579594;  // std dev = 1.487, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.33105878928039983;  // std dev = 0.022, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.22313745772349858;  // std dev = 0.948, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.4515820210542399;  // std dev = 0.085, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.10673782746462213;  // std dev = 0.626, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.34560248265189797;  // std dev = 0.094, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5597675202907962;  // std dev = 0.109, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.09023895721155481;  // std dev = 1.196, 139.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=4 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.07174077936635788;  // std dev = 1.155, 56.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=3 */
%   | | | else return 0.038693724600362495;  // std dev = 1.832, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.17133896586874411;  // std dev = 1.654, 33.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=30 */
%   | | | else return 0.26323223108420907;  // std dev = 0.067, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.317771887918275;  // std dev = 0.050, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.2500649359523195;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.0526454300301331;  // std dev = 0.156, 153.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=12 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.2880274819442546;  // std dev = 0.096, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.2305919129674335;  // std dev = 1.514, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.47773834752963307;  // std dev = 0.886, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return -0.1328900930757931;  // std dev = 0.035, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( follows(D, A), follows(D, C) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.225832057508536;  // std dev = 0.036, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.13942037883143285;  // std dev = 0.952, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( follows(A, E), follows(E, C) )
%   | | | then return -0.09651888980236571;  // std dev = 0.802, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.23119396773891673;  // std dev = 0.047, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.2963935699030067;  // std dev = 0.063, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.22092711937968496;  // std dev = 0.065, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(G, A) )
%   | | then return -0.048744501167413856;  // std dev = 0.149, 168.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=12 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.001275301203592955;  // std dev = 1.263, 29.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=7 */
%   | | | else return 0.09561777135447516;  // std dev = 1.402, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.17229242645692402;  // std dev = 0.144, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | else return 0.11359103909609221;  // std dev = 0.262, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return 0.20345792670919804;  // std dev = 0.046, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then return -0.0764047666636138;  // std dev = 0.052, 123.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=1 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.4067379936387858;  // std dev = 0.540, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.1015196291351135;  // std dev = 0.083, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.17247458452960882;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0143262499992742;  // std dev = 1.321, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | | | else return 0.07838753663653913;  // std dev = 1.427, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(E, D), tweets(A, F) )
%   | | | then return 0.13725937658924411;  // std dev = 0.986, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0.16986664342092878;  // std dev = 0.033, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.19048503623182203;  // std dev = 0.128, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.14781191920017153;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.2760159103480123;  // std dev = 0.132, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return -0.08035702771239923;  // std dev = 0.104, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | else if ( tweets(A, I) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.3468050800136962;  // std dev = 0.062, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.12074740966875891;  // std dev = 0.048, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return 0.03256105680132589;  // std dev = 0.322, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.08301291271967735;  // std dev = 1.883, 58.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=54 */
%   | | | else return 0.26164696534526455;  // std dev = 0.525, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.012953109732818158;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return -0.07205416903967136;  // std dev = 0.033, 158.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.20890046464163814;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2730313000611236;  // std dev = 0.055, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11334752982760943;  // std dev = 0.046, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.12111998477388544;  // std dev = 0.795, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.12333152824570019;  // std dev = 1.019, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.555', 'seconds']
Refined model CLL: -0.111848


******************************************
Best model found
******************************************
Results 

CLL : -0.118857 

AUC ROC : 0.994773 

AUC PR : 0.422304 

Precision : 0.327982 

Recall : 0.916667 

F1 : 0.483108 

Total Learning Time : 8.046 

Total Inference Time : 13.495444059371948 

Total revision time: 34.45225274848938
Best scored revision CLL: -0.111848


Results 

CLL : -0.118857 

AUC ROC : 0.994773 

AUC PR : 0.422304 

Precision : 0.327982 

Recall : 0.916667 

F1 : 0.483108 

Total Learning Time : 34.47912037658691 

Total Inference Time : 13.495444059371948 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 3.247
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8298470483070582;  // std dev = 1.707, 106.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | | else if ( follows(E, C), tweets(E, F) )
%   | | | then return -0.09837280403092258;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(A, H) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 6.97e-09, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6912596003695409;  // std dev = 1.708, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(D, E) )
%   | | | then return -0.025374683024245493;  // std dev = 3.748, 187.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=22 */
%   | | | else return -0.12544463852839133;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(F, F), tweets(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10172132312650713;  // std dev = 0.986, 35.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=1 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.3861400788776212;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.1734553705590418;  // std dev = 2.801, 48.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5687878615884268;  // std dev = 1.075, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.7301783501036708;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.805990906046332;  // std dev = 0.106, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6354595655938855;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5692748934177886;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5692748934177886;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.044142294527518784;  // std dev = 3.645, 215.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=21 */
%   | | | else return 0.007828282613100928;  // std dev = 2.507, 65.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.5064870400894551;  // std dev = 1.219, 97.000 (wgt'ed) examples reached here.  /* #pos=97 */
%   | else return -0.12101079442507581;  // std dev = 0.132, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   else if ( follows(E, A), tweets(E, F) )
%   | then if ( follows(G, E), recursion_accounttype(G, B) )
%   | | then return 0.4388576206000721;  // std dev = 0.257, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return -0.109392713196385;  // std dev = 0.087, 39.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=1 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0730492654526919;  // std dev = 2.070, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then return 0.2955733123585833;  // std dev = 1.719, 76.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=73 */
%   | else return 0.42468986973766676;  // std dev = 0.083, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.32090234886224545;  // std dev = 0.139, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.6142533659814444;  // std dev = 0.102, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.0941395696061391;  // std dev = 1.360, 181.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=4 */
%   | | else return -0.03229975392520247;  // std dev = 0.251, 95.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.020077886063895076;  // std dev = 3.741, 285.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2533558491810152;  // std dev = 0.074, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5319057755655027;  // std dev = 0.673, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12129896960259724;  // std dev = 0.107, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.11957006765038855;  // std dev = 0.130, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2706250674496877;  // std dev = 2.255, 111.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=107 */
%   | else return -0.07313399809322889;  // std dev = 1.864, 201.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.029367898771360347;  // std dev = 1.042, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17727272286121223;  // std dev = 1.400, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else if ( follows(A, E), tweets(E, F) )
%   | | then return 0.2662449536380009;  // std dev = 0.064, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return -0.04549475907774281;  // std dev = 1.977, 161.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=17 */
%   | | | else return -0.03489689195711189;  // std dev = 1.240, 42.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.010184057851752712;  // std dev = 1.455, 59.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=13 */
%   | | | else return 0.12014109483870801;  // std dev = 1.498, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1316722270295305;  // std dev = 0.249, 82.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.25615611133575156;  // std dev = 1.473, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09114034900568754;  // std dev = 0.086, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3555330295643444;  // std dev = 0.355, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09695078054589372;  // std dev = 0.000381, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( follows(J, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08189394949273834;  // std dev = 1.480, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18284186560962734;  // std dev = 1.729, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.04544911726723562;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08403636183179918;  // std dev = 0.059, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07959889533456321;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.030760520788426702;  // std dev = 0.477, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.15616742977761952;  // std dev = 0.070, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.005049016490434088;  // std dev = 1.855, 70.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.884', 'seconds']
Parameter learned model CLL:-0.112843 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(E, C), tweets(E, F)', 'false': 'recursion_accounttype(G, B)', 'false,true': 'follows(G, H), follows(A, H)'}, {'true,true': [1.707, 3, 103], 'true,false,true': [0.0, 176, 0], 'true,false,false,true': [0.978, 22, 1], 'true,false,false,false': [0.866, 3, 1], 'false,true,true': [0.0, 0, 21], 'false,true,false': [0.0, 0, 0], 'false,false': [6.97e-09, 45, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,true,false': 'tweets(D, E)', 'false,false': 'follows(F, A), follows(G, F)', 'false,false,true': 'follows(F, F), tweets(G, H)', 'false,false,false': 'follows(A, I), recursion_accounttype(I, B)'}, {'true': [1.708, 3, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [3.748, 165, 22], 'false,true,false,false': [0.0, 5, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.986, 34, 1], 'false,false,false,true': [1.155, 2, 4], 'false,false,false,false': [2.801, 31, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.075, 1, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.106, 0, 2], 'true,false,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.645, 194, 21], 'false,false,false,false': [2.507, 54, 11]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, A), tweets(E, F)', 'false,true': 'follows(G, E), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), recursion_accounttype(H, B)', 'false,false,false': 'follows(A, A)'}, {'true,true': [1.219, 0, 97], 'true,false': [0.132, 186, 0], 'false,true,true': [0.257, 1, 19], 'false,true,false': [0.087, 38, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.07, 24, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D), tweets(D, E)', 'false': 'follows(F, A), recursion_accounttype(F, B)', 'false,true': 'follows(G, F), follows(F, G)', 'false,false': 'tweets(A, H), follows(A, I)', 'false,false,true': 'follows(I, J), recursion_accounttype(J, B)'}, {'true,true': [1.719, 3, 73], 'true,false': [0.083, 0, 4], 'false,true,true': [0.139, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.102, 0, 17], 'false,false,true,false': [1.36, 177, 4], 'false,false,false': [0.251, 84, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.741, 194, 91], 'false,true': [0.074, 0, 13], 'false,false,true': [0.673, 0, 22], 'false,false,false,true': [0.107, 28, 0], 'false,false,false,false': [0.13, 29, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.255, 4, 107], 'true,false': [1.864, 190, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.042, 19, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E), tweets(E, F)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), follows(A, G)', 'false,false,true': 'tweets(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true': [1.4, 2, 80], 'true,false,true': [0.064, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [1.977, 144, 17], 'false,false,true,false': [1.24, 37, 5], 'false,false,false,true': [1.455, 46, 13], 'false,false,false,false': [1.498, 14, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'tweets(E, F), follows(E, G)', 'false,false': 'tweets(A, H)', 'false,false,true': 'recursion_accounttype(I, B)', 'false,false,false': 'follows(J, A)'}, {'true': [0.249, 5, 77], 'false,true,true,true': [1.473, 2, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.086, 220, 0], 'false,false,true,true': [0.355, 0, 9], 'false,false,true,false': [0.000381, 26, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.48, 15, 8]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.729, 2, 94], 'true,true,false': [0.949, 1, 9], 'true,false,true': [0.059, 171, 0], 'true,false,false,true': [0.0, 12, 0], 'true,false,false,false': [0.477, 12, 2], 'false,true': [0.07, 0, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.855, 53, 17]}]
{'': [0.22433782637383573, 0.21694214876033072], 'true': [0.027500889996442155, 0.009755150573903597], 'false': [0.0, 4.9343245538895844e-17], 'true,false': [-1.8924256101565169e-16, 0.0685871056241427], 'true,false,false': [0.041587901701323295, 0.18750000000000003], 'false,true': [0.0, nan]}
{'': [0.034313049653246705, 0.09639492454229633], 'false': [0.07340310133684004, 0.1380905389835235], 'false,false': [0.027755102040816264, 0.17449161227387913], 'false,false,false': [0.22222222222222224, 0.16349919879116298], 'false,true': [nan, 0.07340310133684004], 'false,true,false': [0.07510496995951202, -2.7755575615628915e-18], 'false,false,true': [nan, 0.027755102040816264]}
{'': [0.016826070465666084, 0.08585123616954993], 'false': [nan, 0.08585123616955], 'false,false': [-1.5673736818237505e-16, 0.07036456217664873], 'false,false,false': [0.06178664762436209, 0.09666372740375134], 'true': [0.016402886395356524, 0.008328244678592464], 'true,true': [0.01627215060620532, 0.0], 'true,false': [0.005597441984771412, 0.0], 'false,false,true': [-1.4802973661668753e-16, -1.1102230246251565e-16]}
{'': [0.0940172482483178, 0.1073445932346909], 'false': [0.09473148523608725, 0.12988786358975551], 'false,false': [nan, 0.12988786358975551], 'false,false,false': [nan, 0.12988786358975551], 'false,true': [0.06595584910945582, 0.007597228996731216], 'true': [0.015325607820998777, 9.390373000751114e-05]}
{'': [0.037820170467506534, 0.057065104810869946], 'false': [0.0011439487084039916, 0.053441772855208035], 'false,false': [0.048783229139481736, 0.06315045811511576], 'false,false,true': [0.0006122359876068332, 0.01022197368260309], 'true': [0.03888599199128945, 0.0017320303956757654], 'false,true': [0.0011439487084039916, nan]}
{'': [0.04910332349337085, 0.08319429235605795], 'false': [0.0004244869181234849, 0.09159935258575341], 'false,false': [0.020609048819061195, 0.0004976302340406187], 'true': [nan, 0.04910332349337137], 'true,false': [nan, 0.04910332349337085], 'false,false,false': [0.00040510412319729697, 0.000585497458550058]}
{'': [0.05452604519027149, 0.040205409581958576], 'true': [0.045821595766192914, 0.01729162494407565], 'false': [nan, 0.040205409581958576], 'false,false': [nan, 0.040205409581958576], 'false,false,false': [nan, 0.040205409581958576]}
{'': [0.023582259741882088, 0.036401631894952685], 'false': [nan, 0.036401631894953185], 'false,false': [0.02684013874784594, 0.05661454845749957], 'false,false,false': [0.035879806872467286, 0.09758300866338543], 'false,false,true': [0.024268009886730516, 0.036610888803526], 'true': [0.02391876015288209, 0.0020581626093268135], 'true,false': [0.0020581626093268135, nan]}
{'': [0.062205030712635244, 0.03153723420994236], 'false': [0.022553051992015946, 0.06445710078748251], 'false,false': [0.04271431760158419, 0.09518734718107492], 'false,false,false': [nan, 0.09518734718107492], 'false,false,true': [0.014017460137544877, 5.593664341547903e-09], 'false,true': [0.06379579797140282, 3.388068039538072e-05], 'false,true,true': [0.06379579797140282, nan]}
{'': [0.028481391544821148, 0.047720375026630235], 'false': [0.0012376649297835933, 0.04914210962798628], 'false,false': [nan, 0.04914210962798628], 'true': [0.038301156804592, 0.0013574123632959288], 'true,true': [0.03112327530001578, 0.09011287905494553], 'true,false': [2.004864952013936e-05, 0.009333180922055966], 'true,false,false': [0.0, 0.016232194824598815]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(G, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,true;tweets(D, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D), tweets(D, E).;true;true
4;false;follows(F, A), recursion_accounttype(F, B).;true;true
4;false,false;tweets(A, H), follows(A, I).;true;true
4;false,false,true;follows(I, J), recursion_accounttype(J, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;tweets(A, H).;true;true
8;false,false,true;recursion_accounttype(I, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 9.826
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.7956489350995121;  // std dev = 1.677, 48.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=45 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.8581489350995121;  // std dev = 8.43e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004883;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | | else return -0.08302753548872306;  // std dev = 0.235, 34.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=2 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( tweets(A, H) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return 0.6746536016338801;  // std dev = 0.227, 55.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=52 */
%   | | else return 0.7424626769986598;  // std dev = 0.051, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.7194734122109544;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(A, G), follows(G, A) )
%   | then if ( tweets(G, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.7248047452833223;  // std dev = 0.016, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.049553795647611594;  // std dev = 3.122, 167.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=15 */
%   | | else return -0.12544463852839133;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.5822060118124048;  // std dev = 0.954, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(K, A) )
%   | | | then return -0.1320415114439665;  // std dev = 1.29e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return 0.13824916999682693;  // std dev = 2.924, 55.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.518770998352409;  // std dev = 0.226, 75.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=71 */
%   | else if ( follows(E, A) )
%   | | then return 0.7718782721360548;  // std dev = 0.020, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.39577304218555537;  // std dev = 0.903, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(A, H), follows(H, A) )
%   | | | then return 0.5619894291031107;  // std dev = 0.012, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.35081937420736853;  // std dev = 0.896, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(I, A) )
%   | | then return -0.060941544369453864;  // std dev = 0.217, 214.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=15 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08049552140570194;  // std dev = 2.016, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.09294696673111409;  // std dev = 2.178, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.4959293184740164;  // std dev = 0.155, 98.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=97 */
%   | else return -0.11718795583173851;  // std dev = 0.147, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return 0.4252687721624953;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, G), follows(G, E) )
%   | | | then return 0.0931060623124113;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.4341790542639141;  // std dev = 0.040, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6147895013737541;  // std dev = 0.346, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.11334684994480826;  // std dev = 0.008, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.15091809166095968;  // std dev = 1.236, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.12201268529305291;  // std dev = 1.658, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), tweets(D, E) )
%   | then if ( follows(A, F), follows(F, A) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.31334516538319235;  // std dev = 0.989, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | | else return 0.33536147707405956;  // std dev = 0.112, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.41610903234434327;  // std dev = 0.113, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.22325928365100065;  // std dev = 0.830, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3172926412332063;  // std dev = 0.075, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( tweets(A, I), follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.5581031573052577;  // std dev = 0.961, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.09222401693710147;  // std dev = 1.319, 162.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=4 */
%   | | else if ( follows(L, A) )
%   | | | then return -0.07205231969859227;  // std dev = 1.230, 64.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=3 */
%   | | | else return 0.07586123249934923;  // std dev = 1.976, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.26491168711708557;  // std dev = 0.115, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.3375778101303835;  // std dev = 1.320, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return -0.09429413161958099;  // std dev = 0.006, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | | else return -0.009723497732425873;  // std dev = 0.217, 33.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.26644263072038615;  // std dev = 0.166, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return -0.008027261298821142;  // std dev = 1.299, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.5618132583034203;  // std dev = 0.402, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.12701198109056488;  // std dev = 0.158, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return -0.1304159106792005;  // std dev = 0.278, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( tweets(C, D) )
%   | | then if ( follows(A, E), follows(C, E) )
%   | | | then return 0.1271241779415572;  // std dev = 1.904, 43.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=39 */
%   | | | else return -0.11292007094525043;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.20881668396012493;  // std dev = 0.019, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.2186760763535665;  // std dev = 0.033, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(F, A) )
%   | then return -0.04584732777593919;  // std dev = 0.147, 242.000 (wgt'ed) examples reached here.  /* #neg=219 #pos=23 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.25563800696040806;  // std dev = 1.057, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.12600592121747797;  // std dev = 0.089, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.1613115764553963;  // std dev = 0.779, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.07514613642098272;  // std dev = 1.326, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.19145965631723633;  // std dev = 0.022, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( tweets(A, F), follows(D, E) )
%   | | | then return -0.06978031616815657;  // std dev = 0.872, 118.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=3 */
%   | | | else return -0.08800828215470323;  // std dev = 0.025, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(A, D), tweets(D, G) )
%   | | | then return 0.032045922649948336;  // std dev = 1.874, 75.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=19 */
%   | | | else return -0.07948478197845465;  // std dev = 0.707, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.12787759881223182;  // std dev = 1.402, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return -0.11674786515084719;  // std dev = 0.102, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.10367049269943557;  // std dev = 0.788, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.03711021064975589;  // std dev = 1.347, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.15566725233231535;  // std dev = 0.118, 72.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | else return 0.296851624219021;  // std dev = 0.230, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.14989292626960485;  // std dev = 0.071, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.4665143677071496;  // std dev = 0.319, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.08106571472610234;  // std dev = 0.082, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else if ( tweets(A, H) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2869439095616879;  // std dev = 0.231, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.11100683063158864;  // std dev = 0.117, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.008803513492412667;  // std dev = 0.773, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.00915732797786107;  // std dev = 1.279, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.12808768927690484;  // std dev = 0.991, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.07081660966791056;  // std dev = 1.355, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.05849817323163556;  // std dev = 0.912, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.3004611849425166;  // std dev = 0.932, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return -0.07149195043432742;  // std dev = 0.037, 206.000 (wgt'ed) examples reached here.  /* #neg=204 #pos=2 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then return 0.21726646018309206;  // std dev = 0.150, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, I) )
%   | | then return -0.012860995130354177;  // std dev = 0.153, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0609278970532362;  // std dev = 0.715, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.12418231446960878;  // std dev = 1.203, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '21.941', 'seconds']
Refined model CLL: -0.11049


******************************************
Best model found
******************************************
Results 

CLL : -0.112305 

AUC ROC : 0.99499 

AUC PR : 0.424931 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 9.826 

Total Inference Time : 21.66473889350891 

Total revision time: 47.62540559577942
Best scored revision CLL: -0.11049


Results 

CLL : -0.112305 

AUC ROC : 0.99499 

AUC PR : 0.424931 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 47.65227322387695 

Total Inference Time : 21.66473889350891 

Starting experiments for fasttext using relax-wmd 

