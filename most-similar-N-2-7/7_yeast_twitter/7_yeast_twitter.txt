Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Run: 1
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.284
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.834893121146022;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048827;  // std dev = 0.000, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7008873074338162;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839183;  // std dev = 0.000, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5500482715588787;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360686;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3962384903878694;  // std dev = 1.967, 122.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=118 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.42902537563377185;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783616;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.28990475439954955;  // std dev = 2.392, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0926912761892605;  // std dev = 6.50e-08, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | | else return -0.09269127618926087;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2359239121982681;  // std dev = 2.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.67e-09, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19895009577546677;  // std dev = 1.968, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 6.50e-08, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15092770472636888;  // std dev = 2.394, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333674;  // std dev = 1.23e-07, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333698;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15042145812629895;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6.50e-08, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | | else return -0.06842697784420267;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12230490880721584;  // std dev = 0.173, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 1.86e-09, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.285', 'seconds']
Parameter learned model CLL:-0.09248 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 246, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 238, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 254, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.967, 4, 118], 'true,false': [0.0, 230, 0], 'false,true,true': [5.27e-09, 0, 8], 'false,true,false': [0.0, 15, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.392, 6, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.5e-08, 216, 0], 'false,false,false': [0.0, 19, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.67e-09, 234, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.968, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.5e-08, 243, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [2.394, 6, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.23e-07, 240, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.73e-09, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.5e-08, 221, 0], 'false,false,false': [0.0, 18, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.173, 4, 126], 'false,true': [0.0, 0, 0], 'false,false': [1.86e-09, 237, 0]}]
{'': [0.022714981070853308, -1.408087738548979e-16], 'false': [-1.408087738548979e-16, nan]}
{'': [0.022714981070850387, -5.784355254349555e-17], 'false': [-5.784355254349555e-17, nan]}
{'': [0.015380859374999833, -9.616104937698206e-17], 'false': [nan, -9.616104937698206e-17]}
{'': [0.06711819357490939, 0.0638698058100936], 'true': [0.03171190540177458, -7.916372871240247e-17], 'false': [0.0638698058100936, nan], 'false,true': [2.7755575615628914e-17, -1.8503717077085942e-18]}
{'': [0.04335137002035612, 2.834611977766357e-17], 'true': [0.04335137002035612, nan], 'false': [nan, 2.834611977766357e-17], 'false,false': [1.9531701359146273e-17, 1.460819769243627e-18], 'false,false,true': [nan, 1.9531701359146273e-17]}
{'': [0.03668334383349621, 3.226289131389344e-17], 'false': [nan, 3.226289131389344e-17], 'false,false': [nan, 3.226289131389344e-17]}
{'': [0.02980259948482064, 1.7361512319241132e-17], 'false': [nan, 1.7361512319241132e-17], 'false,false': [nan, 1.7361512319241132e-17], 'false,false,false': [1.7361512319241132e-17, nan]}
{'': [0.04343602954693398, 5.419986419429898e-17], 'true': [0.04343602954693398, nan], 'false': [6.29126380620922e-17, 9.912705577010326e-19], 'false,false': [nan, 9.912705577010326e-19]}
{'': [0.022702799718762618, 6.5033984706076116e-18], 'false': [nan, 6.5033984706076116e-18], 'false,false': [1.9089807663237986e-17, -2.3129646346357427e-18], 'false,false,true': [nan, 1.9089807663237986e-17]}
{'': [0.029933345706807633, 2.3422426679855622e-18], 'false': [nan, 2.3422426679855622e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 27.541
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.8392810105712104;  // std dev = 0.991, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.6914822684328455;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else return 0.858148935099512;  // std dev = 1.46e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.5724346493852266;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=10 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.14185106490048827;  // std dev = 0.000, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.6994562118810685;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.7265932220033006;  // std dev = 0.063, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.7264860289921368;  // std dev = 0.071, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.5072200425127318;  // std dev = 1.218, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else return 0.7302611638177723;  // std dev = 0.113, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else return -0.12544463852839183;  // std dev = 0.000, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.5630857339853709;  // std dev = 0.043, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.49694476663004483;  // std dev = 0.984, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(G, A), follows(G, D) )
%   | | | then return 0.5551501385556232;  // std dev = 0.015, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.35775976950487154;  // std dev = 0.886, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.5794514072782158;  // std dev = 0.248, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   else return -0.11231637819360686;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.4330853074667236;  // std dev = 0.249, 90.000 (wgt'ed) examples reached here.  /* #pos=90 */
%   | | | else return 0.3230572298392892;  // std dev = 0.913, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.10293280448133256;  // std dev = 1.167, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.4214843658259542;  // std dev = 0.111, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.41494491287294444;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3281545095292222;  // std dev = 0.163, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(G, A) )
%   | | | then return 0.04969720798192232;  // std dev = 1.446, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return 0.4171083981022865;  // std dev = 0.037, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.33388000062361095;  // std dev = 0.220, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(A, H) )
%   | then return -0.09269127618926047;  // std dev = 8.43e-08, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
%   | else return -0.09269127618926087;  // std dev = 3.73e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.25476800293398827;  // std dev = 0.027, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.2671250765576423;  // std dev = 0.055, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.286293195091392;  // std dev = 0.152, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.31885761941225377;  // std dev = 0.116, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(H, A), follows(A, I) )
%   | | then if ( follows(H, I), recursion_accounttype(H, B) )
%   | | | then return 0.26804298262272724;  // std dev = 0.063, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.347240485929341;  // std dev = 0.837, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.2831460909522526;  // std dev = 0.118, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.2510136642716159;  // std dev = 0.044, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.08518475138839678;  // std dev = 5.74e-09, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), follows(D, A) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.21091566423458635;  // std dev = 0.009, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.10951970359728186;  // std dev = 1.601, 29.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=26 */
%   | | else if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | | then return 0.2754823842739238;  // std dev = 0.163, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.22781656928234617;  // std dev = 0.180, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then return 0.20172539458549582;  // std dev = 0.000941, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.09678182883066949;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.0706739269059208;  // std dev = 0.895, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(A, J) )
%   | then return -0.07877675473109144;  // std dev = 4.37e-09, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | else return -0.07877675473109166;  // std dev = 5.27e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.13551617261033075;  // std dev = 1.374, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | | | else return 0.20462362983551804;  // std dev = 0.177, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return 0.019651708253174572;  // std dev = 0.884, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.17721773164191448;  // std dev = 0.040, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.16714719661875863;  // std dev = 0.013, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, H), follows(I, A) )
%   | | | then return 0.23467392369538245;  // std dev = 0.035, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.19447072779069988;  // std dev = 0.023, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(A, J) )
%   | then return -0.07324622576333673;  // std dev = 8.01e-09, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | else return -0.07324622576333698;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.1609212151491096;  // std dev = 0.041, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.20390840590070272;  // std dev = 0.113, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.1494310568768704;  // std dev = 0.042, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.16397755792553415;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.15934850335641731;  // std dev = 0.030, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.18778147555304756;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.21526515751520572;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.17717765503487187;  // std dev = 0.057, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06842697784420276;  // std dev = 0.000, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.13975468681118453;  // std dev = 0.032, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.147670148831734;  // std dev = 0.012, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.0742577564024022;  // std dev = 1.262, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return -0.16089638576857893;  // std dev = 1.156, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.13449936198422124;  // std dev = 0.032, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.12757932088481744;  // std dev = 0.010, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, J), follows(K, A) )
%   | | | then return 0.1681672663028442;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.14353361016791266;  // std dev = 0.017, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.06419184008202622;  // std dev = 2.79e-09, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.762', 'seconds']
Refined model CLL: -0.091785


******************************************
Best model found
******************************************
Results 

CLL : -0.086276 

AUC ROC : 0.996058 

AUC PR : 0.470138 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 27.541 

Total Inference Time : 8.264458179473877 

Total revision time: 52.846295309066775
Best scored revision CLL: -0.091785


Results 

CLL : -0.086276 

AUC ROC : 0.996058 

AUC PR : 0.470138 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 54.36226363182068 

Total Inference Time : 8.264458179473877 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.933
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8211118980624726;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004879;  // std dev = 5.16e-08, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7018875357578005;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839202;  // std dev = 0.000, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5258659346272478;  // std dev = 0.203, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936069;  // std dev = 0.000, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4303508522994298;  // std dev = 0.996, 129.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=128 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43810279028392474;  // std dev = 1.29e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.10159632948783617;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.33612603152714343;  // std dev = 0.008, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926046;  // std dev = 1.12e-07, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
%   | | else return -0.092691276189261;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23460768069837545;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.96e-09, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20981327797829943;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 5.16e-08, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16942730116915383;  // std dev = 1.715, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333682;  // std dev = 1.15e-07, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1387425800498651;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6.32e-08, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | | else return -0.06842697784420262;  // std dev = 2.79e-09, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12112090052663052;  // std dev = 0.153, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202598;  // std dev = 6.52e-09, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.920', 'seconds']
Parameter learned model CLL:-0.087495 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.404, 6, 156], 'false,true': [5.16e-08, 291, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 312, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.203, 7, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 291, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.996, 1, 128], 'true,false': [0.0, 261, 0], 'false,true,true': [1.29e-08, 0, 28], 'false,true,false': [0.0, 52, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.008, 0, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.12e-07, 258, 0], 'false,false,false': [0.0, 58, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.201, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.96e-09, 297, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.16e-08, 281, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.715, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.15e-07, 258, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 64, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.32e-08, 228, 0], 'false,false,false': [2.79e-09, 49, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.153, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [6.52e-09, 298, 0]}]
{'': [0.03566529492456011, 9.156478553609538e-18], 'false': [9.156478553609538e-18, nan]}
{'': [0.024375000000003855, -8.82484968291791e-17], 'false': [-8.82484968291791e-17, nan]}
{'': [0.04110053069366404, -1.0224734384863984e-16], 'false': [nan, -1.0224734384863984e-16]}
{'': [0.06518224683879072, 0.06626509432324929], 'false': [0.06626509432324929, nan], 'false,true': [1.5860328923216522e-16, -8.540177112501205e-18], 'true': [0.007691845441979204, -6.465666656820835e-17]}
{'': [4.3995200585756356e-07, 9.696884645460228e-17], 'true': [4.3995200585756356e-07, nan], 'false': [nan, 9.696884645460228e-17], 'false,false': [4.819572820078199e-17, -2.9669753244292974e-17], 'false,false,true': [nan, 4.819572820078199e-17]}
{'': [0.030093633410804562, 3.588599675556062e-17], 'false': [nan, 3.588599675556062e-17], 'false,false': [nan, 3.588599675556062e-17]}
{'': [0.012492250967078027, 9.482331882919487e-18], 'false': [nan, 9.482331882919487e-18], 'false,false': [nan, 9.482331882919487e-18], 'false,false,false': [9.482331882919487e-18, nan]}
{'': [0.018504267912493117, 2.2756124107223705e-17], 'true': [0.018504267912493117, nan], 'false': [5.163828021512356e-17, -1.1275702593849246e-17], 'false,false': [nan, -1.1275702593849246e-17]}
{'': [0.024391729682261963, -3.6873833308849965e-17], 'false': [nan, -3.6873833308849965e-17], 'false,false': [1.7529837230923523e-17, 7.93016446160826e-18], 'false,false,true': [nan, 1.7529837230923523e-17]}
{'': [0.023450806602973256, 4.247161906284156e-17], 'false': [nan, 4.247161906284156e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 32.166
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.8581489350995115;  // std dev = 2.60e-07, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.6763307532813305;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return 0.858148935099512;  // std dev = 2.38e-07, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.14185106490048768;  // std dev = 1.69e-07, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(E, D) )
%   | | | then return 0.6874179140982777;  // std dev = 0.950, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | | else return 0.7272945849589957;  // std dev = 0.088, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.5528067455442878;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.7194734122109546;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.12544463852839216;  // std dev = 0.000, 330.000 (wgt'ed) examples reached here.  /* #neg=330 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5618467031018767;  // std dev = 0.124, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(E, B) )
%   | | | then return 0.44738316309301024;  // std dev = 0.920, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5553664367462844;  // std dev = 1.03e-07, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.4442553256351735;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.11231637819360683;  // std dev = 0.000, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(G, F) )
%   | | | then return 0.3770764936761832;  // std dev = 1.961, 78.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=74 */
%   | | | else return 0.3383704698492853;  // std dev = 1.338, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | else return 0.4175715429314161;  // std dev = 0.017, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return -0.1015963294878366;  // std dev = 0.000, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.42445360731451276;  // std dev = 0.068, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.10159632948783619;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3310399019061816;  // std dev = 0.134, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.10574599294084412;  // std dev = 1.201, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.3289497595217058;  // std dev = 0.009, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.2968203324991819;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.32681829568166054;  // std dev = 0.057, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(A, I) )
%   | then return -0.09269127618926044;  // std dev = 1.25e-07, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
%   | else return -0.092691276189261;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.2682343489365324;  // std dev = 0.094, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | | else return 0.3150270375220005;  // std dev = 0.155, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return 0.19456335072110242;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.26223462429677535;  // std dev = 0.069, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.25341675098470573;  // std dev = 0.013, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.3780836570879577;  // std dev = 0.777, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.2538834377120375;  // std dev = 0.002, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.2695395258673082;  // std dev = 0.030, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839678;  // std dev = 5.96e-09, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(E, A), follows(F, E) )
%   | | | then return 0.1916004245525453;  // std dev = 0.987, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | | else return 0.23048702800738036;  // std dev = 0.055, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.10977561475363011;  // std dev = 1.310, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.19229407605964927;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.2089811200044089;  // std dev = 0.011, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.20484560035941837;  // std dev = 0.003, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.206443936166105;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.21865812024768036;  // std dev = 0.120, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.07877675473109141;  // std dev = 5.96e-08, 342.000 (wgt'ed) examples reached here.  /* #neg=342 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.18231175490731347;  // std dev = 0.082, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | | else return 0.21642603249657005;  // std dev = 0.177, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.009096047975375155;  // std dev = 0.892, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.05607494333658008;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.1582355364734784;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.19423736073767106;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.17871389114162667;  // std dev = 0.030, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(A, J) )
%   | then return -0.07324622576333681;  // std dev = 7.27e-09, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
%   | else return -0.07324622576333703;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.16068032068558885;  // std dev = 0.083, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.09839665479793919;  // std dev = 1.364, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.1512908315752456;  // std dev = 0.009, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.37197203621316577;  // std dev = 0.761, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then if ( recursion_accounttype(G, B), tweets(G, H) )
%   | | | then return 0.19176010089724083;  // std dev = 0.023, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.16485510636542092;  // std dev = 0.042, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.14894527762447293;  // std dev = 0.004, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.15740426104247604;  // std dev = 0.067, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else return -0.0684269778442029;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), recursion_accounttype(D, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.11480377303320206;  // std dev = 0.986, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return 0.17966711647452627;  // std dev = 0.116, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return -0.007080912939677898;  // std dev = 1.566, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | | else return 0.11357892932267381;  // std dev = 1.269, 55.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=53 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.13068736261114328;  // std dev = 0.000626, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.14343011575889625;  // std dev = 0.028, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.13769788575989636;  // std dev = 0.019, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( tweets(A, H) )
%   | then return -0.06419184008202625;  // std dev = 2.58e-08, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.050', 'seconds']
Refined model CLL: -0.085737


******************************************
Best model found
******************************************
Results 

CLL : -0.091205 

AUC ROC : 0.994034 

AUC PR : 0.392 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 32.166 

Total Inference Time : 9.48476767539978 

Total revision time: 64.8531651725769
Best scored revision CLL: -0.085737


Results 

CLL : -0.091205 

AUC ROC : 0.994034 

AUC PR : 0.392 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 66.3691334953308 

Total Inference Time : 9.48476767539978 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.412
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8199809961682126;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004882;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6535825753357644;  // std dev = 3.044, 136.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839183;  // std dev = 0.000, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5576362392655513;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360686;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4340527838913352;  // std dev = 0.996, 119.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=118 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.44245614523587307;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783616;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.331568112092396;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926046;  // std dev = 1.07e-07, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
%   | | else return -0.09269127618926087;  // std dev = 1.32e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23129817838607278;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.89e-09, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1737688107001446;  // std dev = 2.576, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 5.96e-08, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1666657439198841;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333661;  // std dev = 1.30e-07, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333699;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14908346605063966;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6.14e-08, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | | else return -0.06842697784420268;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11394184006197608;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 2.28e-09, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.389', 'seconds']
Parameter learned model CLL:-0.092454 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 254, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [3.044, 10, 126], 'false,true': [0.0, 240, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 254, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.996, 1, 118], 'true,false': [0.0, 245, 0], 'false,true,true': [0.0, 0, 8], 'false,true,false': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.996, 1, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.07e-07, 254, 0], 'false,false,false': [1.32e-09, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 265, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.576, 7, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.96e-08, 255, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.969, 4, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.3e-07, 216, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 17, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.14e-08, 232, 0], 'false,false,false': [0.0, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false': [2.28e-09, 251, 0]}]
{'': [0.03671114736903867, -1.1189649382048822e-16], 'false': [-1.1189649382048822e-16, nan]}
{'': [0.06812283737023946, -5.921189464667501e-17], 'false': [-5.921189464667501e-17, nan]}
{'': [0.022714981070849342, -9.616104937698206e-17], 'false': [nan, -9.616104937698206e-17]}
{'': [0.06585929371065045, 0.06440809752705108], 'true': [0.008332744862650584, -7.250436079184695e-17], 'false': [0.06440809752705108, nan], 'false,true': [0.0, -1.6326809185664067e-18]}
{'': [0.007810357748421952, 5.843279076974508e-17], 'true': [0.007810357748421952, nan], 'false': [nan, 5.843279076974508e-17], 'false,false': [4.545795061457334e-17, 2.3129646346357427e-18], 'false,false,true': [nan, 4.545795061457334e-17]}
{'': [0.03670360526729715, 3.435407095066522e-17], 'false': [nan, 3.435407095066522e-17], 'false,false': [nan, 3.435407095066522e-17]}
{'': [0.04989419801941397, 1.3932210505100003e-17], 'false': [nan, 1.3932210505100003e-17], 'false,false': [nan, 1.3932210505100003e-17], 'false,false,false': [1.3932210505100003e-17, nan]}
{'': [0.029817555835275053, 6.766166072822842e-17], 'true': [0.029817555835275053, nan], 'false': [7.812680543658509e-17, 0.0], 'false,false': [nan, 0.0]}
{'': [0.022729733078660795, -9.026203452237046e-19], 'false': [nan, -9.026203452237046e-19], 'false,false': [1.6270509843644534e-17, -2.9738116731030977e-18], 'false,false,true': [nan, 1.6270509843644534e-17]}
{'': [0.03670617494251813, 3.5385594410363554e-18], 'false': [nan, 3.5385594410363554e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 44.797
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), follows(D, A) )
%   | | then return 0.8581489350995126;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.858148935099512;  // std dev = 1.58e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.1418510649004884;  // std dev = 0.000, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E), follows(A, D) )
%   | | | then return 0.6956638884014311;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.7229264970645287;  // std dev = 0.085, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.681011873749416;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.39693316398137063;  // std dev = 0.830, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.733864192349287;  // std dev = 0.048, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.46947341221095434;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.125444638528392;  // std dev = 0.000, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.5588563172805922;  // std dev = 0.022, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.5107600644493352;  // std dev = 0.973, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.5795025101751738;  // std dev = 0.142, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.4834167320793811;  // std dev = 0.971, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.17316810283090867;  // std dev = 1.120, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(H, A), tweets(A, I) )
%   | | | then return 0.48791949545156804;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.5784870537753561;  // std dev = 0.116, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.11231637819360686;  // std dev = 0.000, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.4140246695543665;  // std dev = 0.941, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | | else return 0.10433134952912378;  // std dev = 0.751, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.45086737773671803;  // std dev = 0.229, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return -0.10348480130577449;  // std dev = 0.424, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4187581836788298;  // std dev = 0.014, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, F) )
%   | | then if ( tweets(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.27289147664139984;  // std dev = 1.639, 50.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=47 */
%   | | | else return 0.335472423874449;  // std dev = 0.109, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.025253286074222503;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2665043749059526;  // std dev = 0.966, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else return 0.3450422931774425;  // std dev = 0.208, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(A, H) )
%   | then return -0.09253257857408573;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | else return -0.09269127618926086;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.24853300038812787;  // std dev = 0.981, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.27535874462742566;  // std dev = 0.072, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, F), follows(D, G) )
%   | | | then return 0.2061699701488429;  // std dev = 0.885, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.03235694846166806;  // std dev = 1.392, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.2638910960998545;  // std dev = 0.055, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.24747713670976446;  // std dev = 0.016, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.2932397866269497;  // std dev = 0.061, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.26637962904546547;  // std dev = 0.012, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.08505612646400423;  // std dev = 2.80e-05, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.1863839298171214;  // std dev = 1.376, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | | | else return 0.22329643068411117;  // std dev = 0.040, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.19833498992683776;  // std dev = 1.023, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.22157493725380925;  // std dev = 0.071, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.21478053010763518;  // std dev = 0.067, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.3525781142354522;  // std dev = 0.060, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.20776922665127534;  // std dev = 0.051, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.23080672709652741;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07866886256626582;  // std dev = 3.11e-05, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then if ( tweets(A, E), follows(A, D) )
%   | | | then return 0.19324654148766074;  // std dev = 0.024, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.18173430579335514;  // std dev = 0.074, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return 0.22902009251237987;  // std dev = 0.169, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.05084205171714664;  // std dev = 1.337, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.1426814819082679;  // std dev = 0.872, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.27772774060257915;  // std dev = 0.035, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.17996740357498658;  // std dev = 0.042, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, J) )
%   | then return -0.0731449262266754;  // std dev = 1.17e-07, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
%   | else return -0.07326228245159914;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(D, A), follows(E, A) )
%   | | | then return 0.13108781652149376;  // std dev = 1.321, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | | | else return 0.1893485954776453;  // std dev = 0.278, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.15844732029230074;  // std dev = 0.022, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.022253467715402375;  // std dev = 0.914, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.1765473455925896;  // std dev = 0.031, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1810740658754922;  // std dev = 0.076, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.15673696964433226;  // std dev = 0.003, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, I) )
%   | then return -0.06833830117427156;  // std dev = 0.000, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   | else return -0.06844103236933362;  // std dev = 5.27e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.12984420373710773;  // std dev = 0.987, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | | else return 0.038272576246773785;  // std dev = 1.327, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.13843239777421118;  // std dev = 0.021, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.15960299903431396;  // std dev = 0.029, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.24700882451225628;  // std dev = 0.076, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.13598711838843405;  // std dev = 0.030, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.14310315793901857;  // std dev = 0.039, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, J) )
%   | then return -0.06411359482462985;  // std dev = 1.25e-07, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
%   | else return -0.06420424025592299;  // std dev = 5.27e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.745', 'seconds']
Refined model CLL: -0.091329


******************************************
Best model found
******************************************
Results 

CLL : -0.085865 

AUC ROC : 0.996426 

AUC PR : 0.498403 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 44.797 

Total Inference Time : 8.491437673568726 

Total revision time: 69.42989076042176
Best scored revision CLL: -0.091329


Results 

CLL : -0.085865 

AUC ROC : 0.996426 

AUC PR : 0.498403 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 69.46237266921997 

Total Inference Time : 8.491437673568726 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.127
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8211118980624726;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048774;  // std dev = 1.49e-07, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7205181090062082;  // std dev = 0.997, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839202;  // std dev = 0.000, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5515773299814984;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360676;  // std dev = 0.000, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3969158095004069;  // std dev = 1.969, 132.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=128 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4272188398034368;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.10159632948783621;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.2957680893851971;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926047;  // std dev = 1.40e-07, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
%   | | else return -0.09269127618926101;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22185457730638716;  // std dev = 2.760, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.04e-09, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2041683849079609;  // std dev = 1.973, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 4.21e-08, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17620166913234434;  // std dev = 1.717, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333696;  // std dev = 9.88e-08, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15624198808642611;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420282;  // std dev = 0.000, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
%   | | else return -0.06842697784420262;  // std dev = 2.46e-09, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12919986671562428;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202607;  // std dev = 5.43e-09, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.011', 'seconds']
Parameter learned model CLL:-0.087386 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.404, 6, 156], 'false,true': [1.49e-07, 315, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.997, 1, 156], 'false,true': [0.0, 308, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 311, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.969, 4, 128], 'true,false': [0.0, 244, 0], 'false,true,true': [0.0, 0, 28], 'false,true,false': [0.0, 48, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.404, 6, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.4e-07, 264, 0], 'false,false,false': [0.0, 53, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.76, 8, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.04e-09, 327, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.973, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.21e-08, 289, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.717, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [9.88e-08, 297, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 55, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 266, 0], 'false,false,false': [2.46e-09, 59, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false': [5.43e-09, 280, 0]}]
{'': [0.03566529492456011, 7.04903507698512e-17], 'false': [7.04903507698512e-17, nan]}
{'': [0.006328857154452273, -8.651088503572649e-17], 'false': [-8.651088503572649e-17, nan]}
{'': [0.012497997115844907, -5.283376451592385e-17], 'false': [nan, -5.283376451592385e-17]}
{'': [0.06693197229222733, 0.06506986314375314], 'true': [0.029384756657483233, -7.098147206619854e-17], 'false': [0.06506986314375314, nan], 'false,true': [-6.344131569286608e-17, -1.1564823173178714e-17]}
{'': [0.03566577205642275, 1.0646933737730208e-16], 'true': [0.03566577205642275, nan], 'false': [nan, 1.0646933737730208e-16], 'false,false': [7.401486830834377e-17, -2.1994984450121027e-17], 'false,false,true': [nan, 7.401486830834377e-17]}
{'': [0.04644522021638101, 3.66679164096382e-17], 'false': [nan, 3.66679164096382e-17], 'false,false': [nan, 3.66679164096382e-17]}
{'': [0.024332504774421733, 6.146563458132355e-18], 'false': [nan, 6.146563458132355e-18], 'false,false': [nan, 6.146563458132355e-18], 'false,false,false': [6.146563458132355e-18, nan]}
{'': [0.018542204824409686, 1.2616170734376778e-17], 'true': [0.018542204824409686, nan], 'false': [3.289549702593056e-17, -1.0092936587501423e-17], 'false,false': [nan, -1.0092936587501423e-17]}
{'': [0.01248164101561507, -7.720320109701088e-17], 'false': [nan, -7.720320109701088e-17], 'false,false': [-2.4207870461751532e-17, 5.645201820127915e-18], 'false,false,true': [nan, -2.4207870461751532e-17]}
{'': [0.018535700741864395, 2.9341608507950566e-17], 'false': [nan, 2.9341608507950566e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 35.203
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.8581489350995126;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else if ( follows(A, D), tweets(A, F) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.724815601766179;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.8581489350995117;  // std dev = 1.69e-07, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.8181489350995119;  // std dev = 0.980, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   else return -0.1418510649004879;  // std dev = 5.16e-08, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.6970357126851935;  // std dev = 1.385, 74.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | | | else return 0.22147389756613195;  // std dev = 1.004, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.39111871915657376;  // std dev = 1.137, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(A, F), follows(F, A) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.7381221135977346;  // std dev = 0.031, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.6199659375182843;  // std dev = 0.928, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.7222677409610438;  // std dev = 0.030, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else return -0.12544463852839202;  // std dev = 0.000, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5635991123146253;  // std dev = 0.130, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(G, A), recursion_accounttype(F, B) )
%   | | | then return 0.4564092213729077;  // std dev = 0.933, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5436363835878948;  // std dev = 1.015, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | else return 0.5685722583140933;  // std dev = 0.126, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else return -0.11231637819360685;  // std dev = 0.000, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.4097923367084484;  // std dev = 0.978, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | | else return 0.44459311079237457;  // std dev = 0.201, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return 0.36487810285854355;  // std dev = 0.867, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.43054315963994655;  // std dev = 0.121, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.10338927582364756;  // std dev = 0.453, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.4170551919250061;  // std dev = 0.021, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.10159632948783617;  // std dev = 1.49e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.3255072709131118;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.24787312525348898;  // std dev = 0.946, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.3389293300381731;  // std dev = 0.208, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(H, G) )
%   | | | then return 0.32409069444115746;  // std dev = 0.037, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.23274849746245657;  // std dev = 0.832, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.0858510157013849;  // std dev = 0.889, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.26103056373563915;  // std dev = 1.323, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   else if ( follows(A, J) )
%   | then return -0.09254060018974639;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, F), follows(F, D) )
%   | | then if ( follows(D, F), tweets(F, G) )
%   | | | then return 0.23515119440926777;  // std dev = 1.313, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | | | else return 0.09167260914882491;  // std dev = 0.899, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(D, H), follows(H, A) )
%   | | | then return 0.25242851011682366;  // std dev = 0.001, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.2799772776028872;  // std dev = 0.099, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.2800225728248936;  // std dev = 0.097, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2515502113021113;  // std dev = 0.027, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.28249952458806943;  // std dev = 0.104, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.2740134308700505;  // std dev = 0.100, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.0850799932746387;  // std dev = 4.92e-05, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, D) )
%   | | then if ( follows(E, A), follows(D, A) )
%   | | | then return 0.21595225339160873;  // std dev = 0.000414, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.23736920969692174;  // std dev = 0.126, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return 0.2714127622933177;  // std dev = 0.027, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then if ( follows(A, G), follows(F, G) )
%   | | | then return 0.23602004145513414;  // std dev = 0.075, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.21868134288742672;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.20799496097829828;  // std dev = 0.045, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.21991491885149161;  // std dev = 0.037, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(A, I) )
%   | then return -0.07866524820355626;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
%   | else return -0.07878435746529888;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.18298768647852076;  // std dev = 0.051, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.17505039778474984;  // std dev = 0.006, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.19837452853360343;  // std dev = 0.042, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.17700515066392764;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.19303856253025198;  // std dev = 0.114, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.11331623967971405;  // std dev = 1.337, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   | | else if ( tweets(A, K), follows(A, L) )
%   | | | then return 0.17128643335965119;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.18812438904355686;  // std dev = 0.034, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.07316866129380678;  // std dev = 4.02e-05, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.1586157130979683;  // std dev = 0.050, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.09211360752604668;  // std dev = 1.349, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | else if ( follows(D, G), follows(G, D) )
%   | | | then return -0.5449659908330969;  // std dev = 0.855, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return -0.0467999954072191;  // std dev = 0.815, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.14904011365201927;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.1523275263546571;  // std dev = 0.010, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.1692597341714188;  // std dev = 0.074, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.15836285178233092;  // std dev = 0.035, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.06836109146554877;  // std dev = 3.93e-05, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(D, E), recursion_accounttype(D, B) )
%   | | | then return 0.13622925504553388;  // std dev = 0.000288, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.15954962602190742;  // std dev = 0.147, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | | then return 0.16232687933030404;  // std dev = 0.007, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1495472894977212;  // std dev = 0.063, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( tweets(G, H), follows(I, G) )
%   | | | then return 0.13316879337403376;  // std dev = 0.009, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.15176278767778162;  // std dev = 0.045, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.009665880237686086;  // std dev = 0.776, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.12114543230434172;  // std dev = 0.999, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   else return -0.06412811929639635;  // std dev = 3.22e-05, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.688', 'seconds']
Refined model CLL: -0.084962


******************************************
Best model found
******************************************
Results 

CLL : -0.091499 

AUC ROC : 0.994914 

AUC PR : 0.451346 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 35.203 

Total Inference Time : 10.681241989135742 

Total revision time: 71.11898739814758
Best scored revision CLL: -0.084962


Results 

CLL : -0.091499 

AUC ROC : 0.994914 

AUC PR : 0.451346 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 71.1514693069458 

Total Inference Time : 10.681241989135742 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.255
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8502749193514789;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048827;  // std dev = 0.000, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7131858704116582;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839174;  // std dev = 0.000, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5206926776688239;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360697;  // std dev = 0.000, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4046424052703068;  // std dev = 1.710, 121.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=118 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4294357937000597;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783616;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3041181291113618;  // std dev = 1.912, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926051;  // std dev = 6.14e-08, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | | else return -0.09269127618926087;  // std dev = 1.32e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23926841958838102;  // std dev = 1.968, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.82e-09, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21765449810315024;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109144;  // std dev = 6.83e-08, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.14434261609994;  // std dev = 2.393, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333674;  // std dev = 1.23e-07, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333698;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15292909180620218;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420267;  // std dev = 2.58e-08, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   | | else return -0.06842697784420268;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11005461910812642;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202622;  // std dev = 2.79e-09, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.175', 'seconds']
Parameter learned model CLL:-0.092797 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.996, 1, 126], 'false,true': [0.0, 246, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.996, 1, 126], 'false,true': [0.0, 220, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 284, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.71, 3, 118], 'true,false': [0.0, 260, 0], 'false,true,true': [0.0, 0, 8], 'false,true,false': [0.0, 15, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.912, 4, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.14e-08, 207, 0], 'false,false,false': [1.32e-09, 17, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.968, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.82e-09, 264, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.996, 1, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.83e-08, 230, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [2.393, 6, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.23e-07, 240, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.73e-09, 13, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [2.58e-08, 242, 0], 'false,false,false': [0.0, 15, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false': [2.79e-09, 254, 0]}]
{'': [0.007812015624035403, -1.408087738548979e-16], 'false': [-1.408087738548979e-16, nan]}
{'': [0.007812015624029248, -4.6427508302506543e-17], 'false': [-4.6427508302506543e-17, nan]}
{'': [0.03671114736903432, -1.1571338566515715e-16], 'false': [nan, -1.1571338566515715e-16]}
{'': [0.06322053604413107, 0.06396864631926906], 'false': [0.06396864631926906, nan], 'false,true': [-2.7755575615628914e-17, -1.8503717077085942e-18], 'true': [0.02417867631992462, -6.661338147750939e-17]}
{'': [0.028122180360964498, 2.279922282712375e-17], 'true': [0.028122180360964498, nan], 'false': [nan, 2.279922282712375e-17], 'false,false': [1.8235547264374553e-17, 1.6326809185664067e-18], 'false,false,true': [nan, 1.8235547264374553e-17]}
{'': [0.029805435900801456, 3.448420000729653e-17], 'false': [nan, 3.448420000729653e-17], 'false,false': [nan, 3.448420000729653e-17]}
{'': [0.007808839071786445, 2.027363784098112e-17], 'false': [nan, 2.027363784098112e-17], 'false,false': [nan, 2.027363784098112e-17], 'false,false,false': [2.027363784098112e-17, nan]}
{'': [0.04336838217139631, 5.441409290652941e-17], 'true': [0.04336838217139631, nan], 'false': [6.29126380620922e-17, 1.0675221390626506e-18], 'false,false': [nan, 1.0675221390626506e-18]}
{'': [0.015427964672019612, -1.5551762212648107e-17], 'false': [nan, -1.5551762212648107e-17], 'false,false': [2.75261906931857e-18, -2.7755575615628915e-18], 'false,false,true': [nan, 2.75261906931857e-18]}
{'': [0.03669721989319572, 7.867722221753078e-18], 'false': [nan, 7.867722221753078e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 26.636
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995128;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | else if ( follows(E, A), follows(D, A) )
%   | | | then return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.14185106490048788;  // std dev = 7.88e-08, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.7194734122109542;  // std dev = 1.19e-07, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.5766162693538115;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.7194734122109544;  // std dev = 2.11e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.7323300786517029;  // std dev = 0.119, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.12544463852839186;  // std dev = 0.000, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(D, F) )
%   | | | then return 0.5567640607635611;  // std dev = 0.048, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.4395593087981159;  // std dev = 1.634, 25.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=22 */
%   | | else return 0.39452320348493913;  // std dev = 0.920, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.5684149081596477;  // std dev = 0.150, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.11231637819360682;  // std dev = 0.000, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), tweets(A, F) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return 0.40966839374970593;  // std dev = 1.010, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.35114210169266474;  // std dev = 1.334, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else return 0.4288222435253064;  // std dev = 0.146, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.4356356261031157;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.1015963294878362;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | | then return 0.31207330703863895;  // std dev = 1.004, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | | else return 0.132499294641705;  // std dev = 1.194, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else return 0.3397051447006822;  // std dev = 0.128, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return 0.33379445668773017;  // std dev = 0.126, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else if ( follows(A, F) )
%   | then return -0.0926912761892605;  // std dev = 1.23e-07, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
%   | else return -0.09269127618926087;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.2664655407693004;  // std dev = 0.109, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.17241295699493578;  // std dev = 0.930, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.2991787627681843;  // std dev = 0.042, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.271918625470942;  // std dev = 0.134, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.26384535877553034;  // std dev = 0.042, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2550417557278485;  // std dev = 0.042, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.04573118617955958;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.2517692479152072;  // std dev = 0.033, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.08518475138839678;  // std dev = 5.74e-09, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.19586253762759157;  // std dev = 0.977, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.2290285012051615;  // std dev = 0.068, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.24275364840801306;  // std dev = 0.037, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.21821587126263123;  // std dev = 0.036, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J), follows(I, K) )
%   | | | then return 0.13606082975163197;  // std dev = 0.902, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.09230300389159259;  // std dev = 1.113, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(L, A), tweets(L, M) )
%   | | | then return 0.2221945911082947;  // std dev = 0.110, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.15877473676772397;  // std dev = 0.978, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   else return -0.07877675473109144;  // std dev = 5.77e-08, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.18070817510138895;  // std dev = 0.040, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.1491327987109799;  // std dev = 0.930, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return -0.31455338561752216;  // std dev = 0.979, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.1980303551374869;  // std dev = 0.058, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), tweets(A, I) )
%   | | | then return 0.218255243164877;  // std dev = 0.031, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.24567912875654532;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.18993466770776557;  // std dev = 0.102, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.18362894728388132;  // std dev = 0.055, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07324622576333668;  // std dev = 8.33e-09, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( tweets(D, F), tweets(A, F) )
%   | | | then return 0.1425147984474086;  // std dev = 0.980, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | | else return 0.16864475209234125;  // std dev = 0.101, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return -0.1703086742021281;  // std dev = 0.821, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.18291561695804917;  // std dev = 0.025, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2038536567024894;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.16249296162265217;  // std dev = 0.090, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.15772388129215223;  // std dev = 0.049, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, J) )
%   | then return -0.0684269778442028;  // std dev = 0.000, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.1413708149825215;  // std dev = 0.069, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.14937032492753627;  // std dev = 0.085, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.17483622243023705;  // std dev = 0.046, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1403745658152778;  // std dev = 0.036, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.03984166620032316;  // std dev = 0.939, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.16109700757828702;  // std dev = 0.068, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.17395509984513333;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.13791204387974326;  // std dev = 0.044, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06419184008202622;  // std dev = 3.09e-09, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.216', 'seconds']
Refined model CLL: -0.091504


******************************************
Best model found
******************************************
Results 

CLL : -0.086295 

AUC ROC : 0.995675 

AUC PR : 0.444525 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 26.636 

Total Inference Time : 7.055482387542725 

Total revision time: 49.65328094100952
Best scored revision CLL: -0.091504


Results 

CLL : -0.086295 

AUC ROC : 0.995675 

AUC PR : 0.444525 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 49.68043657875061 

Total Inference Time : 7.055482387542725 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.163
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.815204149823436;  // std dev = 2.588, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048768;  // std dev = 1.74e-07, 325.000 (wgt'ed) examples reached here.  /* #neg=325 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7154005528413535;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839216;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #neg=337 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.54807652079587;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360697;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4078763579493695;  // std dev = 1.712, 131.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=128 */
%   | else return -0.1015963294878366;  // std dev = 0.000, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43077712130814844;  // std dev = 7.45e-09, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.10159632948783617;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3028282255289303;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926046;  // std dev = 1.01e-07, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.26386129115569334;  // std dev = 0.996, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.04e-09, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.18437338998352082;  // std dev = 2.405, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109141;  // std dev = 3.65e-08, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1602448975608621;  // std dev = 2.200, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333675;  // std dev = 1.21e-07, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.136671061929488;  // std dev = 0.173, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420271;  // std dev = 0.000, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
%   | | else return -0.06842697784420262;  // std dev = 2.46e-09, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11843058274740961;  // std dev = 0.173, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202607;  // std dev = 5.51e-09, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.981', 'seconds']
Parameter learned model CLL:-0.087164 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.588, 7, 156], 'false,true': [1.74e-07, 325, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 337, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 283, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.712, 3, 128], 'true,false': [0.0, 271, 0], 'false,true,true': [7.45e-09, 0, 28], 'false,true,false': [0.0, 52, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.201, 5, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.01e-07, 251, 0], 'false,false,false': [0.0, 47, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.996, 1, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.04e-09, 309, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.405, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.65e-08, 310, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [2.2, 5, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.21e-07, 245, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 56, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.173, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 248, 0], 'false,false,false': [2.46e-09, 58, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.173, 5, 156], 'false,true': [0.0, 0, 0], 'false,false': [5.51e-09, 282, 0]}]
{'': [0.04110053069367158, 9.29171269840131e-17], 'false': [9.29171269840131e-17, nan]}
{'': [0.01249799711584945, -1.1596394797271666e-16], 'false': [-1.1596394797271666e-16, nan]}
{'': [0.018511925952295533, -1.1612226688658882e-16], 'false': [nan, -1.1612226688658882e-16]}
{'': [0.06431218982814724, 0.06447838922807678], 'false': [0.06447838922807678, nan], 'false,true': [6.344131569286608e-17, -8.540177112501205e-18], 'true': [0.022376318396364156, -6.390951728469536e-17]}
{'': [0.030101516164810195, 8.792370262132112e-17], 'true': [0.030101516164810195, nan], 'false': [nan, 8.792370262132112e-17], 'false,false': [4.069343357191809e-17, -2.4802854805455624e-17], 'false,false,true': [nan, 4.069343357191809e-17]}
{'': [0.0063216002303402696, 3.7366729631396854e-17], 'false': [nan, 3.7366729631396854e-17], 'false,false': [nan, 3.7366729631396854e-17]}
{'': [0.03571077611402473, 4.2976375146780255e-18], 'false': [nan, 4.2976375146780255e-18], 'false,false': [nan, 4.2976375146780255e-18], 'false,false,false': [4.2976375146780255e-18, nan]}
{'': [0.03005512503277368, 3.0982968129074136e-17], 'true': [0.03005512503277368, nan], 'false': [5.981609765327374e-17, -1.0903976134711359e-17], 'false,false': [nan, -1.0903976134711359e-17]}
{'': [0.0300585247348941, -6.24046928874271e-17], 'false': [nan, -6.24046928874271e-17], 'false,false': [-4.476705744456276e-18, 6.699621700324221e-18], 'false,false,true': [nan, -4.476705744456276e-18]}
{'': [0.03009624671840231, 3.1495688641848415e-17], 'false': [nan, 3.1495688641848415e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 43.216
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E), follows(A, E) )
%   | | | then return 0.8164822684328453;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.8581489350995116;  // std dev = 2.53e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.858148935099512;  // std dev = 2.38e-07, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.14185106490048782;  // std dev = 1.15e-07, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then return 0.7232540296818176;  // std dev = 0.120, 122.000 (wgt'ed) examples reached here.  /* #pos=122 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.7194734122109543;  // std dev = 4.21e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.7194734122109544;  // std dev = 4.21e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.125444638528392;  // std dev = 0.000, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5592715062840076;  // std dev = 0.117, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.4553224125967933;  // std dev = 1.317, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.5110559120238944;  // std dev = 1.383, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.18036643674628455;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.11231637819360694;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then return 0.42575756164362094;  // std dev = 0.206, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.3299823759960124;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.427529652808023;  // std dev = 0.002, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.1015963294878366;  // std dev = 0.000, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.41656419392087113;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.16577653754175106;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.4532780746826187;  // std dev = 0.163, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.10159632948783619;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( follows(F, D) )
%   | | then if ( recursion_accounttype(E, B), tweets(A, G) )
%   | | | then return 0.2791466034831436;  // std dev = 1.664, 59.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=56 */
%   | | | else return 0.3229165402554746;  // std dev = 0.030, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return -0.0084383524102473;  // std dev = 0.798, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, H) )
%   | | then return 0.34297968426008435;  // std dev = 0.202, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.331824808165623;  // std dev = 0.046, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.235870196681824;  // std dev = 0.978, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else if ( follows(A, J) )
%   | then return -0.0926912761892605;  // std dev = 6.99e-08, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | else return -0.092691276189261;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, D), tweets(A, F) )
%   | | | then return 0.26423343399411103;  // std dev = 0.025, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.25409270675720785;  // std dev = 0.027, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, G), follows(H, D) )
%   | | | then return 0.25635788290588724;  // std dev = 0.021, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.3532191268700122;  // std dev = 0.071, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(I, A), follows(A, I) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.0559435027676357;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.26093144407603347;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.275595804633213;  // std dev = 0.127, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.22343747774086778;  // std dev = 0.979, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   else return -0.08518475138839678;  // std dev = 5.96e-09, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.195943158358597;  // std dev = 0.992, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | | else return 0.24586513562610898;  // std dev = 0.219, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(G, A), follows(H, G) )
%   | | | then return 0.1285582922929398;  // std dev = 1.290, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return 0.18848416526879547;  // std dev = 1.005, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else if ( follows(I, A), follows(A, J) )
%   | | then if ( follows(J, I), follows(J, A) )
%   | | | then return 0.2099111936910312;  // std dev = 0.009, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.20747877306295276;  // std dev = 0.007, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.25543208090988473;  // std dev = 0.078, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2223430513891973;  // std dev = 0.036, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.07877675473109141;  // std dev = 3.94e-08, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.15056274653863985;  // std dev = 0.981, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.1847843081694117;  // std dev = 0.124, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.1581317509063618;  // std dev = 1.025, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.2946680580278702;  // std dev = 0.955, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(G, I) )
%   | | | then return 0.2020118469584772;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.20927311822983333;  // std dev = 0.006, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.18172772051120353;  // std dev = 0.035, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.20215815542840687;  // std dev = 0.065, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07324622576333698;  // std dev = 5.67e-09, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(F, D) )
%   | | then if ( recursion_accounttype(E, B), follows(E, D) )
%   | | | then return 0.16447214137362492;  // std dev = 0.014, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.1547993588119197;  // std dev = 0.024, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.15904059188157238;  // std dev = 0.003, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.20831861463016244;  // std dev = 0.050, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.20087741547638552;  // std dev = 0.131, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.43597242424196336;  // std dev = 0.766, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, J), follows(K, A) )
%   | | | then return 0.09928765078413246;  // std dev = 0.919, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.16306782921864044;  // std dev = 0.122, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else return -0.06842697784420305;  // std dev = 0.000, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( recursion_accounttype(D, B), follows(F, D) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.13875033330982303;  // std dev = 0.038, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.14682131918588984;  // std dev = 0.078, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.19320757553160922;  // std dev = 0.116, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.15252242629234025;  // std dev = 0.092, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.0450694176219631;  // std dev = 0.284, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.1349130382774692;  // std dev = 0.010, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.1496564792984758;  // std dev = 0.052, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( tweets(A, K) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else return -0.06419184008202622;  // std dev = 0.000, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.682', 'seconds']
Refined model CLL: -0.085478


******************************************
Best model found
******************************************
Results 

CLL : -0.091407 

AUC ROC : 0.99401 

AUC PR : 0.400769 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 43.216 

Total Inference Time : 9.72219967842102 

Total revision time: 75.31286840820313
Best scored revision CLL: -0.085478


Results 

CLL : -0.091407 

AUC ROC : 0.99401 

AUC PR : 0.400769 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 75.34002404594422 

Total Inference Time : 9.72219967842102 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.292
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8502749193514789;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048818;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6978040722062013;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839172;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4959826032563429;  // std dev = 0.249, 135.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936069;  // std dev = 0.000, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.406498793364187;  // std dev = 1.967, 122.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=118 */
%   | else return -0.10364596338025654;  // std dev = 0.458, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.32817456749897617;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.10159632948783623;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.33611414725865196;  // std dev = 0.998, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09251904663491464;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | | else return -0.09269127618926087;  // std dev = 1.32e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23436441867933155;  // std dev = 2.196, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08504628777136515;  // std dev = 3.27e-05, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19874032078547194;  // std dev = 1.916, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07865705087039952;  // std dev = 0.000441, 234.000 (wgt'ed) examples reached here.  /* #neg=234 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1647975133102362;  // std dev = 1.965, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07313638592100742;  // std dev = 1.23e-07, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07326375241658487;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13331762696583152;  // std dev = 0.189, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06833082439809286;  // std dev = 1.26e-07, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
%   | | else return -0.06844231902092489;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11460858919073448;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06411280536504582;  // std dev = 2.32e-05, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.230', 'seconds']
Parameter learned model CLL:-0.09234 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.996, 1, 126], 'false,true': [0.0, 255, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 212, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.249, 9, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 264, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.967, 4, 118], 'true,false': [0.458, 224, 0], 'false,true,true': [0.314, 1, 8], 'false,true,false': [0.0, 9, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.998, 1, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 230, 0], 'false,false,false': [1.32e-09, 16, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.196, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.27e-05, 246, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.916, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.000441, 234, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.965, 4, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.23e-07, 235, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 13, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.189, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.26e-07, 244, 0], 'false,false,false': [0.0, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false': [2.32e-05, 271, 0]}]
{'': [0.007812015624035403, -1.0797463141452503e-16], 'false': [-1.0797463141452503e-16, nan]}
{'': [0.02271498107084719, -4.3989968900242054e-17], 'false': [-4.3989968900242054e-17, nan]}
{'': [0.06222222222222295, -1.0261152197293113e-16], 'false': [nan, -1.0261152197293113e-16]}
{'': [0.0711958206767534, 0.09555847202359505], 'false': [0.09555847202359505, nan], 'false,true': [0.09876543209876548, -3.0839528461809902e-18], 'true': [0.03171190540177286, 0.0009368227977292615]}
{'': [0.007848553250452793, 1.8038189550892403e-09], 'true': [0.007848553250452793, nan], 'false': [nan, 1.8038189550892403e-09], 'false,false': [-6.275173617446536e-17, 1.734723475976807e-18], 'false,false,true': [nan, -6.275173617446536e-17]}
{'': [0.03679891057772712, 1.0696920413581586e-09], 'false': [nan, 1.0696920413581586e-09], 'false,false': [nan, 1.0696920413581586e-09]}
{'': [0.028240388124473954, 8.3046609759936e-10], 'false': [nan, 8.3046609759936e-10], 'false,false': [nan, 8.3046609759936e-10], 'false,false,false': [8.3046609759936e-10, nan]}
{'': [0.02969279018506507, 8.057833441706712e-10], 'true': [0.02969279018506507, nan], 'false': [6.425120482937076e-17, -4.270088556250602e-18], 'false,false': [nan, -4.270088556250602e-18]}
{'': [0.03558495185765969, 5.553912538203143e-10], 'false': [nan, 5.553912538203143e-10], 'false,false': [6.461133995769353e-17, -2.3129646346357427e-18], 'false,false,true': [nan, 6.461133995769353e-17]}
{'': [0.03676571988493569, 5.376765281468728e-10], 'false': [nan, 5.376765281468728e-10]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 23.033
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.6914822684328453;  // std dev = 1.826, 24.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=20 */
%   else return -0.1418510649004882;  // std dev = 0.000, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B), tweets(D, F) )
%   | | | then return 0.7194734122109542;  // std dev = 1.19e-07, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.6798511202459443;  // std dev = 0.989, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else if ( tweets(D, G), tweets(A, G) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.4775682260387666;  // std dev = 0.876, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5194734122109544;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.6604245203610573;  // std dev = 0.950, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.7356630398665785;  // std dev = 0.069, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.12544463852839183;  // std dev = 0.000, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then return 0.5689161087649842;  // std dev = 0.250, 107.000 (wgt'ed) examples reached here.  /* #pos=107 */
%   | else if ( follows(F, A) )
%   | | then return 0.5513651590043461;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.39214859207294345;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.45269244035153644;  // std dev = 0.917, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.11231637819360689;  // std dev = 0.000, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.416538080278431;  // std dev = 0.084, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.3357443157228096;  // std dev = 1.615, 30.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=27 */
%   | | else return 0.4709677857541969;  // std dev = 0.115, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   else if ( recursion_accounttype(F, B) )
%   | then return 0.220719562262852;  // std dev = 0.388, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else return -0.10159632948783617;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.27455257272599237;  // std dev = 1.380, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.3231027536258274;  // std dev = 0.074, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(G, A), follows(G, D) )
%   | | | then return -0.10099046708010981;  // std dev = 1.727, 13.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=7 */
%   | | | else return 0.35458623578624326;  // std dev = 0.026, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, H) )
%   | | then return 0.3557676815825402;  // std dev = 0.131, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return 0.21994675097078256;  // std dev = 0.866, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.35733791811541066;  // std dev = 0.043, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, J) )
%   | then return -0.09269127618926051;  // std dev = 6.50e-08, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else return -0.09269127618926087;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), tweets(A, G) )
%   | | | then return 0.2605407801389631;  // std dev = 0.060, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.18474389265400018;  // std dev = 1.356, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else return -0.04146508334783672;  // std dev = 0.856, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return 0.36531018463175485;  // std dev = 0.043, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.27821543133877447;  // std dev = 0.023, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.28351410958313594;  // std dev = 0.092, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.30168525547701114;  // std dev = 0.102, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( tweets(A, K) )
%   | then return -0.08518475138839678;  // std dev = 5.43e-09, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else return -0.08518475138839678;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.17732879064341864;  // std dev = 1.348, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | | | else return 0.0204858062604881;  // std dev = 0.935, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.21756522898926242;  // std dev = 0.064, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.2640549011344917;  // std dev = 0.056, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.2099788179350066;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.22968594574955592;  // std dev = 0.080, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(A, J), follows(J, A) )
%   | | | then return 0.2830189762728005;  // std dev = 0.047, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.23639634066632204;  // std dev = 0.050, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.07877675473109143;  // std dev = 3.61e-09, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then if ( follows(A, E), follows(D, E) )
%   | | | then return 0.18394678221798189;  // std dev = 0.035, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.1958220588795513;  // std dev = 0.039, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( recursion_accounttype(D, B), follows(F, A) )
%   | | | then return 0.2515499657409651;  // std dev = 0.113, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.19295817130078005;  // std dev = 0.127, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return 0.09593810851095724;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, G) )
%   | then if ( follows(H, A) )
%   | | then if ( follows(A, H) )
%   | | | then return -0.07324622576333664;  // std dev = 1.20e-07, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | | | else return -0.07324622576333699;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.07324622576333703;  // std dev = 0.000, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return -0.073246225763337;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | | then return 0.16002098522151026;  // std dev = 0.007, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.13079477635546471;  // std dev = 1.003, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.19205138472893146;  // std dev = 0.138, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.16548964397307162;  // std dev = 0.025, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.1607247025493211;  // std dev = 0.032, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.18140778403245408;  // std dev = 0.045, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(H, A) )
%   | | | then return -0.0939131428680693;  // std dev = 1.203, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.16148113976211556;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06842697784420261;  // std dev = 4.06e-09, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(G, D) )
%   | | | then return 0.13809928739101382;  // std dev = 0.044, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.17162031513730236;  // std dev = 0.067, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(D, H), follows(H, A) )
%   | | | then return 0.0394608148458571;  // std dev = 0.950, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.1490351230550881;  // std dev = 0.050, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, I) )
%   | | then if ( follows(J, A), tweets(J, I) )
%   | | | then return 0.10670409694296121;  // std dev = 0.897, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.01690837249517628;  // std dev = 1.252, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.2086855121459891;  // std dev = 0.030, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.14079358997637803;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06419184008202622;  // std dev = 2.79e-09, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.968', 'seconds']
Refined model CLL: -0.091592


******************************************
Best model found
******************************************
Results 

CLL : -0.085967 

AUC ROC : 0.995809 

AUC PR : 0.433975 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 23.033 

Total Inference Time : 7.388216972351074 

Total revision time: 46.19460124969483
Best scored revision CLL: -0.091592


Results 

CLL : -0.085967 

AUC ROC : 0.995809 

AUC PR : 0.433975 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 51.880777788162234 

Total Inference Time : 7.388216972351074 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.393
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8036034805540551;  // std dev = 2.917, 165.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048766;  // std dev = 1.86e-07, 330.000 (wgt'ed) examples reached here.  /* #neg=330 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7176912738829264;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283921;  // std dev = 0.000, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5503608445700676;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360682;  // std dev = 0.000, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3949067081651255;  // std dev = 2.194, 133.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=128 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.39801793450684303;  // std dev = 0.182, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return -0.10159632948783619;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3088248017368624;  // std dev = 2.151, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926049;  // std dev = 1.33e-07, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
%   | | else return -0.09269127618926101;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.25483125182373284;  // std dev = 1.715, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.04e-09, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20104460827448872;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 1.49e-08, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.18015798831857968;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.0732462257633368;  // std dev = 1.18e-07, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1536568012130787;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420265;  // std dev = 3.94e-08, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | | else return -0.06842697784420262;  // std dev = 2.79e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12108523116209516;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202602;  // std dev = 5.96e-09, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.532', 'seconds']
Parameter learned model CLL:-0.087464 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.917, 9, 156], 'false,true': [1.86e-07, 330, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 302, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 304, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [2.194, 5, 128], 'true,false': [0.0, 254, 0], 'false,true,true': [0.182, 1, 28], 'false,true,false': [0.0, 55, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.151, 5, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.33e-07, 259, 0], 'false,false,false': [0.0, 60, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.715, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.04e-09, 303, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [1.49e-08, 321, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.405, 2, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.18e-07, 252, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 54, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.94e-08, 240, 0], 'false,false,false': [2.79e-09, 56, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [5.96e-09, 288, 0]}]
{'': [0.05157024793389019, 1.049665405100148e-16], 'false': [1.049665405100148e-16, nan]}
{'': [0.01249799711584909, -1.0881656135398885e-16], 'false': [-1.0881656135398885e-16, nan]}
{'': [0.018511925952296115, -6.573688961596321e-17], 'false': [nan, -6.573688961596321e-17]}
{'': [0.06803834150308731, 0.06791927957356012], 'true': [0.03618067725705302, -6.643854320591488e-17], 'false': [0.06791927957356012, nan], 'false,true': [0.03329369797859685, 0.0]}
{'': [0.028746393162019074, 1.0997820557415343e-16], 'true': [0.028746393162019074, nan], 'false': [nan, 1.0997820557415343e-16], 'false,false': [6.858520615444982e-17, -2.960594732333751e-17], 'false,false,true': [nan, 6.858520615444982e-17]}
{'': [0.018507873324407672, 3.664102391502167e-17], 'false': [nan, 3.664102391502167e-17], 'false,false': [nan, 3.664102391502167e-17]}
{'': [0.024376913946340662, 6.917277411994745e-19], 'false': [nan, 6.917277411994745e-19], 'false,false': [nan, 6.917277411994745e-19], 'false,false,false': [6.917277411994745e-19, nan]}
{'': [0.012495860144902574, 2.9025438552291676e-17], 'true': [0.012495860144902574, nan], 'false': [5.551115123125783e-17, -1.1307827102663631e-17], 'false,false': [nan, -1.1307827102663631e-17]}
{'': [0.012496090119209288, -5.401084984662924e-17], 'false': [nan, -5.401084984662924e-17], 'false,false': [6.47630097698008e-18, 7.93016446160826e-18], 'false,false,true': [nan, 6.47630097698008e-18]}
{'': [0.0243763555056537, 3.5465457731081387e-17], 'false': [nan, 3.5465457731081387e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 41.832
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(D, A) )
%   | | | then return 0.8581489350995117;  // std dev = 2.46e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.7331489350995123;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else return 0.8581489350995123;  // std dev = 1.19e-07, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(H, A), tweets(A, I) )
%   | | | then return 0.7914822684328456;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.14185106490048782;  // std dev = 1.15e-07, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(D, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.6700865172643016;  // std dev = 1.380, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return 0.7303730576037837;  // std dev = 0.052, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.7309734860736237;  // std dev = 0.054, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.6746214374170282;  // std dev = 0.978, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.23242403144708665;  // std dev = 1.013, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.6083623010998431;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.7214007083314995;  // std dev = 0.053, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.12544463852839202;  // std dev = 0.000, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.5224384325872881;  // std dev = 1.382, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | | else return 0.43459297795724444;  // std dev = 1.861, 29.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=25 */
%   | | else return 0.5634868726630718;  // std dev = 0.030, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.5666837194145588;  // std dev = 0.213, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   else return -0.1123163781936065;  // std dev = 0.000, 344.000 (wgt'ed) examples reached here.  /* #neg=344 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4378323551547664;  // std dev = 0.280, 128.000 (wgt'ed) examples reached here.  /* #pos=128 */
%   | else return -0.10348001646336917;  // std dev = 0.483, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.42199115189745245;  // std dev = 0.042, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.10159632948783621;  // std dev = 3.33e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( recursion_accounttype(D, B), follows(A, D) )
%   | | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | | then return 0.33755680211371536;  // std dev = 0.050, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.30429662685755404;  // std dev = 0.991, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | else if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.25138690087727006;  // std dev = 1.647, 32.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=29 */
%   | | | else return -0.03582242608842565;  // std dev = 1.121, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then return 0.3259301699965862;  // std dev = 0.076, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.3165471122021937;  // std dev = 0.033, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.22650644305146644;  // std dev = 0.954, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else if ( follows(A, I) )
%   | then return -0.09253298035952318;  // std dev = 1.01e-07, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else return -0.09269127618926101;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.2648553976793233;  // std dev = 1.015, 87.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=86 */
%   | | | else return 0.2315152432106311;  // std dev = 0.808, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.38411583969868174;  // std dev = 0.132, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2683128823932584;  // std dev = 0.037, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( recursion_accounttype(H, B), tweets(A, I) )
%   | | | then return 0.12838418001917296;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return -0.061818735986511275;  // std dev = 1.157, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.05083673180583577;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.26997863831212593;  // std dev = 1.05e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.08506893886958115;  // std dev = 4.63e-05, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.2246244766761504;  // std dev = 0.118, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.13350001235107553;  // std dev = 0.871, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(D, A) )
%   | | | then return -0.28450060630792934;  // std dev = 0.978, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.08786862931186075;  // std dev = 0.830, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( tweets(A, I), tweets(H, I) )
%   | | | then return 0.23676406124961968;  // std dev = 0.074, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.2974003169106801;  // std dev = 0.104, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.20839354540198465;  // std dev = 0.011, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.2255379871431008;  // std dev = 0.049, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else return -0.07868154516052245;  // std dev = 4.72e-05, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E), follows(D, A) )
%   | | | then return 0.13828362631333926;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.1946373331744669;  // std dev = 0.129, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( follows(F, A) )
%   | | | then return -0.17534206884927422;  // std dev = 1.544, 10.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=6 */
%   | | | else return 0.2043017293881189;  // std dev = 0.002, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( tweets(A, I), tweets(H, I) )
%   | | | then return 0.19669950656920715;  // std dev = 0.065, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.2396421063353574;  // std dev = 0.093, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.17701412345298662;  // std dev = 0.033, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.19066629937505564;  // std dev = 0.030, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07316563172550608;  // std dev = 4.58e-05, 349.000 (wgt'ed) examples reached here.  /* #neg=349 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.16352567006237484;  // std dev = 0.097, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | | else return 0.2132663610333213;  // std dev = 0.169, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.1264548376471633;  // std dev = 0.987, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | | | else return 0.17539538820006467;  // std dev = 0.107, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.09912818367294103;  // std dev = 0.977, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.14783452343435896;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.15573945318304303;  // std dev = 0.042, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.16162321543434036;  // std dev = 0.035, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06835488585404088;  // std dev = 4.18e-05, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.1483137221506243;  // std dev = 0.166, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | | else return 0.10896728336543282;  // std dev = 0.905, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return 0.21282092477694953;  // std dev = 0.116, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.144359841944946;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.13704828716844344;  // std dev = 0.016, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return -0.17020735488924507;  // std dev = 0.791, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.09838727456504048;  // std dev = 0.968, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else if ( follows(A, J) )
%   | then return -0.06411009060890259;  // std dev = 0.000, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | else return -0.06421369194588514;  // std dev = 1.05e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '4.768', 'seconds']
Refined model CLL: -0.085455


******************************************
Best model found
******************************************
Results 

CLL : -0.091252 

AUC ROC : 0.994489 

AUC PR : 0.431037 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 41.832 

Total Inference Time : 6.587242841720581 

Total revision time: 70.6846676826477
Best scored revision CLL: -0.085455


Results 

CLL : -0.091252 

AUC ROC : 0.994489 

AUC PR : 0.431037 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 76.3708442211151 

Total Inference Time : 6.587242841720581 

Run: 2
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.351
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8126943896449649;  // std dev = 2.393, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048838;  // std dev = 0.000, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7206813858196711;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839188;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.528096031120372;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360685;  // std dev = 0.000, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.41833527335259385;  // std dev = 1.402, 120.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=118 */
%   | else return -0.10342795688108918;  // std dev = 0.462, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43500194001926035;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783616;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.30530683217796806;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09253735192806671;  // std dev = 6.14e-08, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | | else return -0.09269127618926086;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24178608836224352;  // std dev = 1.915, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0850624633492889;  // std dev = 3.20e-05, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.18837888964074473;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07867116484147911;  // std dev = 0.000457, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1719852804749108;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07314787073658423;  // std dev = 9.77e-08, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07326169589864706;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15399814379969093;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06834087897832221;  // std dev = 9.06e-08, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
%   | | else return -0.06844051896216638;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11145839240461052;  // std dev = 0.189, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06412079597802459;  // std dev = 2.02e-05, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.372', 'seconds']
Parameter learned model CLL:-0.092663 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.393, 6, 126], 'false,true': [0.0, 236, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.996, 1, 126], 'false,true': [0.0, 254, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 248, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.402, 2, 118], 'true,false': [0.462, 253, 0], 'false,true,true': [0.0, 0, 8], 'false,true,false': [0.0, 11, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.969, 4, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.14e-08, 230, 0], 'false,false,false': [0.0, 20, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.915, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.2e-05, 250, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.000457, 253, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.712, 3, 126], 'true,false': [0.0, 0, 0], 'false,true': [9.77e-08, 226, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [9.06e-08, 247, 0], 'false,false,false': [0.0, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.189, 5, 126], 'false,true': [0.0, 0, 0], 'false,false': [2.02e-05, 232, 0]}]
{'': [0.043388429752070364, -1.8064645824409328e-16], 'false': [-1.8064645824409328e-16, nan]}
{'': [0.007812015624029472, -6.643854320591488e-17], 'false': [-6.643854320591488e-17, nan]}
{'': [0.03671114736903395, -8.953411488912552e-17], 'false': [nan, -8.953411488912552e-17]}
{'': [0.06525210309455154, 0.07018980013779758], 'false': [0.07018980013779758, nan], 'false,true': [-2.7755575615628914e-17, 0.0], 'true': [0.01638888888888831, 0.0008454244447436949]}
{'': [0.029809230887164067, 1.7437811603571164e-09], 'true': [0.029809230887164067, nan], 'false': [nan, 1.7437811603571164e-09], 'false,false': [1.6411992537937097e-17, -6.938893903907228e-18], 'false,false,true': [nan, 1.6411992537937097e-17]}
{'': [0.028206214710309745, 1.0225205793190639e-09], 'false': [nan, 1.0225205793190639e-09], 'false,false': [nan, 1.0225205793190639e-09]}
{'': [0.03669807293903268, 8.257698512684549e-10], 'false': [nan, 8.257698512684549e-10], 'false,false': [nan, 8.257698512684549e-10], 'false,false,false': [8.257698512684549e-10, nan]}
{'': [0.022707856556224728, 7.11689525830413e-10], 'true': [0.022707856556224728, nan], 'false': [4.2247424830868787e-17, 0.0], 'false,false': [nan, 0.0]}
{'': [0.015376616255176313, 5.039776752586898e-10], 'false': [nan, 5.039776752586898e-10], 'false,false': [3.3261742438162584e-17, -4.956352788505163e-18], 'false,false,true': [nan, 3.3261742438162584e-17]}
{'': [0.035590685578292536, 4.088504520570708e-10], 'false': [nan, 4.088504520570708e-10]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 36.035
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8581489350995127;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.6763307532813305;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.6763307532813305;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.7711924133603816;  // std dev = 1.351, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.4831489350995123;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.6763307532813305;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.1418510649004884;  // std dev = 0.000, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( tweets(D, F), tweets(E, F) )
%   | | | then return 0.689425848363769;  // std dev = 1.700, 76.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=73 */
%   | | | else return 0.5646673385809098;  // std dev = 0.868, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.7342743271742026;  // std dev = 0.088, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.7369716922928007;  // std dev = 0.090, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else return -0.1254446385283919;  // std dev = 0.000, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.5665753342765018;  // std dev = 0.109, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.3959712013642953;  // std dev = 0.914, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(E, G), follows(G, A) )
%   | | | then return 0.4955208506798964;  // std dev = 0.945, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.5746419874559026;  // std dev = 0.060, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.5950911418121563;  // std dev = 0.185, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.11231637819360683;  // std dev = 0.000, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(F, G) )
%   | | | then return 0.39751254714515377;  // std dev = 1.702, 87.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=84 */
%   | | | else return 0.2592892220843;  // std dev = 0.889, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.4555056578396858;  // std dev = 0.175, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return -0.10336226807204281;  // std dev = 0.449, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.3191143024896495;  // std dev = 0.308, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.3384494100399949;  // std dev = 0.178, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | | else if ( follows(D, E) )
%   | | | then return 0.2583475801397734;  // std dev = 1.641, 34.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=31 */
%   | | | else return 0.3498882479373632;  // std dev = 0.035, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.15412320938530158;  // std dev = 0.396, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( follows(A, F) )
%   | then return -0.09254286824027255;  // std dev = 1.26e-07, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
%   | else return -0.09269127618926086;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.264110895106947;  // std dev = 0.101, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.047869567635153265;  // std dev = 0.870, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.28629952634927824;  // std dev = 0.064, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.31780468858946986;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(H, B), follows(H, A) )
%   | | | then return 0.19158518261692825;  // std dev = 0.954, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.29994458858393497;  // std dev = 0.111, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.14112400936501493;  // std dev = 0.307, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(A, J) )
%   | then return -0.08505878450866397;  // std dev = 0.000, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | else return -0.08518475138839678;  // std dev = 5.27e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(A, D) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.14522920204770348;  // std dev = 1.924, 56.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=52 */
%   | | | else return 0.21149775071108667;  // std dev = 0.025, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, G), follows(H, D) )
%   | | | then return 0.22062792767303574;  // std dev = 0.050, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.25548894321104176;  // std dev = 0.020, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(I, A), follows(A, I) )
%   | | then if ( tweets(A, J), tweets(I, J) )
%   | | | then return 0.24517345059722012;  // std dev = 0.090, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.2664490113519795;  // std dev = 0.039, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.2414324476030581;  // std dev = 0.034, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2308762490384636;  // std dev = 0.026, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.07867308582026152;  // std dev = 2.16e-05, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | | then return 0.16699389180747054;  // std dev = 0.989, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return 0.20251734502416405;  // std dev = 0.092, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( follows(D, A), tweets(A, G) )
%   | | | then return 0.044974363390795156;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.16496777283317832;  // std dev = 0.973, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then return -0.07660464524278768;  // std dev = 0.424, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.20797540440041512;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2001046202841851;  // std dev = 0.000129, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, K) )
%   | then return -0.0731520695561928;  // std dev = 8.82e-08, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
%   | else return -0.07325326324642331;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.15323208692052123;  // std dev = 0.992, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | | | else return -0.08727484381679496;  // std dev = 0.864, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.04658476705521164;  // std dev = 0.875, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.1609916232574131;  // std dev = 0.819, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(H, A), tweets(H, J) )
%   | | | then return 0.17691368149793707;  // std dev = 0.055, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.1578626292827667;  // std dev = 0.029, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, K), follows(A, L) )
%   | | | then return 0.20357383936437978;  // std dev = 0.008, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.17354755191810706;  // std dev = 0.010, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.06835184992962884;  // std dev = 2.44e-05, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.1465016333330175;  // std dev = 0.080, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | | else return 0.04960395785106558;  // std dev = 0.894, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.17460535254215756;  // std dev = 0.085, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.15343739972546067;  // std dev = 0.074, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(G, A) )
%   | | then return -0.02720512676890149;  // std dev = 0.384, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.17413827526389414;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1547224899840396;  // std dev = 0.043, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, I) )
%   | then return -0.06411867548072613;  // std dev = 3.80e-08, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else return -0.06420215865239384;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.519', 'seconds']
Refined model CLL: -0.091704


******************************************
Best model found
******************************************
Results 

CLL : -0.08576 

AUC ROC : 0.996182 

AUC PR : 0.511495 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 36.035 

Total Inference Time : 9.41998028755188 

Total revision time: 61.160178266525264
Best scored revision CLL: -0.091704


Results 

CLL : -0.08576 

AUC ROC : 0.996182 

AUC PR : 0.511495 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 61.17924388504028 

Total Inference Time : 9.41998028755188 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.944
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8454907072514085;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048777;  // std dev = 1.43e-07, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6970211283870686;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839197;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5269816899889578;  // std dev = 0.189, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360649;  // std dev = 0.000, 351.000 (wgt'ed) examples reached here.  /* #neg=351 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4176468225926265;  // std dev = 1.403, 130.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=128 */
%   | else return -0.1015963294878366;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4330314379772422;  // std dev = 7.45e-09, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.10159632948783624;  // std dev = 3.73e-09, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3098218016722738;  // std dev = 1.917, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926053;  // std dev = 1.00e-07, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | | else return -0.092691276189261;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.250139672178935;  // std dev = 1.715, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.04e-09, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21635911011828887;  // std dev = 0.996, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 4.21e-08, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1748514395793057;  // std dev = 1.406, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333686;  // std dev = 1.12e-07, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1434597503733141;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0684269778442029;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
%   | | else return -0.06842697784420262;  // std dev = 3.48e-09, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10719321935501504;  // std dev = 0.186, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202596;  // std dev = 6.72e-09, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.706', 'seconds']
Parameter learned model CLL:-0.08751 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.405, 2, 156], 'false,true': [1.43e-07, 313, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 288, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.189, 6, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 351, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.403, 2, 128], 'true,false': [0.0, 253, 0], 'false,true,true': [7.45e-09, 0, 28], 'false,true,false': [3.73e-09, 51, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.917, 4, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1e-07, 224, 0], 'false,false,false': [0.0, 48, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.715, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.04e-09, 319, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.996, 1, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.21e-08, 298, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.406, 2, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.12e-07, 269, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 42, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 279, 0], 'false,false,false': [3.48e-09, 54, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.186, 6, 156], 'false,true': [0.0, 0, 0], 'false,false': [6.72e-09, 301, 0]}]
{'': [0.012497997115852777, 6.526550687892294e-17], 'false': [6.526550687892294e-17, nan]}
{'': [0.024374999999997725, -8.018277400070575e-17], 'false': [-8.018277400070575e-17, nan]}
{'': [0.035665294924552345, -3.036507417778206e-17], 'false': [nan, -3.036507417778206e-17]}
{'': [0.06559320594883274, 0.06539989447771574], 'true': [0.015147928994083551, -6.49458528239222e-17], 'false': [0.06539989447771574, nan], 'false,true': [3.172065784643304e-17, 1.523835523995313e-17]}
{'': [0.02297949292540271, 8.000136500975393e-17], 'true': [0.02297949292540271, nan], 'false': [nan, 8.000136500975393e-17], 'false,false': [4.460717509654647e-17, -1.9660199394403815e-17], 'false,false,true': [nan, 4.460717509654647e-17]}
{'': [0.018493190310141603, 3.6195358796556825e-17], 'false': [nan, 3.6195358796556825e-17], 'false,false': [nan, 3.6195358796556825e-17]}
{'': [0.006323856617792489, 5.960928991276008e-18], 'false': [nan, 5.960928991276008e-18], 'false,false': [nan, 5.960928991276008e-18], 'false,false,false': [5.960928991276008e-18, nan]}
{'': [0.012517535906416646, 2.784482183947338e-17], 'true': [0.012517535906416646, nan], 'false': [4.622489916654927e-17, -1.057355261547768e-17], 'false,false': [nan, -1.057355261547768e-17]}
{'': [0.018498701753056693, -7.601527015451522e-17], 'false': [nan, -7.601527015451522e-17], 'false,false': [-2.865091676452017e-17, 1.2335811384723961e-17], 'false,false,true': [nan, -2.865091676452017e-17]}
{'': [0.03476888993003762, 4.426138304153448e-17], 'false': [nan, 4.426138304153448e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 49.26
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.8196873966379739;  // std dev = 1.387, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   | | | else return 0.6581489350995123;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | else return 0.8581489350995121;  // std dev = 2.06e-07, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | else if ( follows(H, A), follows(A, I) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.7528857772047755;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   else return -0.14185106490048774;  // std dev = 1.52e-07, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.7267134293382921;  // std dev = 0.122, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | else if ( follows(A, E) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.6968638691069957;  // std dev = 0.996, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0.40985352729756674;  // std dev = 1.144, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.740220365832709;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.12544463852839208;  // std dev = 0.000, 334.000 (wgt'ed) examples reached here.  /* #neg=334 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5609874983911116;  // std dev = 0.031, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.40612052698769;  // std dev = 1.547, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return -0.04200345502336404;  // std dev = 1.101, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else return 0.566994152160423;  // std dev = 0.218, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.11231637819360663;  // std dev = 0.000, 329.000 (wgt'ed) examples reached here.  /* #neg=329 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4344903150777287;  // std dev = 0.399, 128.000 (wgt'ed) examples reached here.  /* #pos=128 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.42357279712974993;  // std dev = 0.061, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.1015963294878362;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.30418203092519863;  // std dev = 0.993, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.2529565306681824;  // std dev = 0.963, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.015540351495045401;  // std dev = 0.831, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2926897170932167;  // std dev = 0.935, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else return 0.338417360607238;  // std dev = 0.309, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   else if ( follows(A, H) )
%   | then return -0.09269127618926046;  // std dev = 1.53e-07, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
%   | else return -0.092691276189261;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.21701371285563018;  // std dev = 0.978, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.267942739560897;  // std dev = 0.193, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.25572833190425237;  // std dev = 0.026, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.06484783971055029;  // std dev = 1.191, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then if ( recursion_accounttype(F, B), follows(F, H) )
%   | | | then return 0.3179509060145483;  // std dev = 0.051, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.26708512806832363;  // std dev = 0.132, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.04752254949823679;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2597897488244444;  // std dev = 0.113, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else return -0.08518475138839678;  // std dev = 5.96e-09, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.2162479906857846;  // std dev = 0.026, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.12093733614417601;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | | then return 0.25506677857887905;  // std dev = 0.119, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.22187713102866638;  // std dev = 0.139, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.20229635331171608;  // std dev = 0.012, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.45623991495440747;  // std dev = 0.845, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.2267291052918929;  // std dev = 0.217, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.16193073602564353;  // std dev = 1.216, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   else return -0.07877675473109143;  // std dev = 4.21e-08, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(D, E) )
%   | | | then return 0.15846647157756685;  // std dev = 1.403, 85.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=83 */
%   | | | else return 0.08623521064172297;  // std dev = 1.602, 24.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=21 */
%   | | else return -0.08227209915916567;  // std dev = 0.742, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(F, H) )
%   | | | then return 0.21297944769341415;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.27050666726540135;  // std dev = 0.118, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.17071426483529123;  // std dev = 0.008, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.20379104926666164;  // std dev = 0.083, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, K) )
%   | then return -0.07324622576333674;  // std dev = 7.85e-09, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.16849602664265456;  // std dev = 0.143, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return -0.01828752201879331;  // std dev = 0.866, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(G, A), follows(A, H) )
%   | | | then return 0.17815371379455805;  // std dev = 0.098, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.1585152095274825;  // std dev = 0.076, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(I, B), recursion_accounttype(J, B) )
%   | | | then return 0.16526575863254825;  // std dev = 0.149, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.0073496623371590245;  // std dev = 1.381, 17.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=14 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.1634879776072474;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.17210704213964392;  // std dev = 0.060, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06842697784420305;  // std dev = 0.000, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.1379116487734168;  // std dev = 0.049, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.07256083643060411;  // std dev = 1.314, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.14376254121079202;  // std dev = 0.094, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | | else return 0.16678077168988212;  // std dev = 0.200, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(G, A) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.14137049796452655;  // std dev = 0.031, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.17669445333106118;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.0077978406311166116;  // std dev = 0.937, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.06628117949659924;  // std dev = 0.787, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.06419184008202586;  // std dev = 7.74e-09, 324.000 (wgt'ed) examples reached here.  /* #neg=324 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '5.477', 'seconds']
Refined model CLL: -0.08473


******************************************
Best model found
******************************************
Results 

CLL : -0.090328 

AUC ROC : 0.994508 

AUC PR : 0.425034 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 49.26 

Total Inference Time : 7.273382663726807 

Total revision time: 79.44657111549377
Best scored revision CLL: -0.08473


Results 

CLL : -0.090328 

AUC ROC : 0.994508 

AUC PR : 0.425034 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 79.46563673400878 

Total Inference Time : 7.273382663726807 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.446
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8502749193514789;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048816;  // std dev = 0.000, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.690290655390459;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839194;  // std dev = 0.000, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5412414419716353;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936068;  // std dev = 0.000, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3972239323807771;  // std dev = 1.967, 122.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=118 */
%   | else return -0.10159632948783655;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4300108176266785;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783616;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3127703117818071;  // std dev = 1.711, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926049;  // std dev = 7.88e-08, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   | | else return -0.09269127618926087;  // std dev = 1.32e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22553569016718336;  // std dev = 2.351, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.82e-09, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21242251634045706;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109144;  // std dev = 6.99e-08, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17719504047754658;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333673;  // std dev = 1.23e-07, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333698;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15110489359954;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420279;  // std dev = 0.000, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
%   | | else return -0.06842697784420268;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10133267056407819;  // std dev = 0.208, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202612;  // std dev = 4.56e-09, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.767', 'seconds']
Parameter learned model CLL:-0.092835 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.996, 1, 126], 'false,true': [0.0, 258, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 271, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 239, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.967, 4, 118], 'true,false': [0.0, 212, 0], 'false,true,true': [0.0, 0, 8], 'false,true,false': [0.0, 15, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.711, 3, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.88e-08, 236, 0], 'false,false,false': [1.32e-09, 13, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.351, 6, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.82e-09, 259, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.403, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.99e-08, 221, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.403, 2, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.23e-07, 238, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.73e-09, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 260, 0], 'false,false,false': [0.0, 17, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.208, 6, 126], 'false,true': [0.0, 0, 0], 'false,false': [4.56e-09, 270, 0]}]
{'': [0.007812015624035403, -9.639145640156398e-17], 'false': [-9.639145640156398e-17, nan]}
{'': [0.02982248520709868, -7.210304514170758e-17], 'false': [-7.210304514170758e-17, nan]}
{'': [0.02271498107084846, -8.361512319352643e-17], 'false': [nan, -8.361512319352643e-17]}
{'': [0.06927211419674809, 0.06410725720905096], 'true': [0.03171190540177344, -8.588517737666306e-17], 'false': [0.06410725720905096, nan], 'false,true': [-8.326672684688674e-17, -1.8503717077085942e-18]}
{'': [0.02269706455663328, 4.102028846004594e-17], 'true': [0.02269706455663328, nan], 'false': [nan, 4.102028846004594e-17], 'false,false': [2.6344275160596936e-17, 2.135044278125301e-18], 'false,false,true': [nan, 2.6344275160596936e-17]}
{'': [0.04187359591013626, 3.429260307722491e-17], 'false': [nan, 3.429260307722491e-17], 'false,false': [nan, 3.429260307722491e-17]}
{'': [0.015371595957525658, 2.210398782059135e-17], 'false': [nan, 2.210398782059135e-17], 'false,false': [nan, 2.210398782059135e-17], 'false,false,false': [2.210398782059135e-17, nan]}
{'': [0.01537247950944199, 5.551115123125783e-17], 'true': [0.01537247950944199, nan], 'false': [6.344131569286608e-17, 9.912705577010326e-19], 'false,false': [nan, 9.912705577010326e-19]}
{'': [0.015373240283086523, -3.6072228236918445e-17], 'false': [nan, -3.6072228236918445e-17], 'false,false': [-1.793437193625253e-17, -2.44902137784961e-18], 'false,false,true': [nan, -1.793437193625253e-17]}
{'': [0.04336697607634554, 2.1382073066854867e-17], 'false': [nan, 2.1382073066854867e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 45.195
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.8116373071925351;  // std dev = 1.381, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return 0.8581489350995118;  // std dev = 2.38e-07, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.1418510649004882;  // std dev = 0.000, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(E, F) )
%   | | | then return 0.7249050679238112;  // std dev = 0.037, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.3923340722343875;  // std dev = 0.813, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.725851667203761;  // std dev = 0.050, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.7451706938182211;  // std dev = 0.055, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.3271825966931344;  // std dev = 1.075, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.7194734122109547;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else return -0.12544463852839188;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5628435067998286;  // std dev = 0.135, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.16260026642648065;  // std dev = 1.076, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.5154737374620975;  // std dev = 0.991, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return 0.569677677511529;  // std dev = 0.136, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.11231637819360692;  // std dev = 0.000, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.42427348249813696;  // std dev = 0.111, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.31426277076597253;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.2745414689128346;  // std dev = 1.489, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return 0.3721350795516954;  // std dev = 1.325, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.42466396704137915;  // std dev = 0.077, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), follows(F, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.30128892226302484;  // std dev = 0.987, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | | else return 0.33387534040028743;  // std dev = 0.109, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.36816404853648715;  // std dev = 0.144, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(I, A) )
%   | | | then return 0.3194120457566586;  // std dev = 0.038, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.4243787017615189;  // std dev = 0.064, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(J, A), follows(A, J) )
%   | | | then return 0.17324275891425303;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.2814298878423253;  // std dev = 0.866, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   else if ( follows(A, K) )
%   | then return -0.09269127618926049;  // std dev = 7.15e-08, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else return -0.09269127618926087;  // std dev = 6.45e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(D, F), follows(G, D) )
%   | | then if ( tweets(A, F), recursion_accounttype(G, B) )
%   | | | then return 0.2685970640343233;  // std dev = 0.181, 79.000 (wgt'ed) examples reached here.  /* #pos=79 */
%   | | | else return 0.07594213422778073;  // std dev = 0.861, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.06924086314683135;  // std dev = 0.819, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.2516373878972516;  // std dev = 0.000291, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2953467856662419;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.31912745653710123;  // std dev = 0.067, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.27373412304380906;  // std dev = 0.053, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else if ( tweets(A, J) )
%   | then return -0.08518475138839678;  // std dev = 5.43e-09, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else return -0.08518475138839678;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.2188027596119786;  // std dev = 0.130, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.17609570217796133;  // std dev = 0.943, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.265286426737253;  // std dev = 0.061, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.216756177633661;  // std dev = 0.053, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(J, A) )
%   | | | then return 0.17433725203096506;  // std dev = 0.996, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.03152902400221491;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.2277710848854871;  // std dev = 0.051, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, K) )
%   | then return -0.07877675473109144;  // std dev = 5.51e-09, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else return -0.07877675473109168;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(D, E), tweets(E, F) )
%   | | | then return 0.17941135316678708;  // std dev = 0.053, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | | else return 0.20120703362128314;  // std dev = 0.048, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, D), tweets(A, G) )
%   | | | then return -0.005235628037133044;  // std dev = 0.910, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.19285879789343846;  // std dev = 0.062, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I) )
%   | | | then return 0.11292889511649648;  // std dev = 0.932, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.16002635054458508;  // std dev = 1.084, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return 0.1270216510499083;  // std dev = 0.929, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.1942423733045548;  // std dev = 0.077, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07324622576333675;  // std dev = 7.79e-09, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(F, D), follows(E, A) )
%   | | | then return 0.1379285085431824;  // std dev = 1.419, 74.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | | | else return -0.021584238227843285;  // std dev = 1.543, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | else return 0.02187654488026643;  // std dev = 0.738, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.15449776960546904;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.1607293570092678;  // std dev = 0.053, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.24095559056986948;  // std dev = 0.077, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.17330473189599008;  // std dev = 0.056, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, I) )
%   | then return -0.06842697784420261;  // std dev = 3.84e-09, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | else return -0.06842697784420267;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, D) )
%   | | | then return 0.09288985797033192;  // std dev = 1.383, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.14643060523513995;  // std dev = 0.119, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.19098352091582513;  // std dev = 0.089, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.15973770034033527;  // std dev = 0.068, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.1353748997090756;  // std dev = 0.003, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.15605737727099087;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.026043707751403633;  // std dev = 1.246, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.14750128678305172;  // std dev = 0.076, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06419184008202625;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.452', 'seconds']
Refined model CLL: -0.090832


******************************************
Best model found
******************************************
Results 

CLL : -0.085464 

AUC ROC : 0.995555 

AUC PR : 0.393583 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 45.195 

Total Inference Time : 9.47323203086853 

Total revision time: 70.42984029388427
Best scored revision CLL: -0.090832


Results 

CLL : -0.085464 

AUC ROC : 0.995555 

AUC PR : 0.393583 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 70.46436616516112 

Total Inference Time : 9.47323203086853 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.162
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8093684472946316;  // std dev = 2.759, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004879;  // std dev = 5.16e-08, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7042126477841484;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839197;  // std dev = 0.000, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5223387086007403;  // std dev = 0.215, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360688;  // std dev = 0.000, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4335401566387491;  // std dev = 0.996, 129.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=128 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4068093360025571;  // std dev = 0.182, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return -0.10159632948783624;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3026198664818728;  // std dev = 2.406, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926046;  // std dev = 1.10e-07, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2383877155649181;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.04e-09, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2001483233230606;  // std dev = 2.151, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 2.98e-08, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15452310703541544;  // std dev = 2.556, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333677;  // std dev = 1.20e-07, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14860943354555858;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420274;  // std dev = 0.000, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
%   | | else return -0.06842697784420262;  // std dev = 2.08e-09, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14066055843116307;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820258;  // std dev = 8.23e-09, 339.000 (wgt'ed) examples reached here.  /* #neg=339 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.207', 'seconds']
Parameter learned model CLL:-0.087084 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.759, 8, 156], 'false,true': [5.16e-08, 291, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 285, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.215, 8, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 294, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [0.996, 1, 128], 'true,false': [0.0, 258, 0], 'false,true,true': [0.182, 1, 28], 'false,true,false': [0.0, 45, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.406, 6, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.1e-07, 256, 0], 'false,false,false': [0.0, 48, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.404, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.04e-09, 315, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.151, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.98e-08, 310, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [2.556, 7, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.2e-07, 246, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 57, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 251, 0], 'false,false,false': [2.08e-09, 66, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false': [8.23e-09, 339, 0]}]
{'': [0.04640095181440217, 9.156478553609538e-18], 'false': [9.156478553609538e-18, nan]}
{'': [0.024374999999997104, -8.102680320071318e-17], 'false': [-8.102680320071318e-17, nan]}
{'': [0.04640095181439554, -9.516197353929913e-17], 'false': [nan, -9.516197353929913e-17]}
{'': [0.06620196154375119, 0.07464570386762819], 'false': [0.07464570386762819, nan], 'false,true': [0.03329369797859688, -1.4802973661668754e-17], 'true': [0.0076918454419813796, -6.540848827248985e-17]}
{'': [0.035747434942727765, 9.057082569310487e-17], 'true': [0.035747434942727765, nan], 'false': [nan, 9.057082569310487e-17], 'false,false': [4.683753385137379e-17, -2.544261098099317e-17], 'false,false,true': [nan, 4.683753385137379e-17]}
{'': [0.03567440645337011, 3.665498240032263e-17], 'false': [nan, 3.665498240032263e-17], 'false,false': [nan, 3.665498240032263e-17]}
{'': [0.02874861055689313, 2.865091676452017e-18], 'false': [nan, 2.865091676452017e-18], 'false,false': [nan, 2.865091676452017e-18], 'false,false,false': [2.865091676452017e-18, nan]}
{'': [0.04007287974004021, 3.004563961031777e-17], 'true': [0.04007287974004021, nan], 'false': [5.867032243954079e-17, -1.0712678307786598e-17], 'false,false': [nan, -1.0712678307786598e-17]}
{'': [0.024363950745952514, -7.074607286254941e-17], 'false': [nan, -7.074607286254941e-17], 'false,false': [-7.9617587423318e-18, 4.20539024479226e-18], 'false,false,true': [nan, -7.9617587423318e-18]}
{'': [0.012471860040648099, 6.811987879705975e-17], 'false': [nan, 6.811987879705975e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 36.806
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, A), follows(E, D) )
%   | | | then return 0.8581489350995125;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.6914822684328457;  // std dev = 1.581, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | | else return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.858148935099512;  // std dev = 2.38e-07, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.14185106490048768;  // std dev = 1.69e-07, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, E) )
%   | | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | | then return 0.6962175982574665;  // std dev = 0.988, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | | else return 0.733246620191006;  // std dev = 0.140, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.7211775835431252;  // std dev = 0.032, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.4775682260387666;  // std dev = 0.838, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.7229075756530569;  // std dev = 0.081, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   else return -0.12544463852839208;  // std dev = 0.000, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.5685953253353447;  // std dev = 0.213, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.2196237354610202;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5548781074499574;  // std dev = 0.000679, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.5560235613641525;  // std dev = 0.084, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   else return -0.11231637819360676;  // std dev = 0.000, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.42433631543513184;  // std dev = 0.225, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.2277032790378738;  // std dev = 1.781, 18.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=14 */
%   | | | else return 0.4171536004247718;  // std dev = 0.061, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( tweets(A, H) )
%   | | then return 0.4203883152427209;  // std dev = 0.058, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.4167045412277015;  // std dev = 0.000227, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.29151893636014486;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return -0.10159632948783621;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D), follows(A, E) )
%   | | | then return 0.27765470888434074;  // std dev = 1.330, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.33445554148407947;  // std dev = 0.206, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.34146330317677676;  // std dev = 0.237, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( follows(F, A) )
%   | | then return 0.316777692519383;  // std dev = 0.008, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.05234517322603945;  // std dev = 0.849, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2846008766091835;  // std dev = 0.961, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   else if ( follows(A, H) )
%   | then return -0.09269127618926049;  // std dev = 1.32e-07, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
%   | else return -0.09269127618926103;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, F) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.2129717518370363;  // std dev = 1.646, 62.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=59 */
%   | | | else return 0.32404738361728597;  // std dev = 0.158, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.20958531751903992;  // std dev = 1.007, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), follows(I, H) )
%   | | | then return 0.2575346536663197;  // std dev = 0.111, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.2504510100504924;  // std dev = 0.001, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.26053279847025523;  // std dev = 0.009, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.27707425794224727;  // std dev = 0.045, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( tweets(A, K) )
%   | then return -0.08518475138839678;  // std dev = 5.59e-09, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | else return -0.08518475138839678;  // std dev = 1.49e-08, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( follows(A, E), recursion_accounttype(D, B) )
%   | | | then return 0.2048551650338128;  // std dev = 0.999, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | | else return 0.15761816064138898;  // std dev = 0.966, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else if ( follows(F, D), recursion_accounttype(F, B) )
%   | | | then return 0.2182969852545644;  // std dev = 0.107, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.2827278077169576;  // std dev = 0.133, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.06291108812743676;  // std dev = 0.405, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.21025219951245547;  // std dev = 0.021, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.14079704307096044;  // std dev = 0.949, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else return -0.07877675473109143;  // std dev = 3.33e-08, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(A, D) )
%   | | | then return 0.18973649618512833;  // std dev = 0.028, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.20599151207457878;  // std dev = 0.123, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(G, A), follows(G, D) )
%   | | | then return 0.18158296577844824;  // std dev = 0.001, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.17777152475697436;  // std dev = 0.007, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.12473711892622026;  // std dev = 1.657, 44.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | | else return -0.09311420711114213;  // std dev = 1.181, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.194582988699741;  // std dev = 0.158, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.20445906313865547;  // std dev = 0.034, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.07324622576333695;  // std dev = 5.89e-09, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | | then return 0.16122198659677323;  // std dev = 0.029, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return -0.05841254327180165;  // std dev = 0.726, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return -0.0030300020169763994;  // std dev = 1.756, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | | else return 0.14277241642676905;  // std dev = 0.978, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.15564140161981477;  // std dev = 0.002, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.16037408890622473;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.18492331520213368;  // std dev = 0.066, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, I) )
%   | then return -0.06842697784420261;  // std dev = 4.27e-09, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else return -0.06842697784420262;  // std dev = 3.48e-09, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(A, D), tweets(D, G) )
%   | | | then return 0.14222735702156727;  // std dev = 0.013, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.1600468604036702;  // std dev = 0.095, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(H, A), follows(H, D) )
%   | | | then return 0.13649198806553176;  // std dev = 0.003, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.13382651944297466;  // std dev = 0.004, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.4580609557381024;  // std dev = 1.097, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.07947740680906441;  // std dev = 1.203, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | else if ( tweets(A, K), follows(A, L) )
%   | | | then return 0.1271173480896519;  // std dev = 0.721, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.1544271024559492;  // std dev = 0.169, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else return -0.06419184008202593;  // std dev = 7.03e-09, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.742', 'seconds']
Refined model CLL: -0.083376


******************************************
Best model found
******************************************
Results 

CLL : -0.089178 

AUC ROC : 0.995218 

AUC PR : 0.478742 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 36.806 

Total Inference Time : 10.819944381713867 

Total revision time: 71.49375039863585
Best scored revision CLL: -0.083376


Results 

CLL : -0.089178 

AUC ROC : 0.995218 

AUC PR : 0.478742 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 71.52827626991271 

Total Inference Time : 10.819944381713867 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.355
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.834893121146022;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048816;  // std dev = 0.000, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6933738906180738;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839183;  // std dev = 0.000, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5367490707137874;  // std dev = 0.173, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360688;  // std dev = 0.000, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.41746437959154914;  // std dev = 1.402, 120.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=118 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4341310462582158;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783616;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.2909364651701013;  // std dev = 2.348, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926046;  // std dev = 1.01e-07, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
%   | | else return -0.09269127618926087;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.25836843567436046;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.67e-09, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20243338453999193;  // std dev = 1.711, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 6.50e-08, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16902658572981272;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333674;  // std dev = 1.22e-07, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.073246225763337;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14412935958504441;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420262;  // std dev = 5.37e-08, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   | | else return -0.06842697784420268;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11748055686004924;  // std dev = 0.173, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202626;  // std dev = 1.32e-09, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.891', 'seconds']
Parameter learned model CLL:-0.092879 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 258, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 237, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.173, 4, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 257, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.402, 2, 118], 'true,false': [0.0, 236, 0], 'false,true,true': [7.45e-09, 0, 8], 'false,true,false': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.348, 6, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.01e-07, 251, 0], 'false,false,false': [1.32e-09, 9, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.403, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.67e-09, 228, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.711, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.5e-08, 243, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.712, 3, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.22e-07, 242, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 18, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.37e-08, 235, 0], 'false,false,false': [0.0, 15, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.173, 4, 126], 'false,true': [0.0, 0, 0], 'false,false': [1.32e-09, 248, 0]}]
{'': [0.022714981070853308, -9.639145640156398e-17], 'false': [-9.639145640156398e-17, nan]}
{'': [0.029822485207101908, -5.808761816604195e-17], 'false': [-5.808761816604195e-17, nan]}
{'': [0.029822485207098626, -9.676652043425489e-17], 'false': [nan, -9.676652043425489e-17]}
{'': [0.06572892920338615, 0.061136908641745875], 'true': [0.01638888888888861, -7.526935760170552e-17], 'false': [0.061136908641745875, nan], 'false,true': [5.551115123125783e-17, -3.0839528461809902e-18]}
{'': [0.04175112530052656, 4.9533027252506987e-17], 'true': [0.04175112530052656, nan], 'false': [nan, 4.9533027252506987e-17], 'false,false': [4.069343357191809e-17, 0.0], 'false,false,true': [nan, 4.069343357191809e-17]}
{'': [0.015375045267290235, 3.1164155077197375e-17], 'false': [nan, 3.1164155077197375e-17], 'false,false': [nan, 3.1164155077197375e-17]}
{'': [0.022707103145338647, 1.7361512319241132e-17], 'false': [nan, 1.7361512319241132e-17], 'false,false': [nan, 1.7361512319241132e-17], 'false,false,false': [1.7361512319241132e-17, nan]}
{'': [0.022707934504589362, 5.0387044963757104e-17], 'true': [0.022707934504589362, nan], 'false': [6.14751592147814e-17, -7.709882115452476e-19], 'false,false': [nan, -7.709882115452476e-19]}
{'': [0.02270862444171133, -6.217248937900877e-18], 'false': [nan, -6.217248937900877e-18], 'false,false': [1.228331857032088e-17, -2.7755575615628915e-18], 'false,false,true': [nan, 1.228331857032088e-17]}
{'': [0.02981480948327412, 1.7906822977825105e-18], 'false': [nan, 1.7906822977825105e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 51.137
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.7629108398614171;  // std dev = 1.345, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | else return 0.858148935099512;  // std dev = 1.46e-07, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.14185106490048846;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7265792125811732;  // std dev = 0.106, 97.000 (wgt'ed) examples reached here.  /* #pos=97 */
%   | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.7194734122109543;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.7194734122109544;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.12544463852839186;  // std dev = 0.000, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.5576059760995017;  // std dev = 0.056, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.4839269608311135;  // std dev = 0.948, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.34400863896075906;  // std dev = 1.778, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   | | | else return 0.5229034029486432;  // std dev = 0.993, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | else return 0.5690663887971888;  // std dev = 0.108, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   else return -0.11231637819360675;  // std dev = 0.000, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), tweets(A, F) )
%   | | then if ( tweets(E, F), recursion_accounttype(E, B) )
%   | | | then return 0.400921417691912;  // std dev = 1.001, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return 0.43949915690356106;  // std dev = 0.089, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else return 0.43905070903249344;  // std dev = 0.167, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4368897557781812;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | then return 0.33187692326198;  // std dev = 0.124, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else if ( follows(E, A) )
%   | | | then return 0.26338974325571896;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.3307755789415638;  // std dev = 0.077, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.16277995443116478;  // std dev = 0.934, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.32272901691380734;  // std dev = 0.076, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, H) )
%   | then return -0.0926912761892605;  // std dev = 6.83e-08, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else return -0.09269127618926087;  // std dev = 5.27e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.22909606581746741;  // std dev = 1.387, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | | | else return 0.26692766123277734;  // std dev = 0.094, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return -0.05865840425614951;  // std dev = 0.789, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.2883787744091477;  // std dev = 0.081, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.31450615060840076;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.26573863386436414;  // std dev = 0.045, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.2501146022300922;  // std dev = 0.011, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( tweets(A, I) )
%   | then return -0.08518475138839678;  // std dev = 5.43e-09, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else return -0.08518475138839678;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.19277336677410217;  // std dev = 0.975, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.2336095615791212;  // std dev = 0.067, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, E), tweets(E, D) )
%   | | | then return 0.1280898767510762;  // std dev = 1.327, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return 0.21578982236078084;  // std dev = 0.033, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), follows(F, G) )
%   | | | then return 0.24270273129856515;  // std dev = 0.041, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.22997440938248254;  // std dev = 0.062, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.2220821965153149;  // std dev = 0.061, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.20917446624316188;  // std dev = 0.045, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.07877675473109143;  // std dev = 3.73e-09, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.15583663576622522;  // std dev = 1.359, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | | | else return 0.09870455081138022;  // std dev = 1.616, 32.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=29 */
%   | | else return -0.09672057463914845;  // std dev = 0.805, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.19305945149268236;  // std dev = 0.059, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2095904147947949;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.1819971190369265;  // std dev = 0.036, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.17253630850560442;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, I) )
%   | then return -0.07324622576333673;  // std dev = 8.01e-09, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | else return -0.073246225763337;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.14744877923547187;  // std dev = 0.983, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.06670103647880522;  // std dev = 0.962, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.17819316159787812;  // std dev = 0.107, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.1567863652917484;  // std dev = 0.054, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return -0.04350170809967643;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( follows(A, G) )
%   | then return -0.06842697784420275;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
%   | else return -0.06842697784420268;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.14609051766846154;  // std dev = 0.044, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return 0.16531215573105326;  // std dev = 0.019, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return -0.19777659323717342;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.1513005244151382;  // std dev = 0.113, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then if ( tweets(I, H), follows(A, I) )
%   | | | then return 0.09849653494415225;  // std dev = 0.941, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.17320119327965514;  // std dev = 0.754, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.15315105147052832;  // std dev = 0.068, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.13647202025819305;  // std dev = 0.040, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.06419184008202625;  // std dev = 1.32e-09, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.647', 'seconds']
Refined model CLL: -0.091726


******************************************
Best model found
******************************************
Results 

CLL : -0.086276 

AUC ROC : 0.995926 

AUC PR : 0.49991 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 51.137 

Total Inference Time : 9.158188343048096 

Total revision time: 76.01241149139405
Best scored revision CLL: -0.091726


Results 

CLL : -0.086276 

AUC ROC : 0.995926 

AUC PR : 0.49991 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 76.04021991920472 

Total Inference Time : 9.158188343048096 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.288
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8392810105712079;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004877;  // std dev = 1.66e-07, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6862286986535548;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.125444638528392;  // std dev = 0.000, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5431949309490629;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360668;  // std dev = 0.000, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3813732797274311;  // std dev = 2.576, 135.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=128 */
%   | else return -0.10159632948783662;  // std dev = 0.000, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4332251315792822;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.10159632948783619;  // std dev = 5.10e-09, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.30386064179808514;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926047;  // std dev = 1.40e-07, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
%   | | else return -0.09269127618926103;  // std dev = 0.000, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23915103667362278;  // std dev = 2.408, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.18e-09, 326.000 (wgt'ed) examples reached here.  /* #neg=326 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20006312833181708;  // std dev = 2.198, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 2.98e-08, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16041190970487343;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333686;  // std dev = 1.11e-07, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14223854148058915;  // std dev = 0.173, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0684269778442029;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
%   | | else return -0.06842697784420262;  // std dev = 3.09e-09, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14164329379721255;  // std dev = 0.108, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202591;  // std dev = 7.15e-09, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.425', 'seconds']
Parameter learned model CLL:-0.087066 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.716, 3, 156], 'false,true': [1.66e-07, 322, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.404, 6, 156], 'false,true': [0.0, 298, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 321, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [2.576, 7, 128], 'true,false': [0.0, 273, 0], 'false,true,true': [0.0, 0, 28], 'false,true,false': [5.1e-09, 60, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.404, 6, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.4e-07, 264, 0], 'false,false,false': [0.0, 71, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.408, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.18e-09, 326, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.198, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.98e-08, 316, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [2.404, 6, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.11e-07, 270, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 57, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.173, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 278, 0], 'false,false,false': [3.09e-09, 60, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.108, 2, 156], 'false,true': [0.0, 0, 0], 'false,false': [7.15e-09, 311, 0]}]
{'': [0.018511925952302145, 8.550786028168908e-17], 'false': [8.550786028168908e-17, nan]}
{'': [0.03566529492455599, -8.345300587786412e-17], 'false': [-8.345300587786412e-17, nan]}
{'': [0.02437500000000208, -3.873675350717057e-17], 'false': [nan, -3.873675350717057e-17]}
{'': [0.06791075109068419, 0.06205282954108801], 'true': [0.04916323731138503, -5.856121448572254e-17], 'false': [0.06205282954108801, nan], 'false,true': [-1.9032394707859825e-16, 2.590520390792032e-17]}
{'': [0.03567443140641523, 1.1798190948255396e-16], 'true': [0.03567443140641523, nan], 'false': [nan, 1.1798190948255396e-16], 'false,false': [7.401486830834377e-17, -1.8764332810566026e-17], 'false,false,true': [nan, 7.401486830834377e-17]}
{'': [0.03579417903798203, 3.950486836089514e-17], 'false': [nan, 3.950486836089514e-17], 'false,false': [nan, 3.950486836089514e-17]}
{'': [0.030004786274257074, 2.8106912015826747e-18], 'false': [nan, 2.8106912015826747e-18], 'false,false': [nan, 2.8106912015826747e-18], 'false,false,false': [2.8106912015826747e-18, nan]}
{'': [0.035667579101634324, 2.0371064672021222e-17], 'true': [0.035667579101634324, nan], 'false': [4.5231308410654523e-17, -1.2660438000111434e-17], 'false,false': [nan, -1.2660438000111434e-17]}
{'': [0.030019831964813875, -7.883240411539573e-17], 'false': [nan, -7.883240411539573e-17], 'false,false': [-2.8753977616191105e-17, 9.25185853854297e-18], 'false,false,true': [nan, -2.8753977616191105e-17]}
{'': [0.01158310423005299, 5.140582493441239e-17], 'false': [nan, 5.140582493441239e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 32.361
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.724815601766179;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.8581489350995121;  // std dev = 2.23e-07, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   else return -0.14185106490048777;  // std dev = 1.33e-07, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7229596911707551;  // std dev = 0.138, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.6285643213018635;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.7214073516140279;  // std dev = 0.036, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else return -0.12544463852839197;  // std dev = 0.000, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5606418286007812;  // std dev = 0.102, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | | else return 0.3872071259997698;  // std dev = 1.549, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | else if ( follows(D, A) )
%   | | | then return -0.4377673027046187;  // std dev = 0.019, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.42248677852608757;  // std dev = 0.808, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.4920293537023319;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.554633202203727;  // std dev = 0.000443, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5555226231554126;  // std dev = 0.049, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   else return -0.11231637819360674;  // std dev = 0.000, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return 0.3640833160281451;  // std dev = 1.420, 49.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=46 */
%   | | | else return 0.4357477639365979;  // std dev = 0.076, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.4375702420850343;  // std dev = 0.295, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( tweets(A, H) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.3596159825222891;  // std dev = 0.963, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.41662801823335105;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.4222482774542026;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.29200536174578984;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return -0.10159632948783619;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( tweets(D, F), tweets(A, F) )
%   | | | then return 0.32963525249065423;  // std dev = 0.039, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.2836872867345267;  // std dev = 0.981, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return 0.28093535566514544;  // std dev = 0.241, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(A, G), follows(H, A) )
%   | | then if ( tweets(A, I), tweets(H, I) )
%   | | | then return 0.2956435293984171;  // std dev = 0.959, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.06113522596782254;  // std dev = 0.680, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.28840445813757;  // std dev = 1.005, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.32925640626731506;  // std dev = 0.108, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else if ( follows(A, L) )
%   | then return -0.09269127618926049;  // std dev = 1.30e-07, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
%   | else return -0.09269127618926101;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.26750043394360085;  // std dev = 0.119, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.2558613374150141;  // std dev = 0.006, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.2755207583585358;  // std dev = 1.83e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.31013796913590497;  // std dev = 0.043, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.30756742513427415;  // std dev = 0.064, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.04745600548299471;  // std dev = 1.070, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.22852190508477332;  // std dev = 0.968, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.2582965159610856;  // std dev = 0.077, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else return -0.08518475138839678;  // std dev = 6.04e-09, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.2211381890066637;  // std dev = 0.134, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.1444474033915502;  // std dev = 1.448, 36.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=33 */
%   | | else return 0.2673184567063774;  // std dev = 0.201, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A), tweets(G, H) )
%   | | then if ( tweets(A, H), recursion_accounttype(G, B) )
%   | | | then return 0.24104577376949476;  // std dev = 0.011, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.2276396382338386;  // std dev = 0.064, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.21015547363133394;  // std dev = 0.059, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.22106156133297378;  // std dev = 0.034, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.07877675473109143;  // std dev = 2.98e-08, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.17930405941221086;  // std dev = 0.011, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.1896235293548236;  // std dev = 0.018, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(D, F), recursion_accounttype(D, B) )
%   | | | then return 0.22669483587801434;  // std dev = 0.191, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.18303242004836728;  // std dev = 0.080, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then return 0.07136483085560902;  // std dev = 0.335, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.17337794031298515;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.18936890917880747;  // std dev = 0.020, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, J) )
%   | then return -0.07324622576333682;  // std dev = 7.15e-09, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
%   | else return -0.07324622576333703;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(F, D) )
%   | | then if ( tweets(A, G), recursion_accounttype(E, B) )
%   | | | then return 0.15387074120182795;  // std dev = 0.028, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.16131004139010724;  // std dev = 0.019, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( tweets(A, H), follows(I, D) )
%   | | | then return 0.18856659921745;  // std dev = 0.009, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.1743562845511057;  // std dev = 0.048, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(J, A), follows(A, J) )
%   | | then if ( follows(A, K), follows(K, J) )
%   | | | then return 0.020537510411847832;  // std dev = 1.279, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return 0.16627341355583933;  // std dev = 0.042, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, L) )
%   | | | then return 0.14091305744500285;  // std dev = 0.993, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return 0.08748353712970496;  // std dev = 0.958, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else return -0.0684269778442031;  // std dev = 0.000, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(F, A) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.1411674750710313;  // std dev = 0.111, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | | else return 0.059245170235337326;  // std dev = 0.903, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.17024560301269584;  // std dev = 0.055, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.14921187123916713;  // std dev = 0.061, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else if ( follows(H, A), tweets(H, I) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.14108702481791083;  // std dev = 0.015, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.33953200703547254;  // std dev = 0.996, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.13416043066825728;  // std dev = 0.034, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.15283310593674493;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.06419184008202591;  // std dev = 7.15e-09, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.023', 'seconds']
Refined model CLL: -0.084817


******************************************
Best model found
******************************************
Results 

CLL : -0.090402 

AUC ROC : 0.99488 

AUC PR : 0.460282 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 32.361 

Total Inference Time : 10.418734073638916 

Total revision time: 68.76829559707642
Best scored revision CLL: -0.084817


Results 

CLL : -0.090402 

AUC ROC : 0.99488 

AUC PR : 0.460282 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 68.79610402488709 

Total Inference Time : 10.418734073638916 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.404
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8502749193514789;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004885;  // std dev = 0.000, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7054348861596896;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839188;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.501069135318853;  // std dev = 0.237, 134.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360683;  // std dev = 0.000, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.38015568008839584;  // std dev = 2.571, 125.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=118 */
%   | else return -0.10358877772242178;  // std dev = 0.461, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.23615568008839521;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return -0.1015963294878362;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.33239371892334774;  // std dev = 1.409, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09252384801303283;  // std dev = 0.000, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | | else return -0.09269127618926086;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2535954450620265;  // std dev = 1.717, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08505079231649562;  // std dev = 3.31e-05, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1839592527892054;  // std dev = 2.377, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.0786618732751037;  // std dev = 0.000481, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1600087040287757;  // std dev = 2.197, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07313930472146483;  // std dev = 0.000, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07326311915488713;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15838174382418505;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06833337973030337;  // std dev = 0.000, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
%   | | else return -0.06844176473111453;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13678202980713153;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06411598180370637;  // std dev = 2.45e-05, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.325', 'seconds']
Parameter learned model CLL:-0.092668 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.996, 1, 126], 'false,true': [0.0, 227, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.403, 2, 126], 'false,true': [0.0, 253, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.237, 8, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 246, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [2.571, 7, 118], 'true,false': [0.461, 232, 0], 'false,true,true': [0.4, 2, 8], 'false,true,false': [0.0, 24, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.409, 2, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 226, 0], 'false,false,false': [0.0, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.717, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.31e-05, 244, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.377, 6, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.000481, 239, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [2.197, 5, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 229, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 15, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 263, 0], 'false,false,false': [0.0, 15, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false': [2.45e-05, 270, 0]}]
{'': [0.007812015624035403, -2.2302277499078035e-16], 'false': [-2.2302277499078035e-16, nan]}
{'': [0.015380859374998113, -7.898819938044592e-17], 'false': [-7.898819938044592e-17, nan]}
{'': [0.05613722432613106, -9.206727521281785e-17], 'false': [nan, -9.206727521281785e-17]}
{'': [0.07235255552122317, 0.07074250933690988], 'true': [0.05286399999999966, 0.0009170353424928166], 'false': [0.07074250933690988, nan], 'false,true': [0.15999999999999998, -1.2721305490496585e-17]}
{'': [0.015510654070236385, 1.5398239461283935e-09], 'true': [0.015510654070236385, nan], 'false': [nan, 1.5398239461283935e-09], 'false,false': [-5.403740385343682e-17, -5.9476233462061954e-18], 'false,false,true': [nan, -5.403740385343682e-17]}
{'': [0.02285144904215674, 1.09230632280536e-09], 'false': [nan, 1.09230632280536e-09], 'false,false': [nan, 1.09230632280536e-09]}
{'': [0.04282126905696796, 9.660649063605875e-10], 'false': [nan, 9.660649063605875e-10], 'false,false': [nan, 9.660649063605875e-10], 'false,false,false': [9.660649063605875e-10, nan]}
{'': [0.03685422010388909, 8.844832771475296e-10], 'true': [0.03685422010388909, nan], 'false': [-2.7149558680789853e-17, -1.8503717077085942e-18], 'false,false': [nan, -1.8503717077085942e-18]}
{'': [0.01545015448020642, 5.996471265178479e-10], 'false': [nan, 5.996471265178479e-10], 'false,false': [-2.6172557994965666e-17, 0.0], 'false,false,true': [nan, -2.6172557994965666e-17]}
{'': [0.015440895564952577, 5.983128552271237e-10], 'false': [nan, 5.983128552271237e-10]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 25.129
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.8581489350995112;  // std dev = 4.77e-07, 105.000 (wgt'ed) examples reached here.  /* #pos=105 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.14185106490048846;  // std dev = 0.000, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.6729617843039783;  // std dev = 1.381, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.7194734122109548;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.7194734122109546;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.7323220530145879;  // std dev = 0.063, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.6040887968263391;  // std dev = 1.629, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | | | else return 0.7194734122109543;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.12544463852839174;  // std dev = 0.000, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E) )
%   | | | then return 0.5638901710204857;  // std dev = 0.033, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.4404060946359061;  // std dev = 1.620, 25.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=22 */
%   | | else if ( follows(F, A), tweets(A, G) )
%   | | | then return 0.302191448357544;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.5847137756917792;  // std dev = 0.056, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.5686409159193448;  // std dev = 0.099, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.11231637819360679;  // std dev = 0.000, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.4133775510853176;  // std dev = 0.969, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | | else return 0.4361321471135974;  // std dev = 0.063, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.4410876946603243;  // std dev = 0.132, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return -0.10159632948783655;  // std dev = 0.000, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4142888623457984;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( tweets(D, E), follows(D, F) )
%   | | | then return 0.2791164920341234;  // std dev = 1.658, 50.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=47 */
%   | | | else return 0.34356729591264173;  // std dev = 0.066, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.3281916895070273;  // std dev = 0.096, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return 0.2074152946662849;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926047;  // std dev = 9.19e-08, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
%   | else return -0.09269127618926087;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.2689646660609388;  // std dev = 0.077, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.2279322560030908;  // std dev = 0.956, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else if ( tweets(A, F), follows(G, D) )
%   | | | then return 0.04252961080355059;  // std dev = 1.258, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.2649446345095553;  // std dev = 0.029, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( tweets(A, J), recursion_accounttype(H, B) )
%   | | | then return 0.297879980533648;  // std dev = 0.021, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.26710968181766975;  // std dev = 0.038, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.24683901240609651;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2523657583569468;  // std dev = 0.030, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.08518475138839678;  // std dev = 5.82e-09, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(A, E) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.20586232631487505;  // std dev = 0.967, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return -0.1106930772994719;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, D), tweets(A, F) )
%   | | | then return 0.2679177370724591;  // std dev = 0.029, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.22526878399808792;  // std dev = 0.043, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(G, B), tweets(A, I) )
%   | | | then return 0.2395369018790039;  // std dev = 0.018, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2181680898621572;  // std dev = 0.033, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2038534928147392;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2078049273774948;  // std dev = 0.027, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07877675473109143;  // std dev = 4.37e-09, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), tweets(E, F) )
%   | | then if ( follows(A, G), follows(G, E) )
%   | | | then return 0.13132047219467324;  // std dev = 1.639, 50.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=47 */
%   | | | else return 0.1973885695086476;  // std dev = 0.057, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(E, H), follows(H, A) )
%   | | | then return -0.09546766565316558;  // std dev = 1.192, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.14219732371979715;  // std dev = 0.959, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(J, A), follows(I, J) )
%   | | | then return 0.17918337736185147;  // std dev = 0.035, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.20118338855554896;  // std dev = 0.073, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.18183193678934137;  // std dev = 0.022, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.17200358110760283;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07324622576333678;  // std dev = 7.51e-09, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E) )
%   | | then if ( tweets(A, E), follows(A, D) )
%   | | | then return 0.17390329964537324;  // std dev = 0.061, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.13444193360705664;  // std dev = 0.998, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | else return 0.1966268865451175;  // std dev = 0.029, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.07829574641190176;  // std dev = 0.903, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.24461203958689542;  // std dev = 1.077, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.07745282751121621;  // std dev = 1.364, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0.1540372515248244;  // std dev = 0.017, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, I) )
%   | then return -0.06842697784420261;  // std dev = 4.56e-09, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else return -0.06842697784420265;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.14609099785034144;  // std dev = 0.064, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.1551995621547653;  // std dev = 0.068, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.18478079795574956;  // std dev = 0.007, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.15747240919458252;  // std dev = 0.048, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), tweets(H, I) )
%   | | | then return -0.34274060634555226;  // std dev = 0.991, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.17227975450301394;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1448198059722741;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.133422800612094;  // std dev = 0.013, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06419184008202625;  // std dev = 1.05e-08, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.840', 'seconds']
Refined model CLL: -0.091132


******************************************
Best model found
******************************************
Results 

CLL : -0.085662 

AUC ROC : 0.996212 

AUC PR : 0.513461 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 25.129 

Total Inference Time : 7.719337463378906 

Total revision time: 48.915641792297365
Best scored revision CLL: -0.091132


Results 

CLL : -0.085662 

AUC ROC : 0.996212 

AUC PR : 0.513461 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 54.60149455833435 

Total Inference Time : 7.719337463378906 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.353
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8331489350995097;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048788;  // std dev = 7.30e-08, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7056234789732008;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839197;  // std dev = 0.000, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5399380356344785;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936068;  // std dev = 0.000, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.38599383540456017;  // std dev = 2.394, 134.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=128 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.3962871961868568;  // std dev = 0.182, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return -0.10159632948783617;  // std dev = 1.32e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.33288846795899923;  // std dev = 0.999, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926047;  // std dev = 1.41e-07, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
%   | | else return -0.09269127618926101;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23202859213027352;  // std dev = 2.403, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.18e-09, 330.000 (wgt'ed) examples reached here.  /* #neg=330 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21955781781422953;  // std dev = 0.997, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 2.98e-08, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17098177788802232;  // std dev = 1.715, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333681;  // std dev = 1.16e-07, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1338807681406004;  // std dev = 0.173, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.068426977844203;  // std dev = 0.000, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
%   | | else return -0.06842697784420262;  // std dev = 2.46e-09, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10437178007360917;  // std dev = 0.203, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202594;  // std dev = 6.84e-09, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.783', 'seconds']
Parameter learned model CLL:-0.0872 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.975, 4, 156], 'false,true': [7.3e-08, 295, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 287, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 303, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [2.394, 6, 128], 'true,false': [0.0, 230, 0], 'false,true,true': [0.182, 1, 28], 'false,true,false': [1.32e-09, 56, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.999, 1, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.41e-07, 266, 0], 'false,false,false': [0.0, 62, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.403, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.18e-09, 330, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.997, 1, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.98e-08, 306, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.715, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.16e-07, 256, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 56, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.173, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 299, 0], 'false,false,false': [2.46e-09, 58, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.203, 7, 156], 'false,true': [0.0, 0, 0], 'false,false': [6.84e-09, 303, 0]}]
{'': [0.024375000000006076, 1.8064645824409325e-17], 'false': [1.8064645824409325e-17, nan]}
{'': [0.0185119259522958, -8.046215648851309e-17], 'false': [-8.046215648851309e-17, nan]}
{'': [0.024374999999996837, -7.621332974324507e-17], 'false': [nan, -7.621332974324507e-17]}
{'': [0.07104730890529183, 0.0670780741677205], 'true': [0.04277121853419522, -7.723290606088045e-17], 'false': [0.0670780741677205, nan], 'false,true': [0.03329369797859679, 3.96508223080413e-18]}
{'': [0.00635359616534334, 1.1373016349818677e-16], 'true': [0.00635359616534334, nan], 'false': [nan, 1.1373016349818677e-16], 'false,false': [7.51278738468151e-17, -2.865091676452017e-17], 'false,false,true': [nan, 7.51278738468151e-17]}
{'': [0.03564000130292972, 3.768029659333865e-17], 'false': [nan, 3.768029659333865e-17], 'false,false': [nan, 3.768029659333865e-17]}
{'': [0.0063252479756985645, 2.9025438552291675e-18], 'false': [nan, 2.9025438552291675e-18], 'false,false': [nan, 2.9025438552291675e-18], 'false,false,false': [2.9025438552291675e-18, nan]}
{'': [0.018501789117757857, 2.7043894189587146e-17], 'true': [0.018501789117757857, nan], 'false': [5.2909066017292616e-17, -1.0903976134711359e-17], 'false,false': [nan, -1.0903976134711359e-17]}
{'': [0.030076439192735276, -9.76498682723527e-17], 'false': [nan, -9.76498682723527e-17], 'false,false': [-5.643943135218187e-17, 6.699621700324221e-18], 'false,false,true': [nan, -5.643943135218187e-17]}
{'': [0.04108173601473134, 4.6900510611227736e-17], 'false': [nan, 4.6900510611227736e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 40.468
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then return 0.8581489350995127;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else if ( follows(A, D) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.8093684472946338;  // std dev = 1.379, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.14185106490048774;  // std dev = 1.52e-07, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(D, E) )
%   | | | then return 0.6855751071262086;  // std dev = 1.390, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | | | else return 0.46947341221095434;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.7244458544001016;  // std dev = 0.084, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else return 0.7277600413926552;  // std dev = 0.143, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   else return -0.12544463852839194;  // std dev = 0.000, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), follows(D, A) )
%   | | | then return 0.5643999449613122;  // std dev = 0.119, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.3884316473268783;  // std dev = 1.578, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else return 0.29342020774553607;  // std dev = 1.163, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(A, F) )
%   | | then return 0.5631786011935203;  // std dev = 0.032, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.5680774651017222;  // std dev = 0.074, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.4699859207662667;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else return -0.11231637819360694;  // std dev = 0.000, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.3915889856145844;  // std dev = 1.328, 53.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=51 */
%   | | | else return 0.4296734505244221;  // std dev = 0.122, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0.43859167414753925;  // std dev = 0.293, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else return -0.10341205971975609;  // std dev = 0.484, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4308015380427728;  // std dev = 0.079, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.10159632948783617;  // std dev = 1.49e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3318829306451611;  // std dev = 0.169, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.27675313781795186;  // std dev = 0.952, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.17434467386500488;  // std dev = 1.212, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return 0.32481910920442564;  // std dev = 0.047, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   else if ( follows(A, G) )
%   | then return -0.09253868688796722;  // std dev = 0.000, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
%   | else return -0.09269127618926101;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.26877814143571543;  // std dev = 0.128, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.4365490586828693;  // std dev = 0.255, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(E, A) )
%   | | | then return 0.2591666610537473;  // std dev = 0.008, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.2536068743637051;  // std dev = 0.019, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, A), follows(G, H) )
%   | | | then return 0.19047352500337356;  // std dev = 0.770, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.2612430284842652;  // std dev = 0.076, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.210935194828184;  // std dev = 0.940, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0.17120068801810923;  // std dev = 0.949, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.08507582039455672;  // std dev = 4.74e-05, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.19972877214253215;  // std dev = 0.998, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | | | else return 0.13323282318284785;  // std dev = 1.695, 33.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=30 */
%   | | else return -0.11248437229557624;  // std dev = 0.787, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.27497048593272283;  // std dev = 0.197, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.22636332125183903;  // std dev = 0.053, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.20934771902995136;  // std dev = 0.017, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.22925763157388931;  // std dev = 0.023, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, J) )
%   | then return -0.07866403801138484;  // std dev = 0.000, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
%   | else return -0.07878466032254491;  // std dev = 2.58e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | | then return 0.18622736980891594;  // std dev = 0.091, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.14123923982356112;  // std dev = 1.390, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | else return 0.23501466079833605;  // std dev = 0.213, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.18921827999596577;  // std dev = 0.046, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.1760990633484899;  // std dev = 0.011, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(H, A), tweets(A, I) )
%   | | | then return 0.1996474090354561;  // std dev = 0.048, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.19127935652421066;  // std dev = 0.020, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, J) )
%   | then return -0.07314843562443027;  // std dev = 5.96e-08, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
%   | else return -0.07325308378617953;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.1311239330011331;  // std dev = 0.989, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.1591393186117677;  // std dev = 0.060, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.1698780931949482;  // std dev = 0.054, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.15889022989651602;  // std dev = 0.040, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.16963724667226898;  // std dev = 0.033, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.23700519010794277;  // std dev = 0.159, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.16789238749852928;  // std dev = 0.194, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.15882866968655227;  // std dev = 0.041, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.06835721069947238;  // std dev = 3.46e-05, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.0766312259602149;  // std dev = 1.669, 46.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=43 */
%   | | | else return 0.14984727182185964;  // std dev = 0.247, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else return -0.16916774144798186;  // std dev = 1.048, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.1414978443057087;  // std dev = 0.037, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.1326281797294122;  // std dev = 0.009, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( tweets(A, H), follows(I, A) )
%   | | | then return 0.14652094478776476;  // std dev = 0.040, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.14285517347286483;  // std dev = 0.016, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, J) )
%   | then return -0.06411535563482441;  // std dev = 0.000, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
%   | else return -0.06420168853703946;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.275', 'seconds']
Refined model CLL: -0.085531


******************************************
Best model found
******************************************
Results 

CLL : -0.091418 

AUC ROC : 0.994242 

AUC PR : 0.425243 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 40.468 

Total Inference Time : 10.656790494918823 

Total revision time: 73.92261399841308
Best scored revision CLL: -0.085531


Results 

CLL : -0.091418 

AUC ROC : 0.994242 

AUC PR : 0.425243 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 79.60846676445007 

Total Inference Time : 10.656790494918823 

