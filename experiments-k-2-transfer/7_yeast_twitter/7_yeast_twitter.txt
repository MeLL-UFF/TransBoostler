Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Starting experiments for fasttext using euclidean 

Run: 1

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.356276750564575
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8392810105712079;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004877;  // std dev = 1.55e-07, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.70439781116229;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( tweets(D, E) )
%   | then return -0.12544463852839205;  // std dev = 0.000, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5326758412461129;  // std dev = 0.173, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then return -0.11231637819360656;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | | else return -0.11231637819360628;  // std dev = 5.77e-08, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.401044674332497;  // std dev = 1.969, 132.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=128 */
%   | else return -0.10363587519035464;  // std dev = 0.466, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.39686494601483735;  // std dev = 0.182, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.10159632948783633;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return -0.10159632948783633;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3181385970203593;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0925198936354831;  // std dev = 0.000, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
%   | | else return -0.09269127618926101;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2449638678245288;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08506606632212062;  // std dev = 5.64e-05, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.181533419907512;  // std dev = 2.588, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07867231760441187;  // std dev = 0.000875, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1755901924225403;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07313463674631747;  // std dev = 0.000, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07326137301138183;  // std dev = 1.05e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14342361530569508;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06832929303629746;  // std dev = 0.000, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
%   | | else return -0.0684402363401815;  // std dev = 1.86e-09, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13040537339880798;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( tweets(A, D) )
%   | then return -0.06411889749351313;  // std dev = 0.000507, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06413314352396168;  // std dev = 4.40e-05, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
Inference time using transfer learning 11.271729469299316
Parameter learned model CLL:-0.087238 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.716, 3, 156], 'false,true': [1.55e-07, 318, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(D, E)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 315, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E), follows(A, F)'}, {'true': [0.173, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 188, 0], 'false,false,false': [5.77e-08, 114, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)', 'false,true,false': 'tweets(A, H)'}, {'true,true': [1.969, 4, 128], 'true,false': [0.466, 229, 0], 'false,true,true': [0.182, 1, 28], 'false,true,false,true': [0.0, 35, 0], 'false,true,false,false': [0.0, 28, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.716, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 259, 0], 'false,false,false': [0.0, 51, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.64e-05, 315, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.588, 7, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.000875, 302, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F), tweets(A, G)'}, {'true,true': [1.716, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 240, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.05e-08, 47, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 262, 0], 'false,false,false': [1.86e-09, 57, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.000507, 229, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [4.4e-05, 89, 0]}]
{'': [0.018511925952302145, 7.54113752575578e-17], 'false': [7.54113752575578e-17, nan]}
{'': [0.018511925952298034, -9.022764898540955e-17], 'false': [-9.022764898540955e-17, nan]}
{'': [0.030091431657732214, -7.058371547285764e-17], 'false': [nan, -7.058371547285764e-17], 'false,false': [-1.1810883240693155e-17, 2.921639538487254e-17]}
{'': [0.07042451649945715, 0.06412696860692303], 'true': [0.029384756657484145, 0.0009484222413664013], 'false': [0.06412696860692303, nan], 'false,true': [0.03329369797859682, 2.819614030794048e-17], 'false,true,false': [-9.516197353929913e-18, -1.1895246692412391e-17]}
{'': [0.018518261321885512, 4.037195400924577e-09], 'true': [0.018518261321885512, nan], 'false': [nan, 4.037195400924577e-09], 'false,false': [-4.800964430811488e-17, -2.1769078914218755e-17], 'false,false,true': [nan, -4.800964430811488e-17]}
{'': [0.024382310447863275, 3.1789743634669594e-09], 'false': [nan, 3.1789743634669594e-09], 'false,false': [nan, 3.1789743634669594e-09]}
{'': [0.04110280081459615, 2.5358033708165007e-09], 'false': [nan, 2.5358033708165007e-09], 'false,false': [nan, 2.5358033708165007e-09], 'false,false,false': [2.5358033708165007e-09, nan]}
{'': [0.018516342730441376, 2.199617216979287e-09], 'true': [0.018516342730441376, nan], 'false': [-3.515706244646329e-17, 2.362176648138631e-18], 'false,false': [nan, 2.362176648138631e-18]}
{'': [0.02436589749299135, 1.8063294865439866e-09], 'false': [nan, 1.8063294865439866e-09], 'false,false': [-2.372995777824762e-17, 3.895519384649672e-18], 'false,false,true': [nan, -2.372995777824762e-17]}
{'': [0.018515497497574952, 1.390373568199221e-09], 'false': [1.1216370248892649e-09, 1.9356926068267972e-09], 'false,false': [nan, 1.9356926068267972e-09]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E), follows(A, F).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
3;false,false;tweets(A, H).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 37.44649267196655
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8581489350995098;  // std dev = 9.68e-07, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   else return -0.14185106490048782;  // std dev = 1.03e-07, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.7194734122109555;  // std dev = 0.000, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.6706929244060775;  // std dev = 1.379, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | else return 0.519473412210955;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.7194734122109554;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.12544463852839197;  // std dev = 0.000, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5613238474508327;  // std dev = 0.092, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(A, E) )
%   | | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.42718559101042;  // std dev = 1.286, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.5343453892547821;  // std dev = 0.990, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.05536643674628473;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.5553664367462847;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( tweets(A, H), follows(A, I) )
%   | then return -0.11231637819360675;  // std dev = 0.000, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | else return -0.1123163781936063;  // std dev = 4.47e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.42420598296397105;  // std dev = 0.092, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | | else return 0.36388588936710586;  // std dev = 0.899, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.45377602154865765;  // std dev = 0.067, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.42169607695103634;  // std dev = 0.014, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( tweets(A, I), follows(J, A) )
%   | | then return 0.3067642994262485;  // std dev = 0.315, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.4579289957277464;  // std dev = 0.103, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.4175135841583103;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.10159632948783619;  // std dev = 5.10e-09, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.3227459681637786;  // std dev = 0.040, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.35599640050641257;  // std dev = 0.038, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.006831615890733084;  // std dev = 1.328, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.33146766667844735;  // std dev = 0.025, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(H, A), tweets(H, I) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.33547656958155825;  // std dev = 0.063, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.4011526807902547;  // std dev = 0.104, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.3419992813178939;  // std dev = 0.035, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.32326056683972487;  // std dev = 0.011, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.09269127618926044;  // std dev = 1.02e-08, 311.000 (wgt'ed) examples reached here.  /* #neg=311 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, D), recursion_accounttype(E, B) )
%   | | | then return 0.2523914709318887;  // std dev = 6.14e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.2604083316523853;  // std dev = 0.037, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.28187871551043675;  // std dev = 0.038, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.26879911381264626;  // std dev = 0.038, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.3582188520465057;  // std dev = 0.010, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.13740642806417;  // std dev = 1.324, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.17334596500467347;  // std dev = 0.944, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.2381843709139446;  // std dev = 1.004, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   else return -0.08518475138839678;  // std dev = 6.18e-09, 331.000 (wgt'ed) examples reached here.  /* #neg=331 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.1950049686632521;  // std dev = 0.997, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.05163690118355328;  // std dev = 0.826, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return 0.21513616099165614;  // std dev = 0.039, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2496213033934234;  // std dev = 0.113, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.2420868311208324;  // std dev = 0.010, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.21570381007222364;  // std dev = 0.034, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.21439394956553573;  // std dev = 0.005, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.21620671926189156;  // std dev = 0.077, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.07877675473109143;  // std dev = 2.08e-09, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, F) )
%   | | then if ( follows(G, A), follows(G, E) )
%   | | | then return 0.1851274851117043;  // std dev = 0.142, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | | else return 0.09009802060423283;  // std dev = 0.907, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.10358235927306987;  // std dev = 0.761, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.18499897050312958;  // std dev = 0.052, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.20190399037469345;  // std dev = 0.089, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.18058606267504224;  // std dev = 0.009, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.17836055270575127;  // std dev = 0.000424, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(A, K) )
%   | then return -0.07324622576333682;  // std dev = 7.27e-09, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.12630723817816208;  // std dev = 0.962, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.15690718118045796;  // std dev = 0.023, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.19209619344128945;  // std dev = 0.101, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.16439379888287597;  // std dev = 0.084, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.15242766115214973;  // std dev = 0.007, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.03796862271323505;  // std dev = 0.913, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.11867088331959402;  // std dev = 0.988, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.15653542666345585;  // std dev = 0.061, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else return -0.06842697784420321;  // std dev = 0.000, 350.000 (wgt'ed) examples reached here.  /* #neg=350 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.07106769885714025;  // std dev = 1.632, 44.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | | else return 0.11527978923189212;  // std dev = 0.873, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.14669213842845286;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.16131364089374636;  // std dev = 0.016, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G) )
%   | | then if ( tweets(G, H), recursion_accounttype(G, B) )
%   | | | then return 0.1704590895936111;  // std dev = 0.044, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.13624132917766846;  // std dev = 0.031, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.14699315794131723;  // std dev = 0.073, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.05110251263871271;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else return -0.0641918400820261;  // std dev = 5.10e-09, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
Inference time using transfer learning 8.606977224349976
Refined model CLL: -0.086119


******************************************
Best model found
******************************************
Results 

CLL : -0.091807 

AUC ROC : 0.995043 

AUC PR : 0.449198 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 37.44649267196655 

Total Inference Time : 11.769779682159424 

Total revision time: 72.48039102554321
Best scored revision CLL: -0.086119


Results 

CLL : -0.091807 

AUC ROC : 0.995043 

AUC PR : 0.449198 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 72.49341344833374 

Total Inference Time : 11.769779682159424 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.346096038818359
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8273797043302796;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048835;  // std dev = 0.000, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.70238565614478;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( tweets(D, E) )
%   | then return -0.1254446385283919;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5438946937661729;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then return -0.11231637819360649;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | | else return -0.11231637819360618;  // std dev = 3.33e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.39922189340509245;  // std dev = 1.967, 122.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=118 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43200877865099324;  // std dev = 9.13e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.10159632948783623;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.26477003147419204;  // std dev = 3.008, 136.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0926912761892605;  // std dev = 8.82e-08, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | | else return -0.09269127618926092;  // std dev = 1.86e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2585212652621637;  // std dev = 1.654, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.74e-09, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20854159259304528;  // std dev = 1.711, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109144;  // std dev = 5.58e-08, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.151264243536077;  // std dev = 2.394, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333661;  // std dev = 1.31e-07, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1583077056077075;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420275;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
%   | | else return -0.0684269778442027;  // std dev = 9.31e-10, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12909275244363452;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202625;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
Inference time using transfer learning 18.09312915802002
Parameter learned model CLL:-0.092637 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 240, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(D, E)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 269, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E), follows(A, F)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 182, 0], 'false,false,false': [3.33e-08, 68, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)', 'false,true,false': 'tweets(A, H)'}, {'true,true': [1.967, 4, 118], 'true,false': [0.0, 245, 0], 'false,true,true': [9.13e-09, 0, 8], 'false,true,false,true': [0.0, 11, 0], 'false,true,false,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [3.008, 10, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [8.82e-08, 222, 0], 'false,false,false': [1.86e-09, 24, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.654, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.74e-09, 236, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.711, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.58e-08, 254, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F), tweets(A, G)'}, {'true,true': [2.394, 6, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.31e-07, 217, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 17, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 253, 0], 'false,false,false': [9.31e-10, 11, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 183, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 61, 0]}]
{'': [0.02982248520710475, -1.6653345369377348e-16], 'false': [-1.6653345369377348e-16, nan]}
{'': [0.022714981070850883, -7.263912726172028e-17], 'false': [-7.263912726172028e-17, nan]}
{'': [0.022714981070849783, -9.237055564881302e-17], 'false': [nan, -9.237055564881302e-17], 'false,false': [-1.9520404828574182e-17, 1.6326809185664067e-17]}
{'': [0.066203220350184, 0.06940894239890019], 'false': [0.06940894239890019, nan], 'false,true': [8.326672684688674e-17, -1.261617073437678e-18], 'true': [0.03171190540177303, -7.069175177205078e-17], 'false,true,false': [-1.261617073437678e-18, nan]}
{'': [0.06654263499335114, 5.235198002297486e-17], 'true': [0.06654263499335114, nan], 'false': [nan, 5.235198002297486e-17], 'false,false': [3.500703230800043e-17, 4.625929269271485e-18], 'false,false,true': [nan, 3.500703230800043e-17]}
{'': [0.021211509310962565, 3.293034395074617e-17], 'false': [nan, 3.293034395074617e-17], 'false,false': [nan, 3.293034395074617e-17]}
{'': [0.022700223170626546, 1.2238679011615899e-17], 'false': [nan, 1.2238679011615899e-17], 'false,false': [nan, 1.2238679011615899e-17], 'false,false,false': [1.2238679011615899e-17, nan]}
{'': [0.043436093783696846, 6.737250833195394e-17], 'true': [0.043436093783696846, nan], 'false': [7.879002110243047e-17, -2.44902137784961e-18], 'false,false': [nan, -2.44902137784961e-18]}
{'': [0.015373020656542676, -2.0185873175002847e-17], 'false': [nan, -2.0185873175002847e-17], 'false,false': [-9.654113257610057e-18, 6.30808536718839e-19], 'false,false,true': [nan, -9.654113257610057e-18]}
{'': [0.022703912049789648, 1.820037745287142e-18], 'false': [-5.4601132358614255e-18, -2.7300566179307128e-18], 'false,false': [nan, -2.7300566179307128e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E), follows(A, F).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 33.29950523376465
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D), follows(E, A) )
%   | | | then return 0.834339411289988;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0.858148935099512;  // std dev = 1.46e-07, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then if ( tweets(F, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048824;  // std dev = 0.000, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | | then return 0.7229711959559316;  // std dev = 0.014, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.6739030664996788;  // std dev = 0.973, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.7222576076973674;  // std dev = 0.112, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.05280674554428777;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.12544463852839174;  // std dev = 0.000, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), follows(D, A) )
%   | | then return 0.5615821748216686;  // std dev = 0.044, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else if ( recursion_accounttype(D, B), follows(E, A) )
%   | | | then return 0.41263560052731973;  // std dev = 0.921, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5596283510711704;  // std dev = 0.152, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( follows(F, A) )
%   | | then return 0.37354825492810284;  // std dev = 0.386, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else return 0.5706990844982087;  // std dev = 0.145, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( tweets(A, G), follows(A, H) )
%   | then return -0.11231637819360638;  // std dev = 2.11e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | else return -0.11231637819360615;  // std dev = 3.33e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.3980300814267844;  // std dev = 1.393, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | | | else return 0.3382590094563365;  // std dev = 0.960, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.4284510287439323;  // std dev = 0.164, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.4413114272184689;  // std dev = 0.151, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.1015963294878366;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.3511680457748478;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.10159632948783628;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.28857124041142473;  // std dev = 1.695, 72.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=69 */
%   | | | else return 0.0882342550260482;  // std dev = 0.845, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, G), follows(G, A) )
%   | | | then return -0.27619634572774043;  // std dev = 1.089, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.3764555822548316;  // std dev = 0.114, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, H), tweets(H, I) )
%   | | | then return 0.32411525920321954;  // std dev = 0.021, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.37078526825356656;  // std dev = 0.136, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.21891925775318732;  // std dev = 0.936, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.3222682605618567;  // std dev = 0.034, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.0926912761892605;  // std dev = 7.57e-09, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(D, E) )
%   | | | then return 0.2661663288092408;  // std dev = 0.056, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.28494045450165;  // std dev = 0.109, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.29353314721441537;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -0.09637095688160305;  // std dev = 0.967, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.2797871020584663;  // std dev = 0.173, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.13554014282663043;  // std dev = 1.281, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return 0.18595906732403564;  // std dev = 0.873, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else if ( tweets(A, K) )
%   | then return -0.08518475138839678;  // std dev = 5.27e-09, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else return -0.08518475138839679;  // std dev = 1.86e-09, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.20159711413871384;  // std dev = 0.983, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | | else return 0.004850969320917178;  // std dev = 1.188, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( recursion_accounttype(E, B), tweets(E, F) )
%   | | | then return 0.23977101538567186;  // std dev = 0.130, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.2128770400198518;  // std dev = 0.113, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.2654014710079438;  // std dev = 0.046, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.24546536512647854;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.2337288927937236;  // std dev = 0.110, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.23745976721349443;  // std dev = 1.83e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.07877675473109144;  // std dev = 4.17e-09, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.1427175446058036;  // std dev = 1.375, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.18767423778218795;  // std dev = 0.031, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.1792344888076761;  // std dev = 0.023, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.19327032025976143;  // std dev = 0.095, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.21351169925315672;  // std dev = 0.158, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.196969928556204;  // std dev = 0.104, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.19332679165360478;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.19565764063362479;  // std dev = 0.098, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07324622576333681;  // std dev = 7.33e-09, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), follows(D, A) )
%   | | | then return 0.16352306932642885;  // std dev = 0.034, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.09185336705755989;  // std dev = 1.346, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | else if ( tweets(A, F), follows(G, A) )
%   | | | then return 0.1784938447909569;  // std dev = 0.059, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.05417829564731477;  // std dev = 1.249, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.16235003129195716;  // std dev = 0.032, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.17130605660559978;  // std dev = 0.135, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.1773221655158781;  // std dev = 0.075, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.15503729618877488;  // std dev = 0.037, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06842697784420262;  // std dev = 5.27e-09, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.14825641783236748;  // std dev = 0.067, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.13947765832229686;  // std dev = 0.025, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return -0.043396346432376;  // std dev = 0.802, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.14485351153341888;  // std dev = 0.074, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(G, I) )
%   | | | then return 0.1564603043708356;  // std dev = 0.056, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2164218204177238;  // std dev = 0.070, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.14846173446857358;  // std dev = 0.120, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.1358117422259095;  // std dev = 0.034, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06419184008202626;  // std dev = 0.000, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
Inference time using transfer learning 11.07042646408081
Refined model CLL: -0.090738


******************************************
Best model found
******************************************
Results 

CLL : -0.0856 

AUC ROC : 0.996183 

AUC PR : 0.452269 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 33.29950523376465 

Total Inference Time : 8.383942365646362 

Total revision time: 57.36397838592529
Best scored revision CLL: -0.090738


Results 

CLL : -0.0856 

AUC ROC : 0.996183 

AUC PR : 0.452269 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 57.37700080871582 

Total Inference Time : 8.383942365646362 

Run: 2

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.420478820800781
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8454907072514085;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048766;  // std dev = 1.79e-07, 328.000 (wgt'ed) examples reached here.  /* #neg=328 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7093629005389674;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( tweets(D, E) )
%   | then return -0.12544463852839208;  // std dev = 0.000, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5239444672667497;  // std dev = 0.189, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then return -0.11231637819360651;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | | else return -0.11231637819360624;  // std dev = 7.74e-08, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4004454382680922;  // std dev = 1.969, 132.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=128 */
%   | else return -0.1015963294878366;  // std dev = 0.000, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43074846857112103;  // std dev = 1.49e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.10159632948783633;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.1015963294878363;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3163768848012107;  // std dev = 1.714, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926053;  // std dev = 1.00e-07, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | | else return -0.09269127618926104;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22651048171221205;  // std dev = 2.547, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.18e-09, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22025013138912933;  // std dev = 0.996, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 4.71e-08, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.17769606121065962;  // std dev = 1.404, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.0732462257633368;  // std dev = 1.19e-07, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15177675355447823;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420282;  // std dev = 0.000, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
%   | | else return -0.06842697784420262;  // std dev = 2.79e-09, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.119637104675416;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202625;  // std dev = 0.000, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
Inference time using transfer learning 12.619585514068604
Parameter learned model CLL:-0.087566 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.405, 2, 156], 'false,true': [1.79e-07, 328, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(D, E)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 293, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E), follows(A, F)'}, {'true': [0.189, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 181, 0], 'false,false,false': [7.74e-08, 138, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)', 'false,true,false': 'tweets(A, H)'}, {'true,true': [1.969, 4, 128], 'true,false': [0.0, 262, 0], 'false,true,true': [1.49e-08, 0, 28], 'false,true,false,true': [0.0, 38, 0], 'false,true,false,false': [0.0, 20, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.714, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1e-07, 232, 0], 'false,false,false': [0.0, 68, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.547, 7, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.18e-09, 315, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.996, 1, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.71e-08, 289, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F), tweets(A, G)'}, {'true,true': [1.404, 2, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.19e-07, 252, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 56, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 262, 0], 'false,false,false': [2.79e-09, 65, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 219, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 82, 0]}]
{'': [0.012497997115852777, 9.748299728416009e-17], 'false': [9.748299728416009e-17, nan]}
{'': [0.012497997115844503, -1.0609639825769414e-16], 'false': [-1.0609639825769414e-16, nan]}
{'': [0.0356652949245559, -4.176387553448865e-17], 'false': [nan, -4.176387553448865e-17], 'false,false': [-2.4535315461329425e-18, 4.344350965924526e-17]}
{'': [0.06599628368826195, 0.062226468097509875], 'true': [0.029384756657483017, -6.271488841394015e-17], 'false': [0.062226468097509875, nan], 'false,true': [2.220446049250313e-16, 2.2970131543968756e-17], 'false,true,false': [-8.764918615461762e-18, -1.1102230246251566e-17]}
{'': [0.018473769301133282, 9.769962616701378e-17], 'true': [0.018473769301133282, nan], 'false': [nan, 9.769962616701378e-17], 'false,false': [4.306899664494142e-17, -1.959217102279688e-17], 'false,false,true': [nan, 4.306899664494142e-17]}
{'': [0.039809308208004636, 3.8064789415719653e-17], 'false': [nan, 3.8064789415719653e-17], 'false,false': [nan, 3.8064789415719653e-17]}
{'': [0.006320944902162254, 7.683204322665444e-18], 'false': [nan, 7.683204322665444e-18], 'false,false': [nan, 7.683204322665444e-18], 'false,false,false': [7.683204322665444e-18, nan]}
{'': [0.012480313183717931, 2.883696167857549e-17], 'true': [0.012480313183717931, nan], 'false': [5.639228061588096e-17, -1.1895246692412391e-17], 'false,false': [nan, -1.1895246692412391e-17]}
{'': [0.012533702416957596, -7.401486830834377e-17], 'false': [nan, -7.401486830834377e-17], 'false,false': [-1.1017480397043538e-17, 7.686159401251084e-18], 'false,false,true': [nan, -1.1017480397043538e-17]}
{'': [0.0243898557408712, 4.426138304153448e-17], 'false': [-5.069511527968751e-19, -1.0831444142684454e-17], 'false,false': [nan, -1.0831444142684454e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E), follows(A, F).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
3;false,false;tweets(A, H).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 45.68073773384094
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, F) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.8146706742299468;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.858148935099512;  // std dev = 2.38e-07, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.14185106490048774;  // std dev = 1.52e-07, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.7194734122109543;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.6824363751739172;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6206141328640044;  // std dev = 1.341, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return 0.7194734122109543;  // std dev = 4.21e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.7222103021702917;  // std dev = 0.089, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   else return -0.12544463852839205;  // std dev = 0.000, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.5389027843840175;  // std dev = 0.984, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.5775312525910864;  // std dev = 0.083, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tweets(E, D), follows(A, G) )
%   | | | then return 0.5168445717580876;  // std dev = 0.954, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.2213571686977112;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.5599887048955818;  // std dev = 0.084, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   else if ( tweets(A, H), follows(A, I) )
%   | then return -0.11231637819360657;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else return -0.11231637819360625;  // std dev = 7.15e-08, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.3966343769880767;  // std dev = 1.375, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | | | else return 0.4406664978901439;  // std dev = 0.122, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.432307892158009;  // std dev = 0.057, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.4157464098189423;  // std dev = 0.000654, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   else if ( recursion_accounttype(I, B) )
%   | then if ( tweets(A, J) )
%   | | then if ( follows(K, A) )
%   | | | then return 0.3594366286344287;  // std dev = 0.974, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.2157249602293178;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.4157249602293178;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.10159632948783621;  // std dev = 4.56e-09, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(F, A), follows(F, D) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.3366501543964847;  // std dev = 0.098, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.2892579662058182;  // std dev = 0.961, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.10689299618213312;  // std dev = 1.240, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.2873744106275371;  // std dev = 0.868, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.3365518122291636;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.3737013757596379;  // std dev = 0.041, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.3329941194683339;  // std dev = 0.049, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.3195195160863359;  // std dev = 0.000582, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.09269127618926046;  // std dev = 9.86e-09, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.263070791513059;  // std dev = 0.029, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.25420883293689944;  // std dev = 0.008, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.2839028880028402;  // std dev = 0.056, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.2565187038675735;  // std dev = 0.012, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.2162355964074924;  // std dev = 0.985, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.07643867319473181;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J), follows(J, A) )
%   | | | then return 0.20205559871909287;  // std dev = 0.954, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.26241684958274203;  // std dev = 0.105, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else return -0.08518475138839678;  // std dev = 6.25e-09, 329.000 (wgt'ed) examples reached here.  /* #neg=329 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | | then return 0.21144394891790033;  // std dev = 0.010, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.21670211709584447;  // std dev = 0.022, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.22990902626943033;  // std dev = 0.049, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.21071376954197216;  // std dev = 0.011, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(H, G) )
%   | | | then return 0.24552603763932315;  // std dev = 0.036, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.06133973334325667;  // std dev = 1.269, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( tweets(A, I), follows(J, A) )
%   | | | then return 0.23626699228265072;  // std dev = 0.054, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.21237865812938025;  // std dev = 0.047, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else return -0.07877675473109143;  // std dev = 2.08e-09, 324.000 (wgt'ed) examples reached here.  /* #neg=324 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.18153028228613552;  // std dev = 0.039, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.13654937951293442;  // std dev = 0.975, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( recursion_accounttype(D, B), tweets(D, F) )
%   | | | then return 0.23037884732090388;  // std dev = 0.098, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.18027672218423577;  // std dev = 0.056, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1833138464908289;  // std dev = 0.002, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.20278611513329386;  // std dev = 0.025, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return -0.1573860493760427;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.17503024663189604;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.07324622576333703;  // std dev = 4.84e-09, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.15336650074312483;  // std dev = 0.009, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.16023762179255036;  // std dev = 0.072, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return -0.17016079702932627;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.08625966680821627;  // std dev = 1.363, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return -0.3315915412243011;  // std dev = 0.974, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.11002675116901901;  // std dev = 1.364, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | | else return 0.1557571831909141;  // std dev = 0.027, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, J) )
%   | then return -0.06842697784420261;  // std dev = 4.56e-09, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else return -0.06842697784420271;  // std dev = 1.61e-09, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), follows(D, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.12711351835067705;  // std dev = 0.985, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | | | else return -0.1611848121703382;  // std dev = 1.162, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.15680490885778173;  // std dev = 0.073, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.14008567802066;  // std dev = 0.007, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.14402331897772142;  // std dev = 0.086, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.44063281572174146;  // std dev = 0.711, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.14044235680965012;  // std dev = 0.070, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.07649917783075957;  // std dev = 1.381, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   else return -0.06419184008202591;  // std dev = 7.15e-09, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
Inference time using transfer learning 9.204512119293213
Refined model CLL: -0.084898


******************************************
Best model found
******************************************
Results 

CLL : -0.090917 

AUC ROC : 0.995635 

AUC PR : 0.532999 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 45.68073773384094 

Total Inference Time : 11.359794616699219 

Total revision time: 79.74484252929688
Best scored revision CLL: -0.084898


Results 

CLL : -0.090917 

AUC ROC : 0.995635 

AUC PR : 0.532999 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 79.75605988502502 

Total Inference Time : 11.359794616699219 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.283406496047974
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8055173561521418;  // std dev = 2.575, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048852;  // std dev = 0.000, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6992031878846513;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( tweets(D, E) )
%   | then return -0.12544463852839186;  // std dev = 0.000, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5351201981388667;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then return -0.11231637819360629;  // std dev = 5.16e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | else return -0.11231637819360618;  // std dev = 3.49e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4236589310265806;  // std dev = 1.402, 120.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=118 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4403255976932475;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.10159632948783621;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3164667828815932;  // std dev = 1.711, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926049;  // std dev = 1.28e-07, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
%   | | else return -0.09269127618926087;  // std dev = 1.32e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2503324434444;  // std dev = 1.648, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.59e-09, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21029998014923706;  // std dev = 1.405, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109144;  // std dev = 5.58e-08, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15310834750076568;  // std dev = 2.194, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333671;  // std dev = 1.25e-07, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1305529554320014;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420264;  // std dev = 7.30e-08, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   | | else return -0.0684269778442027;  // std dev = 9.31e-10, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.09916763794141101;  // std dev = 0.221, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202625;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
Inference time using transfer learning 19.241002082824707
Parameter learned model CLL:-0.092367 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.575, 7, 126], 'false,true': [0.0, 225, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(D, E)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 246, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E), follows(A, F)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [5.16e-08, 160, 0], 'false,false,false': [3.49e-08, 62, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)', 'false,true,false': 'tweets(A, H)'}, {'true,true': [1.402, 2, 118], 'true,false': [0.0, 232, 0], 'false,true,true': [7.45e-09, 0, 8], 'false,true,false,true': [0.0, 13, 0], 'false,true,false,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.711, 3, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.28e-07, 252, 0], 'false,false,false': [1.32e-09, 13, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.648, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.59e-09, 222, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.405, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.58e-08, 253, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F), tweets(A, G)'}, {'true,true': [2.194, 5, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.25e-07, 237, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.3e-08, 235, 0], 'false,false,false': [9.31e-10, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.221, 7, 126], 'false,true': [0.0, 196, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 42, 0]}]
{'': [0.04986149584487965, -2.329001189435884e-16], 'false': [-2.329001189435884e-16, nan]}
{'': [0.029822485207097207, -7.582010899879118e-17], 'false': [-7.582010899879118e-17, nan]}
{'': [0.036711147369032804, -6.80136627698294e-17], 'false': [nan, -6.80136627698294e-17], 'false,false': [1.6653345369377347e-17, 1.9697505275607617e-17]}
{'': [0.0675775621127716, 0.06925772112608755], 'false': [0.06925772112608755, nan], 'false,true': [5.551115123125783e-17, 0.0], 'true': [0.016388888888888755, -7.465292751789846e-17], 'false,true,false': [0.0, nan]}
{'': [0.022705032098284676, 7.54113752575578e-17], 'true': [0.022705032098284676, nan], 'false': [nan, 7.54113752575578e-17], 'false,false': [6.520357446211237e-17, 2.135044278125301e-18], 'false,false,true': [nan, 6.520357446211237e-17]}
{'': [0.021062134137344486, 3.100622861565752e-17], 'false': [nan, 3.100622861565752e-17], 'false,false': [nan, 3.100622861565752e-17]}
{'': [0.015420394563406423, 1.2287053236958254e-17], 'false': [nan, 1.2287053236958254e-17], 'false,false': [nan, 1.2287053236958254e-17], 'false,false,false': [1.2287053236958254e-17, nan]}
{'': [0.0367372943841489, 5.843279076974508e-17], 'true': [0.0367372943841489, nan], 'false': [6.558279470359575e-17, -1.3877787807814458e-18], 'false,false': [nan, -1.3877787807814458e-18]}
{'': [0.03670061332132194, 5.393796071053392e-18], 'false': [nan, 5.393796071053392e-18], 'false,false': [2.2676895822130856e-17, 5.782411586589357e-19], 'false,false,true': [nan, 2.2676895822130856e-17]}
{'': [0.048752206049111554, 2.7988815746852687e-18], 'false': [-1.699320956058913e-18, -1.982541115402065e-18], 'false,false': [nan, -1.982541115402065e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E), follows(A, F).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 65.70269870758057
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.8581489350995121;  // std dev = 1.69e-07, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.8105298874804645;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(H, A), tweets(A, I) )
%   | | | then return 0.7914822684328456;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.14185106490048824;  // std dev = 0.000, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7247715284052906;  // std dev = 0.115, 126.000 (wgt'ed) examples reached here.  /* #pos=126 */
%   else return -0.12544463852839186;  // std dev = 0.000, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( recursion_accounttype(D, B), follows(D, E) )
%   | | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.5029577578547332;  // std dev = 1.679, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   | | | else return 0.5615023450440291;  // std dev = 0.032, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.5624190294382913;  // std dev = 0.082, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return 0.4455540317486799;  // std dev = 0.315, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( tweets(A, F), follows(A, G) )
%   | then return -0.11231637819360653;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else return -0.1123163781936062;  // std dev = 3.49e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.40306341459157774;  // std dev = 1.351, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | | | else return 0.33764130304340073;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.42894335046062043;  // std dev = 0.127, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.44955165621543963;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.4460736603300655;  // std dev = 0.005, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.1015963294878363;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( tweets(A, F), tweets(D, F) )
%   | | | then return 0.28826379945315356;  // std dev = 1.384, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.33107104395875114;  // std dev = 0.025, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(D, A), tweets(A, G) )
%   | | | then return 0.32136928675041;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.08024647860596122;  // std dev = 1.707, 15.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=11 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.3307470749390918;  // std dev = 0.031, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.3167060247900256;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, K), follows(A, L) )
%   | | | then return 0.3327109556473246;  // std dev = 0.013, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3410727750180331;  // std dev = 0.014, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.09269127618926049;  // std dev = 8.33e-09, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | | then return 0.27094818346828853;  // std dev = 0.048, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.22180038603331004;  // std dev = 1.398, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.31901904822063454;  // std dev = 0.020, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2625036353597276;  // std dev = 0.034, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return 0.15685852984545814;  // std dev = 0.315, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( tweets(A, F) )
%   | then if ( follows(G, A) )
%   | | then if ( tweets(G, F) )
%   | | | then return -0.08518475138839678;  // std dev = 6.32e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | | else return -0.08518475138839679;  // std dev = 6.45e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.08518475138839678;  // std dev = 1.32e-09, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return -0.08518475138839679;  // std dev = 9.31e-10, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, F), follows(G, E) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.13509608546364044;  // std dev = 2.128, 57.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=52 */
%   | | | else return 0.22648576142667445;  // std dev = 0.087, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return -0.11251244380295185;  // std dev = 0.825, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.21829203287539314;  // std dev = 0.009, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.27476094011104374;  // std dev = 0.099, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.2128806356250926;  // std dev = 0.021, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.22000917341450568;  // std dev = 0.006, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(A, L) )
%   | then return -0.07877675473109146;  // std dev = 4.06e-09, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), follows(E, D) )
%   | | | then return 0.15517314307310784;  // std dev = 1.340, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | | | else return 0.1961608549800679;  // std dev = 0.154, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0.08857370188831445;  // std dev = 0.315, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.05931716457267;  // std dev = 1.453, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.18374387720137814;  // std dev = 0.019, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.1887940790773001;  // std dev = 0.032, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.09425113705486243;  // std dev = 0.855, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( follows(A, I) )
%   | then return -0.07324622576333673;  // std dev = 8.01e-09, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( recursion_accounttype(E, B), follows(F, E) )
%   | | | then return 0.17550166345396487;  // std dev = 0.031, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.11459468042255878;  // std dev = 0.973, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | | then return -0.03560666749098318;  // std dev = 1.218, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.16330212050832363;  // std dev = 0.076, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( tweets(A, G) )
%   | | then return 0.18610799578345918;  // std dev = 0.003, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.17941176606971643;  // std dev = 0.111, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.16113573358962893;  // std dev = 0.034, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, I) )
%   | then return -0.06842697784420265;  // std dev = 4.47e-09, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | else return -0.06842697784420274;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), follows(E, F) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.1325021440974102;  // std dev = 0.990, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.21056275223871584;  // std dev = 0.077, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( recursion_accounttype(E, B) )
%   | | | then return -0.1530901425828156;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.10173935493276265;  // std dev = 0.979, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.15385915253410035;  // std dev = 0.098, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.13663392521129838;  // std dev = 0.019, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.15954772390950864;  // std dev = 0.008, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.15338578644260295;  // std dev = 0.016, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.06419184008202626;  // std dev = 1.61e-09, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
Inference time using transfer learning 19.809584140777588
Refined model CLL: -0.091369


******************************************
Best model found
******************************************
Results 

CLL : -0.086122 

AUC ROC : 0.995355 

AUC PR : 0.427498 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 65.70269870758057 

Total Inference Time : 17.61313247680664 

Total revision time: 100.07863426208496
Best scored revision CLL: -0.091369


Results 

CLL : -0.086122 

AUC ROC : 0.995355 

AUC PR : 0.427498 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 100.08985161781311 

Total Inference Time : 17.61313247680664 

Starting experiments for fasttext using softcosine 

Run: 1

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.619433403015137
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8454907072514085;  // std dev = 1.405, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( tweets(D, E) )
%   | then return -0.14185106490048796;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6970211283870686;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839205;  // std dev = 0.000, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5513604991778935;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then return -0.11231637819360664;  // std dev = 0.000, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | | else return -0.11231637819360614;  // std dev = 4.71e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.3774693439417277;  // std dev = 2.388, 121.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=115 */
%   | else return -0.10159632948783655;  // std dev = 0.000, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   else if ( tweets(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.38054449289425407;  // std dev = 0.211, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.10159632948783619;  // std dev = 4.21e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | | else return -0.10159632948783628;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(D, E) )
%   | then return 0.31302019804789627;  // std dev = 1.974, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926055;  // std dev = 9.54e-08, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | | else return -0.09269127618926104;  // std dev = 0.000, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24686740818837158;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.04e-09, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20695646334432413;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 0.000, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.18532961228903466;  // std dev = 0.997, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333684;  // std dev = 1.14e-07, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14573839879868553;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6.99e-08, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | | else return -0.06842697784420262;  // std dev = 1.86e-09, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1205348255764411;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202625;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
Inference time using transfer learning 13.360858678817749
Parameter learned model CLL:-0.087604 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(D, E)'}, {'true': [1.405, 2, 156], 'false,true': [0.0, 283, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 316, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 207, 0], 'false,false,false': [4.71e-08, 122, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, F)', 'false,true': 'recursion_accounttype(G, B)', 'false,true,false': 'follows(A, H)'}, {'true,true': [2.388, 6, 115], 'true,false': [0.0, 220, 0], 'false,true,true': [0.211, 2, 41], 'false,true,false,true': [4.21e-08, 62, 0], 'false,true,false,false': [0.0, 16, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'tweets(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'tweets(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.974, 4, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [9.54e-08, 216, 0], 'false,false,false': [0.0, 75, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.04e-09, 317, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(F, G)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 323, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)', 'false,false': 'tweets(A, F), follows(A, G)'}, {'true,true': [0.997, 1, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.14e-07, 261, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 79, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.99e-08, 208, 0], 'false,false,false': [1.86e-09, 83, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 222, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 60, 0]}]
{'': [0.012497997115852777, -1.5692198227917407e-17], 'false': [-1.5692198227917407e-17, nan]}
{'': [0.024374999999997725, -8.994211845064559e-17], 'false': [-8.994211845064559e-17, nan]}
{'': [0.012497997115844907, -4.589371773526483e-17], 'false': [nan, -4.589371773526483e-17], 'false,false': [-5.148860404058697e-17, 1.8200377452871417e-17]}
{'': [0.06926273243721019, 0.06901265373754013], 'true': [0.04712792842018857, -8.074349270001139e-17], 'false': [0.06901265373754013, nan], 'false,true': [0.04434829637641966, 4.127752271042249e-17], 'false,true,false': [2.865091676452017e-17, -6.938893903907228e-18]}
{'': [0.024366276017984446, 9.156478553609538e-17], 'true': [0.024366276017984446, nan], 'false': [nan, 9.156478553609538e-17], 'false,false': [4.214735556447354e-17, -1.628327102783563e-17], 'false,false,true': [nan, 4.214735556447354e-17]}
{'': [0.02437469135444754, 3.7824633015620474e-17], 'false': [nan, 3.7824633015620474e-17], 'false,false': [nan, 3.7824633015620474e-17]}
{'': [0.018513385074977563, 0.0], 'false': [nan, 0.0], 'false,false': [nan, 0.0], 'false,false,false': [0.0, nan]}
{'': [0.006333345831192931, 1.6326809185664067e-17], 'true': [0.006333345831192931, nan], 'false': [5.019399115163543e-17, -1.3350783207517706e-17], 'false,false': [nan, -1.3350783207517706e-17]}
{'': [0.018518280886844613, -4.883455228591754e-17], 'false': [nan, -4.883455228591754e-17], 'false,false': [2.348548705937831e-17, 4.0128543058740596e-18], 'false,false,true': [nan, 2.348548705937831e-17]}
{'': [0.024374789399642015, 3.1495688641848415e-17], 'false': [-5.001004615428633e-19, -3.7007434154171884e-18], 'false,false': [nan, -3.7007434154171884e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;follows(A, E), tweets(A, F).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
3;false,false;follows(A, H).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;tweets(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;tweets(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(A, D).;true;true


Refining candidate
***************************
Model training time 44.65634512901306
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.8337586911970729;  // std dev = 0.988, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   else return -0.14185106490048788;  // std dev = 7.88e-08, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.7194734122109537;  // std dev = 2.80e-07, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.7419196906040232;  // std dev = 0.073, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.468616039736688;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return 0.6672344505155628;  // std dev = 0.975, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.7246617045974136;  // std dev = 0.007, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else return -0.12544463852839205;  // std dev = 0.000, 315.000 (wgt'ed) examples reached here.  /* #neg=315 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(F, A) )
%   | | then if ( recursion_accounttype(F, B), follows(D, F) )
%   | | | then return 0.5109219923018397;  // std dev = 1.382, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | | | else return 0.5725770503741886;  // std dev = 0.164, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( tweets(G, E), follows(D, G) )
%   | | | then return 0.48879026598255393;  // std dev = 1.335, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return 0.5601028810975985;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.5610550200864397;  // std dev = 0.120, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   else if ( follows(A, H), tweets(A, I) )
%   | then return -0.11231637819360643;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | else return -0.11231637819360615;  // std dev = 4.47e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, F) )
%   | | | then return 0.40290096400848463;  // std dev = 0.987, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | | else return 0.419355880168446;  // std dev = 0.031, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4808034635851573;  // std dev = 0.181, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.4368923810911826;  // std dev = 0.122, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(I, A) )
%   | | then return 0.4180045883660449;  // std dev = 0.006, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.17248918250152726;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3753490528836361;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else return -0.10159632948783616;  // std dev = 5.89e-09, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(F, A) )
%   | | then if ( tweets(A, G), follows(A, F) )
%   | | | then return 0.3330719685905916;  // std dev = 0.148, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | | else return 0.31984706106084576;  // std dev = 0.027, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.419338780715445;  // std dev = 0.071, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.33357299319548445;  // std dev = 0.015, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.015111990382372986;  // std dev = 0.819, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.15359514802429713;  // std dev = 0.772, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.3194293320645289;  // std dev = 0.005, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.32976418707510086;  // std dev = 0.017, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.09269127618926049;  // std dev = 8.84e-09, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), follows(F, A) )
%   | | then if ( follows(E, A), follows(E, F) )
%   | | | then return 0.2657660762407186;  // std dev = 0.123, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return 0.2568009295697714;  // std dev = 0.051, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.32217760564571296;  // std dev = 0.064, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.27151347994638114;  // std dev = 0.094, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.2537600446065524;  // std dev = 0.000577, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.01655298509814716;  // std dev = 1.139, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.26361264912727467;  // std dev = 0.004, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( tweets(A, I) )
%   | then return -0.08518475138839678;  // std dev = 5.89e-09, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
%   | else return -0.08518475138839679;  // std dev = 2.79e-09, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E), follows(A, F) )
%   | | | then return 0.21452270443760504;  // std dev = 0.057, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return 0.20833067980125838;  // std dev = 0.004, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(G, D), follows(A, G) )
%   | | | then return 0.14725351796857158;  // std dev = 0.887, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.22429261450747986;  // std dev = 0.066, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.25630969634982026;  // std dev = 0.057, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2146479630340476;  // std dev = 0.012, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2499552646188358;  // std dev = 0.026, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2227943651977905;  // std dev = 0.037, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07877675473109143;  // std dev = 2.95e-09, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), follows(A, E) )
%   | | | then return 0.10090414306452615;  // std dev = 1.355, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return 0.18408536494878497;  // std dev = 0.119, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else return -0.13305293339473814;  // std dev = 1.088, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.08661107069813187;  // std dev = 0.873, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.1827175465962667;  // std dev = 0.006, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.18009802851181403;  // std dev = 0.015, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.18857370673473917;  // std dev = 0.098, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( tweets(A, J) )
%   | then return -0.07324622576333671;  // std dev = 8.12e-09, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
%   | else return -0.07324622576333707;  // std dev = 0.000, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | | then return 0.16360230875522883;  // std dev = 0.062, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.0965347958517961;  // std dev = 1.372, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.1809675664759108;  // std dev = 0.046, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.29102410218502994;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( follows(A, G), follows(H, A) )
%   | | then if ( follows(H, G) )
%   | | | then return 0.17127337432548312;  // std dev = 0.098, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.05628762139901727;  // std dev = 0.956, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.15067437974109282;  // std dev = 0.002, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.16020450526722502;  // std dev = 0.067, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else return -0.06842697784420297;  // std dev = 0.000, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(E, D) )
%   | | | then return 0.09639648897995935;  // std dev = 1.384, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.13911009981040423;  // std dev = 0.072, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(F, A) )
%   | | | then return 0.15803508265288124;  // std dev = 0.103, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.14521622001820625;  // std dev = 0.066, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.13799006696919677;  // std dev = 0.011, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.13148848531182855;  // std dev = 0.000821, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.05175113705202971;  // std dev = 1.087, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return -0.019579482728340605;  // std dev = 1.134, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   else return -0.06419184008202605;  // std dev = 5.67e-09, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
Inference time using transfer learning 8.63576078414917
Refined model CLL: -0.085534


******************************************
Best model found
******************************************
Results 

CLL : -0.091479 

AUC ROC : 0.994368 

AUC PR : 0.413319 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 44.65634512901306 

Total Inference Time : 11.317377805709839 

Total revision time: 81.89079594612122
Best scored revision CLL: -0.085534


Results 

CLL : -0.091479 

AUC ROC : 0.994368 

AUC PR : 0.413319 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 81.92377138137817 

Total Inference Time : 11.317377805709839 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.837451934814453
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8273797043302796;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( tweets(D, E) )
%   | then return -0.14185106490048813;  // std dev = 0.000, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7100164700982684;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839183;  // std dev = 0.000, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5055747691957887;  // std dev = 0.237, 134.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then return -0.11231637819360651;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | | else return -0.1123163781936062;  // std dev = 3.16e-08, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.43955433878120664;  // std dev = 0.000, 97.000 (wgt'ed) examples reached here.  /* #pos=97 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else if ( tweets(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.406221005447873;  // std dev = 0.180, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.1015963294878362;  // std dev = 3.80e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(D, E) )
%   | then return 0.3067108862864974;  // std dev = 1.965, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926057;  // std dev = 9.06e-08, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | | else return -0.09269127618926103;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22002809741736196;  // std dev = 2.572, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.89e-09, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22331666881362447;  // std dev = 0.998, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(F, G) )
%   | | | then return -0.07877675473109144;  // std dev = 5.77e-08, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1484329244701499;  // std dev = 2.394, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333671;  // std dev = 1.04e-07, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1561075511605933;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420262;  // std dev = 8.02e-08, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | | else return -0.06842697784420264;  // std dev = 3.36e-09, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10523241627742856;  // std dev = 0.208, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( follows(A, D) )
%   | then return -0.06419184008202626;  // std dev = 2.58e-08, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202622;  // std dev = 9.31e-10, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
Inference time using transfer learning 18.422657251358032
Parameter learned model CLL:-0.092703 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(D, E)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 262, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.403, 2, 126], 'false,true': [0.0, 241, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)'}, {'true': [0.237, 8, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 187, 0], 'false,false,false': [3.16e-08, 74, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, F)', 'false,true': 'recursion_accounttype(G, B)', 'false,true,false': 'follows(A, H)'}, {'true,true': [0.0, 0, 97], 'true,false': [0.0, 180, 0], 'false,true,true': [0.18, 1, 29], 'false,true,false,true': [3.8e-08, 59, 0], 'false,true,false,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'tweets(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'tweets(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.965, 4, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [9.06e-08, 194, 0], 'false,false,false': [0.0, 59, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.572, 7, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 261, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(F, G)'}, {'true': [0.998, 1, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.77e-08, 253, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)', 'false,false': 'tweets(A, F), follows(A, G)'}, {'true,true': [2.394, 6, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.04e-07, 179, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 41, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [8.02e-08, 228, 0], 'false,false,false': [3.36e-09, 49, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.208, 6, 126], 'false,true': [2.58e-08, 247, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [9.31e-10, 22, 0]}]
{'': [0.02982248520710475, -8.474984920802722e-17], 'false': [-8.474984920802722e-17, nan]}
{'': [0.015380859375001776, -6.08088959545729e-17], 'false': [-6.08088959545729e-17, nan]}
{'': [0.0561372243261291, -1.0038798230327086e-16], 'false': [nan, -1.0038798230327086e-16], 'false,false': [-2.6122894697062506e-17, 1.350271246165731e-17]}
{'': [0.06663786885154012, 0.06848607273749137], 'false': [0.06848607273749137, nan], 'false,true': [0.03222222222222214, 2.4462541220554296e-17], 'true': [-1.8312957107219076e-16, -8.758426083154012e-17], 'false,true,false': [2.4462541220554296e-17, nan]}
{'': [0.02971234133683654, 6.143526618479127e-17], 'true': [0.02971234133683654, nan], 'false': [nan, 6.143526618479127e-17], 'false,false': [4.234871331044411e-17, -2.4462541220554296e-17], 'false,false,true': [nan, 4.234871331044411e-17]}
{'': [0.04973823488737998, 3.4880570122322924e-17], 'false': [nan, 3.4880570122322924e-17], 'false,false': [nan, 3.4880570122322924e-17]}
{'': [0.007839669056976807, 1.3164699896740986e-17], 'false': [nan, 1.3164699896740986e-17], 'false,false': [nan, 1.3164699896740986e-17], 'false,false,false': [1.3164699896740986e-17, nan]}
{'': [0.04342211259686579, 7.670631806501082e-17], 'true': [0.04342211259686579, nan], 'false': [6.07831600074108e-17, -1.0154478883766675e-17], 'false,false': [nan, -1.0154478883766675e-17]}
{'': [0.01541861472443791, -3.04609927333978e-17], 'false': [nan, -3.04609927333978e-17], 'false,false': [2.8242515538710124e-17, 1.1328806373726087e-17], 'false,false,true': [nan, 2.8242515538710124e-17]}
{'': [0.04335331125602444, 2.1461560327326447e-17], 'false': [2.696898035526696e-18, 1.261617073437678e-18], 'false,false': [nan, 1.261617073437678e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;follows(A, E), tweets(A, F).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;tweets(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;tweets(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(A, D).;true;true


Refining candidate
***************************
Model training time 36.884408473968506
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.8368723393548312;  // std dev = 0.989, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.8581489350995121;  // std dev = 1.33e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.6581489350995123;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.1418510649004881;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.6386747248418733;  // std dev = 1.893, 46.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=42 */
%   | | | else return 0.7196592454925458;  // std dev = 0.004, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(D, G), recursion_accounttype(G, B) )
%   | | | then return 0.39866802785322225;  // std dev = 1.636, 12.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=8 */
%   | | | else return 0.7410095303201214;  // std dev = 0.044, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A) )
%   | | then return 0.7285545675002281;  // std dev = 0.075, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.733928133115042;  // std dev = 0.053, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6194734122109544;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.12544463852839183;  // std dev = 0.000, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.5376932152339796;  // std dev = 1.398, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   | | | else return 0.5815741259439265;  // std dev = 0.257, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.5745474504424255;  // std dev = 0.024, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.32518507395516283;  // std dev = 1.224, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else return 0.3803980429504437;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( follows(A, G), tweets(A, H) )
%   | then return -0.11231637819360639;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | else return -0.11231637819360618;  // std dev = 3.33e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), tweets(E, F) )
%   | | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.4495656759146046;  // std dev = 0.140, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.40061477223961256;  // std dev = 0.941, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.24495439510710196;  // std dev = 0.931, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.42082814887764286;  // std dev = 0.044, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.10159632948783652;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, I) )
%   | | | then return 0.43262214474472327;  // std dev = 0.117, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.11633910392138784;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.4627276098293473;  // std dev = 0.032, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return -0.10159632948783621;  // std dev = 4.56e-09, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(D, E), tweets(A, E) )
%   | | | then return 0.33891710627067273;  // std dev = 0.020, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.3277500569661633;  // std dev = 0.067, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.41666671299242014;  // std dev = 0.065, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.3785674844168144;  // std dev = 0.074, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A), follows(A, H) )
%   | | then if ( recursion_accounttype(G, B), follows(H, I) )
%   | | | then return 0.3098703319846233;  // std dev = 0.015, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.32254464119199266;  // std dev = 0.048, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.21558896487992069;  // std dev = 0.924, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.2633484201841331;  // std dev = 1.357, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   else return -0.09269127618926053;  // std dev = 6.72e-09, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.21288213577877338;  // std dev = 1.670, 57.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=54 */
%   | | | else return 0.2669862805836682;  // std dev = 0.088, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.1432585133552168;  // std dev = 1.288, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.2653954978359963;  // std dev = 0.035, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( recursion_accounttype(H, B), follows(H, J) )
%   | | | then return 0.34204469882922356;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2692426784278098;  // std dev = 0.054, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.28480508743491517;  // std dev = 0.049, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.3222057139732639;  // std dev = 0.033, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.08518475138839678;  // std dev = 5.96e-09, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), recursion_accounttype(D, B) )
%   | | then if ( follows(D, A) )
%   | | | then return 0.2271172753904228;  // std dev = 0.026, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.13442688176251436;  // std dev = 0.941, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return -0.03270218733940965;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.15141807798569626;  // std dev = 1.624, 41.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=38 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then return 0.22544071622929218;  // std dev = 0.023, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.25140926977090944;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.262614398902239;  // std dev = 0.020, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, I) )
%   | then return -0.07877675473109146;  // std dev = 5.27e-09, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else return -0.07877675473109175;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then if ( follows(E, A), tweets(E, F) )
%   | | | then return 0.17167025391929516;  // std dev = 0.990, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | | else return 0.04188329062027906;  // std dev = 1.287, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.22993448157615504;  // std dev = 0.059, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.19434387916344065;  // std dev = 0.095, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.20307690125967254;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.006009021088456801;  // std dev = 0.890, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.07170835961573005;  // std dev = 0.929, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( tweets(A, I) )
%   | then return -0.07324622576333661;  // std dev = 8.84e-09, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(E, D), tweets(E, F) )
%   | | | then return 0.14033848207606678;  // std dev = 1.381, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | | | else return -0.02978698050538125;  // std dev = 1.245, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( follows(D, G), follows(G, D) )
%   | | | then return -0.3035004109967853;  // std dev = 1.014, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.19203022102733794;  // std dev = 0.041, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(A, I) )
%   | | then if ( follows(I, H), recursion_accounttype(H, B) )
%   | | | then return 0.18625625515059338;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15613053806844626;  // std dev = 0.037, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.17669532429644588;  // std dev = 0.044, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.19448008807842676;  // std dev = 0.021, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06842697784420275;  // std dev = 9.31e-10, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.12925838943188658;  // std dev = 0.993, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | | else return 0.15653323169727731;  // std dev = 0.184, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return -0.0016294527340179517;  // std dev = 0.883, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), follows(G, H) )
%   | | | then return 0.15551407104579473;  // std dev = 0.060, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.20019182805693755;  // std dev = 0.064, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.1483737557553613;  // std dev = 0.031, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.16581591639535176;  // std dev = 0.018, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, J) )
%   | then return -0.06419184008202626;  // std dev = 1.32e-09, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   | else return -0.0641918400820262;  // std dev = 1.32e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
Inference time using transfer learning 13.667812585830688
Refined model CLL: -0.091204


******************************************
Best model found
******************************************
Results 

CLL : -0.085536 

AUC ROC : 0.995619 

AUC PR : 0.44587 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 36.884408473968506 

Total Inference Time : 10.425704956054688 

Total revision time: 64.02297568321228
Best scored revision CLL: -0.091204


Results 

CLL : -0.085536 

AUC ROC : 0.995619 

AUC PR : 0.44587 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 64.05595111846924 

Total Inference Time : 10.425704956054688 

Run: 2

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.976588726043701
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8211118980624726;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( tweets(D, E) )
%   | then return -0.1418510649004876;  // std dev = 2.11e-07, 342.000 (wgt'ed) examples reached here.  /* #neg=342 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6958316351366824;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283922;  // std dev = 0.000, 345.000 (wgt'ed) examples reached here.  /* #neg=345 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5639259709124763;  // std dev = 0.080, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then return -0.11231637819360661;  // std dev = 0.000, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | | else return -0.11231637819360633;  // std dev = 2.11e-08, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.40481688963329804;  // std dev = 1.710, 118.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=115 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   else if ( tweets(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4064310946373325;  // std dev = 0.152, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.10159632948783621;  // std dev = 3.16e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | | | else return -0.10159632948783627;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(D, E) )
%   | then return 0.28612297833135436;  // std dev = 2.758, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926054;  // std dev = 9.88e-08, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | | else return -0.09269127618926104;  // std dev = 0.000, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24943765286466785;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.04e-09, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20264081330490097;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 2.58e-08, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.175118238634261;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333667;  // std dev = 1.27e-07, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15540379636819043;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420262;  // std dev = 8.16e-08, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | | else return -0.06842697784420261;  // std dev = 1.86e-09, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12243986629601027;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(A, D) )
%   | then return -0.06419184008202622;  // std dev = 4.71e-08, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202625;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
Inference time using transfer learning 13.760016441345215
Parameter learned model CLL:-0.087469 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(D, E)'}, {'true': [2.404, 6, 156], 'false,true': [2.11e-07, 342, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.201, 5, 156], 'false,true': [0.0, 345, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)'}, {'true': [0.08, 1, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 195, 0], 'false,false,false': [2.11e-08, 94, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, F)', 'false,true': 'recursion_accounttype(G, B)', 'false,true,false': 'follows(A, H)'}, {'true,true': [1.71, 3, 115], 'true,false': [0.0, 214, 0], 'false,true,true': [0.152, 1, 41], 'false,true,false,true': [3.16e-08, 54, 0], 'false,true,false,false': [0.0, 14, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'tweets(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'tweets(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [2.758, 8, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [9.88e-08, 217, 0], 'false,false,false': [0.0, 73, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.04e-09, 323, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(F, G)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.58e-08, 318, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)', 'false,false': 'tweets(A, F), follows(A, G)'}, {'true,true': [1.716, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.27e-07, 227, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 81, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [8.16e-08, 225, 0], 'false,false,false': [1.86e-09, 87, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.156, 4, 156], 'false,true': [4.71e-08, 255, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 43, 0]}]
{'': [0.03566529492456011, 1.2985064615498906e-16], 'false': [1.2985064615498906e-16, nan]}
{'': [0.030091431657733054, -1.1842378929335003e-16], 'false': [-1.1842378929335003e-16, nan]}
{'': [0.006328857154447974, -9.37350927365184e-17], 'false': [nan, -9.37350927365184e-17], 'false,false': [-2.2773805633336544e-17, 4.724353296277262e-18]}
{'': [0.0675593625203183, 0.06979267066142221], 'false': [0.06979267066142221, nan], 'false,true': [0.023242630385487743, 3.428629928989454e-17], 'true': [0.02477736282677325, -8.093214572033851e-17], 'false,true,false': [1.850371707708594e-17, -5.9476233462061954e-18]}
{'': [0.046392207629602375, 9.034918407294377e-17], 'true': [0.046392207629602375, nan], 'false': [nan, 9.034918407294377e-17], 'false,false': [4.502286920138884e-17, -1.6729388042296878e-17], 'false,false,true': [nan, 4.502286920138884e-17]}
{'': [0.02437090218050274, 3.71220082537204e-17], 'false': [nan, 3.71220082537204e-17], 'false,false': [nan, 3.71220082537204e-17]}
{'': [0.02437829671210338, 2.09476042382105e-18], 'false': [nan, 2.09476042382105e-18], 'false,false': [nan, 2.09476042382105e-18], 'false,false,false': [2.09476042382105e-18, nan]}
{'': [0.018512597077986304, 2.8116037636611104e-17], 'true': [0.018512597077986304, nan], 'false': [7.140641479967967e-17, -1.439177994884462e-17], 'false,false': [nan, -1.439177994884462e-17]}
{'': [0.012496524596029934, -6.120460263959197e-17], 'false': [nan, -6.120460263959197e-17], 'false,false': [2.960594732333751e-17, 3.1902960477734383e-18], 'false,false,true': [nan, 2.960594732333751e-17]}
{'': [0.024372408808271247, 4.321673518675106e-17], 'false': [8.707631565687502e-18, -3.2273925134452225e-18], 'false,false': [nan, -3.2273925134452225e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;follows(A, E), tweets(A, F).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
3;false,false;follows(A, H).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;tweets(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;tweets(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(A, D).;true;true


Refining candidate
***************************
Model training time 49.66875743865967
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.8295775065280829;  // std dev = 0.986, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.8581489350995122;  // std dev = 5.96e-08, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.8248156017661784;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.1418510649004879;  // std dev = 5.16e-08, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | | then return 0.7237711293206696;  // std dev = 0.016, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.6550226599047771;  // std dev = 1.361, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | else return 0.7261547489024003;  // std dev = 0.114, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else if ( follows(F, A) )
%   | | then return 0.7194734122109543;  // std dev = 5.96e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.5194734122109544;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.7194734122109543;  // std dev = 2.11e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.12544463852839205;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #neg=324 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( follows(E, D) )
%   | | then return 0.5662875874468406;  // std dev = 0.166, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.22038264609190486;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5630881935839562;  // std dev = 0.019, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then return 0.488699770079618;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.4752942833269618;  // std dev = 0.815, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.5616502575684048;  // std dev = 0.092, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else if ( follows(A, I), tweets(A, J) )
%   | then return -0.1123163781936066;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else return -0.11231637819360614;  // std dev = 4.47e-08, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.42309977941782245;  // std dev = 0.087, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | | else return 0.43619154586642384;  // std dev = 0.165, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.4338102316931068;  // std dev = 4.21e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.2652380200574484;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return 0.413817128207299;  // std dev = 2.58e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.44257560974435356;  // std dev = 0.069, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.4149013390261474;  // std dev = 0.000906, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return -0.10159632948783615;  // std dev = 6.18e-09, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(E, D), tweets(A, F) )
%   | | | then return 0.32460961375863767;  // std dev = 0.027, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.31957723794734755;  // std dev = 0.026, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else if ( follows(G, A), follows(G, D) )
%   | | | then return 0.32996418438534814;  // std dev = 0.018, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.36819319116343285;  // std dev = 0.059, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(H, J) )
%   | | | then return 0.27911577678497423;  // std dev = 0.980, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.06246768712828229;  // std dev = 0.698, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.33320066842553375;  // std dev = 0.147, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.2772964964409369;  // std dev = 0.978, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   else return -0.09269127618926047;  // std dev = 9.31e-09, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.2569802820046902;  // std dev = 0.032, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.26535938662138203;  // std dev = 0.049, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.14203860758421757;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.26194568281277425;  // std dev = 0.051, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, H) )
%   | | | then return 0.2946704590223632;  // std dev = 0.061, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.32605666716978365;  // std dev = 0.092, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.25764181707203543;  // std dev = 0.034, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.28145005825490876;  // std dev = 0.101, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.08518475138839678;  // std dev = 5.96e-09, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(D, A), follows(E, A) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.17392142838393695;  // std dev = 1.391, 51.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   | | | else return -0.11524051702457794;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, E) )
%   | | | then return 0.2191087296263387;  // std dev = 0.093, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.1510035976155363;  // std dev = 1.282, 28.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=26 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.21494987443169983;  // std dev = 0.017, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.2078334475665512;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.2459828137360729;  // std dev = 0.067, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.21263749381916572;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.07877675473109144;  // std dev = 3.09e-09, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, F), follows(F, A) )
%   | | | then return 0.18473442675357885;  // std dev = 0.073, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.17911646684617724;  // std dev = 0.016, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.06471534938837371;  // std dev = 0.947, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.1850737235265836;  // std dev = 0.058, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.192231585910014;  // std dev = 0.052, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.20265715796093603;  // std dev = 0.045, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.18222170070458632;  // std dev = 0.034, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.1907624181596071;  // std dev = 0.071, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.07324622576333718;  // std dev = 1.86e-09, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.12839534393551766;  // std dev = 0.986, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.15815355515357674;  // std dev = 0.043, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.180092573972798;  // std dev = 0.115, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.15824562345918128;  // std dev = 0.072, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else if ( follows(H, A), tweets(H, I) )
%   | | then if ( recursion_accounttype(H, B), follows(A, H) )
%   | | | then return 0.16416388833094436;  // std dev = 0.046, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.15425852552932184;  // std dev = 1.071, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.11183462895697142;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.1641775579303651;  // std dev = 0.080, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.0684269778442031;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #neg=324 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.14023501388668544;  // std dev = 0.054, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | | else return -0.16040631607670477;  // std dev = 0.815, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return -0.13763343328184652;  // std dev = 0.760, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.08858734021018473;  // std dev = 0.960, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.15226342756491412;  // std dev = 0.038, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.17303830160107617;  // std dev = 0.090, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return 0.13507223472918534;  // std dev = 0.011, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.14296517281410884;  // std dev = 0.084, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   else return -0.06419184008202594;  // std dev = 6.91e-09, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
Inference time using transfer learning 9.530732870101929
Refined model CLL: -0.085633


******************************************
Best model found
******************************************
Results 

CLL : -0.091198 

AUC ROC : 0.993936 

AUC PR : 0.419711 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 49.66875743865967 

Total Inference Time : 12.496930360794067 

Total revision time: 86.60959243774414
Best scored revision CLL: -0.085633


Results 

CLL : -0.091198 

AUC ROC : 0.993936 

AUC PR : 0.419711 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 86.6344006061554 

Total Inference Time : 12.496930360794067 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.398602724075317
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8199809961682126;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( tweets(D, E) )
%   | then return -0.14185106490048824;  // std dev = 0.000, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7114869871004702;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839188;  // std dev = 0.000, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5434766678258643;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E), tweets(A, F) )
%   | | then return -0.1123163781936064;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | | else return -0.11231637819360617;  // std dev = 3.49e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then return 0.41149157524977265;  // std dev = 1.400, 99.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=97 */
%   | else return -0.10159632948783648;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else if ( tweets(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.3983602621184604;  // std dev = 0.180, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.10159632948783621;  // std dev = 3.49e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(D, E) )
%   | then return 0.31986535057430965;  // std dev = 1.404, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926058;  // std dev = 8.94e-08, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | | else return -0.09269127618926103;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2375308964919243;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.74e-09, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21641829342357372;  // std dev = 0.997, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(F, G) )
%   | | | then return -0.07877675473109144;  // std dev = 5.37e-08, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.18889304467221918;  // std dev = 0.010, 126.000 (wgt'ed) examples reached here.  /* #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( tweets(A, E) )
%   | then return -0.07324622576333661;  // std dev = 1.30e-07, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13838369334642567;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420262;  // std dev = 7.81e-08, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | | else return -0.06842697784420264;  // std dev = 3.36e-09, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.10557925861238394;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(A, D) )
%   | then return -0.06419184008202626;  // std dev = 2.58e-08, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202619;  // std dev = 1.86e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
Inference time using transfer learning 19.516185522079468
Parameter learned model CLL:-0.093392 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(D, E)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 249, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.403, 2, 126], 'false,true': [0.0, 258, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E), tweets(A, F)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 172, 0], 'false,false,false': [3.49e-08, 76, 0]}]
['accounttype(A, B)', {'': 'tweets(A, C)', 'true': 'tweets(D, C), recursion_accounttype(D, B)', 'false': 'tweets(E, F)', 'false,true': 'recursion_accounttype(G, B)', 'false,true,false': 'follows(A, H)'}, {'true,true': [1.4, 2, 97], 'true,false': [0.0, 171, 0], 'false,true,true': [0.18, 1, 29], 'false,true,false,true': [3.49e-08, 56, 0], 'false,true,false,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'tweets(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'tweets(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.404, 2, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [8.94e-08, 190, 0], 'false,false,false': [0.0, 68, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.74e-09, 247, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'tweets(F, G)'}, {'true': [0.997, 1, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.37e-08, 259, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'tweets(A, E)', 'false,false': 'tweets(A, F), follows(A, G)'}, {'true,true': [0.01, 0, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.3e-07, 215, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 61, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.81e-08, 186, 0], 'false,false,false': [3.36e-09, 49, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.192, 5, 126], 'false,true': [2.58e-08, 244, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.86e-09, 15, 0]}]
{'': [0.03671114736903867, -1.319783193931913e-16], 'false': [-1.319783193931913e-16, nan]}
{'': [0.01538085937499678, -6.885104028683141e-17], 'false': [-6.885104028683141e-17, nan]}
{'': [0.02271498107084719, -8.953411488912552e-17], 'false': [nan, -8.953411488912552e-17], 'false,false': [-2.581914010756178e-18, 1.6069017461679898e-17]}
{'': [0.06839239879053863, 0.06801790297424519], 'true': [0.019793898581777717, -7.920889415454333e-17], 'false': [0.06801790297424519, nan], 'false,true': [0.032222222222222166, 2.1807952269422717e-17], 'false,true,false': [2.1807952269422717e-17, nan]}
{'': [0.015403115568723966, 6.712976427966062e-17], 'true': [0.015403115568723966, nan], 'false': [nan, 6.712976427966062e-17], 'false,false': [4.207160935421646e-17, -2.1224851941363285e-17], 'false,false,true': [nan, 4.207160935421646e-17]}
{'': [0.029820613005369485, 3.3261742438162584e-17], 'false': [nan, 3.3261742438162584e-17], 'false,false': [nan, 3.3261742438162584e-17]}
{'': [0.007821170714041254, 1.1145096000098096e-17], 'false': [nan, 1.1145096000098096e-17], 'false,false': [nan, 1.1145096000098096e-17], 'false,false,false': [1.1145096000098096e-17, nan]}
{'': [7.203471451784737e-07, 4.1834490782976914e-17], 'true': [7.203471451784737e-07, nan], 'false': [7.849018592698781e-17, -1.2740264217009993e-17], 'false,false': [nan, -1.2740264217009993e-17]}
{'': [0.022707188419314933, 1.7952542525853596e-17], 'false': [nan, 1.7952542525853596e-17], 'false,false': [3.282917545934603e-17, 1.1328806373726087e-17], 'false,false,true': [nan, 3.282917545934603e-17]}
{'': [0.03671519890581021, 1.200241107702872e-17], 'false': [2.7300566179307128e-18, 4.163336342344337e-18], 'false,false': [nan, 4.163336342344337e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;follows(A, E), tweets(A, F).;true;true
3;;accounttype(A, B) :- tweets(A, C).;true;true
3;true;tweets(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;tweets(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;tweets(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;tweets(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;follows(A, D).;true;true


Refining candidate
***************************
Model training time 27.01735830307007
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.8176083945589723;  // std dev = 1.697, 74.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=71 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995121;  // std dev = 8.43e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.14185106490048846;  // std dev = 0.000, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, D) )
%   | | then if ( follows(D, A), recursion_accounttype(E, B) )
%   | | | then return 0.6828063858958695;  // std dev = 1.693, 67.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=64 */
%   | | | else return 0.5354803966864271;  // std dev = 1.247, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.7861214589711165;  // std dev = 0.055, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.7230440081706293;  // std dev = 0.057, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.1254446385283919;  // std dev = 0.000, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.5712431186980732;  // std dev = 0.176, 97.000 (wgt'ed) examples reached here.  /* #pos=97 */
%   | else if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(G, A), tweets(E, H) )
%   | | | then return 0.5733845505532215;  // std dev = 0.073, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.3819215105088616;  // std dev = 0.863, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.4550259370694155;  // std dev = 0.359, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(A, I), tweets(A, J) )
%   | then return -0.1123163781936064;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | else return -0.11231637819360617;  // std dev = 3.16e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.43906315974259186;  // std dev = 0.016, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return 0.3294584739829335;  // std dev = 1.354, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | | else return 0.41279180731626675;  // std dev = 3.65e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.1015963294878365;  // std dev = 0.000, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(I, J) )
%   | | | then return 0.3084524348734553;  // std dev = 1.172, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | | else return 0.5005766962010877;  // std dev = 0.115, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(K, A) )
%   | | | then return 0.42011262065038046;  // std dev = 0.043, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.47560315340178183;  // std dev = 0.025, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.1015963294878362;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, D) )
%   | | then if ( follows(A, G), tweets(F, E) )
%   | | | then return 0.3300008532498395;  // std dev = 0.014, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0.3175123168795726;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.3562042837310184;  // std dev = 0.044, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.3297070705987968;  // std dev = 0.035, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(I, A), follows(A, I) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.16306965707905544;  // std dev = 1.223, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.3438690487046286;  // std dev = 0.086, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.21697169584598752;  // std dev = 0.951, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.34313961584116776;  // std dev = 0.076, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.09269127618926047;  // std dev = 6.97e-09, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.2401773911670714;  // std dev = 0.990, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return 0.07735886305360071;  // std dev = 1.565, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.2944308774212811;  // std dev = 0.160, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.2577155640012992;  // std dev = 0.023, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.28108171962321876;  // std dev = 0.050, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.34630922622177257;  // std dev = 0.090, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2569934785878483;  // std dev = 0.024, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.27207019940663557;  // std dev = 0.072, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.08518475138839678;  // std dev = 5.89e-09, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.17929967333595048;  // std dev = 1.395, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | | | else return -0.021296742583787713;  // std dev = 1.194, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.22436728419279497;  // std dev = 0.048, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.2668076087047851;  // std dev = 0.082, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.20836372027562886;  // std dev = 0.011, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2163626767607781;  // std dev = 0.025, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(I, A), tweets(A, J) )
%   | | | then return 0.23694628862578238;  // std dev = 0.141, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.218305820108654;  // std dev = 0.065, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   else return -0.07877675473109144;  // std dev = 3.48e-09, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.16756135747205822;  // std dev = 0.990, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return 0.042673080819194485;  // std dev = 0.909, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.19581340091177332;  // std dev = 0.094, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.17780259443980925;  // std dev = 0.027, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, H) )
%   | | | then return -0.025484244851001234;  // std dev = 1.467, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.22391064413982506;  // std dev = 0.074, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.19085667172879794;  // std dev = 0.136, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.083575316067795;  // std dev = 0.940, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else return -0.07324622576333671;  // std dev = 8.12e-09, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | | then return 0.16471196296837184;  // std dev = 0.040, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.13208893190437218;  // std dev = 0.974, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | else if ( recursion_accounttype(D, B), follows(D, F) )
%   | | | then return 0.24429812227522085;  // std dev = 0.088, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.16675922203511506;  // std dev = 0.144, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else return 0.039909053726181636;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H) )
%   | | then if ( follows(H, A) )
%   | | | then return -0.06842697784420261;  // std dev = 5.05e-08, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | | | else return -0.0684269778442027;  // std dev = 5.27e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.06842697784420275;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else return -0.0684269778442027;  // std dev = 1.86e-09, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(E, A), follows(D, A) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.1425239531834254;  // std dev = 0.024, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.022408219517354923;  // std dev = 1.800, 30.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=26 */
%   | | else if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | | then return 0.2020876630180735;  // std dev = 0.081, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.13935614114489264;  // std dev = 0.104, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.04476911070604465;  // std dev = 0.947, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.054402525282940005;  // std dev = 0.859, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.16461419702259233;  // std dev = 0.044, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, I) )
%   | then return -0.06419184008202626;  // std dev = 1.32e-09, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   | else return -0.06419184008202619;  // std dev = 1.61e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
Inference time using transfer learning 11.441922187805176
Refined model CLL: -0.089978


******************************************
Best model found
******************************************
Results 

CLL : -0.084403 

AUC ROC : 0.996561 

AUC PR : 0.504229 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 27.01735830307007 

Total Inference Time : 9.524322986602783 

Total revision time: 53.89299559593201
Best scored revision CLL: -0.089978


Results 

CLL : -0.084403 

AUC ROC : 0.996561 

AUC PR : 0.504229 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 53.91780376434326 

Total Inference Time : 9.524322986602783 

Starting experiments for fasttext using wmd 

Run: 1

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 6.284921884536743
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8093684472946316;  // std dev = 2.759, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048768;  // std dev = 1.71e-07, 324.000 (wgt'ed) examples reached here.  /* #neg=324 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6862678625080748;  // std dev = 2.588, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( tweets(D, E) )
%   | then return -0.12544463852839213;  // std dev = 0.000, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.57550890904666;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then return -0.11231637819360664;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | | else return -0.11231637819360628;  // std dev = 5.77e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.42487402912362754;  // std dev = 0.996, 129.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=128 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4326259671081249;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.10159632948783633;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.10159632948783633;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3135248020537731;  // std dev = 1.715, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926049;  // std dev = 1.44e-07, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
%   | | else return -0.09269127618926101;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.26041988815587036;  // std dev = 0.998, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.96e-09, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.18796901457443047;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 3.65e-08, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16357642531301814;  // std dev = 1.974, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333671;  // std dev = 1.26e-07, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13981039755411795;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420275;  // std dev = 1.49e-08, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
%   | | else return -0.06842697784420262;  // std dev = 3.23e-09, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1154009947998353;  // std dev = 0.173, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 1.05e-08, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202626;  // std dev = 0.000, 90.000 (wgt'ed) examples reached here.  /* #neg=90 */
Inference time using transfer learning 11.370876789093018
Parameter learned model CLL:-0.087372 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.759, 8, 156], 'false,true': [1.71e-07, 324, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(D, E)'}, {'true': [2.588, 7, 156], 'false,true': [0.0, 316, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E), follows(A, F)'}, {'true': [0.0, 0, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 200, 0], 'false,false,false': [5.77e-08, 120, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)', 'false,true,false': 'tweets(A, H)'}, {'true,true': [0.996, 1, 128], 'true,false': [0.0, 255, 0], 'false,true,true': [0.0, 0, 28], 'false,true,false,true': [0.0, 28, 0], 'false,true,false,false': [0.0, 28, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.715, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.44e-07, 272, 0], 'false,false,false': [0.0, 58, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.998, 1, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.96e-09, 300, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.201, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.65e-08, 327, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F), tweets(A, G)'}, {'true,true': [1.974, 4, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.26e-07, 237, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 67, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.49e-08, 252, 0], 'false,false,false': [3.23e-09, 57, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.173, 5, 156], 'false,true': [1.05e-08, 225, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 90, 0]}]
{'': [0.04640095181440217, 9.046261682130905e-17], 'false': [9.046261682130905e-17, nan]}
{'': [0.04110053069366251, -1.12427648063307e-16], 'false': [-1.12427648063307e-16, nan]}
{'': [-1.9129996732002696e-15, -3.8857805861880476e-17], 'false': [nan, -3.8857805861880476e-17], 'false,false': [-2.886579864025407e-17, 2.7755575615628914e-17]}
{'': [0.06441626361189648, 0.06342076937339185], 'true': [0.007691845441981848, -6.443647358608752e-17], 'false': [0.06342076937339185, nan], 'false,true': [-1.5860328923216522e-16, 2.1807952269422717e-17], 'false,true,false': [-1.1895246692412391e-17, -1.1895246692412391e-17]}
{'': [0.018500932855961723, 1.1438661465834946e-16], 'true': [0.018500932855961723, nan], 'false': [nan, 1.1438661465834946e-16], 'false,false': [7.673600317262111e-17, -2.488430917263282e-17], 'false,false,true': [nan, 7.673600317262111e-17]}
{'': [0.006344933482776789, 3.552713678800501e-17], 'false': [nan, 3.552713678800501e-17], 'false,false': [nan, 3.552713678800501e-17]}
{'': [0.03009332527284804, 4.0742129344042444e-18], 'false': [nan, 4.0742129344042444e-18], 'false,false': [nan, 4.0742129344042444e-18], 'false,false,false': [4.0742129344042444e-18, nan]}
{'': [0.024364839846962028, 2.9946805269494355e-17], 'true': [0.024364839846962028, nan], 'false': [6.651969177078997e-17, -1.3256394323882466e-17], 'false,false': [nan, -1.3256394323882466e-17]}
{'': [0.02436584301943916, -5.892445826489504e-17], 'false': [nan, -5.892445826489504e-17], 'false,false': [8.8112938462314e-19, 1.0712678307786598e-17], 'false,false,true': [nan, 8.8112938462314e-19]}
{'': [0.03008111709051518, 5.4982473600483945e-17], 'false': [4.934324553889585e-19, -1.295260195396016e-17], 'false,false': [nan, -1.295260195396016e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E), follows(A, F).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
3;false,false;tweets(A, H).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 32.33976078033447
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(E, A), follows(A, F) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.8081489350995122;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995121;  // std dev = 2.06e-07, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else return -0.1418510649004878;  // std dev = 1.15e-07, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.6909019836395263;  // std dev = 0.986, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.7194734122109544;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.6523219729394134;  // std dev = 0.958, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.07352525466573477;  // std dev = 0.867, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(I, A), tweets(A, J) )
%   | | | then return 0.6137013638478563;  // std dev = 1.340, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.7197110306641233;  // std dev = 0.010, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else return -0.12544463852839202;  // std dev = 0.000, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(D, F), follows(E, G) )
%   | | | then return 0.5483391207257006;  // std dev = 0.973, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | | else return 0.36533456618900895;  // std dev = 0.898, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.3980571102790831;  // std dev = 0.960, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.5635048962722261;  // std dev = 0.159, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else if ( tweets(A, H), follows(A, I) )
%   | then return -0.11231637819360649;  // std dev = 2.98e-08, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | else return -0.11231637819360626;  // std dev = 6.83e-08, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.40992280909245815;  // std dev = 0.995, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | | | else return 0.35782182454896144;  // std dev = 1.349, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | else if ( follows(G, A), tweets(G, H) )
%   | | | then return 0.474734551345584;  // std dev = 0.252, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.41972755107626175;  // std dev = 0.051, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   else if ( recursion_accounttype(I, B) )
%   | then if ( follows(J, A), recursion_accounttype(J, B) )
%   | | then return 0.41553568213421843;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.4206686401934154;  // std dev = 0.023, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.4154779739019748;  // std dev = 2.58e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783619;  // std dev = 5.43e-09, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.3345335608846105;  // std dev = 0.115, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.26576502035158256;  // std dev = 0.934, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0.0964662387396727;  // std dev = 1.115, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(A, G), follows(G, A) )
%   | | then if ( follows(A, H), follows(G, H) )
%   | | | then return 0.35954524856383674;  // std dev = 0.047, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.3674488364809521;  // std dev = 1.49e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.31719370849776707;  // std dev = 0.019, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.32196667900593623;  // std dev = 0.090, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( follows(A, K) )
%   | then return -0.09269127618926047;  // std dev = 9.03e-09, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
%   | else return -0.09269127618926103;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.26219276700581884;  // std dev = 0.063, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | | else return 0.2928315516110031;  // std dev = 0.079, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.2966084711643834;  // std dev = 0.035, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.28627846698291454;  // std dev = 0.020, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( recursion_accounttype(H, B), follows(H, J) )
%   | | | then return 0.10250869394868878;  // std dev = 1.306, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.25870288422434706;  // std dev = 0.103, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.25732703215151587;  // std dev = 0.034, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.25421591346213496;  // std dev = 0.020, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else return -0.08518475138839678;  // std dev = 6.11e-09, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), recursion_accounttype(D, B) )
%   | | | then return 0.1799085545703965;  // std dev = 0.985, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.21914613085112306;  // std dev = 0.137, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | | else return 0.3191984316707148;  // std dev = 0.254, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.2423616252406035;  // std dev = 0.019, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.28859394523150167;  // std dev = 0.656, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.20788045630677865;  // std dev = 0.001, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.20834863922491614;  // std dev = 0.001, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( tweets(A, I) )
%   | then return -0.07877675473109146;  // std dev = 4.47e-09, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else return -0.07877675473109164;  // std dev = 4.66e-09, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), follows(E, D) )
%   | | | then return 0.11117832704562253;  // std dev = 1.665, 41.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=38 */
%   | | | else return 0.186343162150635;  // std dev = 0.046, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0.18588035081482812;  // std dev = 0.046, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.20459513578812644;  // std dev = 0.046, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.20291565663660074;  // std dev = 0.023, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.322373663669357;  // std dev = 0.173, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.17240918939369737;  // std dev = 0.024, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.17717790888876533;  // std dev = 0.044, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else return -0.07324622576333693;  // std dev = 6.32e-09, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E), recursion_accounttype(D, B) )
%   | | | then return 0.0897601686892483;  // std dev = 1.358, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return 0.16017603889012877;  // std dev = 0.073, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return -0.3173184662794515;  // std dev = 1.009, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.10996900776858201;  // std dev = 0.987, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( recursion_accounttype(H, B), follows(H, I) )
%   | | | then return 0.20861704336664544;  // std dev = 0.188, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.15175708178640862;  // std dev = 0.046, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.15128488855919003;  // std dev = 0.000314, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.15281640352779655;  // std dev = 0.018, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.06842697784420294;  // std dev = 0.000, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | | then return 0.1484590359474565;  // std dev = 0.074, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return 0.05386660303064748;  // std dev = 1.586, 30.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=27 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return -0.1595169200393257;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.15050898285231729;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.1460235321252455;  // std dev = 0.012, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2246268502753763;  // std dev = 0.133, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.13097410468534937;  // std dev = 0.019, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.13411059656173044;  // std dev = 0.035, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else return -0.06419184008202583;  // std dev = 7.90e-09, 331.000 (wgt'ed) examples reached here.  /* #neg=331 */
Inference time using transfer learning 8.558600902557373
Refined model CLL: -0.085068


******************************************
Best model found
******************************************
Results 

CLL : -0.090397 

AUC ROC : 0.993916 

AUC PR : 0.431144 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 32.33976078033447 

Total Inference Time : 10.428553581237793 

Total revision time: 66.73023343086243
Best scored revision CLL: -0.085068


Results 

CLL : -0.090397 

AUC ROC : 0.993916 

AUC PR : 0.431144 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 66.7479739189148 

Total Inference Time : 10.428553581237793 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.396963357925415
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7984474425621968;  // std dev = 2.743, 134.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048824;  // std dev = 0.000, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.693195781492688;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( tweets(D, E) )
%   | then return -0.12544463852839186;  // std dev = 0.000, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5383161792586455;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then return -0.11231637819360644;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | | else return -0.11231637819360618;  // std dev = 3.49e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4260954948814665;  // std dev = 1.402, 120.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=118 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.442762161548134;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.1015963294878363;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3181387101866548;  // std dev = 1.711, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926049;  // std dev = 1.33e-07, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
%   | | else return -0.09269127618926089;  // std dev = 2.63e-09, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23565053858177096;  // std dev = 2.194, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.74e-09, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.18409614789782236;  // std dev = 2.393, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109144;  // std dev = 5.58e-08, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.14598901314150825;  // std dev = 2.575, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333667;  // std dev = 1.27e-07, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15314028604338914;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420262;  // std dev = 8.02e-08, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | | else return -0.06842697784420267;  // std dev = 2.63e-09, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14736158297742166;  // std dev = 0.088, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202625;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
Inference time using transfer learning 17.902092695236206
Parameter learned model CLL:-0.092574 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.743, 8, 126], 'false,true': [0.0, 251, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(D, E)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 244, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E), follows(A, F)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 178, 0], 'false,false,false': [3.49e-08, 76, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)', 'false,true,false': 'tweets(A, H)'}, {'true,true': [1.402, 2, 118], 'true,false': [0.0, 227, 0], 'false,true,true': [0.0, 0, 8], 'false,true,false,true': [0.0, 19, 0], 'false,true,false,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.711, 3, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.33e-07, 259, 0], 'false,false,false': [2.63e-09, 22, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.194, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.74e-09, 246, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.393, 6, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.58e-08, 252, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F), tweets(A, G)'}, {'true,true': [2.575, 7, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.27e-07, 228, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 18, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [8.02e-08, 228, 0], 'false,false,false': [2.63e-09, 22, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.088, 1, 126], 'false,true': [0.0, 188, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 44, 0]}]
{'': [0.05613722432613483, -1.2384958043627243e-16], 'false': [-1.2384958043627243e-16, nan]}
{'': [0.036711147369037474, -6.006124559447569e-17], 'false': [-6.006124559447569e-17, nan]}
{'': [0.03671114736903405, -9.616104937698206e-17], 'false': [nan, -9.616104937698206e-17], 'false,false': [-1.247441600702423e-17, 1.6069017461679898e-17]}
{'': [0.06866303409846714, 0.06178542846086372], 'true': [0.01638888888889, -7.434092499692678e-17], 'false': [0.06178542846086372, nan], 'false,true': [-2.7755575615628914e-17, -1.0225738384705389e-17], 'false,true,false': [-1.0225738384705389e-17, nan]}
{'': [0.022705010156066036, 8.692137559342863e-17], 'true': [0.022705010156066036, nan], 'false': [nan, 8.692137559342863e-17], 'false,false': [6.858520615444982e-17, 6.308085367188389e-18], 'false,false,true': [nan, 6.858520615444982e-17]}
{'': [0.036744952827920174, 3.339695277327707e-17], 'false': [nan, 3.339695277327707e-17], 'false,false': [nan, 3.339695277327707e-17]}
{'': [0.043372744572550866, 1.2335811384723961e-17], 'false': [nan, 1.2335811384723961e-17], 'false,false': [nan, 1.2335811384723961e-17], 'false,false,false': [1.2335811384723961e-17, nan]}
{'': [0.049845167646917626, 5.867032243954079e-17], 'true': [0.049845167646917626, nan], 'false': [7.109322876985651e-17, -2.3129646346357427e-18], 'false,false': [nan, -2.3129646346357427e-18]}
{'': [0.022708367664285554, 8.881784197001253e-19], 'false': [nan, 8.881784197001253e-19], 'false,false': [2.8242515538710124e-17, 5.677276830469551e-18], 'false,false,true': [nan, 2.8242515538710124e-17]}
{'': [0.007810137492173136, 1.4356332214980472e-18], 'false': [-3.543264972207946e-18, -2.523234146875356e-18], 'false,false': [nan, -2.523234146875356e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E), follows(A, F).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 57.43759226799011
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(E, F), follows(E, D) )
%   | | then if ( follows(E, A), recursion_accounttype(D, B) )
%   | | | then return 0.8089686072306601;  // std dev = 1.689, 61.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=58 */
%   | | | else return 0.858148935099512;  // std dev = 1.69e-07, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A) )
%   | | then return 0.6763307532813305;  // std dev = 0.386, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.14185106490048827;  // std dev = 0.000, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( tweets(D, E), recursion_accounttype(D, B) )
%   | | | then return 0.7040794724418626;  // std dev = 0.987, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.723590714080198;  // std dev = 0.027, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0.7358143323572992;  // std dev = 0.105, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | else if ( tweets(A, F) )
%   | | then return 0.7194734122109544;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5766162693538116;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.12544463852839177;  // std dev = 0.000, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(D, B) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.5534231504250839;  // std dev = 1.012, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | | else return 0.07106708889866094;  // std dev = 1.246, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.5598659865143183;  // std dev = 0.091, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return 0.3957662071238615;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( tweets(A, G), follows(A, H) )
%   | then return -0.11231637819360636;  // std dev = 2.98e-08, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | else return -0.11231637819360615;  // std dev = 3.33e-08, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.4299255223088874;  // std dev = 0.084, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | | else return 0.5106640520202491;  // std dev = 0.156, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(G, A), follows(A, G) )
%   | | | then return 0.36695320963535166;  // std dev = 0.978, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.426141816333129;  // std dev = 0.077, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.3869110760139592;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.10159632948783631;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E), recursion_accounttype(D, B) )
%   | | | then return 0.30770018290255885;  // std dev = 0.987, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | | else return 0.3308323198126175;  // std dev = 0.110, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( follows(D, A) )
%   | | | then return 0.2588171381724444;  // std dev = 1.331, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | | else return 0.3246258619968143;  // std dev = 0.067, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.4025569546047177;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, A) )
%   | | then if ( follows(A, G) )
%   | | | then return -0.09269127618926065;  // std dev = 7.74e-08, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   | | | else return -0.09269127618926087;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.09269127618926098;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else return -0.09269127618926089;  // std dev = 2.95e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.26530814879203884;  // std dev = 0.037, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | | else return 0.17082764877990328;  // std dev = 1.354, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | else if ( follows(A, F), tweets(A, G) )
%   | | | then return 0.26961374258300236;  // std dev = 0.077, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.30807749365943454;  // std dev = 0.145, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.24627397723263822;  // std dev = 0.012, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.2519468249104167;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.25194682491041676;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.040291361229270226;  // std dev = 1.164, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   else return -0.08518475138839678;  // std dev = 5.82e-09, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.19748520893345364;  // std dev = 0.984, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.22754210528959512;  // std dev = 0.128, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return 0.06149948318444345;  // std dev = 0.826, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.21528061821217123;  // std dev = 0.047, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.23675464583651168;  // std dev = 0.129, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.24871884815176815;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2690305950041918;  // std dev = 0.015, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, K) )
%   | then return -0.07877675473109144;  // std dev = 3.73e-09, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
%   | else return -0.07877675473109175;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(E, D) )
%   | | | then return 0.18525750983585265;  // std dev = 0.021, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.08654749627740767;  // std dev = 1.625, 28.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   | | else return -0.02247434399076411;  // std dev = 0.900, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(F, A), tweets(F, H) )
%   | | | then return 0.19598243227224743;  // std dev = 0.033, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.1704070773262052;  // std dev = 0.010, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.2040499799806576;  // std dev = 0.022, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.22188401122282783;  // std dev = 5.27e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, J) )
%   | then return -0.07324622576333682;  // std dev = 7.15e-09, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
%   | else return -0.07324622576333698;  // std dev = 9.31e-10, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.16349964517252397;  // std dev = 0.072, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.08798725658970162;  // std dev = 0.957, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.1814346058158918;  // std dev = 0.072, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.16392467451430792;  // std dev = 0.043, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return -7.910692954048726E-4;  // std dev = 1.239, 12.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=10 */
%   | | | else return 0.20166715148323097;  // std dev = 0.103, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.15454480620314592;  // std dev = 0.030, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.18594078643681833;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else return -0.06842697784420276;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.14023997858292553;  // std dev = 0.022, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.15087735290265936;  // std dev = 0.015, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | | then return 0.16478948964211435;  // std dev = 0.066, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.14298732400640007;  // std dev = 0.057, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.15449328179480987;  // std dev = 0.039, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.1982039792662856;  // std dev = 0.056, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.1354246934332704;  // std dev = 0.027, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.15463810897183988;  // std dev = 0.014, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.06419184008202625;  // std dev = 2.28e-09, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
Inference time using transfer learning 13.713483333587646
Refined model CLL: -0.092613


******************************************
Best model found
******************************************
Results 

CLL : -0.087429 

AUC ROC : 0.993771 

AUC PR : 0.33603 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 57.43759226799011 

Total Inference Time : 10.670118570327759 

Total revision time: 84.013338804245
Best scored revision CLL: -0.092574


Results 

CLL : -0.087429 

AUC ROC : 0.993771 

AUC PR : 0.33603 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 84.03107929229736 

Total Inference Time : 10.670118570327759 

Run: 2

 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.478862047195435
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8270930344783917;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004878;  // std dev = 1.26e-07, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7006985383396418;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( tweets(D, E) )
%   | then return -0.12544463852839202;  // std dev = 0.000, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5487670655497072;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then return -0.11231637819360649;  // std dev = 2.11e-08, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | | else return -0.11231637819360628;  // std dev = 5.58e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.3937036878909604;  // std dev = 2.194, 133.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=128 */
%   | else return -0.10159632948783663;  // std dev = 0.000, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4312976728533649;  // std dev = 1.18e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.10159632948783631;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | | else return -0.1015963294878363;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.32429739775349015;  // std dev = 1.404, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926049;  // std dev = 1.25e-07, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
%   | | else return -0.092691276189261;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24372690598889898;  // std dev = 1.973, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.18e-09, 333.000 (wgt'ed) examples reached here.  /* #neg=333 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.18059655108057396;  // std dev = 2.590, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 4.21e-08, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1749421340107803;  // std dev = 1.714, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.0732462257633368;  // std dev = 1.17e-07, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15526479988608602;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420276;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
%   | | else return -0.06842697784420262;  // std dev = 2.79e-09, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12846952547320412;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202625;  // std dev = 0.000, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
Inference time using transfer learning 13.14342999458313
Parameter learned model CLL:-0.08744 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.201, 5, 156], 'false,true': [1.26e-07, 307, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(D, E)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 305, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E), follows(A, F)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [2.11e-08, 178, 0], 'false,false,false': [5.58e-08, 104, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)', 'false,true,false': 'tweets(A, H)'}, {'true,true': [2.194, 5, 128], 'true,false': [0.0, 291, 0], 'false,true,true': [1.18e-08, 0, 28], 'false,true,false,true': [0.0, 41, 0], 'false,true,false,false': [0.0, 20, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.404, 2, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.25e-07, 251, 0], 'false,false,false': [0.0, 46, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.973, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.18e-09, 333, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.59, 7, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.21e-08, 295, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F), tweets(A, G)'}, {'true,true': [1.714, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.17e-07, 254, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 52, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 253, 0], 'false,false,false': [2.79e-09, 66, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 215, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 78, 0]}]
{'': [0.030091431657735174, 5.207560766971418e-17], 'false': [5.207560766971418e-17, nan]}
{'': [0.024374999999998082, -8.736181177378281e-17], 'false': [-8.736181177378281e-17, nan]}
{'': [0.018511925952296157, -1.0393577251809976e-16], 'false': [nan, -1.0393577251809976e-16], 'false,false': [2.494883201404846e-18, 2.9890619893754213e-17]}
{'': [0.06416319345985372, 0.0612335612024911], 'true': [0.03618067725705133, -5.341279156272231e-17], 'false': [0.0612335612024911, nan], 'false,true': [9.516197353929913e-17, 2.7300566179307128e-17], 'false,true,false': [-4.06179155350667e-18, -1.1102230246251566e-17]}
{'': [0.01247066981967836, 9.420074148334662e-17], 'true': [0.01247066981967836, nan], 'false': [nan, 9.420074148334662e-17], 'false,false': [6.192479021813622e-17, -1.9308226515220113e-17], 'false,false,true': [nan, 6.192479021813622e-17]}
{'': [0.024318516081681528, 3.867443569264809e-17], 'false': [nan, 3.867443569264809e-17], 'false,false': [nan, 3.867443569264809e-17]}
{'': [0.04116344240799095, 6.021548608136442e-18], 'false': [nan, 6.021548608136442e-18], 'false,false': [nan, 6.021548608136442e-18], 'false,false,false': [6.021548608136442e-18, nan]}
{'': [0.01847811523433385, 2.9751074516098965e-17], 'true': [0.01847811523433385, nan], 'false': [5.419986419429898e-17, -1.2810265668751807e-17], 'false,false': [nan, -1.2810265668751807e-17]}
{'': [0.012478579473947959, -6.891039463190627e-17], 'false': [nan, -6.891039463190627e-17], 'false,false': [-8.776466597827324e-19, 7.569702440626067e-18], 'false,false,true': [nan, -8.776466597827324e-19]}
{'': [0.018483991801442314, 4.0165065054698496e-17], 'false': [-5.163828021512356e-19, -9.963539964584738e-18], 'false,false': [nan, -9.963539964584738e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E), follows(A, F).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
3;false,false;tweets(A, H).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 39.62107181549072
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(A, F) )
%   | | | then return 0.8278459047964823;  // std dev = 1.393, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.8581489350995117;  // std dev = 2.38e-07, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else return -0.14185106490048793;  // std dev = 0.000, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( tweets(E, D), recursion_accounttype(F, B) )
%   | | | then return 0.6929478600031381;  // std dev = 1.711, 94.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=91 */
%   | | | else return 0.38816515693512627;  // std dev = 0.812, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(G, A), tweets(G, D) )
%   | | | then return 0.5597129152514365;  // std dev = 1.557, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | | else return 0.7393658939518317;  // std dev = 0.064, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.7275165129067455;  // std dev = 0.063, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.12544463852839205;  // std dev = 0.000, 320.000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.5081738835513606;  // std dev = 1.940, 59.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=55 */
%   | | | else return 0.5674174306433468;  // std dev = 0.031, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.569845636305127;  // std dev = 0.153, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5682863626162902;  // std dev = 0.117, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.5070950925798205;  // std dev = 0.976, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.26595126909379924;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5008457590111356;  // std dev = 0.962, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else if ( tweets(A, K), follows(A, L) )
%   | then return -0.11231637819360658;  // std dev = 0.000, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else return -0.11231637819360614;  // std dev = 4.21e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), tweets(A, F) )
%   | | then if ( follows(G, E) )
%   | | | then return 0.37545752737239435;  // std dev = 2.194, 79.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=74 */
%   | | | else return 0.08750728578479101;  // std dev = 0.817, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.427551432162947;  // std dev = 0.157, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.5062331131058169;  // std dev = 0.056, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
%   else if ( recursion_accounttype(J, B) )
%   | then if ( follows(K, A), recursion_accounttype(K, B) )
%   | | then return 0.40082518858834065;  // std dev = 0.241, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( tweets(A, L) )
%   | | | then return 0.43140872593062873;  // std dev = 0.024, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.44912703695112133;  // std dev = 0.016, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783626;  // std dev = 3.23e-09, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(D, E), recursion_accounttype(D, B) )
%   | | | then return 0.30466062677544503;  // std dev = 1.378, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.34431718965944486;  // std dev = 0.118, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(A, F), follows(F, D) )
%   | | | then return 0.22931122922437455;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.1368687993851672;  // std dev = 0.791, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then if ( tweets(I, H), follows(I, G) )
%   | | | then return 0.3696495135308521;  // std dev = 0.116, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.3995895459397801;  // std dev = 0.000678, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.3464298009491917;  // std dev = 0.157, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.33051898769756033;  // std dev = 0.069, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else return -0.09269127618926047;  // std dev = 9.22e-09, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.26643320745464716;  // std dev = 0.993, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | | else return -0.034589653884455895;  // std dev = 0.834, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.056019905889208764;  // std dev = 1.198, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.2570005866135373;  // std dev = 0.043, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.2659599350539703;  // std dev = 0.077, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.33331926509955434;  // std dev = 0.044, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2780122083816284;  // std dev = 0.064, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( tweets(A, J) )
%   | then return -0.08518475138839678;  // std dev = 5.82e-09, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
%   | else return -0.08518475138839679;  // std dev = 2.08e-09, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(A, F), follows(G, D) )
%   | | | then return 0.23388187184632062;  // std dev = 0.099, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.24226662567363816;  // std dev = 0.084, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, H), follows(H, A) )
%   | | | then return 0.2262628144689208;  // std dev = 0.018, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.21322886979718267;  // std dev = 0.013, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, I), tweets(A, J) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.247830257778785;  // std dev = 0.184, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.185821073223515;  // std dev = 0.992, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return -0.22254652164200703;  // std dev = 0.914, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.11844855066032332;  // std dev = 1.636, 31.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=28 */
%   else return -0.07877675473109143;  // std dev = 1.61e-09, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), tweets(A, F) )
%   | | | then return 0.19614965068133822;  // std dev = 0.052, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return 0.18750996529437977;  // std dev = 0.017, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0.05641533961816433;  // std dev = 1.331, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return 0.18377146952802148;  // std dev = 0.001, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, H) )
%   | | | then return 0.20107798334176583;  // std dev = 0.131, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.26852419375217484;  // std dev = 0.066, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.18718686741138058;  // std dev = 0.064, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.1997376888627291;  // std dev = 0.074, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else return -0.07324622576333707;  // std dev = 4.37e-09, 335.000 (wgt'ed) examples reached here.  /* #neg=335 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.165803789034336;  // std dev = 0.016, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.05646517804243158;  // std dev = 0.896, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0.17886466962816722;  // std dev = 0.118, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.1661071206302384;  // std dev = 0.054, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.11236125346224893;  // std dev = 0.985, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.12313365411519779;  // std dev = 0.773, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, K), follows(K, A) )
%   | | | then return 0.09966134941958214;  // std dev = 0.942, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.1690652535669391;  // std dev = 0.114, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else return -0.0684269778442029;  // std dev = 0.000, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | | then return 0.14779164416887317;  // std dev = 0.062, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.11547053352713317;  // std dev = 0.987, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else if ( follows(A, D), tweets(A, F) )
%   | | | then return 0.09661233788731668;  // std dev = 0.979, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.3192843336435071;  // std dev = 1.228, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.16659535431149317;  // std dev = 0.042, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, H), tweets(A, I) )
%   | | | then return 0.15449857715278972;  // std dev = 0.097, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.14329898065104604;  // std dev = 0.033, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   else if ( tweets(A, J) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
Inference time using transfer learning 8.119056224822998
Refined model CLL: -0.085044


******************************************
Best model found
******************************************
Results 

CLL : -0.090858 

AUC ROC : 0.993867 

AUC PR : 0.392347 

Precision : 0.331565 

Recall : 0.992063 

F1 : 0.497018 

Total Learning Time : 39.62107181549072 

Total Inference Time : 10.829957723617554 

Total revision time: 76.84111881256104
Best scored revision CLL: -0.085044


Results 

CLL : -0.090858 

AUC ROC : 0.993867 

AUC PR : 0.392347 

Precision : 0.331565 

Recall : 0.992063 

F1 : 0.497018 

Total Learning Time : 76.85951638221741 

Total Inference Time : 10.829957723617554 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.5073158740997314
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8425239350995104;  // std dev = 1.403, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048813;  // std dev = 0.000, 263.000 (wgt'ed) examples reached here.  /* #neg=263 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.699360372847024;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( tweets(D, E) )
%   | then return -0.12544463852839194;  // std dev = 0.000, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5485480308871188;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then return -0.11231637819360638;  // std dev = 2.11e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | else return -0.11231637819360618;  // std dev = 2.98e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4112313599932848;  // std dev = 1.402, 120.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=118 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.42789802665995064;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.1015963294878363;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.30044760833585327;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0926912761892606;  // std dev = 8.56e-08, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | | else return -0.09269127618926089;  // std dev = 1.86e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24506846855379597;  // std dev = 1.711, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.89e-09, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1922424837996455;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109144;  // std dev = 5.58e-08, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16070753319326753;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333684;  // std dev = 1.14e-07, 262.000 (wgt'ed) examples reached here.  /* #neg=262 */
%   | else if ( follows(A, F), tweets(A, G) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14456401338847258;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420275;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
%   | | else return -0.0684269778442027;  // std dev = 1.32e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.08884402442057648;  // std dev = 0.237, 134.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=126 */
%   else if ( tweets(A, D) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.06419184008202625;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
Inference time using transfer learning 17.808160305023193
Parameter learned model CLL:-0.092497 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.403, 2, 126], 'false,true': [0.0, 263, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(D, E)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 270, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'tweets(A, E), follows(A, F)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [2.11e-08, 169, 0], 'false,false,false': [2.98e-08, 81, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)', 'false,true,false': 'tweets(A, H)'}, {'true,true': [1.402, 2, 118], 'true,false': [0.0, 231, 0], 'false,true,true': [7.45e-09, 0, 8], 'false,true,false,true': [0.0, 19, 0], 'false,true,false,false': [0.0, 0, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.969, 4, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [8.56e-08, 182, 0], 'false,false,false': [1.86e-09, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.711, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 266, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.58e-08, 260, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F), tweets(A, G)'}, {'true,true': [1.969, 4, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.14e-07, 262, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 26, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 253, 0], 'false,false,false': [1.32e-09, 16, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'tweets(A, D)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.237, 8, 126], 'false,true': [0.0, 206, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 48, 0]}]
{'': [0.015380859375004219, -7.767339792054327e-17], 'false': [-7.767339792054327e-17, nan]}
{'': [0.022714981070850224, -7.237009345704725e-17], 'false': [-7.237009345704725e-17, nan]}
{'': [0.015380859375000222, -9.237055564881302e-17], 'false': [nan, -9.237055564881302e-17], 'false,false': [2.6277468038465243e-18, 1.0965165675310187e-17]}
{'': [0.06477581243505849, 0.0584572970167882], 'true': [0.01638888888888849, -7.497610036429629e-17], 'false': [0.0584572970167882, nan], 'false,true': [5.551115123125783e-17, -1.0225738384705389e-17], 'false,true,false': [-1.0225738384705389e-17, nan]}
{'': [0.02980932208247957, 4.1204153491242925e-17], 'true': [0.02980932208247957, nan], 'false': [nan, 4.1204153491242925e-17], 'false,false': [4.0260834958934247e-17, 2.3129646346357427e-18], 'false,false,true': [nan, 4.0260834958934247e-17]}
{'': [0.02270619346018986, 3.4224920307993546e-17], 'false': [nan, 3.4224920307993546e-17], 'false,false': [nan, 3.4224920307993546e-17]}
{'': [0.029812070647216644, 1.1956247957501686e-17], 'false': [nan, 1.1956247957501686e-17], 'false,false': [nan, 1.1956247957501686e-17], 'false,false,false': [1.1956247957501686e-17, nan]}
{'': [0.029813139032967294, 3.623644594262664e-17], 'true': [0.029813139032967294, nan], 'false': [5.0002411032736055e-17, -4.270088556250602e-18], 'false,false': [nan, -4.270088556250602e-18]}
{'': [0.02270861186973532, -2.5588783467196916e-17], 'false': [nan, -2.5588783467196916e-17], 'false,false': [-9.654113257610057e-18, 1.734723475976807e-18], 'false,false,true': [nan, -9.654113257610057e-18]}
{'': [0.05621092104725188, 6.993530863780514e-18], 'false': [-2.1557728633498183e-18, -2.3129646346357427e-18], 'false,false': [nan, -2.3129646346357427e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;false;tweets(A, E), follows(A, F).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
9;false;tweets(A, D).;true;true


Refining candidate
***************************
Model training time 74.14597463607788
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | | then return 0.8164822684328454;  // std dev = 1.384, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | | | else return 0.8581489350995116;  // std dev = 2.67e-07, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.7152917922423694;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.14185106490048838;  // std dev = 0.000, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(A, E) )
%   | | then if ( recursion_accounttype(D, B), follows(E, A) )
%   | | | then return 0.6774091919641452;  // std dev = 1.691, 63.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=60 */
%   | | | else return 0.7248273560825823;  // std dev = 0.085, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.5662681999846743;  // std dev = 1.302, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.7364021920649195;  // std dev = 0.072, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   else return -0.12544463852839174;  // std dev = 0.000, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(D, E), recursion_accounttype(D, B) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.5292957700025118;  // std dev = 1.694, 71.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=68 */
%   | | | else return 0.2794889580166368;  // std dev = 1.176, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.5744528744806928;  // std dev = 0.152, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return 0.44007120307401687;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( tweets(A, G), follows(A, H) )
%   | then return -0.11231637819360644;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | else return -0.11231637819360617;  // std dev = 3.16e-08, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.4392087460464681;  // std dev = 0.078, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | | else return 0.31407218954721966;  // std dev = 1.328, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.32850571867455347;  // std dev = 1.899, 38.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=34 */
%   | | | else return 0.4567109649900215;  // std dev = 0.067, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.44161201541210765;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783626;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.338764059256933;  // std dev = 0.050, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.37413337507575933;  // std dev = 0.055, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.07326158345340573;  // std dev = 1.441, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return 0.3005820730374236;  // std dev = 1.012, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.3710279469852087;  // std dev = 0.040, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.34848278991670434;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.34775233608592315;  // std dev = 0.094, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.3398348217011932;  // std dev = 0.083, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.09269127618926046;  // std dev = 9.13e-09, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.25112546583827255;  // std dev = 0.991, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | | | else return 0.09149194539984822;  // std dev = 0.831, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.3184872808110108;  // std dev = 0.151, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.28191994949989774;  // std dev = 0.083, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return -0.034885893300133884;  // std dev = 1.154, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.17000775785807243;  // std dev = 0.935, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.26874383941540425;  // std dev = 0.014, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, J) )
%   | then return -0.08518475138839678;  // std dev = 5.27e-09, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else return -0.08518475138839679;  // std dev = 2.63e-09, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.22342688692346688;  // std dev = 0.056, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.21544571893934494;  // std dev = 0.012, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return -0.07060400838581668;  // std dev = 1.584, 13.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=9 */
%   | | | else return 0.20714191907534274;  // std dev = 0.868, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.30010618058088384;  // std dev = 0.063, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.23975855034288154;  // std dev = 0.051, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.22256090274259202;  // std dev = 0.020, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, J) )
%   | then return -0.07877675473109146;  // std dev = 4.27e-09, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | else return -0.07877675473109172;  // std dev = 1.32e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(D, E) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.1870732419997801;  // std dev = 0.049, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.1812585724981382;  // std dev = 0.010, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else if ( follows(F, A), follows(A, F) )
%   | | | then return 0.2180155793748763;  // std dev = 0.031, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.19264272405921415;  // std dev = 0.067, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), tweets(G, H) )
%   | | | then return -0.07913130427652405;  // std dev = 1.336, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.23429534032369717;  // std dev = 0.067, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(I, A), tweets(I, J) )
%   | | | then return 0.20797779942514968;  // std dev = 0.124, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.13781582742354406;  // std dev = 0.981, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   else return -0.07324622576333695;  // std dev = 5.96e-09, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(D, E), tweets(D, F) )
%   | | | then return 0.11922596835839157;  // std dev = 1.581, 63.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=60 */
%   | | | else return 0.18606626708015458;  // std dev = 0.132, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.02178289171110006;  // std dev = 0.937, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(H, I) )
%   | | | then return 0.18177542846290062;  // std dev = 0.107, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.16541306869681707;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.16680554120072763;  // std dev = 0.047, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.16158617290381064;  // std dev = 0.002, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, L) )
%   | then return -0.06842697784420265;  // std dev = 2.79e-09, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | else return -0.06842697784420272;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(G, E) )
%   | | | then return 0.14399630124178425;  // std dev = 0.052, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | | else return 0.157489792404829;  // std dev = 0.043, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.2163814692368354;  // std dev = 0.080, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.15633496629722535;  // std dev = 0.092, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( follows(J, A), follows(I, J) )
%   | | | then return 0.14026109909116238;  // std dev = 0.007, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.34384159402965736;  // std dev = 1.582, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | | then return 0.15353894567894508;  // std dev = 0.031, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.14044156594835078;  // std dev = 0.022, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.06419184008202626;  // std dev = 1.32e-09, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
Inference time using transfer learning 16.917122840881348
Refined model CLL: -0.089935


******************************************
Best model found
******************************************
Results 

CLL : -0.084407 

AUC ROC : 0.996046 

AUC PR : 0.464303 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 74.14597463607788 

Total Inference Time : 11.112159252166748 

Total revision time: 102.29272532463074
Best scored revision CLL: -0.089935


Results 

CLL : -0.084407 

AUC ROC : 0.996046 

AUC PR : 0.464303 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 102.31112289428711 

Total Inference Time : 11.112159252166748 

