Starting experiment 4_cora_imdb 

Loading pre-trained trees.
Starting experiments for fasttext using euclidean 

Run: 1

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.612081527709961
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5330971752651394;  // std dev = 10.294, 483.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=326 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048763;  // std dev = 8.43e-08, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1453745781783912;  // std dev = 13.928, 1,024.000 (wgt'ed) examples reached here.  /* #neg=698 #pos=326 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14939272705402523;  // std dev = 13.563, 940.000 (wgt'ed) examples reached here.  /* #neg=614 #pos=326 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11891832369463125;  // std dev = 13.497, 970.000 (wgt'ed) examples reached here.  /* #neg=644 #pos=326 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09144346517960239;  // std dev = 13.534, 984.000 (wgt'ed) examples reached here.  /* #neg=658 #pos=326 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08062308802012996;  // std dev = 13.384, 972.000 (wgt'ed) examples reached here.  /* #neg=646 #pos=326 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07695375757489867;  // std dev = 13.221, 932.000 (wgt'ed) examples reached here.  /* #neg=606 #pos=326 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.04700870642527488;  // std dev = 13.318, 985.000 (wgt'ed) examples reached here.  /* #neg=659 #pos=326 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.29438754836388;  // std dev = 10.550, 495.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22580772123375314;  // std dev = 4.69e-07, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.23748957215060149;  // std dev = 10.338, 485.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18878196504491981;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
Inference time using transfer learning 0.9356679916381836
Parameter learned model CLL:-0.317482 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.294, 157, 326], 'false,true': [0.0, 0, 0], 'false,false': [8.43e-08, 490, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.928, 698, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.563, 614, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.497, 644, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.534, 658, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.384, 646, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.221, 606, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.318, 659, 326], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.55, 169, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [4.69e-07, 467, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.338, 159, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 489, 0]}]
{'': [0.21939311326295133, 1.4500872158369393e-17], 'true': [nan, 0.21939311326295133], 'true,false': [nan, 0.21939311326295133], 'true,false,false': [nan, 0.21939311326295133], 'false': [nan, 1.4500872158369393e-17]}
{'': [nan, 0.1894312978758551], 'false': [nan, 0.1894312978758551]}
{'': [nan, 0.1956859500312876], 'false': [nan, 0.1956859500312876]}
{'': [nan, 0.1878109586998659], 'false': [nan, 0.1878109586998659]}
{'': [nan, 0.18614065882186973], 'false': [nan, 0.18614065882186973]}
{'': [nan, 0.18429556374253112], 'false': [nan, 0.18429556374253112]}
{'': [nan, 0.18753468022485537], 'false': [nan, 0.18753468022485537]}
{'': [nan, 0.18007068211521451], 'false': [0.18007068211521451, nan]}
{'': [0.22485052545658687, 4.71666484123407e-16], 'true': [nan, 0.22485052545658687], 'true,false': [0.22485052545658687, nan], 'false': [nan, 4.71666484123407e-16]}
{'': [0.22035923052396394, -6.3207789377432225e-16], 'true': [nan, 0.22035923052396394], 'true,false': [nan, 0.22035923052396394], 'true,false,false': [nan, 0.22035923052396394], 'false': [nan, -6.3207789377432225e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.7211103439331055
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048818;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.14185106490048766;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839155;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.12544463852839233;  // std dev = 0.000, 601.000 (wgt'ed) examples reached here.  /* #neg=601 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360632;  // std dev = 2.79e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.11231637819360572;  // std dev = 0.000, 556.000 (wgt'ed) examples reached here.  /* #neg=556 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783633;  // std dev = 1.49e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.10159632948783558;  // std dev = 3.42e-07, 596.000 (wgt'ed) examples reached here.  /* #neg=596 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926105;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.09269127618926176;  // std dev = 0.000, 613.000 (wgt'ed) examples reached here.  /* #neg=613 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 1.83e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.08518475138839678;  // std dev = 1.43e-07, 587.000 (wgt'ed) examples reached here.  /* #neg=587 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109177;  // std dev = 1.05e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.07877675473109229;  // std dev = 0.000, 554.000 (wgt'ed) examples reached here.  /* #neg=554 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.07324622576333695;  // std dev = 1.40e-07, 580.000 (wgt'ed) examples reached here.  /* #neg=580 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420261;  // std dev = 5.05e-08, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   else return -0.0684269778442035;  // std dev = 0.000, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   else return -0.06419184008202547;  // std dev = 2.25e-07, 452.000 (wgt'ed) examples reached here.  /* #neg=452 */
Inference time using transfer learning 0.9478657245635986
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.7211103439331055 

Total Inference Time : 1.3309683799743652 

Total revision time: 7.256618499755859
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.26845908164978 

Total Inference Time : 1.3309683799743652 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.6740031242370605
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.49219981572573107;  // std dev = 10.889, 511.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=324 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048766;  // std dev = 4.21e-08, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1647805924698985;  // std dev = 13.761, 970.000 (wgt'ed) examples reached here.  /* #neg=646 #pos=324 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14061080369102696;  // std dev = 13.661, 971.000 (wgt'ed) examples reached here.  /* #neg=647 #pos=324 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1256352038983877;  // std dev = 13.520, 941.000 (wgt'ed) examples reached here.  /* #neg=617 #pos=324 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08950426213737421;  // std dev = 13.605, 987.000 (wgt'ed) examples reached here.  /* #neg=663 #pos=324 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06766479517466213;  // std dev = 13.618, 1,005.000 (wgt'ed) examples reached here.  /* #neg=681 #pos=324 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06991254499232555;  // std dev = 13.370, 966.000 (wgt'ed) examples reached here.  /* #neg=642 #pos=324 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.06725143209156681;  // std dev = 13.261, 920.000 (wgt'ed) examples reached here.  /* #neg=596 #pos=324 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2671114087481271;  // std dev = 11.016, 518.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22855448295463957;  // std dev = 7.44e-07, 446.000 (wgt'ed) examples reached here.  /* #neg=446 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21223638881263227;  // std dev = 10.889, 511.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.19076517591219436;  // std dev = 4.09e-07, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
Inference time using transfer learning 1.0412359237670898
Parameter learned model CLL:-0.313442 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.889, 187, 324], 'false,true': [0.0, 0, 0], 'false,false': [4.21e-08, 492, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.761, 646, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.661, 647, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.52, 617, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.605, 663, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.618, 681, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.37, 642, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.261, 596, 324], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.016, 194, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [7.44e-07, 446, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.889, 187, 324], 'false,true': [0.0, 0, 0], 'false,false': [4.09e-07, 486, 0]}]
{'': [0.23203036140333672, 3.6104813808948184e-18], 'true': [nan, 0.23203036140333672], 'true,false': [nan, 0.23203036140333672], 'true,false,false': [nan, 0.23203036140333672], 'false': [nan, 3.6104813808948184e-18]}
{'': [nan, 0.19522426256144298], 'false': [nan, 0.19522426256144298]}
{'': [nan, 0.19219318379318212], 'false': [nan, 0.19219318379318212]}
{'': [nan, 0.19425089669539533], 'false': [nan, 0.19425089669539533]}
{'': [nan, 0.18753553638916598], 'false': [nan, 0.18753553638916598]}
{'': [nan, 0.18453383578025276], 'false': [nan, 0.18453383578025276]}
{'': [nan, 0.1850582889780078], 'false': [nan, 0.1850582889780078]}
{'': [nan, 0.1911529370318918], 'false': [0.1911529370318918, nan]}
{'': [0.23425411070198096, 1.2426532150064533e-15], 'true': [nan, 0.23425411070198096], 'true,false': [0.23425411070198096, nan], 'false': [nan, 1.2426532150064533e-15]}
{'': [0.23203036140333688, 3.4357519115971924e-16], 'true': [nan, 0.23203036140333688], 'true,false': [nan, 0.23203036140333688], 'true,false,false': [nan, 0.23203036140333688], 'false': [nan, 3.4357519115971924e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.809227228164673
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048804;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   else return -0.14185106490048718;  // std dev = 2.98e-07, 448.000 (wgt'ed) examples reached here.  /* #neg=448 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.12544463852839158;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.12544463852839233;  // std dev = 0.000, 593.000 (wgt'ed) examples reached here.  /* #neg=593 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360649;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   else return -0.11231637819360578;  // std dev = 0.000, 609.000 (wgt'ed) examples reached here.  /* #neg=609 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783619;  // std dev = 4.59e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.10159632948783545;  // std dev = 3.72e-07, 612.000 (wgt'ed) examples reached here.  /* #neg=612 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926105;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.09269127618926178;  // std dev = 0.000, 620.000 (wgt'ed) examples reached here.  /* #neg=620 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839685;  // std dev = 2.98e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.08518475138839679;  // std dev = 1.49e-07, 569.000 (wgt'ed) examples reached here.  /* #neg=569 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109175;  // std dev = 1.97e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.0787767547310924;  // std dev = 0.000, 596.000 (wgt'ed) examples reached here.  /* #neg=596 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.07324622576333681;  // std dev = 1.88e-07, 631.000 (wgt'ed) examples reached here.  /* #neg=631 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420262;  // std dev = 3.80e-08, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.06842697784420358;  // std dev = 0.000, 518.000 (wgt'ed) examples reached here.  /* #neg=518 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202622;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.06419184008202543;  // std dev = 2.35e-07, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
Inference time using transfer learning 0.9659934043884277
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.809227228164673 

Total Inference Time : 1.351374626159668 

Total revision time: 7.436055421829224
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.4478960037231445 

Total Inference Time : 1.351374626159668 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.3264884948730469
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5314162618321817;  // std dev = 8.164, 303.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=204 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048793;  // std dev = 0.000, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15701562529493368;  // std dev = 10.908, 619.000 (wgt'ed) examples reached here.  /* #neg=415 #pos=204 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11478757295939353;  // std dev = 10.995, 661.000 (wgt'ed) examples reached here.  /* #neg=457 #pos=204 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11338304858894636;  // std dev = 10.826, 616.000 (wgt'ed) examples reached here.  /* #neg=412 #pos=204 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08519439547775504;  // std dev = 10.816, 642.000 (wgt'ed) examples reached here.  /* #neg=438 #pos=204 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07047059625656393;  // std dev = 10.801, 634.000 (wgt'ed) examples reached here.  /* #neg=430 #pos=204 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05348171277774247;  // std dev = 10.809, 641.000 (wgt'ed) examples reached here.  /* #neg=437 #pos=204 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.055849530242386425;  // std dev = 10.653, 618.000 (wgt'ed) examples reached here.  /* #neg=414 #pos=204 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.29747389969164145;  // std dev = 8.479, 315.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.21557051969345048;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.27107566321494975;  // std dev = 7.933, 295.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1813483184284853;  // std dev = 3.58e-07, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
Inference time using transfer learning 1.029235601425171
Parameter learned model CLL:-0.315325 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.164, 99, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 286, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.908, 415, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.995, 457, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.826, 412, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.816, 438, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.801, 430, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.809, 437, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [10.653, 414, 204], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.479, 111, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 283, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [7.933, 91, 204], 'false,true': [0.0, 0, 0], 'false,false': [3.58e-07, 314, 0]}]
{'': [0.2199784334869177, -9.316556850001314e-18], 'true': [nan, 0.2199784334869177], 'true,false': [nan, 0.2199784334869177], 'true,false,false': [nan, 0.2199784334869177], 'false': [nan, -9.316556850001314e-18]}
{'': [nan, 0.19221599526838312], 'false': [nan, 0.19221599526838312]}
{'': [nan, 0.18289637503620837], 'false': [nan, 0.18289637503620837]}
{'': [nan, 0.1902687833199627], 'false': [nan, 0.1902687833199627]}
{'': [nan, 0.18221386752319446], 'false': [nan, 0.18221386752319446]}
{'': [nan, 0.18400837936651115], 'false': [nan, 0.18400837936651115]}
{'': [nan, 0.1822797216249358], 'false': [nan, 0.1822797216249358]}
{'': [nan, 0.1836463974816604], 'false': [0.1836463974816604, nan]}
{'': [0.22820861678004647, -3.0129020597601423e-16], 'true': [nan, 0.22820861678004647], 'true,false': [0.22820861678004647, nan], 'false': [nan, -3.0129020597601423e-16]}
{'': [0.21331801206549408, 4.073174918370001e-16], 'true': [nan, 0.21331801206549408], 'true,false': [nan, 0.21331801206549408], 'true,false,false': [nan, 0.21331801206549408], 'false': [nan, 4.073174918370001e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.4216856956481934
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.14185106490048766;  // std dev = 8.16e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   else return -0.14185106490048788;  // std dev = 5.96e-08, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.12544463852839222;  // std dev = 0.000, 399.000 (wgt'ed) examples reached here.  /* #neg=399 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.11231637819360635;  // std dev = 1.67e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.11231637819360649;  // std dev = 0.000, 372.000 (wgt'ed) examples reached here.  /* #neg=372 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.10159632948783624;  // std dev = 1.19e-07, 385.000 (wgt'ed) examples reached here.  /* #neg=385 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.09269127618926094;  // std dev = 9.13e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.09269127618926087;  // std dev = 1.48e-07, 401.000 (wgt'ed) examples reached here.  /* #neg=401 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.08518475138839683;  // std dev = 1.49e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.08518475138839678;  // std dev = 1.13e-07, 386.000 (wgt'ed) examples reached here.  /* #neg=386 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.07877675473109144;  // std dev = 5.16e-08, 366.000 (wgt'ed) examples reached here.  /* #neg=366 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.0732462257633372;  // std dev = 3.65e-08, 393.000 (wgt'ed) examples reached here.  /* #neg=393 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06842697784420261;  // std dev = 7.45e-09, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06842697784420301;  // std dev = 0.000, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06419184008202626;  // std dev = 0.000, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | else return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06419184008202602;  // std dev = 9.77e-08, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
Inference time using transfer learning 1.0146498680114746
Refined model CLL: -0.063595


******************************************
Best model found
******************************************
Results 

CLL : -0.066318 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.4216856956481934 

Total Inference Time : 1.5228824615478516 

Total revision time: 6.833132743835449
Best scored revision CLL: -0.063595


Results 

CLL : -0.066318 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 6.84497332572937 

Total Inference Time : 1.5228824615478516 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.6772842407226562
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.502508399726659;  // std dev = 10.948, 523.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=337 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048752;  // std dev = 1.69e-07, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1781069817913122;  // std dev = 13.850, 966.000 (wgt'ed) examples reached here.  /* #neg=629 #pos=337 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12933654112699744;  // std dev = 14.023, 1,031.000 (wgt'ed) examples reached here.  /* #neg=694 #pos=337 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12523497505514308;  // std dev = 13.730, 982.000 (wgt'ed) examples reached here.  /* #neg=645 #pos=337 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10546846263485175;  // std dev = 13.626, 977.000 (wgt'ed) examples reached here.  /* #neg=640 #pos=337 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07131079587499699;  // std dev = 13.754, 1,020.000 (wgt'ed) examples reached here.  /* #neg=683 #pos=337 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06099599699472334;  // std dev = 13.659, 1,013.000 (wgt'ed) examples reached here.  /* #neg=676 #pos=337 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.04941361116116024;  // std dev = 13.622, 1,011.000 (wgt'ed) examples reached here.  /* #neg=674 #pos=337 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.31452055997095296;  // std dev = 10.482, 500.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22758754459067998;  // std dev = 5.53e-07, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.22231916836208102;  // std dev = 10.753, 513.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.19006756061943997;  // std dev = 3.91e-07, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
Inference time using transfer learning 0.8235914707183838
Parameter learned model CLL:-0.3167 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.948, 186, 337], 'false,true': [0.0, 0, 0], 'false,false': [1.69e-07, 480, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.85, 629, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.023, 694, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.73, 645, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.626, 640, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.754, 683, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.659, 676, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.622, 674, 337], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.482, 163, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.53e-07, 512, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.753, 176, 337], 'false,true': [0.0, 0, 0], 'false,false': [3.91e-07, 504, 0]}]
{'': [0.22916034497256488, 5.921189464667501e-17], 'true': [nan, 0.22916034497256488], 'true,false': [nan, 0.22916034497256488], 'true,false,false': [nan, 0.22916034497256488], 'false': [nan, 5.921189464667501e-17]}
{'': [nan, 0.1985597578931788], 'false': [nan, 0.1985597578931788]}
{'': [nan, 0.19074534745004892], 'false': [nan, 0.19074534745004892]}
{'': [nan, 0.19195473927320134], 'false': [nan, 0.19195473927320134]}
{'': [nan, 0.19004322203114002], 'false': [nan, 0.19004322203114002]}
{'': [nan, 0.1854726258566241], 'false': [nan, 0.1854726258566241]}
{'': [nan, 0.18417469985770943], 'false': [nan, 0.18417469985770943]}
{'': [nan, 0.18355112564710532], 'false': [0.18355112564710532, nan]}
{'': [0.21972400000000267, 5.967448757360216e-16], 'true': [nan, 0.21972400000000267], 'true,false': [0.21972400000000267, nan], 'false': [nan, 5.967448757360216e-16]}
{'': [0.22537608912903886, 3.031085083103602e-16], 'true': [nan, 0.22537608912903886], 'true,false': [nan, 0.22537608912903886], 'true,false,false': [nan, 0.22537608912903886], 'false': [nan, 3.031085083103602e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.97031307220459
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1418510649004883;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else return -0.14185106490048782;  // std dev = 0.000, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1254446385283912;  // std dev = 5.58e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.12544463852839233;  // std dev = 0.000, 608.000 (wgt'ed) examples reached here.  /* #neg=608 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360632;  // std dev = 2.79e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.11231637819360588;  // std dev = 0.000, 613.000 (wgt'ed) examples reached here.  /* #neg=613 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783624;  // std dev = 3.65e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.10159632948783538;  // std dev = 3.84e-07, 611.000 (wgt'ed) examples reached here.  /* #neg=611 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.09269127618926189;  // std dev = 0.000, 654.000 (wgt'ed) examples reached here.  /* #neg=654 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 1.83e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.08518475138839678;  // std dev = 1.55e-07, 634.000 (wgt'ed) examples reached here.  /* #neg=634 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.07877675473109248;  // std dev = 0.000, 612.000 (wgt'ed) examples reached here.  /* #neg=612 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 7.45e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.07324622576333696;  // std dev = 1.40e-07, 577.000 (wgt'ed) examples reached here.  /* #neg=577 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420261;  // std dev = 3.49e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.06842697784420358;  // std dev = 0.000, 519.000 (wgt'ed) examples reached here.  /* #neg=519 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.06419184008202537;  // std dev = 2.43e-07, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
Inference time using transfer learning 0.7844743728637695
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.97031307220459 

Total Inference Time : 1.8198363780975342 

Total revision time: 8.08212924003601
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.093969821929932 

Total Inference Time : 1.8198363780975342 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.7802386283874512
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5294636761353646;  // std dev = 10.525, 502.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=337 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048754;  // std dev = 1.40e-07, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.17514115808852382;  // std dev = 13.826, 964.000 (wgt'ed) examples reached here.  /* #neg=627 #pos=337 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1254807872724512;  // std dev = 13.974, 1,043.000 (wgt'ed) examples reached here.  /* #neg=706 #pos=337 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1284091731768967;  // std dev = 13.609, 971.000 (wgt'ed) examples reached here.  /* #neg=634 #pos=337 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08032747431657103;  // std dev = 13.875, 1,043.000 (wgt'ed) examples reached here.  /* #neg=706 #pos=337 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07130464381811243;  // std dev = 13.747, 1,027.000 (wgt'ed) examples reached here.  /* #neg=690 #pos=337 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06475515673423711;  // std dev = 13.606, 1,008.000 (wgt'ed) examples reached here.  /* #neg=671 #pos=337 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.04724530789262928;  // std dev = 13.649, 1,018.000 (wgt'ed) examples reached here.  /* #neg=681 #pos=337 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.26813827146732;  // std dev = 11.203, 537.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.2228408417748673;  // std dev = 0.000, 536.000 (wgt'ed) examples reached here.  /* #neg=536 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21750482857077452;  // std dev = 11.004, 526.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18663453246408826;  // std dev = 4.77e-07, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
Inference time using transfer learning 0.8342258930206299
Parameter learned model CLL:-0.310401 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.525, 165, 337], 'false,true': [0.0, 0, 0], 'false,false': [1.4e-07, 484, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.826, 627, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.974, 706, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.609, 634, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.875, 706, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.747, 690, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.606, 671, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.649, 681, 337], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.203, 200, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 536, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.004, 189, 337], 'false,true': [0.0, 0, 0], 'false,false': [4.77e-07, 481, 0]}]
{'': [0.22065125950382006, 4.0371746350005693e-17], 'true': [nan, 0.22065125950382006], 'true,false': [nan, 0.22065125950382006], 'true,false,false': [nan, 0.22065125950382006], 'false': [nan, 4.0371746350005693e-17]}
{'': [nan, 0.19829869665276295], 'false': [nan, 0.19829869665276295]}
{'': [nan, 0.1872111312972616], 'false': [nan, 0.1872111312972616]}
{'': [nan, 0.19074136916555565], 'false': [nan, 0.19074136916555565]}
{'': [nan, 0.184582956872337], 'false': [nan, 0.184582956872337]}
{'': [nan, 0.1840140522890803], 'false': [nan, 0.1840140522890803]}
{'': [nan, 0.18365556647993475], 'false': [nan, 0.18365556647993475]}
{'': [nan, 0.18300984923052627], 'false': [0.18300984923052627, nan]}
{'': [0.23372831337626565, -5.70024955926946e-16], 'true': [nan, 0.23372831337626565], 'true,false': [0.23372831337626565, nan], 'false': [nan, -5.70024955926946e-16]}
{'': [0.23020789660107963, 4.727103439568234e-16], 'true': [nan, 0.23020789660107963], 'true,false': [nan, 0.23020789660107963], 'true,false,false': [nan, 0.23020789660107963], 'false': [nan, 4.727103439568234e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.8871049880981445
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048818;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.1418510649004877;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839124;  // std dev = 4.59e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.1254446385283923;  // std dev = 0.000, 586.000 (wgt'ed) examples reached here.  /* #neg=586 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1123163781936063;  // std dev = 3.49e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.11231637819360604;  // std dev = 0.000, 623.000 (wgt'ed) examples reached here.  /* #neg=623 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1015963294878362;  // std dev = 4.47e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.10159632948783524;  // std dev = 4.19e-07, 644.000 (wgt'ed) examples reached here.  /* #neg=644 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.09269127618926191;  // std dev = 0.000, 656.000 (wgt'ed) examples reached here.  /* #neg=656 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839685;  // std dev = 2.98e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.08518475138839678;  // std dev = 1.55e-07, 646.000 (wgt'ed) examples reached here.  /* #neg=646 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109168;  // std dev = 3.49e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else return -0.0787767547310925;  // std dev = 0.000, 621.000 (wgt'ed) examples reached here.  /* #neg=621 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 1.05e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.07324622576333671;  // std dev = 2.12e-07, 634.000 (wgt'ed) examples reached here.  /* #neg=634 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420261;  // std dev = 3.94e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.06842697784420357;  // std dev = 0.000, 516.000 (wgt'ed) examples reached here.  /* #neg=516 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202622;  // std dev = 0.000, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else return -0.06419184008202536;  // std dev = 2.44e-07, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
Inference time using transfer learning 0.8149380683898926
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.8871049880981445 

Total Inference Time : 1.616943120956421 

Total revision time: 7.8280861377716064
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.839926719665527 

Total Inference Time : 1.616943120956421 

Run: 2

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.6890432834625244
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5317026541077725;  // std dev = 10.316, 484.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=326 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16934713285092126;  // std dev = 13.645, 952.000 (wgt'ed) examples reached here.  /* #neg=626 #pos=326 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12611254990617943;  // std dev = 13.778, 1,000.000 (wgt'ed) examples reached here.  /* #neg=674 #pos=326 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11777760264450235;  // std dev = 13.528, 970.000 (wgt'ed) examples reached here.  /* #neg=644 #pos=326 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11298351659887108;  // std dev = 13.295, 919.000 (wgt'ed) examples reached here.  /* #neg=593 #pos=326 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07160180144890953;  // std dev = 13.461, 982.000 (wgt'ed) examples reached here.  /* #neg=656 #pos=326 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07132607454733847;  // std dev = 13.249, 944.000 (wgt'ed) examples reached here.  /* #neg=618 #pos=326 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.034084106631586175;  // std dev = 13.483, 1,017.000 (wgt'ed) examples reached here.  /* #neg=691 #pos=326 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2988811767550344;  // std dev = 10.509, 493.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22467658561928847;  // std dev = 0.000, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.23556021002814123;  // std dev = 10.381, 487.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18796390126611615;  // std dev = 5.72e-07, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
Inference time using transfer learning 1.0189039707183838
Parameter learned model CLL:-0.316378 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.316, 158, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 497, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.645, 626, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.778, 674, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.528, 644, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.295, 593, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.461, 656, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.249, 618, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.483, 691, 326], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.509, 167, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 496, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.381, 161, 326], 'false,true': [0.0, 0, 0], 'false,false': [5.72e-07, 467, 0]}]
{'': [0.21987910661840315, -1.429663452233602e-17], 'true': [nan, 0.21987910661840315], 'true,false': [nan, 0.21987910661840315], 'true,false,false': [nan, 0.21987910661840315], 'false': [nan, -1.429663452233602e-17]}
{'': [nan, 0.19556887271684179], 'false': [nan, 0.19556887271684179]}
{'': [nan, 0.18982742567130992], 'false': [nan, 0.18982742567130992]}
{'': [nan, 0.1886590418934109], 'false': [nan, 0.1886590418934109]}
{'': [nan, 0.19232432443801534], 'false': [nan, 0.19232432443801534]}
{'': [nan, 0.1845287522604065], 'false': [nan, 0.1845287522604065]}
{'': [nan, 0.18593964894841178], 'false': [nan, 0.18593964894841178]}
{'': [nan, 0.17876344208142514], 'false': [0.17876344208142514, nan]}
{'': [0.22399598434883086, -2.506955216895515e-16], 'true': [nan, 0.22399598434883086], 'true,false': [0.22399598434883086, nan], 'false': [nan, -2.506955216895515e-16]}
{'': [0.2213021094662466, 6.998922022476361e-16], 'true': [nan, 0.2213021094662466], 'true,false': [nan, 0.2213021094662466], 'true,false,false': [nan, 0.2213021094662466], 'false': [nan, 6.998922022476361e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.9470748901367188
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048818;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.14185106490048782;  // std dev = 0.000, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839116;  // std dev = 6.66e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.1254446385283923;  // std dev = 0.000, 591.000 (wgt'ed) examples reached here.  /* #neg=591 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1123163781936063;  // std dev = 3.33e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.11231637819360565;  // std dev = 4.21e-08, 596.000 (wgt'ed) examples reached here.  /* #neg=596 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783627;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.10159632948783545;  // std dev = 3.79e-07, 636.000 (wgt'ed) examples reached here.  /* #neg=636 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.09269127618926173;  // std dev = 0.000, 598.000 (wgt'ed) examples reached here.  /* #neg=598 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 1.67e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.08518475138839678;  // std dev = 1.46e-07, 579.000 (wgt'ed) examples reached here.  /* #neg=579 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109175;  // std dev = 2.11e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.07877675473109237;  // std dev = 0.000, 589.000 (wgt'ed) examples reached here.  /* #neg=589 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333704;  // std dev = 1.05e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.07324622576333685;  // std dev = 1.76e-07, 623.000 (wgt'ed) examples reached here.  /* #neg=623 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420261;  // std dev = 3.80e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.06842697784420354;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   else return -0.06419184008202539;  // std dev = 2.43e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
Inference time using transfer learning 0.9621121883392334
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.9470748901367188 

Total Inference Time : 1.4116642475128174 

Total revision time: 7.513507843017578
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.525143384933472 

Total Inference Time : 1.4116642475128174 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.6248939037322998
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5489804916027063;  // std dev = 10.009, 469.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=324 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048743;  // std dev = 1.98e-07, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15966769129209457;  // std dev = 13.649, 975.000 (wgt'ed) examples reached here.  /* #neg=651 #pos=324 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14516470825072358;  // std dev = 13.482, 937.000 (wgt'ed) examples reached here.  /* #neg=613 #pos=324 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11866264276230262;  // std dev = 13.411, 948.000 (wgt'ed) examples reached here.  /* #neg=624 #pos=324 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10069151268899061;  // std dev = 13.294, 942.000 (wgt'ed) examples reached here.  /* #neg=618 #pos=324 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06681357165967797;  // std dev = 13.405, 991.000 (wgt'ed) examples reached here.  /* #neg=667 #pos=324 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.059559048763945244;  // std dev = 13.294, 975.000 (wgt'ed) examples reached here.  /* #neg=651 #pos=324 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.03640470191804726;  // std dev = 13.403, 1,010.000 (wgt'ed) examples reached here.  /* #neg=686 #pos=324 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2777066202800168;  // std dev = 10.795, 506.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22185528989765016;  // std dev = 5.84e-07, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.22830288766499557;  // std dev = 10.539, 493.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18591995310239923;  // std dev = 1.88e-07, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
Inference time using transfer learning 1.04036545753479
Parameter learned model CLL:-0.315194 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.009, 145, 324], 'false,true': [0.0, 0, 0], 'false,false': [1.98e-07, 474, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.649, 651, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.482, 613, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.411, 624, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.294, 618, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.405, 667, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.294, 651, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.403, 686, 324], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.795, 182, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.84e-07, 483, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.539, 169, 324], 'false,true': [0.0, 0, 0], 'false,false': [1.88e-07, 480, 0]}]
{'': [0.21358331704256947, 8.24469419130918e-17], 'true': [nan, 0.21358331704256947], 'true,false': [nan, 0.21358331704256947], 'true,false,false': [nan, 0.21358331704256947], 'false': [nan, 8.24469419130918e-17]}
{'': [nan, 0.191080091127861], 'false': [nan, 0.191080091127861]}
{'': [nan, 0.1939959216469047], 'false': [nan, 0.1939959216469047]}
{'': [nan, 0.18972050878448996], 'false': [nan, 0.18972050878448996]}
{'': [nan, 0.18761852002348484], 'false': [nan, 0.18761852002348484]}
{'': [nan, 0.18133195847877237], 'false': [nan, 0.18133195847877237]}
{'': [nan, 0.18125062326165192], 'false': [nan, 0.18125062326165192]}
{'': [nan, 0.17787169869896632], 'false': [0.17787169869896632, nan]}
{'': [0.2303113624646477, 7.061294268423355e-16], 'true': [nan, 0.2303113624646477], 'true,false': [0.2303113624646477, nan], 'false': [nan, 7.061294268423355e-16]}
{'': [0.22528790490805967, 7.401486830834377e-17], 'true': [nan, 0.22528790490805967], 'true,false': [nan, 0.22528790490805967], 'true,false,false': [nan, 0.22528790490805967], 'false': [nan, 7.401486830834377e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 3.018310070037842
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1418510649004883;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   else return -0.14185106490048774;  // std dev = 0.000, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.12544463852839122;  // std dev = 4.71e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.1254446385283923;  // std dev = 0.000, 593.000 (wgt'ed) examples reached here.  /* #neg=593 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360626;  // std dev = 4.71e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.11231637819360593;  // std dev = 0.000, 565.000 (wgt'ed) examples reached here.  /* #neg=565 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1015963294878362;  // std dev = 4.47e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.10159632948783541;  // std dev = 3.85e-07, 640.000 (wgt'ed) examples reached here.  /* #neg=640 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926172;  // std dev = 0.000, 564.000 (wgt'ed) examples reached here.  /* #neg=564 */
%   else if ( movie(C, A), movie(C, B) )
%   | then if ( actor(A) )
%   | | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | | else return -0.09269127618926097;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839685;  // std dev = 2.98e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.08518475138839678;  // std dev = 1.49e-07, 583.000 (wgt'ed) examples reached here.  /* #neg=583 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.07877675473109255;  // std dev = 0.000, 621.000 (wgt'ed) examples reached here.  /* #neg=621 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333704;  // std dev = 7.45e-09, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.07324622576333706;  // std dev = 9.88e-08, 572.000 (wgt'ed) examples reached here.  /* #neg=572 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420261;  // std dev = 2.58e-08, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.06842697784420353;  // std dev = 0.000, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.06419184008202546;  // std dev = 2.27e-07, 456.000 (wgt'ed) examples reached here.  /* #neg=456 */
Inference time using transfer learning 0.9522838592529297
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 3.018310070037842 

Total Inference Time : 1.3565592765808105 

Total revision time: 7.464238166809082
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.475873708724976 

Total Inference Time : 1.3565592765808105 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.3463222980499268
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.47446313449527877;  // std dev = 8.847, 331.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=204 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048785;  // std dev = 9.88e-08, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14827543690865944;  // std dev = 11.132, 641.000 (wgt'ed) examples reached here.  /* #neg=437 #pos=204 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12906840459356037;  // std dev = 11.034, 639.000 (wgt'ed) examples reached here.  /* #neg=435 #pos=204 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12500173590839;  // std dev = 10.850, 602.000 (wgt'ed) examples reached here.  /* #neg=398 #pos=204 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08768010320777728;  // std dev = 10.927, 637.000 (wgt'ed) examples reached here.  /* #neg=433 #pos=204 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07105245986532491;  // std dev = 10.906, 637.000 (wgt'ed) examples reached here.  /* #neg=433 #pos=204 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08399426294611614;  // std dev = 10.620, 589.000 (wgt'ed) examples reached here.  /* #neg=385 #pos=204 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.05285583490569599;  // std dev = 10.714, 619.000 (wgt'ed) examples reached here.  /* #neg=415 #pos=204 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.29345646208097453;  // std dev = 8.552, 318.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22375389919145747;  // std dev = 1.33e-07, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.17066557186697487;  // std dev = 9.169, 347.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18729599706941252;  // std dev = 0.000, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
Inference time using transfer learning 0.9929497241973877
Parameter learned model CLL:-0.305613 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.847, 127, 204], 'false,true': [0.0, 0, 0], 'false,false': [9.88e-08, 300, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [11.132, 437, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [11.034, 435, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.85, 398, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.927, 433, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.906, 433, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.62, 385, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [10.714, 415, 204], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.552, 114, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.33e-07, 267, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [9.169, 143, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 294, 0]}]
{'': [0.23647100701892537, 3.256654205567126e-17], 'true': [nan, 0.23647100701892537], 'true,false': [nan, 0.23647100701892537], 'true,false,false': [nan, 0.23647100701892537], 'false': [nan, 3.256654205567126e-17]}
{'': [nan, 0.19333561474232322], 'false': [nan, 0.19333561474232322]}
{'': [nan, 0.1905207450419905], 'false': [nan, 0.1905207450419905]}
{'': [nan, 0.19556258045595645], 'false': [nan, 0.19556258045595645]}
{'': [nan, 0.18744808326722237], 'false': [nan, 0.18744808326722237]}
{'': [nan, 0.18673204013973443], 'false': [nan, 0.18673204013973443]}
{'': [nan, 0.19146978810128568], 'false': [nan, 0.19146978810128568]}
{'': [nan, 0.18545248471997886], 'false': [0.18545248471997886, nan]}
{'': [0.22997508009967582, 6.653021870412923e-17], 'true': [nan, 0.22997508009967582], 'true,false': [0.22997508009967582, nan], 'false': [nan, 6.653021870412923e-17]}
{'': [0.24227424860268118, -1.2688263138573217e-16], 'true': [nan, 0.24227424860268118], 'true,false': [nan, 0.24227424860268118], 'true,false,false': [nan, 0.24227424860268118], 'false': [nan, -1.2688263138573217e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.349534273147583
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.14185106490048763;  // std dev = 8.16e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else return -0.1418510649004878;  // std dev = 1.23e-07, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.12585709052110666;  // std dev = 0.155, 376.000 (wgt'ed) examples reached here.  /* #neg=376 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.11231637819360636;  // std dev = 1.29e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.11263327746472776;  // std dev = 0.143, 401.000 (wgt'ed) examples reached here.  /* #neg=401 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.10159632948783631;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.10152977764606341;  // std dev = 0.000, 350.000 (wgt'ed) examples reached here.  /* #neg=350 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.09269127618926097;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else return -0.09298165095682694;  // std dev = 0.124, 360.000 (wgt'ed) examples reached here.  /* #neg=360 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.085110501498495;  // std dev = 1.28e-07, 406.000 (wgt'ed) examples reached here.  /* #neg=406 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.08518475138839683;  // std dev = 1.18e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07877675473109172;  // std dev = 3.73e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.07916286532181287;  // std dev = 0.167, 372.000 (wgt'ed) examples reached here.  /* #neg=372 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.07316035647510187;  // std dev = 8.68e-06, 347.000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.06835185049605214;  // std dev = 2.58e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   else return -0.068356681211035;  // std dev = 0.000309, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06412555102817934;  // std dev = 2.89e-08, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | else return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06412987981605076;  // std dev = 0.000291, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
Inference time using transfer learning 0.971367597579956
Refined model CLL: -0.063823


******************************************
Best model found
******************************************
Results 

CLL : -0.072649 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.349534273147583 

Total Inference Time : 1.317115068435669 

Total revision time: 6.491188049316406
Best scored revision CLL: -0.063823


Results 

CLL : -0.072649 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 6.5028235912323 

Total Inference Time : 1.317115068435669 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.7095279693603516
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.4904191039550426;  // std dev = 11.132, 533.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=337 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048763;  // std dev = 5.96e-08, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15989241440481552;  // std dev = 14.108, 1,022.000 (wgt'ed) examples reached here.  /* #neg=685 #pos=337 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13648909139891882;  // std dev = 14.017, 1,021.000 (wgt'ed) examples reached here.  /* #neg=684 #pos=337 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1246247918738087;  // std dev = 13.809, 992.000 (wgt'ed) examples reached here.  /* #neg=655 #pos=337 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10545297194902141;  // std dev = 13.708, 985.000 (wgt'ed) examples reached here.  /* #neg=648 #pos=337 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07325218771163654;  // std dev = 13.802, 1,026.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=337 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.052326050564963894;  // std dev = 13.844, 1,050.000 (wgt'ed) examples reached here.  /* #neg=713 #pos=337 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.04740377173670696;  // std dev = 13.730, 1,038.000 (wgt'ed) examples reached here.  /* #neg=701 #pos=337 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.315299382485532;  // std dev = 10.588, 505.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.2240168062859889;  // std dev = 7.18e-07, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2391885923684621;  // std dev = 10.609, 506.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18748636214961206;  // std dev = 0.000, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
Inference time using transfer learning 0.8493103981018066
Parameter learned model CLL:-0.313408 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.132, 196, 337], 'false,true': [0.0, 0, 0], 'false,false': [5.96e-08, 491, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.108, 685, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.017, 684, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.809, 655, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.708, 648, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.802, 689, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.844, 713, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.73, 701, 337], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.588, 168, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [7.18e-07, 514, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.609, 169, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 504, 0]}]
{'': [0.23250460243093082, 7.235669406925663e-18], 'true': [nan, 0.23250460243093082], 'true,false': [nan, 0.23250460243093082], 'true,false,false': [nan, 0.23250460243093082], 'false': [nan, 7.235669406925663e-18]}
{'': [nan, 0.19474707091354415], 'false': [nan, 0.19474707091354415]}
{'': [nan, 0.19244465224447982], 'false': [nan, 0.19244465224447982]}
{'': [nan, 0.19221674241931], 'false': [nan, 0.19221674241931]}
{'': [nan, 0.1907693380963203], 'false': [nan, 0.1907693380963203]}
{'': [nan, 0.18567989170122112], 'false': [nan, 0.18567989170122112]}
{'': [nan, 0.18253451287460695], 'false': [nan, 0.18253451287460695]}
{'': [nan, 0.18160882514060667], 'false': [0.18160882514060667, nan]}
{'': [0.22200176453289622, 1.0022246759262113e-15], 'true': [nan, 0.22200176453289622], 'true,false': [0.22200176453289622, nan], 'false': [nan, 1.0022246759262113e-15]}
{'': [0.222441375431581, -6.41462192005646e-16], 'true': [nan, 0.222441375431581], 'true,false': [nan, 0.222441375431581], 'true,false,false': [nan, 0.222441375431581], 'false': [nan, -6.41462192005646e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 3.0897998809814453
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048827;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   else return -0.14185106490048777;  // std dev = 0.000, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1254446385283912;  // std dev = 6.14e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.12544463852839233;  // std dev = 0.000, 598.000 (wgt'ed) examples reached here.  /* #neg=598 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360636;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.11231637819360572;  // std dev = 0.000, 593.000 (wgt'ed) examples reached here.  /* #neg=593 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783627;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.10159632948783544;  // std dev = 3.79e-07, 633.000 (wgt'ed) examples reached here.  /* #neg=633 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.0926912761892619;  // std dev = 0.000, 648.000 (wgt'ed) examples reached here.  /* #neg=648 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 1.83e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.08518475138839678;  // std dev = 1.55e-07, 651.000 (wgt'ed) examples reached here.  /* #neg=651 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109173;  // std dev = 2.24e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.07877675473109241;  // std dev = 0.000, 593.000 (wgt'ed) examples reached here.  /* #neg=593 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 1.18e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.07324622576333663;  // std dev = 2.35e-07, 659.000 (wgt'ed) examples reached here.  /* #neg=659 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420261;  // std dev = 4.34e-08, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.06842697784420353;  // std dev = 0.000, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202623;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else return -0.06419184008202541;  // std dev = 2.40e-07, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
Inference time using transfer learning 0.7954058647155762
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 3.0897998809814453 

Total Inference Time : 1.4782464504241943 

Total revision time: 7.839728832244873
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.851364374160767 

Total Inference Time : 1.4782464504241943 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.823441982269287
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5228432151784035;  // std dev = 10.630, 507.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=337 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16060752559778746;  // std dev = 13.999, 1,014.000 (wgt'ed) examples reached here.  /* #neg=677 #pos=337 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13317079851915756;  // std dev = 13.954, 1,023.000 (wgt'ed) examples reached here.  /* #neg=686 #pos=337 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11837255897760125;  // std dev = 13.794, 1,001.000 (wgt'ed) examples reached here.  /* #neg=664 #pos=337 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10872355008689416;  // std dev = 13.587, 969.000 (wgt'ed) examples reached here.  /* #neg=632 #pos=337 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0637331517972514;  // std dev = 13.820, 1,050.000 (wgt'ed) examples reached here.  /* #neg=713 #pos=337 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05827404083140081;  // std dev = 13.723, 1,022.000 (wgt'ed) examples reached here.  /* #neg=685 #pos=337 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.06309918181421247;  // std dev = 13.477, 975.000 (wgt'ed) examples reached here.  /* #neg=638 #pos=337 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.29852567518405826;  // std dev = 10.712, 511.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.2251556451818278;  // std dev = 0.000, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.24445026149948537;  // std dev = 10.438, 498.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18831046625408113;  // std dev = 3.95e-07, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
Inference time using transfer learning 0.867168664932251
Parameter learned model CLL:-0.318508 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.63, 170, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 497, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.999, 677, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.954, 686, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.794, 664, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.587, 632, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.82, 713, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.723, 685, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.477, 638, 337], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.712, 174, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 475, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.438, 161, 337], 'false,true': [0.0, 0, 0], 'false,false': [3.95e-07, 490, 0]}]
{'': [0.22287579410929698, -1.429663452233602e-17], 'true': [nan, 0.22287579410929698], 'true,false': [nan, 0.22287579410929698], 'true,false,false': [nan, 0.22287579410929698], 'false': [nan, -1.429663452233602e-17]}
{'': [nan, 0.1932637376559272], 'false': [nan, 0.1932637376559272]}
{'': [nan, 0.19032402496192716], 'false': [nan, 0.19032402496192716]}
{'': [nan, 0.19007767123429806], 'false': [nan, 0.19007767123429806]}
{'': [nan, 0.1905102297075297], 'false': [nan, 0.1905102297075297]}
{'': [nan, 0.18189596878017178], 'false': [nan, 0.18189596878017178]}
{'': [nan, 0.18426867896002075], 'false': [nan, 0.18426867896002075]}
{'': [nan, 0.18629630173763534], 'false': [0.18629630173763534, nan]}
{'': [0.22456255912010073, -3.889286553634233e-16], 'true': [nan, 0.22456255912010073], 'true,false': [0.22456255912010073, nan], 'false': [nan, -3.889286553634233e-16]}
{'': [0.2187746971823037, 3.190191874841266e-16], 'true': [nan, 0.2187746971823037], 'true,false': [nan, 0.2187746971823037], 'true,false,false': [nan, 0.2187746971823037], 'false': [nan, 3.190191874841266e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 3.0688815116882324
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048813;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.14185106490048757;  // std dev = 1.26e-07, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1254446385283915;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.12544463852839235;  // std dev = 0.000, 638.000 (wgt'ed) examples reached here.  /* #neg=638 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1123163781936063;  // std dev = 3.65e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.11231637819360575;  // std dev = 0.000, 602.000 (wgt'ed) examples reached here.  /* #neg=602 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783623;  // std dev = 3.80e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.10159632948783534;  // std dev = 4.01e-07, 630.000 (wgt'ed) examples reached here.  /* #neg=630 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.09269127618926166;  // std dev = 0.000, 573.000 (wgt'ed) examples reached here.  /* #neg=573 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0851847513883968;  // std dev = 1.97e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.08518475138839678;  // std dev = 1.49e-07, 595.000 (wgt'ed) examples reached here.  /* #neg=595 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.07877675473109254;  // std dev = 0.000, 630.000 (wgt'ed) examples reached here.  /* #neg=630 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 1.29e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.07324622576333688;  // std dev = 1.66e-07, 604.000 (wgt'ed) examples reached here.  /* #neg=604 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420261;  // std dev = 4.59e-08, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   else return -0.06842697784420355;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202622;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.06419184008202539;  // std dev = 2.44e-07, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
Inference time using transfer learning 0.828819751739502
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 3.0688815116882324 

Total Inference Time : 1.6118152141571045 

Total revision time: 7.979144096374512
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.990779638290405 

Total Inference Time : 1.6118152141571045 

Run: 3

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.6201300621032715
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5261817219847539;  // std dev = 10.403, 488.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=326 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048766;  // std dev = 4.21e-08, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1658613856408132;  // std dev = 13.732, 956.000 (wgt'ed) examples reached here.  /* #neg=630 #pos=326 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12851405336715624;  // std dev = 13.751, 1,002.000 (wgt'ed) examples reached here.  /* #neg=676 #pos=326 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13008373958420172;  // std dev = 13.394, 938.000 (wgt'ed) examples reached here.  /* #neg=612 #pos=326 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09054963601528467;  // std dev = 13.495, 994.000 (wgt'ed) examples reached here.  /* #neg=668 #pos=326 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09029389817171275;  // std dev = 13.265, 940.000 (wgt'ed) examples reached here.  /* #neg=614 #pos=326 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05531467999683727;  // std dev = 13.446, 988.000 (wgt'ed) examples reached here.  /* #neg=662 #pos=326 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.057398411923276306;  // std dev = 13.244, 952.000 (wgt'ed) examples reached here.  /* #neg=626 #pos=326 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.26604168686053764;  // std dev = 10.974, 517.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22726222035899793;  // std dev = 7.73e-07, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.18471952337406297;  // std dev = 11.235, 532.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18983272015274952;  // std dev = 0.000, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
Inference time using transfer learning 0.9819900989532471
Parameter learned model CLL:-0.309721 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.403, 162, 326], 'false,true': [0.0, 0, 0], 'false,false': [4.21e-08, 492, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.732, 630, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.751, 676, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.394, 612, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.495, 668, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.265, 614, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.446, 662, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.244, 626, 326], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.974, 191, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [7.73e-07, 501, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.235, 206, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 473, 0]}]
{'': [0.22176498253158028, 3.6104813808948184e-18], 'true': [nan, 0.22176498253158028], 'true,false': [nan, 0.22176498253158028], 'true,false,false': [nan, 0.22176498253158028], 'false': [nan, 3.6104813808948184e-18]}
{'': [nan, 0.19723916264388916], 'false': [nan, 0.19723916264388916]}
{'': [nan, 0.18871586799587034], 'false': [nan, 0.18871586799587034]}
{'': [nan, 0.19126496248874755], 'false': [nan, 0.19126496248874755]}
{'': [nan, 0.1832171529534966], 'false': [nan, 0.1832171529534966]}
{'': [nan, 0.18718327637237805], 'false': [nan, 0.18718327637237805]}
{'': [nan, 0.1830022171909177], 'false': [nan, 0.1830022171909177]}
{'': [nan, 0.184260813252007], 'false': [0.184260813252007, nan]}
{'': [0.23295384396664706, 1.1913291378013655e-15], 'true': [nan, 0.23295384396664706], 'true,false': [0.23295384396664706, nan], 'false': [nan, 1.1913291378013655e-15]}
{'': [0.2372802306518168, -5.032385126419314e-16], 'true': [nan, 0.2372802306518168], 'true,false': [nan, 0.2372802306518168], 'true,false,false': [nan, 0.2372802306518168], 'false': [nan, -5.032385126419314e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.7906577587127686
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048813;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   else return -0.1418510649004873;  // std dev = 2.53e-07, 462.000 (wgt'ed) examples reached here.  /* #neg=462 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839158;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.12544463852839235;  // std dev = 0.000, 635.000 (wgt'ed) examples reached here.  /* #neg=635 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360632;  // std dev = 3.65e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.11231637819360575;  // std dev = 0.000, 554.000 (wgt'ed) examples reached here.  /* #neg=554 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783617;  // std dev = 4.83e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.10159632948783556;  // std dev = 3.51e-07, 621.000 (wgt'ed) examples reached here.  /* #neg=621 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926108;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.09269127618926185;  // std dev = 0.000, 622.000 (wgt'ed) examples reached here.  /* #neg=622 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839683;  // std dev = 3.87e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.08518475138839678;  // std dev = 1.43e-07, 562.000 (wgt'ed) examples reached here.  /* #neg=562 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07877675473109248;  // std dev = 0.000, 586.000 (wgt'ed) examples reached here.  /* #neg=586 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.20200604329440736;  // std dev = 0.854, 335.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=326 */
%   | else return -0.0787767547310917;  // std dev = 3.16e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17822900379397458;  // std dev = 3.29e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333707;  // std dev = 1.39e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.07352402114523258;  // std dev = 0.060, 619.000 (wgt'ed) examples reached here.  /* #neg=619 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1536024357441637;  // std dev = 3.33e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06919090219207648;  // std dev = 0.052, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else return -0.06841132744374155;  // std dev = 0.000126, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.13467695196683382;  // std dev = 1.30e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06488304345750345;  // std dev = 0.049, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.06417831712041139;  // std dev = 0.000129, 518.000 (wgt'ed) examples reached here.  /* #neg=518 */
Inference time using transfer learning 0.9196145534515381
Refined model CLL: -0.0644


******************************************
Best model found
******************************************
Results 

CLL : -0.063409 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.7906577587127686 

Total Inference Time : 1.3455660343170166 

Total revision time: 7.22803807258606
Best scored revision CLL: -0.0644


Results 

CLL : -0.063409 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.239457368850708 

Total Inference Time : 1.3455660343170166 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.865478277206421
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5261901722129101;  // std dev = 10.371, 485.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=324 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048788;  // std dev = 0.000, 516.000 (wgt'ed) examples reached here.  /* #neg=516 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15639579563142803;  // std dev = 13.785, 982.000 (wgt'ed) examples reached here.  /* #neg=658 #pos=324 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14129356203237786;  // std dev = 13.599, 957.000 (wgt'ed) examples reached here.  /* #neg=633 #pos=324 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1276075983114163;  // std dev = 13.385, 935.000 (wgt'ed) examples reached here.  /* #neg=611 #pos=324 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09349245236315654;  // std dev = 13.457, 968.000 (wgt'ed) examples reached here.  /* #neg=644 #pos=324 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06526208560415135;  // std dev = 13.533, 1,003.000 (wgt'ed) examples reached here.  /* #neg=679 #pos=324 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06052082716434283;  // std dev = 13.426, 973.000 (wgt'ed) examples reached here.  /* #neg=649 #pos=324 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.034263801858019784;  // std dev = 13.537, 1,027.000 (wgt'ed) examples reached here.  /* #neg=703 #pos=324 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.3030421143924978;  // std dev = 10.518, 492.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.220455323393197;  // std dev = 5.16e-07, 521.000 (wgt'ed) examples reached here.  /* #neg=521 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21917553917548804;  // std dev = 10.699, 501.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18490382832294958;  // std dev = 3.82e-07, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
Inference time using transfer learning 1.013136863708496
Parameter learned model CLL:-0.312946 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.371, 161, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 516, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.785, 658, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.599, 633, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.385, 611, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.457, 644, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.533, 679, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.426, 649, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.537, 703, 324], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.518, 168, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.16e-07, 521, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.699, 177, 324], 'false,true': [0.0, 0, 0], 'false,false': [3.82e-07, 475, 0]}]
{'': [0.22176214262940014, -9.294890438722241e-17], 'true': [nan, 0.22176214262940014], 'true,false': [nan, 0.22176214262940014], 'true,false,false': [nan, 0.22176214262940014], 'false': [nan, -9.294890438722241e-17]}
{'': [nan, 0.193510814877297], 'false': [nan, 0.193510814877297]}
{'': [nan, 0.19324441287405153], 'false': [nan, 0.19324441287405153]}
{'': [nan, 0.1916251115138705], 'false': [nan, 0.1916251115138705]}
{'': [nan, 0.1870851703178384], 'false': [nan, 0.1870851703178384]}
{'': [nan, 0.18259205361944697], 'false': [nan, 0.18259205361944697]}
{'': [nan, 0.1852542352044237], 'false': [nan, 0.1852542352044237]}
{'': [nan, 0.1784421570945011], 'false': [0.1784421570945011, nan]}
{'': [0.22486615110053348, 5.114271130710894e-16], 'true': [nan, 0.22486615110053348], 'true,false': [0.22486615110053348, nan], 'false': [nan, 5.114271130710894e-16]}
{'': [0.22847717738176468, 3.0665528595962217e-16], 'true': [nan, 0.22847717738176468], 'true,false': [nan, 0.22847717738176468], 'true,false,false': [nan, 0.22847717738176468], 'false': [nan, 3.0665528595962217e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.7689998149871826
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048813;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.1418510649004873;  // std dev = 2.60e-07, 461.000 (wgt'ed) examples reached here.  /* #neg=461 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.12544463852839158;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.12544463852839235;  // std dev = 0.000, 613.000 (wgt'ed) examples reached here.  /* #neg=613 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360633;  // std dev = 3.33e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.11231637819360571;  // std dev = 0.000, 579.000 (wgt'ed) examples reached here.  /* #neg=579 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else return -0.10159632948783542;  // std dev = 3.86e-07, 632.000 (wgt'ed) examples reached here.  /* #neg=632 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926105;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.09269127618926169;  // std dev = 0.000, 589.000 (wgt'ed) examples reached here.  /* #neg=589 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839679;  // std dev = 1.83e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.08518475138839679;  // std dev = 1.55e-07, 604.000 (wgt'ed) examples reached here.  /* #neg=604 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109173;  // std dev = 2.24e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.07877675473109247;  // std dev = 0.000, 608.000 (wgt'ed) examples reached here.  /* #neg=608 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333704;  // std dev = 1.29e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.07324622576333678;  // std dev = 1.97e-07, 620.000 (wgt'ed) examples reached here.  /* #neg=620 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420261;  // std dev = 4.08e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.06842697784420351;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202623;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.06419184008202544;  // std dev = 2.32e-07, 462.000 (wgt'ed) examples reached here.  /* #neg=462 */
Inference time using transfer learning 0.9623498916625977
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.7689998149871826 

Total Inference Time : 1.3981091976165771 

Total revision time: 7.629768133163452
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.641187429428101 

Total Inference Time : 1.3981091976165771 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.3713133335113525
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5226440491060231;  // std dev = 8.273, 307.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=204 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004877;  // std dev = 1.63e-07, 320.000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16696271995320652;  // std dev = 10.859, 597.000 (wgt'ed) examples reached here.  /* #neg=393 #pos=204 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13306478631518445;  // std dev = 10.844, 618.000 (wgt'ed) examples reached here.  /* #neg=414 #pos=204 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10719082559529819;  // std dev = 10.846, 621.000 (wgt'ed) examples reached here.  /* #neg=417 #pos=204 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09444001622906581;  // std dev = 10.720, 614.000 (wgt'ed) examples reached here.  /* #neg=410 #pos=204 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0859816243653059;  // std dev = 10.644, 588.000 (wgt'ed) examples reached here.  /* #neg=384 #pos=204 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.058570606437393646;  // std dev = 10.658, 619.000 (wgt'ed) examples reached here.  /* #neg=415 #pos=204 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.0490243548868415;  // std dev = 10.590, 620.000 (wgt'ed) examples reached here.  /* #neg=416 #pos=204 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.28306474014096855;  // std dev = 8.552, 318.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.223286452332987;  // std dev = 5.38e-07, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.19806501069091093;  // std dev = 8.760, 327.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18695742125506606;  // std dev = 2.11e-07, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
Inference time using transfer learning 0.994826078414917
Parameter learned model CLL:-0.312699 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.273, 103, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.63e-07, 320, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.859, 393, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.844, 414, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.846, 417, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.72, 410, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.644, 384, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.658, 415, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [10.59, 416, 204], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.552, 114, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.38e-07, 274, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.76, 123, 204], 'false,true': [0.0, 0, 0], 'false,false': [2.11e-07, 313, 0]}]
{'': [0.22294135746798838, 8.326672684688674e-17], 'true': [nan, 0.22294135746798838], 'true,false': [nan, 0.22294135746798838], 'true,false,false': [nan, 0.22294135746798838], 'false': [nan, 8.326672684688674e-17]}
{'': [nan, 0.1975152500893898], 'false': [nan, 0.1975152500893898]}
{'': [nan, 0.19026276579822035], 'false': [nan, 0.19026276579822035]}
{'': [nan, 0.1894311065976225], 'false': [nan, 0.1894311065976225]}
{'': [nan, 0.1871783142702945], 'false': [nan, 0.1871783142702945]}
{'': [nan, 0.19267117412564322], 'false': [nan, 0.19267117412564322]}
{'': [nan, 0.18351138102727438], 'false': [nan, 0.18351138102727438]}
{'': [nan, 0.18089789211423385], 'false': [0.18089789211423385, nan]}
{'': [0.22997508009967907, 1.0567378278183972e-15], 'true': [nan, 0.22997508009967907], 'true,false': [0.22997508009967907, nan], 'false': [nan, 1.0567378278183972e-15]}
{'': [0.23466038212271637, 1.4188153669331073e-16], 'true': [nan, 0.23466038212271637], 'true,false': [nan, 0.23466038212271637], 'true,false,false': [nan, 0.23466038212271637], 'false': [nan, 1.4188153669331073e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.1855556964874268
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.14185106490048763;  // std dev = 8.69e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   else return -0.14185106490048774;  // std dev = 1.52e-07, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.12544463852839138;  // std dev = 7.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.1254446385283922;  // std dev = 0.000, 394.000 (wgt'ed) examples reached here.  /* #neg=394 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.11231637819360636;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.11231637819360635;  // std dev = 0.000, 400.000 (wgt'ed) examples reached here.  /* #neg=400 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.10264496003239293;  // std dev = 0.230, 382.000 (wgt'ed) examples reached here.  /* #neg=382 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.09269127618926104;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.09294069393578167;  // std dev = 0.124, 369.000 (wgt'ed) examples reached here.  /* #neg=369 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.08518475138839687;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else return -0.08508365113105047;  // std dev = 1.28e-07, 405.000 (wgt'ed) examples reached here.  /* #neg=405 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07877675473109176;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   else return -0.07868993482552178;  // std dev = 0.000, 353.000 (wgt'ed) examples reached here.  /* #neg=353 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.07344047221000954;  // std dev = 0.103, 384.000 (wgt'ed) examples reached here.  /* #neg=384 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.06911482377145849;  // std dev = 0.098, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   else return -0.06834880209206401;  // std dev = 0.000322, 270.000 (wgt'ed) examples reached here.  /* #neg=270 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.06504933357148772;  // std dev = 0.092, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else return -0.06412412067648715;  // std dev = 0.000353, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
Inference time using transfer learning 1.0004289150238037
Refined model CLL: -0.063588


******************************************
Best model found
******************************************
Results 

CLL : -0.068167 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.1855556964874268 

Total Inference Time : 1.4781086444854736 

Total revision time: 6.58930516242981
Best scored revision CLL: -0.063588


Results 

CLL : -0.068167 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 6.600724458694458 

Total Inference Time : 1.4781086444854736 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.641993522644043
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5281290543838022;  // std dev = 10.546, 503.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=337 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048802;  // std dev = 0.000, 530.000 (wgt'ed) examples reached here.  /* #neg=530 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16640735849366067;  // std dev = 13.930, 991.000 (wgt'ed) examples reached here.  /* #neg=654 #pos=337 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14237102516944644;  // std dev = 13.792, 995.000 (wgt'ed) examples reached here.  /* #neg=658 #pos=337 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11925795752464348;  // std dev = 13.718, 991.000 (wgt'ed) examples reached here.  /* #neg=654 #pos=337 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07402647522567894;  // std dev = 13.934, 1,073.000 (wgt'ed) examples reached here.  /* #neg=736 #pos=337 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09065915269977276;  // std dev = 13.509, 978.000 (wgt'ed) examples reached here.  /* #neg=641 #pos=337 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07394395543076676;  // std dev = 13.484, 968.000 (wgt'ed) examples reached here.  /* #neg=631 #pos=337 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.04495897573334675;  // std dev = 13.631, 1,009.000 (wgt'ed) examples reached here.  /* #neg=672 #pos=337 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2582806862259691;  // std dev = 11.290, 542.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22614184408324808;  // std dev = 4.54e-07, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21439158544741607;  // std dev = 11.023, 527.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18902345745526847;  // std dev = 4.81e-07, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
Inference time using transfer learning 0.8280417919158936
Parameter learned model CLL:-0.310953 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.546, 166, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 530, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.93, 654, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.792, 658, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.718, 654, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.934, 736, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.509, 641, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.484, 631, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.631, 672, 337], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.29, 205, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [4.54e-07, 503, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.023, 190, 337], 'false,true': [0.0, 0, 0], 'false,false': [4.81e-07, 471, 0]}]
{'': [0.22110675904809976, -1.4411951715888824e-16], 'true': [nan, 0.22110675904809976], 'true,false': [nan, 0.22110675904809976], 'true,false,false': [nan, 0.22110675904809976], 'false': [nan, -1.4411951715888824e-16]}
{'': [nan, 0.19580386914458928], 'false': [nan, 0.19580386914458928]}
{'': [nan, 0.19118445175501136], 'false': [nan, 0.19118445175501136]}
{'': [nan, 0.18988481523096987], 'false': [nan, 0.18988481523096987]}
{'': [nan, 0.18093518441650963], 'false': [nan, 0.18093518441650963]}
{'': [nan, 0.1866066876965195], 'false': [nan, 0.1866066876965195]}
{'': [nan, 0.18783666790786654], 'false': [nan, 0.18783666790786654]}
{'': [nan, 0.18414239332056173], 'false': [0.18414239332056173, nan]}
{'': [0.2351717705368877, 4.0965684566685697e-16], 'true': [nan, 0.2351717705368877], 'true,false': [0.2351717705368877, nan], 'false': [nan, 4.0965684566685697e-16]}
{'': [0.23054848431384814, 4.902895735075001e-16], 'true': [nan, 0.23054848431384814], 'true,false': [nan, 0.23054848431384814], 'true,false,false': [nan, 0.23054848431384814], 'false': [nan, 4.902895735075001e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 3.038585901260376
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048827;  // std dev = 0.000, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   else return -0.14185106490048763;  // std dev = 8.43e-08, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1254446385283916;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.12544463852839233;  // std dev = 0.000, 606.000 (wgt'ed) examples reached here.  /* #neg=606 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360633;  // std dev = 2.79e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.11231637819360568;  // std dev = 0.000, 594.000 (wgt'ed) examples reached here.  /* #neg=594 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783624;  // std dev = 2.79e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.10159632948783551;  // std dev = 3.60e-07, 602.000 (wgt'ed) examples reached here.  /* #neg=602 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.09269127618926191;  // std dev = 0.000, 645.000 (wgt'ed) examples reached here.  /* #neg=645 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0851847513883968;  // std dev = 1.97e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.08518475138839678;  // std dev = 1.52e-07, 622.000 (wgt'ed) examples reached here.  /* #neg=622 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return -0.07877675473109255;  // std dev = 0.000, 622.000 (wgt'ed) examples reached here.  /* #neg=622 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 1.29e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.07324622576333677;  // std dev = 1.97e-07, 631.000 (wgt'ed) examples reached here.  /* #neg=631 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420261;  // std dev = 4.21e-08, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.0684269778442036;  // std dev = 0.000, 530.000 (wgt'ed) examples reached here.  /* #neg=530 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.06419184008202543;  // std dev = 2.35e-07, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
Inference time using transfer learning 0.8000092506408691
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 3.038585901260376 

Total Inference Time : 1.6351802349090576 

Total revision time: 8.030777215957642
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.04219651222229 

Total Inference Time : 1.6351802349090576 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.7643096446990967
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.49761762580159524;  // std dev = 11.023, 527.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=337 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048763;  // std dev = 8.43e-08, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16747495379690605;  // std dev = 14.008, 994.000 (wgt'ed) examples reached here.  /* #neg=657 #pos=337 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12913974148235266;  // std dev = 14.047, 1,044.000 (wgt'ed) examples reached here.  /* #neg=707 #pos=337 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11590755640292358;  // std dev = 13.889, 1,017.000 (wgt'ed) examples reached here.  /* #neg=680 #pos=337 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0827348733457013;  // std dev = 13.990, 1,058.000 (wgt'ed) examples reached here.  /* #neg=721 #pos=337 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0782294560116966;  // std dev = 13.776, 1,034.000 (wgt'ed) examples reached here.  /* #neg=697 #pos=337 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07535346305735527;  // std dev = 13.625, 987.000 (wgt'ed) examples reached here.  /* #neg=650 #pos=337 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.049197841253352824;  // std dev = 13.712, 1,026.000 (wgt'ed) examples reached here.  /* #neg=689 #pos=337 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2997504018631523;  // std dev = 10.812, 516.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22377294414906465;  // std dev = 7.03e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2324852716076051;  // std dev = 10.753, 513.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1873097885615829;  // std dev = 4.92e-07, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
Inference time using transfer learning 0.8716440200805664
Parameter learned model CLL:-0.313013 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.023, 190, 337], 'false,true': [0.0, 0, 0], 'false,false': [8.43e-08, 490, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.008, 657, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.047, 707, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.889, 680, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.99, 721, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.776, 697, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.625, 650, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.712, 689, 337], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.812, 179, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [7.03e-07, 488, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.753, 176, 337], 'false,true': [0.0, 0, 0], 'false,false': [4.92e-07, 468, 0]}]
{'': [0.2305484843138481, 1.4500872158369393e-17], 'true': [nan, 0.2305484843138481], 'true,false': [nan, 0.2305484843138481], 'true,false,false': [nan, 0.2305484843138481], 'false': [nan, 1.4500872158369393e-17]}
{'': [nan, 0.19741834671854416], 'false': [nan, 0.19741834671854416]}
{'': [nan, 0.18899142552999046], 'false': [nan, 0.18899142552999046]}
{'': [nan, 0.1896803735437649], 'false': [nan, 0.1896803735437649]}
{'': [nan, 0.18500099423255342], 'false': [nan, 0.18500099423255342]}
{'': [nan, 0.18353111435048378], 'false': [nan, 0.18353111435048378]}
{'': [nan, 0.18807937867929253], 'false': [nan, 0.18807937867929253]}
{'': [nan, 0.1832567384004547], 'false': [0.1832567384004547, nan]}
{'': [0.22656015263505208, 1.011940986379651e-15], 'true': [nan, 0.22656015263505208], 'true,false': [0.22656015263505208, nan], 'false': [nan, 1.011940986379651e-15]}
{'': [0.22537608912903467, 5.16206261022295e-16], 'true': [nan, 0.22537608912903467], 'true,false': [nan, 0.22537608912903467], 'true,false,false': [nan, 0.22537608912903467], 'false': [nan, 5.16206261022295e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 3.125063419342041
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048818;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.1418510649004877;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839122;  // std dev = 4.94e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.12544463852839233;  // std dev = 0.000, 619.000 (wgt'ed) examples reached here.  /* #neg=619 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360638;  // std dev = 1.83e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.1123163781936057;  // std dev = 0.000, 595.000 (wgt'ed) examples reached here.  /* #neg=595 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783624;  // std dev = 3.33e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.10159632948783533;  // std dev = 4.11e-07, 658.000 (wgt'ed) examples reached here.  /* #neg=658 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.09269127618926182;  // std dev = 0.000, 620.000 (wgt'ed) examples reached here.  /* #neg=620 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 1.83e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.08518475138839678;  // std dev = 1.52e-07, 617.000 (wgt'ed) examples reached here.  /* #neg=617 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109173;  // std dev = 2.24e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.07877675473109241;  // std dev = 0.000, 596.000 (wgt'ed) examples reached here.  /* #neg=596 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.07324622576333675;  // std dev = 2.00e-07, 634.000 (wgt'ed) examples reached here.  /* #neg=634 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420261;  // std dev = 5.27e-08, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   else return -0.06842697784420353;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202622;  // std dev = 0.000, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   else return -0.06419184008202537;  // std dev = 2.44e-07, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
Inference time using transfer learning 0.8361930847167969
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 3.125063419342041 

Total Inference Time : 1.441521406173706 

Total revision time: 7.925477981567383
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.936897277832031 

Total Inference Time : 1.441521406173706 

Run: 4

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.6155586242675781
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5261817219847539;  // std dev = 10.403, 488.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=326 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048785;  // std dev = 0.000, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16026104243892844;  // std dev = 13.776, 978.000 (wgt'ed) examples reached here.  /* #neg=652 #pos=326 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1303409251419086;  // std dev = 13.751, 997.000 (wgt'ed) examples reached here.  /* #neg=671 #pos=326 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.114855661106535;  // std dev = 13.616, 977.000 (wgt'ed) examples reached here.  /* #neg=651 #pos=326 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09845334371136549;  // std dev = 13.484, 972.000 (wgt'ed) examples reached here.  /* #neg=646 #pos=326 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08272376527758862;  // std dev = 13.389, 968.000 (wgt'ed) examples reached here.  /* #neg=642 #pos=326 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05655871732607674;  // std dev = 13.484, 996.000 (wgt'ed) examples reached here.  /* #neg=670 #pos=326 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.06520671869545128;  // std dev = 13.195, 941.000 (wgt'ed) examples reached here.  /* #neg=615 #pos=326 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.3387805246766055;  // std dev = 9.872, 465.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22557800983673895;  // std dev = 7.70e-07, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.23136635045445486;  // std dev = 10.294, 483.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18861589720341548;  // std dev = 0.000, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
Inference time using transfer learning 0.9897515773773193
Parameter learned model CLL:-0.320668 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.403, 162, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 511, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.776, 652, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.751, 671, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.616, 651, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.484, 646, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.389, 642, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.484, 670, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.195, 615, 326], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [9.872, 139, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [7.7e-07, 506, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.294, 157, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 484, 0]}]
{'': [0.22176498253158028, -7.300096600275002e-17], 'true': [nan, 0.22176498253158028], 'true,false': [nan, 0.22176498253158028], 'true,false,false': [nan, 0.22176498253158028], 'false': [nan, -7.300096600275002e-17]}
{'': [nan, 0.1940361157469807], 'false': [nan, 0.1940361157469807]}
{'': [nan, 0.18965118272592985], 'false': [nan, 0.18965118272592985]}
{'': [nan, 0.18976865444230437], 'false': [nan, 0.18976865444230437]}
{'': [nan, 0.18706946911228953], 'false': [nan, 0.18706946911228953]}
{'': [nan, 0.1851808581946425], 'false': [nan, 0.1851808581946425]}
{'': [nan, 0.1825425072431809], 'false': [nan, 0.1825425072431809]}
{'': [nan, 0.18501591190112066], 'false': [0.18501591190112066, nan]}
{'': [0.20956873627008601, 1.1725359374697305e-15], 'true': [nan, 0.20956873627008601], 'true,false': [0.20956873627008601, nan], 'false': [nan, 1.1725359374697305e-15]}
{'': [0.21939311326294392, -1.9084825547275419e-16], 'true': [nan, 0.21939311326294392], 'true,false': [nan, 0.21939311326294392], 'true,false,false': [nan, 0.21939311326294392], 'false': [nan, -1.9084825547275419e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.918006420135498
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048816;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.14185106490048777;  // std dev = 0.000, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1254446385283912;  // std dev = 6.32e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.12544463852839233;  // std dev = 0.000, 624.000 (wgt'ed) examples reached here.  /* #neg=624 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360628;  // std dev = 4.34e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.1123163781936057;  // std dev = 0.000, 596.000 (wgt'ed) examples reached here.  /* #neg=596 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783623;  // std dev = 3.80e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.10159632948783559;  // std dev = 3.38e-07, 586.000 (wgt'ed) examples reached here.  /* #neg=586 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926105;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.09269127618926183;  // std dev = 0.000, 639.000 (wgt'ed) examples reached here.  /* #neg=639 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 1.67e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.08518475138839678;  // std dev = 1.46e-07, 592.000 (wgt'ed) examples reached here.  /* #neg=592 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.07877675473109225;  // std dev = 0.000, 563.000 (wgt'ed) examples reached here.  /* #neg=563 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333704;  // std dev = 7.45e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.0732462257633368;  // std dev = 1.91e-07, 622.000 (wgt'ed) examples reached here.  /* #neg=622 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420262;  // std dev = 3.33e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.06842697784420355;  // std dev = 0.000, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202622;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.06419184008202547;  // std dev = 2.24e-07, 450.000 (wgt'ed) examples reached here.  /* #neg=450 */
Inference time using transfer learning 0.9619889259338379
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.918006420135498 

Total Inference Time : 1.3827619552612305 

Total revision time: 7.427788019180298
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.439234256744385 

Total Inference Time : 1.3827619552612305 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.64070725440979
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5234466763726087;  // std dev = 10.414, 487.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=324 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048727;  // std dev = 3.01e-07, 417.000 (wgt'ed) examples reached here.  /* #neg=417 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16394737236150017;  // std dev = 13.697, 962.000 (wgt'ed) examples reached here.  /* #neg=638 #pos=324 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1265305579484188;  // std dev = 13.745, 1,004.000 (wgt'ed) examples reached here.  /* #neg=680 #pos=324 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10939135526165719;  // std dev = 13.617, 997.000 (wgt'ed) examples reached here.  /* #neg=673 #pos=324 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11293036610861894;  // std dev = 13.303, 926.000 (wgt'ed) examples reached here.  /* #neg=602 #pos=324 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07347411336053312;  // std dev = 13.478, 977.000 (wgt'ed) examples reached here.  /* #neg=653 #pos=324 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07523897690121273;  // std dev = 13.211, 939.000 (wgt'ed) examples reached here.  /* #neg=615 #pos=324 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.04107486649263522;  // std dev = 13.421, 993.000 (wgt'ed) examples reached here.  /* #neg=669 #pos=324 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.3275758279267826;  // std dev = 10.056, 471.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22456421781460703;  // std dev = 6.58e-07, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.24339299372550882;  // std dev = 10.149, 475.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18788259039150618;  // std dev = 0.000, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
Inference time using transfer learning 0.9603841304779053
Parameter learned model CLL:-0.322569 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.414, 163, 324], 'false,true': [0.0, 0, 0], 'false,false': [3.01e-07, 417, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.697, 638, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.745, 680, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.617, 673, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.303, 602, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.478, 653, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.211, 615, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.421, 669, 324], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.056, 147, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.58e-07, 468, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.149, 151, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 475, 0]}]
{'': [0.22267665673001386, 2.172522753223328e-16], 'true': [nan, 0.22267665673001386], 'true,false': [nan, 0.22267665673001386], 'true,false,false': [nan, 0.22267665673001386], 'false': [nan, 2.172522753223328e-16]}
{'': [nan, 0.19500722863123088], 'false': [nan, 0.19500722863123088]}
{'': [nan, 0.18816128039887486], 'false': [nan, 0.18816128039887486]}
{'': [nan, 0.18596785688109707], 'false': [nan, 0.18596785688109707]}
{'': [nan, 0.19110212220600836], 'false': [nan, 0.19110212220600836]}
{'': [nan, 0.1859421378840694], 'false': [nan, 0.1859421378840694]}
{'': [nan, 0.18587279648497784], 'false': [nan, 0.18587279648497784]}
{'': [nan, 0.18139735431793858], 'false': [0.18139735431793858, nan]}
{'': [0.21469430808551912, 9.261347624223529e-16], 'true': [nan, 0.21469430808551912], 'true,false': [0.21469430808551912, nan], 'false': [nan, 9.261347624223529e-16]}
{'': [0.21683767313019525, -4.487638331116422e-17], 'true': [nan, 0.21683767313019525], 'true,false': [nan, 0.21683767313019525], 'true,false,false': [nan, 0.21683767313019525], 'false': [nan, -4.487638331116422e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.8287088871002197
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048818;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.14185106490048716;  // std dev = 2.98e-07, 451.000 (wgt'ed) examples reached here.  /* #neg=451 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.12544463852839158;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.12544463852839233;  // std dev = 0.000, 603.000 (wgt'ed) examples reached here.  /* #neg=603 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360633;  // std dev = 3.33e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.11231637819360575;  // std dev = 0.000, 604.000 (wgt'ed) examples reached here.  /* #neg=604 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783621;  // std dev = 4.21e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.10159632948783547;  // std dev = 3.71e-07, 612.000 (wgt'ed) examples reached here.  /* #neg=612 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926108;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.09269127618926176;  // std dev = 0.000, 600.000 (wgt'ed) examples reached here.  /* #neg=600 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839686;  // std dev = 1.83e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   else return -0.08518475138839679;  // std dev = 1.52e-07, 573.000 (wgt'ed) examples reached here.  /* #neg=573 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.0787767547310918;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   else return -0.07877675473109247;  // std dev = 0.000, 606.000 (wgt'ed) examples reached here.  /* #neg=606 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333704;  // std dev = 1.29e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.07324622576333688;  // std dev = 1.69e-07, 613.000 (wgt'ed) examples reached here.  /* #neg=613 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420261;  // std dev = 3.33e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.06842697784420351;  // std dev = 0.000, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   else return -0.06419184008202541;  // std dev = 2.41e-07, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
Inference time using transfer learning 1.007157802581787
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.8287088871002197 

Total Inference Time : 1.3145925998687744 

Total revision time: 7.274246454238892
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.2856926918029785 

Total Inference Time : 1.3145925998687744 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.3796560764312744
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.4956489350995084;  // std dev = 8.599, 320.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=204 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048785;  // std dev = 9.88e-08, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15512139998131708;  // std dev = 11.005, 628.000 (wgt'ed) examples reached here.  /* #neg=424 #pos=204 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13704872131878018;  // std dev = 10.910, 615.000 (wgt'ed) examples reached here.  /* #neg=411 #pos=204 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1074037579282397;  // std dev = 10.942, 625.000 (wgt'ed) examples reached here.  /* #neg=421 #pos=204 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08562366171429422;  // std dev = 10.893, 639.000 (wgt'ed) examples reached here.  /* #neg=435 #pos=204 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08313376478564931;  // std dev = 10.735, 613.000 (wgt'ed) examples reached here.  /* #neg=409 #pos=204 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08004984223746879;  // std dev = 10.574, 591.000 (wgt'ed) examples reached here.  /* #neg=387 #pos=204 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.052483551851775154;  // std dev = 10.635, 617.000 (wgt'ed) examples reached here.  /* #neg=413 #pos=204 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.30664770072603403;  // std dev = 8.326, 309.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.2242643412795801;  // std dev = 4.00e-07, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.24252197978266668;  // std dev = 8.219, 305.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18766555671485985;  // std dev = 0.000, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
Inference time using transfer learning 1.0125524997711182
Parameter learned model CLL:-0.318786 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.599, 116, 204], 'false,true': [0.0, 0, 0], 'false,false': [9.88e-08, 300, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [11.005, 424, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.91, 411, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.942, 421, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.893, 435, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.735, 409, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.574, 387, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [10.635, 413, 204], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.326, 105, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [4e-07, 278, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.219, 101, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 316, 0]}]
{'': [0.23109375000000448, 3.256654205567126e-17], 'true': [nan, 0.23109375000000448], 'true,false': [nan, 0.23109375000000448], 'true,false,false': [nan, 0.23109375000000448], 'false': [nan, 3.256654205567126e-17]}
{'': [nan, 0.19285431588033833], 'false': [nan, 0.19285431588033833]}
{'': [nan, 0.19353260428674887], 'false': [nan, 0.19353260428674887]}
{'': [nan, 0.19156871859206373], 'false': [nan, 0.19156871859206373]}
{'': [nan, 0.18569250422999253], 'false': [nan, 0.18569250422999253]}
{'': [nan, 0.1879921427689405], 'false': [nan, 0.1879921427689405]}
{'': [nan, 0.18917907900316538], 'false': [nan, 0.18917907900316538]}
{'': [nan, 0.18331909455423576], 'false': [0.18331909455423576, nan]}
{'': [0.22433782637383662, 5.750795523238221e-16], 'true': [nan, 0.22433782637383662], 'true,false': [0.22433782637383662, nan], 'false': [nan, 5.750795523238221e-16]}
{'': [0.2214888470841172, -6.183520643481885e-16], 'true': [nan, 0.2214888470841172], 'true,false': [nan, 0.2214888470841172], 'true,false,false': [nan, 0.2214888470841172], 'false': [nan, -6.183520643481885e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.136789560317993
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.14185106490048763;  // std dev = 8.69e-08, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
%   else return -0.1418510649004881;  // std dev = 0.000, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.12544463852839136;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else return -0.12544463852839216;  // std dev = 0.000, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.11231637819360636;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.1123163781936064;  // std dev = 0.000, 395.000 (wgt'ed) examples reached here.  /* #neg=395 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.10159632948783631;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.10159632948783591;  // std dev = 2.25e-07, 430.000 (wgt'ed) examples reached here.  /* #neg=430 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.09269127618926093;  // std dev = 1.18e-08, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.09269127618926046;  // std dev = 1.93e-07, 347.000 (wgt'ed) examples reached here.  /* #neg=347 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.08518475138839685;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.08518475138839678;  // std dev = 1.19e-07, 367.000 (wgt'ed) examples reached here.  /* #neg=367 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07877675473109175;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.07877675473109144;  // std dev = 1.17e-07, 376.000 (wgt'ed) examples reached here.  /* #neg=376 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.07324622576333732;  // std dev = 0.000, 391.000 (wgt'ed) examples reached here.  /* #neg=391 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.06842697784420265;  // std dev = 4.47e-08, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
%   else return -0.06842697784420294;  // std dev = 0.000, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   else return -0.06419184008202593;  // std dev = 1.22e-07, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
Inference time using transfer learning 1.0053741931915283
Refined model CLL: -0.063572


******************************************
Best model found
******************************************
Results 

CLL : -0.06581 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.136789560317993 

Total Inference Time : 1.3449523448944092 

Total revision time: 6.352748394012451
Best scored revision CLL: -0.063572


Results 

CLL : -0.06581 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 6.364194631576538 

Total Inference Time : 1.3449523448944092 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.6742706298828125
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5000536970042698;  // std dev = 10.985, 525.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=337 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048804;  // std dev = 0.000, 531.000 (wgt'ed) examples reached here.  /* #neg=531 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.17038589988539637;  // std dev = 13.966, 985.000 (wgt'ed) examples reached here.  /* #neg=648 #pos=337 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15964976946124254;  // std dev = 13.675, 947.000 (wgt'ed) examples reached here.  /* #neg=610 #pos=337 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12550426981734203;  // std dev = 13.686, 968.000 (wgt'ed) examples reached here.  /* #neg=631 #pos=337 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09431899193624756;  // std dev = 13.711, 998.000 (wgt'ed) examples reached here.  /* #neg=661 #pos=337 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07994524560023221;  // std dev = 13.595, 994.000 (wgt'ed) examples reached here.  /* #neg=657 #pos=337 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.064230066417083;  // std dev = 13.578, 989.000 (wgt'ed) examples reached here.  /* #neg=652 #pos=337 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.03877669889782404;  // std dev = 13.706, 1,027.000 (wgt'ed) examples reached here.  /* #neg=690 #pos=337 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.27878632288731625;  // std dev = 11.004, 526.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22987093421312166;  // std dev = 0.000, 524.000 (wgt'ed) examples reached here.  /* #neg=524 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.23108309590354079;  // std dev = 10.712, 511.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.19171403425035735;  // std dev = 5.02e-07, 529.000 (wgt'ed) examples reached here.  /* #neg=529 */
Inference time using transfer learning 0.838573694229126
Parameter learned model CLL:-0.315955 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.985, 188, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 531, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.966, 648, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.675, 610, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.686, 631, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.711, 661, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.595, 657, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.578, 652, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.706, 690, 337], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.004, 189, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 524, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.712, 174, 337], 'false,true': [0.0, 0, 0], 'false,false': [5.02e-07, 529, 0]}]
{'': [0.22986303854875542, -1.4719341042111304e-16], 'true': [nan, 0.22986303854875542], 'true,false': [nan, 0.22986303854875542], 'true,false,false': [nan, 0.22986303854875542], 'false': [nan, -1.4719341042111304e-16]}
{'': [nan, 0.1980102307760726], 'false': [nan, 0.1980102307760726]}
{'': [nan, 0.19748130149791956], 'false': [nan, 0.19748130149791956]}
{'': [nan, 0.19349192143907534], 'false': [nan, 0.19349192143907534]}
{'': [nan, 0.1883570343463416], 'false': [nan, 0.1883570343463416]}
{'': [nan, 0.18594691053210993], 'false': [nan, 0.18594691053210993]}
{'': [nan, 0.18641005707828878], 'false': [nan, 0.18641005707828878]}
{'': [nan, 0.18292355108663266], 'false': [0.18292355108663266, nan]}
{'': [0.230207896601082, -3.05099457148898e-16], 'true': [nan, 0.230207896601082], 'true,false': [0.230207896601082, nan], 'false': [nan, -3.05099457148898e-16]}
{'': [0.22456255912009632, 4.768292461150011e-16], 'true': [nan, 0.22456255912009632], 'true,false': [nan, 0.22456255912009632], 'true,false,false': [nan, 0.22456255912009632], 'false': [nan, 4.768292461150011e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 3.089601755142212
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048835;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   else return -0.14185106490048785;  // std dev = 0.000, 513.000 (wgt'ed) examples reached here.  /* #neg=513 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1254446385283912;  // std dev = 5.48e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.1254446385283923;  // std dev = 0.000, 581.000 (wgt'ed) examples reached here.  /* #neg=581 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360633;  // std dev = 2.79e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.11231637819360586;  // std dev = 0.000, 609.000 (wgt'ed) examples reached here.  /* #neg=609 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783621;  // std dev = 4.08e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.10159632948783529;  // std dev = 4.20e-07, 673.000 (wgt'ed) examples reached here.  /* #neg=673 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.09269127618926187;  // std dev = 0.000, 634.000 (wgt'ed) examples reached here.  /* #neg=634 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0851847513883968;  // std dev = 1.97e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.08518475138839678;  // std dev = 1.46e-07, 591.000 (wgt'ed) examples reached here.  /* #neg=591 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109169;  // std dev = 3.16e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.07877675473109266;  // std dev = 0.000, 647.000 (wgt'ed) examples reached here.  /* #neg=647 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.07324622576333682;  // std dev = 1.80e-07, 613.000 (wgt'ed) examples reached here.  /* #neg=613 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420261;  // std dev = 4.21e-08, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   else return -0.06842697784420351;  // std dev = 0.000, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.06419184008202541;  // std dev = 2.39e-07, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
Inference time using transfer learning 0.8286662101745605
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 3.089601755142212 

Total Inference Time : 1.4172234535217285 

Total revision time: 7.794667482376099
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.8061137199401855 

Total Inference Time : 1.4172234535217285 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.7469277381896973
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.4845429871441176;  // std dev = 11.221, 538.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=337 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004876;  // std dev = 9.42e-08, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16306446012768838;  // std dev = 14.061, 1,020.000 (wgt'ed) examples reached here.  /* #neg=683 #pos=337 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12037041282531444;  // std dev = 14.222, 1,074.000 (wgt'ed) examples reached here.  /* #neg=737 #pos=337 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1121070883316802;  // std dev = 14.023, 1,037.000 (wgt'ed) examples reached here.  /* #neg=700 #pos=337 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08655558126257222;  // std dev = 14.011, 1,066.000 (wgt'ed) examples reached here.  /* #neg=729 #pos=337 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09780958372765762;  // std dev = 13.680, 970.000 (wgt'ed) examples reached here.  /* #neg=633 #pos=337 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07447902972936551;  // std dev = 13.648, 994.000 (wgt'ed) examples reached here.  /* #neg=657 #pos=337 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.051544698616416654;  // std dev = 13.743, 1,012.000 (wgt'ed) examples reached here.  /* #neg=675 #pos=337 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2984118553716856;  // std dev = 10.851, 518.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.2251469304714634;  // std dev = 0.000, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.22275109622451536;  // std dev = 10.929, 522.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1883041630770492;  // std dev = 0.000, 536.000 (wgt'ed) examples reached here.  /* #neg=536 */
Inference time using transfer learning 0.8816711902618408
Parameter learned model CLL:-0.311889 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.221, 201, 337], 'false,true': [0.0, 0, 0], 'false,false': [9.42e-08, 489, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.061, 683, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.222, 737, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.023, 700, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.011, 729, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.68, 633, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.648, 657, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.743, 675, 337], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.851, 181, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 491, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.929, 185, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 536, 0]}]
{'': [0.23402454360774705, 1.8163157867078227e-17], 'true': [nan, 0.23402454360774705], 'true,false': [nan, 0.23402454360774705], 'true,false,false': [nan, 0.23402454360774705], 'false': [nan, 1.8163157867078227e-17]}
{'': [nan, 0.1938483930343315], 'false': [nan, 0.1938483930343315]}
{'': [nan, 0.18833468725159758], 'false': [nan, 0.18833468725159758]}
{'': [nan, 0.18961908458801602], 'false': [nan, 0.18961908458801602]}
{'': [nan, 0.1841577691983705], 'false': [nan, 0.1841577691983705]}
{'': [nan, 0.19292795831687723], 'false': [nan, 0.19292795831687723]}
{'': [nan, 0.18740009982772357], 'false': [nan, 0.18740009982772357]}
{'': [nan, 0.18663935890452954], 'false': [0.18663935890452954, nan]}
{'': [0.22732591941086597, -1.1287644274804035e-15], 'true': [nan, 0.22732591941086597], 'true,false': [0.22732591941086597, nan], 'false': [nan, -1.1287644274804035e-15]}
{'': [0.22880242509651386, -6.628197161941232e-17], 'true': [nan, 0.22880242509651386], 'true,false': [nan, 0.22880242509651386], 'true,false,false': [nan, 0.22880242509651386], 'false': [nan, -6.628197161941232e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.9707024097442627
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048818;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.14185106490048774;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1254446385283912;  // std dev = 5.77e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.12544463852839233;  // std dev = 0.000, 576.000 (wgt'ed) examples reached here.  /* #neg=576 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360638;  // std dev = 1.83e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.11231637819360607;  // std dev = 0.000, 634.000 (wgt'ed) examples reached here.  /* #neg=634 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1015963294878362;  // std dev = 4.59e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.10159632948783537;  // std dev = 3.95e-07, 639.000 (wgt'ed) examples reached here.  /* #neg=639 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926105;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.09269127618926183;  // std dev = 0.000, 629.000 (wgt'ed) examples reached here.  /* #neg=629 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839686;  // std dev = 2.58e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.08518475138839678;  // std dev = 1.52e-07, 628.000 (wgt'ed) examples reached here.  /* #neg=628 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.07877675473109261;  // std dev = 0.000, 645.000 (wgt'ed) examples reached here.  /* #neg=645 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   else return -0.07324622576333677;  // std dev = 2.00e-07, 645.000 (wgt'ed) examples reached here.  /* #neg=645 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420261;  // std dev = 1.49e-08, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.06842697784420354;  // std dev = 0.000, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.0641918400820254;  // std dev = 2.42e-07, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
Inference time using transfer learning 0.8123569488525391
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.9707024097442627 

Total Inference Time : 1.6718122959136963 

Total revision time: 8.022351264953613
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.0337975025177 

Total Inference Time : 1.6718122959136963 

Run: 5

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.6777839660644531
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5114555483259609;  // std dev = 10.631, 499.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=326 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048788;  // std dev = 0.000, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16013266977486046;  // std dev = 13.802, 986.000 (wgt'ed) examples reached here.  /* #neg=660 #pos=326 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14372090017413958;  // std dev = 13.615, 966.000 (wgt'ed) examples reached here.  /* #neg=640 #pos=326 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11283583753571107;  // std dev = 13.632, 986.000 (wgt'ed) examples reached here.  /* #neg=660 #pos=326 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10117515353037014;  // std dev = 13.476, 961.000 (wgt'ed) examples reached here.  /* #neg=635 #pos=326 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08439861494022614;  // std dev = 13.380, 960.000 (wgt'ed) examples reached here.  /* #neg=634 #pos=326 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05759145071390557;  // std dev = 13.483, 987.000 (wgt'ed) examples reached here.  /* #neg=661 #pos=326 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.05473914275196218;  // std dev = 13.346, 962.000 (wgt'ed) examples reached here.  /* #neg=636 #pos=326 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.3174289515579304;  // std dev = 10.249, 481.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.2266618236484409;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21971667843504541;  // std dev = 10.591, 497.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1893991424443724;  // std dev = 0.000, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
Inference time using transfer learning 0.9682281017303467
Parameter learned model CLL:-0.316636 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.631, 173, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 514, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.802, 660, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.615, 640, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.632, 660, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.476, 635, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.38, 634, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.483, 661, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.346, 636, 326], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.249, 155, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 487, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.591, 171, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 482, 0]}]
{'': [0.22649708234103746, -8.29427318007899e-17], 'true': [nan, 0.22649708234103746], 'true,false': [nan, 0.22649708234103746], 'true,false,false': [nan, 0.22649708234103746], 'false': [nan, -8.29427318007899e-17]}
{'': [nan, 0.19321246050010202], 'false': [nan, 0.19321246050010202]}
{'': [nan, 0.1918826453587465], 'false': [nan, 0.1918826453587465]}
{'': [nan, 0.1884759993382418], 'false': [nan, 0.1884759993382418]}
{'': [nan, 0.1889792300060505], 'false': [nan, 0.1889792300060505]}
{'': [nan, 0.18647625949253988], 'false': [nan, 0.18647625949253988]}
{'': [nan, 0.18418674076883446], 'false': [nan, 0.18418674076883446]}
{'': [nan, 0.18514844734831323], 'false': [0.18514844734831323, nan]}
{'': [0.21840327453632827, -1.3495934919468023e-15], 'true': [nan, 0.21840327453632827], 'true,false': [0.21840327453632827, nan], 'false': [nan, -1.3495934919468023e-15]}
{'': [0.22568408438558843, -4.2750496549881547e-16], 'true': [nan, 0.22568408438558843], 'true,false': [nan, 0.22568408438558843], 'true,false,false': [nan, 0.22568408438558843], 'false': [nan, -4.2750496549881547e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.919499635696411
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048818;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.14185106490048746;  // std dev = 1.93e-07, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839158;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.12544463852839233;  // std dev = 0.000, 603.000 (wgt'ed) examples reached here.  /* #neg=603 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360629;  // std dev = 3.80e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.11231637819360571;  // std dev = 4.21e-08, 577.000 (wgt'ed) examples reached here.  /* #neg=577 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783623;  // std dev = 3.80e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.10159632948783552;  // std dev = 3.59e-07, 618.000 (wgt'ed) examples reached here.  /* #neg=618 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.09269127618926165;  // std dev = 0.000, 576.000 (wgt'ed) examples reached here.  /* #neg=576 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 1.97e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.08518475138839678;  // std dev = 1.49e-07, 593.000 (wgt'ed) examples reached here.  /* #neg=593 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.07877675473109229;  // std dev = 0.000, 561.000 (wgt'ed) examples reached here.  /* #neg=561 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.07324622576333699;  // std dev = 1.35e-07, 601.000 (wgt'ed) examples reached here.  /* #neg=601 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420262;  // std dev = 3.65e-08, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.0684269778442035;  // std dev = 0.000, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202622;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.06419184008202548;  // std dev = 2.22e-07, 445.000 (wgt'ed) examples reached here.  /* #neg=445 */
Inference time using transfer learning 0.9496612548828125
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.919499635696411 

Total Inference Time : 1.5204086303710938 

Total revision time: 7.66967511177063
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.681093454360962 

Total Inference Time : 1.5204086303710938 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.5907549858093262
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5445896130656097;  // std dev = 10.079, 472.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=324 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048724;  // std dev = 2.98e-07, 430.000 (wgt'ed) examples reached here.  /* #neg=430 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1481755474463153;  // std dev = 13.819, 1,006.000 (wgt'ed) examples reached here.  /* #neg=682 #pos=324 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12777785947205136;  // std dev = 13.693, 1,005.000 (wgt'ed) examples reached here.  /* #neg=681 #pos=324 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11549243643188548;  // std dev = 13.535, 974.000 (wgt'ed) examples reached here.  /* #neg=650 #pos=324 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09029847364953829;  // std dev = 13.533, 989.000 (wgt'ed) examples reached here.  /* #neg=665 #pos=324 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08030551036062303;  // std dev = 13.415, 966.000 (wgt'ed) examples reached here.  /* #neg=642 #pos=324 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0682403060927245;  // std dev = 13.293, 966.000 (wgt'ed) examples reached here.  /* #neg=642 #pos=324 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.05515111305510898;  // std dev = 13.228, 971.000 (wgt'ed) examples reached here.  /* #neg=647 #pos=324 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2841743811259514;  // std dev = 10.718, 502.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22159254106057427;  // std dev = 6.95e-07, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21638463680328685;  // std dev = 10.718, 502.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1857293407224215;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
Inference time using transfer learning 0.9877190589904785
Parameter learned model CLL:-0.313836 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.079, 148, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.98e-07, 430, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.819, 682, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.693, 681, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.535, 650, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.533, 665, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.415, 642, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.293, 642, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.228, 647, 324], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.718, 178, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.95e-07, 490, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.718, 178, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 480, 0]}]
{'': [0.21523987359954314, 2.0655312086049424e-16], 'true': [nan, 0.21523987359954314], 'true,false': [nan, 0.21523987359954314], 'true,false,false': [nan, 0.21523987359954314], 'false': [nan, 2.0655312086049424e-16]}
{'': [nan, 0.18982273769426483], 'false': [nan, 0.18982273769426483]}
{'': [nan, 0.18657586727543965], 'false': [nan, 0.18657586727543965]}
{'': [nan, 0.18809051035356536], 'false': [nan, 0.18809051035356536]}
{'': [nan, 0.18517417028467492], 'false': [nan, 0.18517417028467492]}
{'': [nan, 0.18630297718548292], 'false': [nan, 0.18630297718548292]}
{'': [nan, 0.18292478768491208], 'false': [nan, 0.18292478768491208]}
{'': [nan, 0.18020730099049387], 'false': [0.18020730099049387, nan]}
{'': [0.22885351026174588, 9.860593067691186e-16], 'true': [nan, 0.22885351026174588], 'true,false': [0.22885351026174588, nan], 'false': [nan, 9.860593067691186e-16]}
{'': [0.22885351026173859, -1.4062824978585316e-16], 'true': [nan, 0.22885351026173859], 'true,false': [nan, 0.22885351026173859], 'true,false,false': [nan, 0.22885351026173859], 'false': [nan, -1.4062824978585316e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.8495986461639404
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1418510649004879;  // std dev = 0.000, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   else return -0.14185106490048763;  // std dev = 5.96e-08, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.12544463852839155;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.12544463852839233;  // std dev = 0.000, 584.000 (wgt'ed) examples reached here.  /* #neg=584 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360628;  // std dev = 4.59e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.11231637819360622;  // std dev = 0.000, 654.000 (wgt'ed) examples reached here.  /* #neg=654 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783628;  // std dev = 2.69e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.1015963294878356;  // std dev = 3.25e-07, 566.000 (wgt'ed) examples reached here.  /* #neg=566 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926105;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.0926912761892619;  // std dev = 0.000, 654.000 (wgt'ed) examples reached here.  /* #neg=654 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839679;  // std dev = 1.67e-08, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   else return -0.08518475138839678;  // std dev = 1.43e-07, 569.000 (wgt'ed) examples reached here.  /* #neg=569 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109176;  // std dev = 1.49e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.07877675473109262;  // std dev = 0.000, 650.000 (wgt'ed) examples reached here.  /* #neg=650 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333704;  // std dev = 1.05e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.07324622576333688;  // std dev = 1.67e-07, 616.000 (wgt'ed) examples reached here.  /* #neg=616 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420261;  // std dev = 2.11e-08, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.06842697784420351;  // std dev = 0.000, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.06419184008202534;  // std dev = 2.47e-07, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
Inference time using transfer learning 0.9511160850524902
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.8495986461639404 

Total Inference Time : 1.529994249343872 

Total revision time: 7.584232330322266
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.595650672912598 

Total Inference Time : 1.529994249343872 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.3357763290405273
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.4820021461086827;  // std dev = 8.760, 327.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=204 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048774;  // std dev = 1.52e-07, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14277431005409957;  // std dev = 11.138, 658.000 (wgt'ed) examples reached here.  /* #neg=454 #pos=204 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1431728282422391;  // std dev = 10.899, 611.000 (wgt'ed) examples reached here.  /* #neg=407 #pos=204 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12851852891493146;  // std dev = 10.765, 595.000 (wgt'ed) examples reached here.  /* #neg=391 #pos=204 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10786229495736828;  // std dev = 10.687, 594.000 (wgt'ed) examples reached here.  /* #neg=390 #pos=204 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0582250480944619;  // std dev = 10.923, 653.000 (wgt'ed) examples reached here.  /* #neg=449 #pos=204 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08592404556679833;  // std dev = 10.541, 577.000 (wgt'ed) examples reached here.  /* #neg=373 #pos=204 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.046935476510636044;  // std dev = 10.704, 620.000 (wgt'ed) examples reached here.  /* #neg=416 #pos=204 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2943237011450369;  // std dev = 8.479, 315.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22645483589612211;  // std dev = 3.77e-07, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.20080232942976273;  // std dev = 8.760, 327.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1892496140227478;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
Inference time using transfer learning 1.0242676734924316
Parameter learned model CLL:-0.313147 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.76, 123, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.52e-07, 316, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [11.138, 454, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.899, 407, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.765, 391, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.687, 390, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.923, 449, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.541, 373, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [10.704, 416, 204], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.479, 111, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.77e-07, 293, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.76, 123, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 301, 0]}]
{'': [0.2346603821227214, 7.307797124114954e-17], 'true': [nan, 0.2346603821227214], 'true,false': [nan, 0.2346603821227214], 'true,false,false': [nan, 0.2346603821227214], 'false': [nan, 7.307797124114954e-17]}
{'': [nan, 0.18852900157827424], 'false': [nan, 0.18852900157827424]}
{'': [nan, 0.1944205476120409], 'false': [nan, 0.1944205476120409]}
{'': [nan, 0.19476518814344826], 'false': [nan, 0.19476518814344826]}
{'': [nan, 0.1922699667000995], 'false': [nan, 0.1922699667000995]}
{'': [nan, 0.1827101770424117], 'false': [nan, 0.1827101770424117]}
{'': [nan, 0.19255914368344115], 'false': [nan, 0.19255914368344115]}
{'': [nan, 0.18478469986654528], 'false': [0.18478469986654528, nan]}
{'': [0.2282086167800464, 4.850121063208875e-16], 'true': [nan, 0.2282086167800464], 'true,false': [0.2282086167800464, nan], 'false': [nan, 4.850121063208875e-16]}
{'': [0.23466038212271914, -2.0065160312162298e-16], 'true': [nan, 0.23466038212271914], 'true,false': [nan, 0.23466038212271914], 'true,false,false': [nan, 0.23466038212271914], 'false': [nan, -2.0065160312162298e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.202446937561035
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   else return -0.14185106490048777;  // std dev = 1.43e-07, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.12544463852839216;  // std dev = 0.000, 388.000 (wgt'ed) examples reached here.  /* #neg=388 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.11231637819360635;  // std dev = 1.67e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.11231637819360613;  // std dev = 0.000, 415.000 (wgt'ed) examples reached here.  /* #neg=415 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.10159632948783634;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.10159632948783628;  // std dev = 1.13e-07, 373.000 (wgt'ed) examples reached here.  /* #neg=373 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.09269127618926096;  // std dev = 9.13e-09, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.09269127618926101;  // std dev = 1.19e-07, 422.000 (wgt'ed) examples reached here.  /* #neg=422 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.08518475138839682;  // std dev = 1.75e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   else return -0.08518475138839678;  // std dev = 1.23e-07, 409.000 (wgt'ed) examples reached here.  /* #neg=409 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07877675473109176;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   else return -0.07877675473109144;  // std dev = 9.66e-08, 400.000 (wgt'ed) examples reached here.  /* #neg=400 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.0732462257633371;  // std dev = 7.60e-08, 346.000 (wgt'ed) examples reached here.  /* #neg=346 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.06842697784420261;  // std dev = 1.05e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   else return -0.0684269778442029;  // std dev = 0.000, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else return -0.06419184008202596;  // std dev = 1.18e-07, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
Inference time using transfer learning 0.9538171291351318
Refined model CLL: -0.063555


******************************************
Best model found
******************************************
Results 

CLL : -0.065435 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.202446937561035 

Total Inference Time : 1.541593074798584 

Total revision time: 6.603155136108398
Best scored revision CLL: -0.063555


Results 

CLL : -0.065435 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 6.6145734786987305 

Total Inference Time : 1.541593074798584 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.737752914428711
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5215347618711615;  // std dev = 10.651, 508.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=337 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048738;  // std dev = 2.23e-07, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16293650555021086;  // std dev = 13.991, 1,003.000 (wgt'ed) examples reached here.  /* #neg=666 #pos=337 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13155354119749246;  // std dev = 13.973, 1,027.000 (wgt'ed) examples reached here.  /* #neg=690 #pos=337 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1226945948266997;  // std dev = 13.719, 994.000 (wgt'ed) examples reached here.  /* #neg=657 #pos=337 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08980403878946945;  // std dev = 13.784, 1,031.000 (wgt'ed) examples reached here.  /* #neg=694 #pos=337 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08022279738182583;  // std dev = 13.675, 1,002.000 (wgt'ed) examples reached here.  /* #neg=665 #pos=337 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06427776013992142;  // std dev = 13.630, 1,006.000 (wgt'ed) examples reached here.  /* #neg=669 #pos=337 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.05063496436992086;  // std dev = 13.639, 1,001.000 (wgt'ed) examples reached here.  /* #neg=664 #pos=337 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2997162386210923;  // std dev = 10.712, 511.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.2244835328193952;  // std dev = 6.42e-07, 517.000 (wgt'ed) examples reached here.  /* #neg=517 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.24952663533148614;  // std dev = 10.371, 495.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18782420072686432;  // std dev = 0.000, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
Inference time using transfer learning 0.8151824474334717
Parameter learned model CLL:-0.316768 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.651, 171, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.23e-07, 469, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.991, 666, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.973, 690, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.719, 657, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.784, 694, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.675, 665, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.63, 669, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.639, 664, 337], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.712, 174, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.42e-07, 517, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.371, 158, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 482, 0]}]
{'': [0.22330507161014587, 1.0605115459105973e-16], 'true': [nan, 0.22330507161014587], 'true,false': [nan, 0.22330507161014587], 'true,false,false': [nan, 0.22330507161014587], 'false': [nan, 1.0605115459105973e-16]}
{'': [nan, 0.1951568952755889], 'false': [nan, 0.1951568952755889]}
{'': [nan, 0.1901036566015822], 'false': [nan, 0.1901036566015822]}
{'': [nan, 0.18933810639845425], 'false': [nan, 0.18933810639845425]}
{'': [nan, 0.18429298381082287], 'false': [nan, 0.18429298381082287]}
{'': [nan, 0.18664408894593557], 'false': [nan, 0.18664408894593557]}
{'': [nan, 0.18467039518809655], 'false': [nan, 0.18467039518809655]}
{'': [nan, 0.18582814409026266], 'false': [0.18582814409026266, nan]}
{'': [0.22456255912010475, 7.971272470809635e-16], 'true': [nan, 0.22456255912010475], 'true,false': [0.22456255912010475, nan], 'false': [nan, 7.971272470809635e-16]}
{'': [0.21730843791450047, -5.380665945071298e-16], 'true': [nan, 0.21730843791450047], 'true,false': [nan, 0.21730843791450047], 'true,false,false': [nan, 0.21730843791450047], 'false': [nan, -5.380665945071298e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.922192335128784
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048824;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else return -0.14185106490048782;  // std dev = 0.000, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839116;  // std dev = 6.66e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.12544463852839233;  // std dev = 0.000, 633.000 (wgt'ed) examples reached here.  /* #neg=633 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360632;  // std dev = 2.98e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.11231637819360608;  // std dev = 0.000, 642.000 (wgt'ed) examples reached here.  /* #neg=642 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783628;  // std dev = 2.69e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.10159632948783552;  // std dev = 3.46e-07, 572.000 (wgt'ed) examples reached here.  /* #neg=572 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.09269127618926193;  // std dev = 0.000, 653.000 (wgt'ed) examples reached here.  /* #neg=653 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0851847513883968;  // std dev = 1.97e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.08518475138839678;  // std dev = 1.49e-07, 621.000 (wgt'ed) examples reached here.  /* #neg=621 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109173;  // std dev = 2.36e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.07877675473109244;  // std dev = 0.000, 594.000 (wgt'ed) examples reached here.  /* #neg=594 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 1.18e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return -0.0732462257633367;  // std dev = 2.19e-07, 658.000 (wgt'ed) examples reached here.  /* #neg=658 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420261;  // std dev = 2.79e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.06842697784420353;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202622;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   else return -0.0641918400820254;  // std dev = 2.43e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
Inference time using transfer learning 0.8088736534118652
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.922192335128784 

Total Inference Time : 1.4196555614471436 

Total revision time: 7.691037893295288
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.70245623588562 

Total Inference Time : 1.4196555614471436 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.710373878479004
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.4845429871441176;  // std dev = 11.221, 538.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=337 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048774;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.18142721857817556;  // std dev = 13.877, 957.000 (wgt'ed) examples reached here.  /* #neg=620 #pos=337 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12886777532926516;  // std dev = 14.061, 1,040.000 (wgt'ed) examples reached here.  /* #neg=703 #pos=337 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10968017784463881;  // std dev = 13.966, 1,035.000 (wgt'ed) examples reached here.  /* #neg=698 #pos=337 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09754645421292503;  // std dev = 13.810, 1,016.000 (wgt'ed) examples reached here.  /* #neg=679 #pos=337 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07943234112456223;  // std dev = 13.771, 1,014.000 (wgt'ed) examples reached here.  /* #neg=677 #pos=337 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07143112858508546;  // std dev = 13.617, 998.000 (wgt'ed) examples reached here.  /* #neg=661 #pos=337 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.042170745436014914;  // std dev = 13.796, 1,039.000 (wgt'ed) examples reached here.  /* #neg=702 #pos=337 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.3167569342060306;  // std dev = 10.546, 503.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22595481167592282;  // std dev = 5.36e-07, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2323260647025028;  // std dev = 10.692, 510.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1888882854918992;  // std dev = 1.33e-07, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
Inference time using transfer learning 0.8977038860321045
Parameter learned model CLL:-0.31581 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.221, 201, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 501, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.877, 620, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.061, 703, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.966, 698, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.81, 679, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.771, 677, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.617, 661, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.796, 702, 337], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.546, 166, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.36e-07, 511, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.692, 173, 337], 'false,true': [0.0, 0, 0], 'false,false': [1.33e-07, 480, 0]}]
{'': [0.23402454360774705, -3.191060190539372e-17], 'true': [nan, 0.23402454360774705], 'true,false': [nan, 0.23402454360774705], 'true,false,false': [nan, 0.23402454360774705], 'false': [nan, -3.191060190539372e-17]}
{'': [nan, 0.20121058298445307], 'false': [nan, 0.20121058298445307]}
{'': [nan, 0.19010623874948648], 'false': [nan, 0.19010623874948648]}
{'': [nan, 0.1884407035088871], 'false': [nan, 0.1884407035088871]}
{'': [nan, 0.18770229503271418], 'false': [nan, 0.18770229503271418]}
{'': [nan, 0.1870293090301146], 'false': [nan, 0.1870293090301146]}
{'': [nan, 0.18579149666855385], 'false': [nan, 0.18579149666855385]}
{'': [nan, 0.18317578717113606], 'false': [0.18317578717113606, nan]}
{'': [0.2211067590480966, 5.631503091640715e-16], 'true': [nan, 0.2211067590480966], 'true,false': [0.2211067590480966, nan], 'false': [nan, 5.631503091640715e-16]}
{'': [0.22414840445982132, 3.700743415417188e-17], 'true': [nan, 0.22414840445982132], 'true,false': [nan, 0.22414840445982132], 'true,false,false': [nan, 0.22414840445982132], 'false': [nan, 3.700743415417188e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.9980194568634033
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048818;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.14185106490048796;  // std dev = 0.000, 524.000 (wgt'ed) examples reached here.  /* #neg=524 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839116;  // std dev = 5.96e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.12544463852839235;  // std dev = 0.000, 677.000 (wgt'ed) examples reached here.  /* #neg=677 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360628;  // std dev = 4.47e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.1123163781936059;  // std dev = 0.000, 616.000 (wgt'ed) examples reached here.  /* #neg=616 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783631;  // std dev = 2.11e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else return -0.10159632948783527;  // std dev = 4.24e-07, 672.000 (wgt'ed) examples reached here.  /* #neg=672 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926105;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else return -0.09269127618926189;  // std dev = 0.000, 643.000 (wgt'ed) examples reached here.  /* #neg=643 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 1.83e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.08518475138839678;  // std dev = 1.55e-07, 628.000 (wgt'ed) examples reached here.  /* #neg=628 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109173;  // std dev = 2.24e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.07877675473109261;  // std dev = 0.000, 644.000 (wgt'ed) examples reached here.  /* #neg=644 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.07324622576333673;  // std dev = 2.05e-07, 626.000 (wgt'ed) examples reached here.  /* #neg=626 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420261;  // std dev = 3.49e-08, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.06842697784420362;  // std dev = 0.000, 550.000 (wgt'ed) examples reached here.  /* #neg=550 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202622;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else return -0.06419184008202537;  // std dev = 2.44e-07, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
Inference time using transfer learning 0.8470761775970459
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.9980194568634033 

Total Inference Time : 1.615253210067749 

Total revision time: 7.9277307987213135
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.9391491413116455 

Total Inference Time : 1.615253210067749 

Starting experiments for fasttext using softcosine 

Run: 1

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.044785499572754
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5699393281126085;  // std dev = 9.693, 458.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004872;  // std dev = 2.83e-07, 455.000 (wgt'ed) examples reached here.  /* #neg=455 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.43913531554133245;  // std dev = 10.446, 490.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3533361104401281;  // std dev = 10.446, 490.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360595;  // std dev = 0.000, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.267603474963746;  // std dev = 10.529, 494.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783542;  // std dev = 3.40e-07, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.24498061598226747;  // std dev = 9.847, 464.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926144;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.13195867384538873;  // std dev = 10.671, 501.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.52e-07, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.1276121613170504;  // std dev = 10.227, 480.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0787767547310922;  // std dev = 8.16e-08, 526.000 (wgt'ed) examples reached here.  /* #neg=526 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.036902002410081486;  // std dev = 11.133, 526.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333692;  // std dev = 1.53e-07, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.08313466553218342;  // std dev = 10.294, 483.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420344;  // std dev = 0.000, 438.000 (wgt'ed) examples reached here.  /* #neg=438 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06182079438908848;  // std dev = 10.316, 484.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202548;  // std dev = 2.24e-07, 445.000 (wgt'ed) examples reached here.  /* #neg=445 */
Inference time using transfer learning 1.115752935409546
Parameter learned model CLL:-0.304303 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [9.693, 132, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.83e-07, 455, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.446, 164, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 476, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.446, 164, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 466, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.529, 168, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.4e-07, 491, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [9.847, 138, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 497, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.671, 175, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.52e-07, 511, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.227, 154, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [8.16e-08, 526, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.133, 200, 326], 'false,true': [1.53e-07, 498, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.294, 157, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 438, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.316, 158, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.24e-07, 445, 0]}]
{'': [0.20514482942735934, 1.7568364345716762e-16], 'true': [nan, 0.20514482942735934], 'true,false': [nan, 0.20514482942735934], 'true,false,false': [nan, 0.20514482942735934], 'false': [nan, 1.7568364345716762e-16]}
{'': [0.2226738858808805, -1.3434631558489288e-16], 'true': [nan, 0.2226738858808805], 'true,false': [nan, 0.2226738858808805], 'true,false,false': [0.2226738858808805, nan], 'false': [nan, -1.3434631558489288e-16]}
{'': [0.22267388588088752, -7.623849096138414e-18], 'true': [nan, 0.22267388588088752], 'true,false': [nan, 0.22267388588088752], 'true,false,false': [nan, 0.22267388588088752], 'false': [nan, -7.623849096138414e-18]}
{'': [0.22442590437476584, 2.3515925572508406e-16], 'true': [nan, 0.22442590437476584], 'true,false': [0.22442590437476584, nan], 'false': [nan, 2.3515925572508406e-16]}
{'': [0.20895882877526575, -2.6806189729380037e-17], 'true': [nan, 0.20895882877526575], 'true,false': [nan, 0.20895882877526575], 'true,false,false': [nan, 0.20895882877526575], 'false': [nan, -2.6806189729380037e-17]}
{'': [0.22728993111581033, 4.519107419217858e-17], 'true': [nan, 0.22728993111581033], 'true,false': [0.22728993111581033, nan], 'false': [nan, 4.519107419217858e-17]}
{'': [0.21789930555555476, 1.2664140965305969e-17], 'true': [nan, 0.21789930555555476], 'true,false': [0.21789930555555476, nan], 'false': [nan, 1.2664140965305969e-17]}
{'': [0.2356547008052768, 4.726250626918337e-17], 'true': [nan, 0.2356547008052768], 'true,false': [nan, 0.2356547008052768], 'true,false,false': [nan, 0.2356547008052768], 'false': [4.726250626918337e-17, nan]}
{'': [0.21939311326295002, -1.2572388589362503e-16], 'true': [nan, 0.21939311326295002], 'true,false': [0.21939311326295002, nan], 'false': [nan, -1.2572388589362503e-16]}
{'': [0.21987910661840146, 1.1226974406321808e-16], 'true': [nan, 0.21987910661840146], 'true,false': [nan, 0.21987910661840146], 'true,false,false': [nan, 0.21987910661840146], 'false': [nan, 1.1226974406321808e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.4307830333709717
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.141851064900488;  // std dev = 0.000, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   else return -0.14185106490048724;  // std dev = 2.70e-07, 458.000 (wgt'ed) examples reached here.  /* #neg=458 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839138;  // std dev = 2.98e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.12544463852839238;  // std dev = 0.000, 540.000 (wgt'ed) examples reached here.  /* #neg=540 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360633;  // std dev = 7.88e-08, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.11231637819360593;  // std dev = 0.000, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783652;  // std dev = 0.000, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   else return -0.10159632948783563;  // std dev = 2.92e-07, 449.000 (wgt'ed) examples reached here.  /* #neg=449 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926079;  // std dev = 6.83e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.0926912761892614;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839678;  // std dev = 6.83e-08, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else return -0.08518475138839678;  // std dev = 1.44e-07, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109157;  // std dev = 6.91e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   else return -0.07877675473109197;  // std dev = 0.000, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333684;  // std dev = 7.96e-08, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.07324622576333692;  // std dev = 1.53e-07, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420265;  // std dev = 6.91e-08, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else return -0.06842697784420353;  // std dev = 0.000, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   else return -0.06419184008202544;  // std dev = 2.34e-07, 464.000 (wgt'ed) examples reached here.  /* #neg=464 */
Inference time using transfer learning 0.9156174659729004
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.4307830333709717 

Total Inference Time : 1.5578150749206543 

Total revision time: 7.997218370437622
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.031433343887329 

Total Inference Time : 1.5578150749206543 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.124974250793457
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5248156017661747;  // std dev = 10.392, 486.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004876;  // std dev = 1.03e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4309275367696778;  // std dev = 10.660, 499.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=324 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839235;  // std dev = 0.000, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.39613519562858274;  // std dev = 9.912, 465.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360585;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2467347901602897;  // std dev = 10.852, 509.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783548;  // std dev = 3.26e-07, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.20208871706096135;  // std dev = 10.620, 497.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=324 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926137;  // std dev = 0.000, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.16924602726408475;  // std dev = 10.349, 484.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.38e-07, 465.000 (wgt'ed) examples reached here.  /* #neg=465 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.12428166504791284;  // std dev = 10.392, 486.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.078776754731092;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07496872394620306;  // std dev = 10.679, 500.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=324 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333725;  // std dev = 0.000, 439.000 (wgt'ed) examples reached here.  /* #neg=439 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.07540143164891995;  // std dev = 10.392, 486.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420348;  // std dev = 0.000, 463.000 (wgt'ed) examples reached here.  /* #neg=463 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.024696383424202585;  // std dev = 10.889, 511.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202544;  // std dev = 2.32e-07, 464.000 (wgt'ed) examples reached here.  /* #neg=464 */
Inference time using transfer learning 1.0859696865081787
Parameter learned model CLL:-0.303037 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.392, 162, 324], 'false,true': [0.0, 0, 0], 'false,false': [1.03e-07, 488, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.66, 175, 324], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 509, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [9.912, 141, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 489, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.852, 185, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.26e-07, 479, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.62, 173, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 481, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.349, 160, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.38e-07, 465, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.392, 162, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 487, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.679, 176, 324], 'false,true': [0.0, 439, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.392, 162, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 463, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.889, 187, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.32e-07, 464, 0]}]
{'': [0.22222222222222496, 2.1840452943445702e-17], 'true': [nan, 0.22222222222222496], 'true,false': [nan, 0.22222222222222496], 'true,false,false': [nan, 0.22222222222222496], 'false': [nan, 2.1840452943445702e-17]}
{'': [0.22770992887578903, -1.3959582234972498e-16], 'true': [nan, 0.22770992887578903], 'true,false': [nan, 0.22770992887578903], 'true,false,false': [0.22770992887578903, nan], 'false': [nan, -1.3959582234972498e-16]}
{'': [0.2112799167533827, -1.0897894720246936e-17], 'true': [nan, 0.2112799167533827], 'true,false': [nan, 0.2112799167533827], 'true,false,false': [nan, 0.2112799167533827], 'false': [nan, -1.0897894720246936e-17]}
{'': [0.23135621678162277, 2.225081635991963e-16], 'true': [nan, 0.23135621678162277], 'true,false': [0.23135621678162277, nan], 'false': [nan, 2.225081635991963e-16]}
{'': [0.22692290564311673, -1.6618723029732074e-17], 'true': [nan, 0.22692290564311673], 'true,false': [nan, 0.22692290564311673], 'true,false,false': [nan, 0.22692290564311673], 'false': [nan, -1.6618723029732074e-17]}
{'': [0.22129635953828264, 4.1066314029145573e-17], 'true': [nan, 0.22129635953828264], 'true,false': [0.22129635953828264, nan], 'false': [nan, 4.1066314029145573e-17]}
{'': [0.2222222222222224, -3.0092287320435457e-17], 'true': [nan, 0.2222222222222224], 'true,false': [0.2222222222222224, nan], 'false': [nan, -3.0092287320435457e-17]}
{'': [0.2280960000000012, -4.046370932574602e-18], 'true': [nan, 0.2280960000000012], 'true,false': [nan, 0.2280960000000012], 'true,false,false': [nan, 0.2280960000000012], 'false': [-4.046370932574602e-18, nan]}
{'': [0.22222222222222204, -1.2852689874710235e-16], 'true': [nan, 0.22222222222222204], 'true,false': [0.22222222222222204, nan], 'false': [nan, -1.2852689874710235e-16]}
{'': [0.23203036140333502, 1.1580774653417581e-16], 'true': [nan, 0.23203036140333502], 'true,false': [nan, 0.23203036140333502], 'true,false,false': [nan, 0.23203036140333502], 'false': [nan, 1.1580774653417581e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.599817991256714
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048816;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.1418510649004876;  // std dev = 9.42e-08, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1254446385283915;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else return -0.1254446385283923;  // std dev = 0.000, 449.000 (wgt'ed) examples reached here.  /* #neg=449 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360633;  // std dev = 7.60e-08, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.11231637819360603;  // std dev = 0.000, 438.000 (wgt'ed) examples reached here.  /* #neg=438 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783646;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.10159632948783558;  // std dev = 3.05e-07, 460.000 (wgt'ed) examples reached here.  /* #neg=460 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926082;  // std dev = 6.66e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.09269127618926157;  // std dev = 0.000, 525.000 (wgt'ed) examples reached here.  /* #neg=525 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839679;  // std dev = 6.14e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.08518475138839678;  // std dev = 1.40e-07, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109155;  // std dev = 7.60e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.07877675473109191;  // std dev = 0.000, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.0732462257633369;  // std dev = 5.67e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.07324622576333717;  // std dev = 6.66e-08, 454.000 (wgt'ed) examples reached here.  /* #neg=454 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420265;  // std dev = 6.14e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.06842697784420353;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   else return -0.0641918400820255;  // std dev = 2.17e-07, 438.000 (wgt'ed) examples reached here.  /* #neg=438 */
Inference time using transfer learning 0.9951286315917969
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.599817991256714 

Total Inference Time : 1.6582767963409424 

Total revision time: 8.35992693901062
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.394141912460327 

Total Inference Time : 1.6582767963409424 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.7497632503509521
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.505767982718556;  // std dev = 8.479, 315.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004879;  // std dev = 4.21e-08, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.42436107320147093;  // std dev = 8.576, 319.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=204 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.125444638528392;  // std dev = 0.000, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.328572054445224;  // std dev = 8.760, 327.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360696;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2944521831415272;  // std dev = 8.300, 308.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783663;  // std dev = 0.000, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.22159439108247897;  // std dev = 8.326, 309.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=204 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926043;  // std dev = 1.41e-07, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.14984586642575368;  // std dev = 8.528, 317.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.10e-07, 324.000 (wgt'ed) examples reached here.  /* #neg=324 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.11446146451674483;  // std dev = 8.503, 316.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109143;  // std dev = 5.16e-08, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05683343981998374;  // std dev = 8.847, 331.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=204 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333706;  // std dev = 8.16e-08, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.03734133387776581;  // std dev = 8.911, 334.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0684269778442029;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07130112767802903;  // std dev = 8.403, 312.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202605;  // std dev = 9.42e-08, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
Inference time using transfer learning 1.291163682937622
Parameter learned model CLL:-0.302479 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.479, 111, 204], 'false,true': [0.0, 0, 0], 'false,false': [4.21e-08, 290, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [8.576, 115, 204], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 292, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.76, 123, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 278, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.3, 104, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 307, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.326, 105, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.41e-07, 285, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.528, 113, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.1e-07, 324, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.503, 112, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.16e-08, 274, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.847, 127, 204], 'false,true': [8.16e-08, 327, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.911, 130, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 280, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.403, 108, 204], 'false,true': [0.0, 0, 0], 'false,false': [9.42e-08, 281, 0]}]
{'': [0.22820861678004992, 6.1253684117250015e-18], 'true': [nan, 0.22820861678004992], 'true,false': [nan, 0.22820861678004992], 'true,false,false': [nan, 0.22820861678004992], 'false': [nan, 6.1253684117250015e-18]}
{'': [0.23054018730161976, -7.908437983631252e-17], 'true': [nan, 0.23054018730161976], 'true,false': [nan, 0.23054018730161976], 'true,false,false': [0.23054018730161976, nan], 'false': [nan, -7.908437983631252e-17]}
{'': [0.23466038212271287, -1.118210240629654e-16], 'true': [nan, 0.23466038212271287], 'true,false': [nan, 0.23466038212271287], 'true,false,false': [nan, 0.23466038212271287], 'false': [nan, -1.118210240629654e-16]}
{'': [0.2236464833867426, -5.352215232720624e-17], 'true': [nan, 0.2236464833867426], 'true,false': [0.2236464833867426, nan], 'false': [nan, -5.352215232720624e-17]}
{'': [0.22433782637383376, 7.011934892369409e-17], 'true': [nan, 0.22433782637383376], 'true,false': [nan, 0.22433782637383376], 'true,false,false': [nan, 0.22433782637383376], 'false': [nan, 7.011934892369409e-17]}
{'': [0.2293982425937176, 3.700743415417188e-17], 'true': [nan, 0.2293982425937176], 'true,false': [0.2293982425937176, nan], 'false': [nan, 3.700743415417188e-17]}
{'': [0.2288094856593489, 9.724581237592612e-18], 'true': [nan, 0.2288094856593489], 'true,false': [0.2288094856593489, nan], 'false': [nan, 9.724581237592612e-18]}
{'': [0.23647100701892035, 2.0371064672021222e-17], 'true': [nan, 0.23647100701892035], 'true,false': [nan, 0.23647100701892035], 'true,false,false': [nan, 0.23647100701892035], 'false': [2.0371064672021222e-17, nan]}
{'': [0.23772813654128772, -3.9650822308041306e-17], 'true': [nan, 0.23772813654128772], 'true,false': [0.23772813654128772, nan], 'false': [nan, -3.9650822308041306e-17]}
{'': [0.2263313609467451, 3.160777294306496e-17], 'true': [nan, 0.2263313609467451], 'true,false': [nan, 0.2263313609467451], 'true,false,false': [nan, 0.2263313609467451], 'false': [nan, 3.160777294306496e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.199331760406494
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048777;  // std dev = 2.98e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | else return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.141851064900488;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.12666575623910492;  // std dev = 0.154, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   else return -0.125444638528392;  // std dev = 0.000, 294.000 (wgt'ed) examples reached here.  /* #neg=294 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.1135744055590361;  // std dev = 0.143, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   else return -0.11231637819360693;  // std dev = 0.000, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10137027011733345;  // std dev = 0.000, 120.000 (wgt'ed) examples reached here.  /* #neg=120 */
%   | else return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.10159632948783652;  // std dev = 0.000, 325.000 (wgt'ed) examples reached here.  /* #neg=325 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.09492294778477946;  // std dev = 0.224, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   else return -0.09269127618926042;  // std dev = 1.62e-07, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.08483591138101232;  // std dev = 0.000, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   else return -0.08518475138839678;  // std dev = 1.03e-07, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.0834298670986234;  // std dev = 0.385, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   else return -0.07877675473109141;  // std dev = 4.71e-08, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07265184892693913;  // std dev = 0.000, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.07324622576333695;  // std dev = 1.00e-07, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07259549329512788;  // std dev = 0.431, 131.000 (wgt'ed) examples reached here.  /* #neg=131 */
%   else return -0.06842697784420304;  // std dev = 0.000, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0634531585400764;  // std dev = 6.62e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | else return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06419184008202601;  // std dev = 1.03e-07, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
Inference time using transfer learning 0.9617760181427002
Refined model CLL: -0.06392


******************************************
Best model found
******************************************
Results 

CLL : -0.07759 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.199331760406494 

Total Inference Time : 1.3438072204589844 

Total revision time: 7.143793106079102
Best scored revision CLL: -0.06392


Results 

CLL : -0.07759 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.178008079528809 

Total Inference Time : 1.3438072204589844 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.3635222911834717
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.4939979917032815;  // std dev = 11.078, 530.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048777;  // std dev = 0.000, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4399441533904871;  // std dev = 10.812, 516.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839227;  // std dev = 0.000, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.35956678140229337;  // std dev = 10.773, 514.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360575;  // std dev = 0.000, 524.000 (wgt'ed) examples reached here.  /* #neg=524 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.27206046371394643;  // std dev = 10.890, 520.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783541;  // std dev = 3.44e-07, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.19418976415553146;  // std dev = 11.078, 530.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0926912761892615;  // std dev = 0.000, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.20633984580074938;  // std dev = 10.117, 484.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.38e-07, 462.000 (wgt'ed) examples reached here.  /* #neg=462 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.10789608194729434;  // std dev = 10.871, 519.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109233;  // std dev = 0.000, 551.000 (wgt'ed) examples reached here.  /* #neg=551 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1032413133610261;  // std dev = 10.525, 502.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333686;  // std dev = 1.66e-07, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.07017944418678625;  // std dev = 10.651, 508.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420354;  // std dev = 0.000, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04817847369814691;  // std dev = 10.732, 512.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202537;  // std dev = 2.43e-07, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
Inference time using transfer learning 1.0082244873046875
Parameter learned model CLL:-0.302765 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.078, 193, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 505, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.812, 179, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 492, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.773, 177, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 524, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.89, 183, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.44e-07, 494, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.078, 193, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 509, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.117, 147, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.38e-07, 462, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.871, 182, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 551, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.525, 165, 337], 'false,true': [1.66e-07, 508, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.651, 171, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 499, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.732, 175, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.43e-07, 502, 0]}]
{'': [0.2315450338198673, -4.924553614178912e-17], 'true': [nan, 0.2315450338198673], 'true,false': [nan, 0.2315450338198673], 'true,false,false': [nan, 0.2315450338198673], 'false': [nan, -4.924553614178912e-17]}
{'': [0.22656015263505871, -1.2456160764087123e-16], 'true': [nan, 0.22656015263505871], 'true,false': [nan, 0.22656015263505871], 'true,false,false': [0.22656015263505871, nan], 'false': [nan, -1.2456160764087123e-16]}
{'': [0.2257755605686697, -5.084990952481633e-18], 'true': [nan, 0.2257755605686697], 'true,false': [nan, 0.2257755605686697], 'true,false,false': [nan, 0.2257755605686697], 'false': [nan, -5.084990952481633e-18]}
{'': [0.22807322485207274, 2.391249591500337e-16], 'true': [nan, 0.22807322485207274], 'true,false': [0.22807322485207274, nan], 'false': [nan, 2.391249591500337e-16]}
{'': [0.23154503381986333, -3.664390336680281e-17], 'true': [nan, 0.23154503381986333], 'true,false': [nan, 0.23154503381986333], 'true,false,false': [nan, 0.23154503381986333], 'false': [nan, -3.664390336680281e-17]}
{'': [0.21147377228331105, 4.133297840595821e-17], 'true': [nan, 0.21147377228331105], 'true,false': [0.21147377228331105, nan], 'false': [nan, 4.133297840595821e-17]}
{'': [0.22770185735871323, -7.092531845155265e-17], 'true': [nan, 0.22770185735871323], 'true,false': [0.22770185735871323, nan], 'false': [nan, -7.092531845155265e-17]}
{'': [0.22065125950381542, 5.419986419429898e-17], 'true': [nan, 0.22065125950381542], 'true,false': [nan, 0.22065125950381542], 'true,false,false': [nan, 0.22065125950381542], 'false': [5.419986419429898e-17, nan]}
{'': [0.22330507161014446, -1.254841254285748e-16], 'true': [nan, 0.22330507161014446], 'true,false': [0.22330507161014446, nan], 'false': [nan, -1.254841254285748e-16]}
{'': [0.2249717712402332, 1.1765710141445881e-16], 'true': [nan, 0.2249717712402332], 'true,false': [nan, 0.2249717712402332], 'true,false,false': [nan, 0.2249717712402332], 'false': [nan, 1.1765710141445881e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.579249382019043
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048813;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.14185106490048785;  // std dev = 0.000, 513.000 (wgt'ed) examples reached here.  /* #neg=513 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1254446385283914;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.1254446385283923;  // std dev = 0.000, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360643;  // std dev = 5.16e-08, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.1123163781936058;  // std dev = 0.000, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1015963294878365;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   else return -0.10159632948783544;  // std dev = 3.38e-07, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926071;  // std dev = 7.88e-08, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.09269127618926162;  // std dev = 0.000, 538.000 (wgt'ed) examples reached here.  /* #neg=538 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6.83e-08, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   else return -0.08518475138839678;  // std dev = 1.38e-07, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0787767547310915;  // std dev = 8.02e-08, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   else return -0.07877675473109214;  // std dev = 0.000, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333682;  // std dev = 9.19e-08, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   else return -0.07324622576333706;  // std dev = 1.12e-07, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 6.32e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.0684269778442035;  // std dev = 0.000, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else return -0.0641918400820253;  // std dev = 2.45e-07, 543.000 (wgt'ed) examples reached here.  /* #neg=543 */
Inference time using transfer learning 0.8289639949798584
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.579249382019043 

Total Inference Time : 1.5737924575805664 

Total revision time: 8.591363191604614
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.625578165054321 

Total Inference Time : 1.5737924575805664 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.213918924331665
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.4939979917032815;  // std dev = 11.078, 530.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.141851064900488;  // std dev = 0.000, 527.000 (wgt'ed) examples reached here.  /* #neg=527 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.45815811923254507;  // std dev = 10.525, 502.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839227;  // std dev = 0.000, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.36219716823327536;  // std dev = 10.671, 509.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360572;  // std dev = 0.000, 533.000 (wgt'ed) examples reached here.  /* #neg=533 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2684060023634525;  // std dev = 10.871, 519.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1015963294878354;  // std dev = 3.50e-07, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.20719836727344249;  // std dev = 10.812, 516.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926158;  // std dev = 0.000, 527.000 (wgt'ed) examples reached here.  /* #neg=527 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.14810443643135826;  // std dev = 10.929, 522.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.40e-07, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.14088990122132952;  // std dev = 10.460, 499.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109201;  // std dev = 0.000, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07261549115220876;  // std dev = 10.985, 525.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333699;  // std dev = 1.32e-07, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.06610313871772773;  // std dev = 10.812, 516.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0684269778442035;  // std dev = 0.000, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.048911809509785874;  // std dev = 10.832, 517.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202543;  // std dev = 2.34e-07, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
Inference time using transfer learning 0.9626407623291016
Parameter learned model CLL:-0.301079 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.078, 193, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 527, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.525, 165, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 493, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.671, 172, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 533, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.871, 182, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.5e-07, 500, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.812, 179, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 527, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.929, 185, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.4e-07, 480, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.46, 162, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 491, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.985, 188, 337], 'false,true': [1.32e-07, 485, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.812, 179, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 468, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.832, 180, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.34e-07, 468, 0]}]
{'': [0.2315450338198673, -1.3145714750779842e-16], 'true': [nan, 0.2315450338198673], 'true,false': [nan, 0.2315450338198673], 'true,false,false': [nan, 0.2315450338198673], 'false': [nan, -1.3145714750779842e-16]}
{'': [0.2206512595038178, -1.2250736823450003e-16], 'true': [nan, 0.2206512595038178], 'true,false': [nan, 0.2206512595038178], 'true,false,false': [0.2206512595038178, nan], 'false': [nan, -1.2250736823450003e-16]}
{'': [0.22372925841724584, -3.332752043902909e-18], 'true': [nan, 0.22372925841724584], 'true,false': [nan, 0.22372925841724584], 'true,false,false': [nan, 0.22372925841724584], 'false': [nan, -3.332752043902909e-18]}
{'': [0.22770185735871246, 2.451372438372346e-16], 'true': [nan, 0.22770185735871246], 'true,false': [0.22770185735871246, nan], 'false': [nan, 2.451372438372346e-16]}
{'': [0.22656015263506107, -4.718974525920969e-17], 'true': [nan, 0.22656015263506107], 'true,false': [nan, 0.22656015263506107], 'true,false,false': [nan, 0.22656015263506107], 'false': [nan, -4.718974525920969e-17]}
{'': [0.2288024250965239, 4.070817756958907e-17], 'true': [nan, 0.2288024250965239], 'true,false': [0.2288024250965239, nan], 'false': [nan, 4.070817756958907e-17]}
{'': [0.2192521315175428, -3.43694296828969e-17], 'true': [nan, 0.2192521315175428], 'true,false': [0.2192521315175428, nan], 'false': [nan, -3.43694296828969e-17]}
{'': [0.22986303854875084, 3.57102663590772e-17], 'true': [nan, 0.22986303854875084], 'true,false': [nan, 0.22986303854875084], 'true,false,false': [nan, 0.22986303854875084], 'false': [3.57102663590772e-17, nan]}
{'': [0.22656015263505602, -1.2810265668751805e-16], 'true': [nan, 0.22656015263505602], 'true,false': [0.22656015263505602, nan], 'false': [nan, -1.2810265668751805e-16]}
{'': [0.2269453662515086, 1.167157538708498e-16], 'true': [nan, 0.2269453662515086], 'true,false': [nan, 0.2269453662515086], 'true,false,false': [nan, 0.2269453662515086], 'false': [nan, 1.167157538708498e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.4873762130737305
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048835;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   else return -0.1418510649004876;  // std dev = 1.03e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1254446385283913;  // std dev = 5.58e-08, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else return -0.12544463852839233;  // std dev = 0.000, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1123163781936063;  // std dev = 8.16e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.11231637819360585;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783652;  // std dev = 0.000, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   else return -0.1015963294878352;  // std dev = 3.99e-07, 549.000 (wgt'ed) examples reached here.  /* #neg=549 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926065;  // std dev = 8.43e-08, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   else return -0.09269127618926135;  // std dev = 0.000, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6.66e-08, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.08518475138839678;  // std dev = 1.52e-07, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109154;  // std dev = 7.88e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.07877675473109223;  // std dev = 6.99e-08, 530.000 (wgt'ed) examples reached here.  /* #neg=530 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333678;  // std dev = 1.02e-07, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   else return -0.07324622576333698;  // std dev = 1.38e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 6.58e-08, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.06842697784420355;  // std dev = 0.000, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.06419184008202537;  // std dev = 2.45e-07, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
Inference time using transfer learning 0.8685305118560791
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.4873762130737305 

Total Inference Time : 1.651494026184082 

Total revision time: 8.258778810501099
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.292993783950806 

Total Inference Time : 1.651494026184082 

Run: 2

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.1652703285217285
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5373156017661747;  // std dev = 10.227, 480.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048785;  // std dev = 0.000, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4199593786149419;  // std dev = 10.826, 509.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839227;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.34203685366789327;  // std dev = 10.788, 507.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360586;  // std dev = 0.000, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.27592765234751954;  // std dev = 10.631, 499.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1015963294878355;  // std dev = 3.24e-07, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21057324345023568;  // std dev = 10.611, 498.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926132;  // std dev = 0.000, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.18986254752163986;  // std dev = 10.112, 475.000 (wgt'ed) examples reached here.  /* #neg=149 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.44e-07, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.15426658945747593;  // std dev = 9.921, 467.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109193;  // std dev = 0.000, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0768406265080091;  // std dev = 10.550, 495.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333699;  // std dev = 1.33e-07, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.06228549525440608;  // std dev = 10.488, 492.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0684269778442035;  // std dev = 0.000, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.025308374689775395;  // std dev = 10.826, 509.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202541;  // std dev = 2.40e-07, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
Inference time using transfer learning 1.0456328392028809
Parameter learned model CLL:-0.30111 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.227, 154, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 512, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.826, 183, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 480, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.788, 181, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 486, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.631, 173, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.24e-07, 476, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.611, 172, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 471, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.112, 149, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.44e-07, 502, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [9.921, 141, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 476, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.55, 169, 326], 'false,true': [1.33e-07, 485, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.488, 166, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 475, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.826, 183, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.4e-07, 477, 0]}]
{'': [0.21789930555555834, -7.632783294297951e-17], 'true': [nan, 0.21789930555555834], 'true,false': [nan, 0.21789930555555834], 'true,false,false': [nan, 0.21789930555555834], 'false': [nan, -7.632783294297951e-17]}
{'': [0.23026775410007874, -1.2397490441647582e-16], 'true': [nan, 0.23026775410007874], 'true,false': [nan, 0.23026775410007874], 'true,false,false': [0.23026775410007874, nan], 'false': [nan, -1.2397490441647582e-16]}
{'': [0.2295515640986802, -1.0965165675310187e-17], 'true': [nan, 0.2295515640986802], 'true,false': [nan, 0.2295515640986802], 'true,false,false': [nan, 0.2295515640986802], 'false': [nan, -1.0965165675310187e-17]}
{'': [0.22649708234103352, 2.2017868387524114e-16], 'true': [nan, 0.22649708234103352], 'true,false': [0.22649708234103352, nan], 'false': [nan, 2.2017868387524114e-16]}
{'': [0.22609312753019917, -7.542916515500002e-18], 'true': [nan, 0.22609312753019917], 'true,false': [nan, 0.22609312753019917], 'true,false,false': [nan, 0.22609312753019917], 'false': [nan, -7.542916515500002e-18]}
{'': [0.21528642659279634, 4.157807343217718e-17], 'true': [nan, 0.21528642659279634], 'true,false': [0.21528642659279634, nan], 'false': [nan, 4.157807343217718e-17]}
{'': [0.21076716386429756, -2.239105259748215e-17], 'true': [nan, 0.21076716386429756], 'true,false': [0.21076716386429756, nan], 'false': [nan, -2.239105259748215e-17]}
{'': [0.22485052545658635, 3.6625914214438153e-17], 'true': [nan, 0.22485052545658635], 'true,false': [nan, 0.22485052545658635], 'true,false,false': [nan, 0.22485052545658635], 'false': [3.6625914214438153e-17, nan]}
{'': [0.22356071121686752, -1.2154020480106978e-16], 'true': [nan, 0.22356071121686752], 'true,false': [0.22356071121686752, nan], 'false': [nan, -1.2154020480106978e-16]}
{'': [0.230267754100067, 1.2103060226521622e-16], 'true': [nan, 0.230267754100067], 'true,false': [nan, 0.230267754100067], 'true,false,false': [nan, 0.230267754100067], 'false': [nan, 1.2103060226521622e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.5216853618621826
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048802;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.14185106490048768;  // std dev = 0.000, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839144;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.12544463852839233;  // std dev = 0.000, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360646;  // std dev = 4.71e-08, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   else return -0.11231637819360593;  // std dev = 0.000, 464.000 (wgt'ed) examples reached here.  /* #neg=464 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783644;  // std dev = 0.000, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   else return -0.10159632948783537;  // std dev = 3.55e-07, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926072;  // std dev = 7.88e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.09269127618926142;  // std dev = 0.000, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 5.96e-08, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else return -0.08518475138839678;  // std dev = 1.43e-07, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109155;  // std dev = 8.02e-08, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.07877675473109189;  // std dev = 0.000, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333695;  // std dev = 5.27e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.07324622576333693;  // std dev = 1.48e-07, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420265;  // std dev = 6.50e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.0684269778442035;  // std dev = 0.000, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.06419184008202541;  // std dev = 2.38e-07, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
Inference time using transfer learning 0.9954876899719238
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.5216853618621826 

Total Inference Time : 1.4674429893493652 

Total revision time: 8.005263566970825
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.024176359176636 

Total Inference Time : 1.4674429893493652 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.101853847503662
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5100604039123853;  // std dev = 10.620, 497.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048785;  // std dev = 0.000, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.43343556220753593;  // std dev = 10.660, 499.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=324 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839224;  // std dev = 0.000, 447.000 (wgt'ed) examples reached here.  /* #neg=447 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3883704076850043;  // std dev = 10.079, 472.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360607;  // std dev = 0.000, 429.000 (wgt'ed) examples reached here.  /* #neg=429 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.26294191572015246;  // std dev = 10.679, 500.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783541;  // std dev = 3.45e-07, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.23179096533558904;  // std dev = 10.172, 476.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=324 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926153;  // std dev = 0.000, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.12492952569872909;  // std dev = 10.926, 513.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.40e-07, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.12885678981461085;  // std dev = 10.392, 486.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109196;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08227071969546641;  // std dev = 10.620, 497.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=324 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333702;  // std dev = 1.21e-07, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.0783579425589411;  // std dev = 10.371, 485.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420336;  // std dev = 0.000, 409.000 (wgt'ed) examples reached here.  /* #neg=409 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04870013583307806;  // std dev = 10.539, 493.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202543;  // std dev = 2.36e-07, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
Inference time using transfer learning 1.1129846572875977
Parameter learned model CLL:-0.306036 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.62, 173, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 512, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.66, 175, 324], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 447, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.079, 148, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 429, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.679, 176, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.45e-07, 496, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.172, 152, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 514, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.926, 189, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.4e-07, 478, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.392, 162, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 480, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.62, 173, 324], 'false,true': [1.21e-07, 479, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.371, 161, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 409, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.539, 169, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.36e-07, 472, 0]}]
{'': [0.2269229056431169, -7.632783294297951e-17], 'true': [nan, 0.2269229056431169], 'true,false': [nan, 0.2269229056431169], 'true,false,false': [nan, 0.2269229056431169], 'false': [nan, -7.632783294297951e-17]}
{'': [0.22770992887578997, -1.1723160349509482e-16], 'true': [nan, 0.22770992887578997], 'true,false': [nan, 0.22770992887578997], 'true,false,false': [0.22770992887578997, nan], 'false': [nan, -1.1723160349509482e-16]}
{'': [0.21523987359954058, -2.0703459666669587e-17], 'true': [nan, 0.21523987359954058], 'true,false': [nan, 0.21523987359954058], 'true,false,false': [nan, 0.21523987359954058], 'false': [nan, -2.0703459666669587e-17]}
{'': [0.22809600000000307, 2.399514279028564e-16], 'true': [nan, 0.22809600000000307], 'true,false': [0.22809600000000307, nan], 'false': [nan, 2.399514279028564e-16]}
{'': [0.21735753124779003, -3.801541874202871e-17], 'true': [nan, 0.21735753124779003], 'true,false': [nan, 0.21735753124779003], 'true,false,false': [nan, 0.21735753124779003], 'false': [nan, -3.801541874202871e-17]}
{'': [0.23268698060941953, 4.08785046723907e-17], 'true': [nan, 0.23268698060941953], 'true,false': [0.23268698060941953, nan], 'false': [nan, 4.08785046723907e-17]}
{'': [0.22222222222222093, -2.590520390792032e-17], 'true': [nan, 0.22222222222222093], 'true,false': [0.22222222222222093, nan], 'false': [nan, -2.590520390792032e-17]}
{'': [0.22692290564311252, 3.0594872494889493e-17], 'true': [nan, 0.22692290564311252], 'true,false': [nan, 0.22692290564311252], 'true,false,false': [nan, 0.22692290564311252], 'false': [3.0594872494889493e-17, nan]}
{'': [0.2217621426293985, -1.2432326290423513e-16], 'true': [nan, 0.2217621426293985], 'true,false': [0.2217621426293985, nan], 'false': [nan, -1.2432326290423513e-16]}
{'': [0.2252879049080644, 1.1807880473767555e-16], 'true': [nan, 0.2252879049080644], 'true,false': [nan, 0.2252879049080644], 'true,false,false': [nan, 0.2252879049080644], 'false': [nan, 1.1807880473767555e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.4434866905212402
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1418510649004882;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.14185106490048763;  // std dev = 5.96e-08, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.12544463852839147;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.12544463852839235;  // std dev = 0.000, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360639;  // std dev = 6.32e-08, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.11231637819360585;  // std dev = 0.000, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783646;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.10159632948783551;  // std dev = 3.21e-07, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926071;  // std dev = 8.02e-08, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else return -0.09269127618926129;  // std dev = 0.000, 465.000 (wgt'ed) examples reached here.  /* #neg=465 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839679;  // std dev = 5.96e-08, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.08518475138839678;  // std dev = 1.43e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109148;  // std dev = 7.74e-08, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   else return -0.07877675473109177;  // std dev = 0.000, 453.000 (wgt'ed) examples reached here.  /* #neg=453 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333688;  // std dev = 7.15e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.07324622576333704;  // std dev = 1.15e-07, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420265;  // std dev = 6.14e-08, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.06842697784420351;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   else return -0.06419184008202544;  // std dev = 2.32e-07, 461.000 (wgt'ed) examples reached here.  /* #neg=461 */
Inference time using transfer learning 1.0252046585083008
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.4434866905212402 

Total Inference Time : 1.766831636428833 

Total revision time: 8.188662767410278
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.207575559616089 

Total Inference Time : 1.766831636428833 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.6282474994659424
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.4956489350995084;  // std dev = 8.599, 320.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048793;  // std dev = 0.000, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.42010672206677474;  // std dev = 8.646, 322.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=204 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839197;  // std dev = 0.000, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.33927992786016137;  // std dev = 8.669, 323.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360688;  // std dev = 0.000, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2910310257385636;  // std dev = 8.352, 310.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1015963294878366;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.18891127524029272;  // std dev = 8.737, 326.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=204 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926042;  // std dev = 1.55e-07, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.18951713045607044;  // std dev = 8.164, 303.000 (wgt'ed) examples reached here.  /* #neg=99 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.01e-07, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.12276253646974289;  // std dev = 8.403, 312.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109143;  // std dev = 3.65e-08, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.13712876049047504;  // std dev = 7.841, 292.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=204 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333704;  // std dev = 8.56e-08, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.046578842689564325;  // std dev = 8.552, 318.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420304;  // std dev = 0.000, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.025474832135255376;  // std dev = 8.669, 323.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202601;  // std dev = 1.03e-07, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
Inference time using transfer learning 1.1617560386657715
Parameter learned model CLL:-0.310638 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.599, 116, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 285, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [8.646, 118, 204], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 281, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.669, 119, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 295, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.352, 106, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 265, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.737, 122, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.55e-07, 298, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.164, 99, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.01e-07, 293, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.403, 108, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.65e-08, 297, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [7.841, 88, 204], 'false,true': [8.56e-08, 322, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.552, 114, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 308, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.669, 119, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.03e-07, 289, 0]}]
{'': [0.23109375000000448, -9.349246523159213e-18], 'true': [nan, 0.23109375000000448], 'true,false': [nan, 0.23109375000000448], 'true,false,false': [nan, 0.23109375000000448], 'false': [nan, -9.349246523159213e-18]}
{'': [0.23216696886694482, -7.58586550633559e-17], 'true': [nan, 0.23216696886694482], 'true,false': [nan, 0.23216696886694482], 'true,false,false': [0.23216696886694482, nan], 'false': [nan, -7.58586550633559e-17]}
{'': [0.23268698060941478, -9.182861627408074e-17], 'true': [nan, 0.23268698060941478], 'true,false': [nan, 0.23268698060941478], 'true,false,false': [nan, 0.23268698060941478], 'false': [nan, -9.182861627408074e-17]}
{'': [0.22501560874089507, -6.368071688415992e-17], 'true': [nan, 0.22501560874089507], 'true,false': [0.22501560874089507, nan], 'false': [nan, -6.368071688415992e-17]}
{'': [0.23418269411720366, 8.047254138222611e-17], 'true': [nan, 0.23418269411720366], 'true,false': [nan, 0.23418269411720366], 'true,false,false': [nan, 0.23418269411720366], 'false': [nan, 8.047254138222611e-17]}
{'': [0.2199784334869126, 3.486024514181379e-17], 'true': [nan, 0.2199784334869126], 'true,false': [0.2199784334869126, nan], 'false': [nan, 3.486024514181379e-17]}
{'': [0.22633136094674383, 4.485749594445077e-18], 'true': [nan, 0.22633136094674383], 'true,false': [0.22633136094674383, nan], 'false': [nan, 4.485749594445077e-18]}
{'': [0.21054606868080258, 2.2756124107223705e-17], 'true': [nan, 0.21054606868080258], 'true,false': [nan, 0.21054606868080258], 'true,false,false': [nan, 0.21054606868080258], 'false': [2.2756124107223705e-17, nan]}
{'': [0.2299750800996793, -6.416223973483048e-17], 'true': [nan, 0.2299750800996793], 'true,false': [0.2299750800996793, nan], 'false': [nan, -6.416223973483048e-17]}
{'': [0.2326869806094167, 3.6879380748794125e-17], 'true': [nan, 0.2326869806094167], 'true,false': [nan, 0.2326869806094167], 'true,false,false': [nan, 0.2326869806094167], 'false': [nan, 3.6879380748794125e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.1251823902130127
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048777;  // std dev = 2.98e-08, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | else return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.1418510649004881;  // std dev = 0.000, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839105;  // std dev = 8.16e-08, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | else return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.125444638528392;  // std dev = 0.000, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1123163781936062;  // std dev = 9.66e-08, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | else return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.11231637819360672;  // std dev = 0.000, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.105570627722166;  // std dev = 0.479, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   else return -0.10159632948783648;  // std dev = 0.000, 329.000 (wgt'ed) examples reached here.  /* #neg=329 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09235757989908447;  // std dev = 1.49e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | else return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.09269127618926043;  // std dev = 1.46e-07, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08490147354587538;  // std dev = 5.27e-08, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | else return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.08518475138839678;  // std dev = 9.66e-08, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( actor(A) )
%   | | then return -0.07853345473799966;  // std dev = 5.37e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else if ( female(B) )
%   | | | then return -0.07853345473799977;  // std dev = 2.63e-09, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.38460693740602103;  // std dev = 0.612, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07877675473109143;  // std dev = 1.49e-08, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07244799213531032;  // std dev = 0.036, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.07324622576333704;  // std dev = 8.69e-08, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( actor(A) )
%   | | then return -0.06827950586750303;  // std dev = 2.79e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | | else return -0.14086350551308527;  // std dev = 0.206, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06842697784420299;  // std dev = 0.000, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( actor(A) )
%   | | then return -0.064061709504579;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else return -0.3282913181939284;  // std dev = 0.567, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.06419184008202596;  // std dev = 1.17e-07, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
Inference time using transfer learning 1.0261073112487793
Refined model CLL: -0.063959


******************************************
Best model found
******************************************
Results 

CLL : -0.084132 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.626761 

Recall : 1.0 

F1 : 0.770563 

Total Learning Time : 2.1251823902130127 

Total Inference Time : 1.4858441352844238 

Total revision time: 7.206841707229614
Best scored revision CLL: -0.063959


Results 

CLL : -0.084132 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.626761 

Recall : 1.0 

F1 : 0.770563 

Total Learning Time : 7.225754499435425 

Total Inference Time : 1.4858441352844238 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.1729934215545654
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5281290543838022;  // std dev = 10.546, 503.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048827;  // std dev = 0.000, 558.000 (wgt'ed) examples reached here.  /* #neg=558 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4291397777948218;  // std dev = 10.890, 520.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839227;  // std dev = 0.000, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3483657457377873;  // std dev = 10.871, 519.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360589;  // std dev = 0.000, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.29244901471788753;  // std dev = 10.525, 502.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783526;  // std dev = 3.80e-07, 530.000 (wgt'ed) examples reached here.  /* #neg=530 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2283767049167391;  // std dev = 10.416, 497.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926132;  // std dev = 0.000, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.14522283572373054;  // std dev = 10.832, 517.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.43e-07, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.09303338799475211;  // std dev = 11.078, 530.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109187;  // std dev = 0.000, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10551937933579009;  // std dev = 10.525, 502.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333695;  // std dev = 1.43e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.047952711596392535;  // std dev = 11.023, 527.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420353;  // std dev = 0.000, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.070950280471969;  // std dev = 10.482, 500.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202537;  // std dev = 2.44e-07, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
Inference time using transfer learning 0.973839282989502
Parameter learned model CLL:-0.301819 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.546, 166, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 558, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.89, 183, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 478, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.871, 182, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 477, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.525, 165, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.8e-07, 530, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.416, 160, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 471, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.832, 180, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.43e-07, 489, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.078, 193, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 468, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.525, 165, 337], 'false,true': [1.43e-07, 492, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.023, 190, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 484, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.482, 163, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.44e-07, 500, 0]}]
{'': [0.22110675904809976, -2.4194107490039255e-16], 'true': [nan, 0.22110675904809976], 'true,false': [nan, 0.22110675904809976], 'true,false,false': [nan, 0.22110675904809976], 'false': [nan, -2.4194107490039255e-16]}
{'': [0.228073224852064, -1.226355140171721e-16], 'true': [nan, 0.228073224852064], 'true,false': [nan, 0.228073224852064], 'true,false,false': [0.228073224852064, nan], 'false': [nan, -1.226355140171721e-16]}
{'': [0.22770185735870738, -1.1172055593712268e-17], 'true': [nan, 0.22770185735870738], 'true,false': [nan, 0.22770185735870738], 'true,false,false': [nan, 0.22770185735870738], 'false': [nan, -1.1172055593712268e-17]}
{'': [0.22065125950382067, 2.731567592662649e-16], 'true': [nan, 0.22065125950382067], 'true,false': [0.22065125950382067, nan], 'false': [nan, 2.731567592662649e-16]}
{'': [0.2182916411952603, -7.542916515500002e-18], 'true': [nan, 0.2182916411952603], 'true,false': [nan, 0.2182916411952603], 'true,false,false': [nan, 0.2182916411952603], 'false': [nan, -7.542916515500002e-18]}
{'': [0.22694536625151213, 4.177526309427992e-17], 'true': [nan, 0.22694536625151213], 'true,false': [0.22694536625151213, nan], 'false': [nan, 4.177526309427992e-17]}
{'': [0.23154503381986422, -1.708035422500241e-17], 'true': [nan, 0.23154503381986422], 'true,false': [0.23154503381986422, nan], 'false': [nan, -1.708035422500241e-17]}
{'': [0.22065125950381909, 4.1520535880290405e-17], 'true': [nan, 0.22065125950381909], 'true,false': [nan, 0.22065125950381909], 'true,false,false': [nan, 0.22065125950381909], 'false': [4.1520535880290405e-17, nan]}
{'': [0.2305484843138457, -1.2111523905001707e-16], 'true': [nan, 0.2305484843138457], 'true,false': [0.2305484843138457, nan], 'false': [nan, -1.2111523905001707e-16]}
{'': [0.21972399999999923, 1.190159082398168e-16], 'true': [nan, 0.21972399999999923], 'true,false': [nan, 0.21972399999999923], 'true,false,false': [nan, 0.21972399999999923], 'false': [nan, 1.190159082398168e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.470781087875366
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048813;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.14185106490048727;  // std dev = 2.67e-07, 459.000 (wgt'ed) examples reached here.  /* #neg=459 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1254446385283915;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else return -0.12544463852839235;  // std dev = 0.000, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360664;  // std dev = 0.000, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   else return -0.1123163781936057;  // std dev = 4.21e-08, 548.000 (wgt'ed) examples reached here.  /* #neg=548 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783644;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.10159632948783542;  // std dev = 3.40e-07, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926071;  // std dev = 7.74e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.09269127618926155;  // std dev = 0.000, 522.000 (wgt'ed) examples reached here.  /* #neg=522 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6.66e-08, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else return -0.08518475138839678;  // std dev = 1.50e-07, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109154;  // std dev = 8.02e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.07877675473109191;  // std dev = 1.62e-07, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333681;  // std dev = 8.30e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.07324622576333738;  // std dev = 0.000, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420264;  // std dev = 6.23e-08, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.06842697784420353;  // std dev = 0.000, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   else return -0.06419184008202533;  // std dev = 2.46e-07, 526.000 (wgt'ed) examples reached here.  /* #neg=526 */
Inference time using transfer learning 0.8167917728424072
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.470781087875366 

Total Inference Time : 1.5116641521453857 

Total revision time: 8.216721057891846
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.235633850097656 

Total Inference Time : 1.5116641521453857 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.1993372440338135
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.48688027838309;  // std dev = 11.186, 536.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004875;  // std dev = 1.79e-07, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.47022096475490555;  // std dev = 10.349, 494.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283923;  // std dev = 0.000, 453.000 (wgt'ed) examples reached here.  /* #neg=453 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.35091290042564605;  // std dev = 10.832, 517.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360586;  // std dev = 0.000, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.29188887869857555;  // std dev = 10.525, 502.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783541;  // std dev = 3.45e-07, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21718473346700687;  // std dev = 10.588, 505.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0926912761892613;  // std dev = 0.000, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.14505379121634923;  // std dev = 10.871, 519.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.50e-07, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.1308679273246148;  // std dev = 10.525, 502.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109193;  // std dev = 1.59e-07, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07286112782894406;  // std dev = 10.929, 522.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333738;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.09870075944144573;  // std dev = 10.235, 489.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420355;  // std dev = 0.000, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07086128128850101;  // std dev = 10.304, 492.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202539;  // std dev = 2.45e-07, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
Inference time using transfer learning 0.9714798927307129
Parameter learned model CLL:-0.311315 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.186, 199, 337], 'false,true': [0.0, 0, 0], 'false,false': [1.79e-07, 478, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.349, 157, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 453, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.832, 180, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 488, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.525, 165, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.45e-07, 495, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.588, 168, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 469, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.871, 182, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.5e-07, 501, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.525, 165, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.59e-07, 477, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.929, 185, 337], 'false,true': [0.0, 489, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.235, 152, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 506, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.304, 155, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.45e-07, 491, 0]}]
{'': [0.2334282412564071, 6.689209855482115e-17], 'true': [nan, 0.2334282412564071], 'true,false': [nan, 0.2334282412564071], 'true,false,false': [nan, 0.2334282412564071], 'false': [nan, 6.689209855482115e-17]}
{'': [0.21680817584290477, -1.3528545465631047e-16], 'true': [nan, 0.21680817584290477], 'true,false': [nan, 0.21680817584290477], 'true,false,false': [0.21680817584290477, nan], 'false': [nan, -1.3528545465631047e-16]}
{'': [0.22694536625152137, -5.4601132358614255e-18], 'true': [nan, 0.22694536625152137], 'true,false': [nan, 0.22694536625152137], 'true,false,false': [nan, 0.22694536625152137], 'false': [nan, -5.4601132358614255e-18]}
{'': [0.22065125950381473, 2.4043617826225614e-16], 'true': [nan, 0.22065125950381473], 'true,false': [0.22065125950381473, nan], 'false': [nan, 2.4043617826225614e-16]}
{'': [0.22200176453288872, -7.57508247078998e-18], 'true': [nan, 0.22200176453288872], 'true,false': [nan, 0.22200176453288872], 'true,false,false': [nan, 0.22200176453288872], 'false': [nan, -7.57508247078998e-18]}
{'': [0.22770185735871248, 4.5206686032641104e-17], 'true': [nan, 0.22770185735871248], 'true,false': [0.22770185735871248, nan], 'false': [nan, 4.5206686032641104e-17]}
{'': [0.22065125950381653, 5.306726407013327e-17], 'true': [nan, 0.22065125950381653], 'true,false': [0.22065125950381653, nan], 'false': [nan, 5.306726407013327e-17]}
{'': [0.22880242509651672, -1.8163157867078227e-17], 'true': [nan, 0.22880242509651672], 'true,false': [nan, 0.22880242509651672], 'true,false,false': [nan, 0.22880242509651672], 'false': [-1.8163157867078227e-17, nan]}
{'': [0.2142179064155786, -1.1935994573045161e-16], 'true': [nan, 0.2142179064155786], 'true,false': [0.2142179064155786, nan], 'false': [nan, -1.1935994573045161e-16]}
{'': [0.2157900389979525, 1.2210192124187057e-16], 'true': [nan, 0.2157900389979525], 'true,false': [nan, 0.2157900389979525], 'true,false,false': [nan, 0.2157900389979525], 'false': [nan, 1.2210192124187057e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.5579373836517334
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048813;  // std dev = 0.000, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else return -0.14185106490048796;  // std dev = 0.000, 523.000 (wgt'ed) examples reached here.  /* #neg=523 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839163;  // std dev = 0.000, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   else return -0.1254446385283923;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360629;  // std dev = 8.43e-08, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.11231637819360586;  // std dev = 0.000, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783653;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   else return -0.1015963294878355;  // std dev = 3.24e-07, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926072;  // std dev = 7.88e-08, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else return -0.09269127618926151;  // std dev = 0.000, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6.66e-08, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else return -0.08518475138839678;  // std dev = 1.41e-07, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109154;  // std dev = 7.60e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.07877675473109204;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333685;  // std dev = 7.45e-08, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else return -0.07324622576333688;  // std dev = 1.63e-07, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420264;  // std dev = 7.38e-08, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   else return -0.06842697784420358;  // std dev = 0.000, 517.000 (wgt'ed) examples reached here.  /* #neg=517 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.06419184008202543;  // std dev = 2.35e-07, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
Inference time using transfer learning 0.8532223701477051
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.5579373836517334 

Total Inference Time : 1.6135783195495605 

Total revision time: 8.362935781478882
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.381848573684692 

Total Inference Time : 1.6135783195495605 

Run: 3

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.099527597427368
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5062602671074603;  // std dev = 10.711, 503.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004873;  // std dev = 2.60e-07, 461.000 (wgt'ed) examples reached here.  /* #neg=461 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4639461717777832;  // std dev = 10.227, 480.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839235;  // std dev = 0.000, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3643440645230409;  // std dev = 10.403, 488.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360589;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.27690777533599686;  // std dev = 10.488, 492.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783542;  // std dev = 3.42e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21230241656266935;  // std dev = 10.446, 490.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926125;  // std dev = 4.21e-08, 457.000 (wgt'ed) examples reached here.  /* #neg=457 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.1499957193102274;  // std dev = 10.591, 497.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.49e-07, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.08723078604317872;  // std dev = 10.974, 517.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109187;  // std dev = 1.70e-07, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09504007625207227;  // std dev = 10.529, 494.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333767;  // std dev = 0.000, 444.000 (wgt'ed) examples reached here.  /* #neg=444 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.09679553878836172;  // std dev = 10.136, 476.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420347;  // std dev = 0.000, 456.000 (wgt'ed) examples reached here.  /* #neg=456 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04199643954169594;  // std dev = 10.631, 499.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202537;  // std dev = 2.45e-07, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
Inference time using transfer learning 1.1375677585601807
Parameter learned model CLL:-0.301174 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.711, 177, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.6e-07, 461, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.227, 154, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 510, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.403, 162, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 480, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.488, 166, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.42e-07, 492, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.446, 164, 326], 'false,true': [0.0, 0, 0], 'false,false': [4.21e-08, 457, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.591, 171, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.49e-07, 498, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.974, 191, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.7e-07, 467, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.529, 168, 326], 'false,true': [0.0, 444, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.136, 150, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 456, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.631, 173, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.45e-07, 501, 0]}]
{'': [0.2280630333308328, 1.4642420801997727e-16], 'true': [nan, 0.2280630333308328], 'true,false': [nan, 0.2280630333308328], 'true,false,false': [nan, 0.2280630333308328], 'false': [nan, 1.4642420801997727e-16]}
{'': [0.2178993055555519, -1.4280515767727505e-16], 'true': [nan, 0.2178993055555519], 'true,false': [nan, 0.2178993055555519], 'true,false,false': [0.2178993055555519, nan], 'false': [nan, -1.4280515767727505e-16]}
{'': [0.22176498253157967, -5.551115123125783e-18], 'true': [nan, 0.22176498253157967], 'true,false': [nan, 0.22176498253157967], 'true,false,false': [nan, 0.22176498253157967], 'false': [nan, -5.551115123125783e-18]}
{'': [0.2235607112168683, 2.38291771139058e-16], 'true': [nan, 0.2235607112168683], 'true,false': [0.2235607112168683, nan], 'false': [nan, 2.38291771139058e-16]}
{'': [0.22267388588088355, 3.8869952722106136e-18], 'true': [nan, 0.22267388588088355], 'true,false': [nan, 0.22267388588088355], 'true,false,false': [nan, 0.22267388588088355], 'false': [nan, 3.8869952722106136e-18]}
{'': [0.22568408438558668, 4.458727006526733e-17], 'true': [nan, 0.22568408438558668], 'true,false': [0.22568408438558668, nan], 'false': [nan, 4.458727006526733e-17]}
{'': [0.2329538439666422, 6.181113199197873e-17], 'true': [nan, 0.2329538439666422], 'true,false': [0.2329538439666422, nan], 'false': [nan, 6.181113199197873e-17]}
{'': [0.22442590437476495, -6.40128590774865e-17], 'true': [nan, 0.22442590437476495], 'true,false': [nan, 0.22442590437476495], 'true,false,false': [nan, 0.22442590437476495], 'false': [-6.40128590774865e-17, nan]}
{'': [0.2158216227667527, -1.246566203087895e-16], 'true': [nan, 0.2158216227667527], 'true,false': [0.2158216227667527, nan], 'false': [nan, -1.246566203087895e-16]}
{'': [0.2264970823410361, 1.1966475714522646e-16], 'true': [nan, 0.2264970823410361], 'true,false': [nan, 0.2264970823410361], 'true,false,false': [nan, 0.2264970823410361], 'false': [nan, 1.1966475714522646e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.4018399715423584
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048824;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else return -0.14185106490048774;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1254446385283914;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.12544463852839227;  // std dev = 0.000, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1123163781936062;  // std dev = 9.42e-08, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.11231637819360589;  // std dev = 0.000, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783645;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.10159632948783537;  // std dev = 3.55e-07, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926076;  // std dev = 7.45e-08, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.09269127618926133;  // std dev = 0.000, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 5.96e-08, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.08518475138839678;  // std dev = 1.37e-07, 452.000 (wgt'ed) examples reached here.  /* #neg=452 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109154;  // std dev = 8.02e-08, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.07877675473109218;  // std dev = 0.000, 519.000 (wgt'ed) examples reached here.  /* #neg=519 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333689;  // std dev = 6.91e-08, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.0732462257633369;  // std dev = 1.56e-07, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420267;  // std dev = 6.05e-08, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.0684269778442035;  // std dev = 0.000, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.06419184008202536;  // std dev = 2.45e-07, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
Inference time using transfer learning 0.9811618328094482
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.4018399715423584 

Total Inference Time : 1.4044711589813232 

Total revision time: 7.9779884815216064
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.996999740600586 

Total Inference Time : 1.4044711589813232 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.2475643157958984
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5207256222160724;  // std dev = 10.456, 489.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048743;  // std dev = 2.02e-07, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.47168793628128763;  // std dev = 10.032, 470.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=324 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 465.000 (wgt'ed) examples reached here.  /* #neg=465 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.35281944108031416;  // std dev = 10.477, 490.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.112316378193606;  // std dev = 0.000, 449.000 (wgt'ed) examples reached here.  /* #neg=449 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.24956730699995827;  // std dev = 10.833, 508.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1015963294878354;  // std dev = 3.50e-07, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21369735842022916;  // std dev = 10.456, 489.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=324 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926115;  // std dev = 8.69e-08, 441.000 (wgt'ed) examples reached here.  /* #neg=441 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.15910008633009415;  // std dev = 10.477, 490.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.49e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.11673494895948945;  // std dev = 10.518, 492.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109183;  // std dev = 1.75e-07, 462.000 (wgt'ed) examples reached here.  /* #neg=462 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09468961977027142;  // std dev = 10.414, 487.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=324 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333753;  // std dev = 0.000, 464.000 (wgt'ed) examples reached here.  /* #neg=464 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.07856189332919246;  // std dev = 10.306, 482.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420355;  // std dev = 0.000, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04210452636822958;  // std dev = 10.580, 495.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202537;  // std dev = 2.46e-07, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
Inference time using transfer learning 1.08854079246521
Parameter learned model CLL:-0.307511 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.456, 165, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.02e-07, 473, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.032, 146, 324], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 465, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.477, 166, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 449, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.833, 184, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.5e-07, 500, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.456, 165, 324], 'false,true': [0.0, 0, 0], 'false,false': [8.69e-08, 441, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.477, 166, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.49e-07, 492, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.518, 168, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.75e-07, 462, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.414, 163, 324], 'false,true': [0.0, 464, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.306, 158, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 504, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.58, 171, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.46e-07, 496, 0]}]
{'': [0.22356882080620546, 8.637675963257032e-17], 'true': [nan, 0.22356882080620546], 'true,false': [nan, 0.22356882080620546], 'true,false,false': [nan, 0.22356882080620546], 'false': [nan, 8.637675963257032e-17]}
{'': [0.21414214576731183, -1.3752440046969682e-16], 'true': [nan, 0.21414214576731183], 'true,false': [nan, 0.21414214576731183], 'true,false,false': [0.21414214576731183, nan], 'false': [nan, -1.3752440046969682e-16]}
{'': [0.22400666389004067, -1.1868753938086306e-17], 'true': [nan, 0.22400666389004067], 'true,false': [nan, 0.22400666389004067], 'true,false,false': [nan, 0.22400666389004067], 'false': [nan, -1.1868753938086306e-17]}
{'': [0.23101246202492792, 2.451372438372346e-16], 'true': [nan, 0.23101246202492792], 'true,false': [0.23101246202492792, nan], 'false': [nan, 2.451372438372346e-16]}
{'': [0.22356882080620344, 1.7119085186963865e-17], 'true': [nan, 0.22356882080620344], 'true,false': [nan, 0.22356882080620344], 'true,false,false': [nan, 0.22356882080620344], 'false': [nan, 1.7119085186963865e-17]}
{'': [0.22400666389004617, 4.5131017261185224e-17], 'true': [nan, 0.22400666389004617], 'true,false': [0.22400666389004617, nan], 'false': [nan, 4.5131017261185224e-17]}
{'': [0.22486615110053618, 6.632501186072363e-17], 'true': [nan, 0.22486615110053618], 'true,false': [0.22486615110053618, nan], 'false': [nan, 6.632501186072363e-17]}
{'': [0.22267665673001366, -4.2111907830609384e-17], 'true': [nan, 0.22267665673001366], 'true,false': [nan, 0.22267665673001366], 'true,false,false': [nan, 0.22267665673001366], 'false': [-4.2111907830609384e-17, nan]}
{'': [0.22034744580843954, -1.1983359630874705e-16], 'true': [nan, 0.22034744580843954], 'true,false': [0.22034744580843954, nan], 'false': [nan, -1.1983359630874705e-16]}
{'': [0.22611570247934035, 1.217663962492107e-16], 'true': [nan, 0.22611570247934035], 'true,false': [nan, 0.22611570247934035], 'true,false,false': [nan, 0.22611570247934035], 'false': [nan, 1.217663962492107e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.5500833988189697
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1418510649004882;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.14185106490048746;  // std dev = 1.93e-07, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.12544463852839144;  // std dev = 0.000, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.12544463852839233;  // std dev = 0.000, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1123163781936064;  // std dev = 5.96e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.1123163781936058;  // std dev = 0.000, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.10159632948783562;  // std dev = 2.97e-07, 453.000 (wgt'ed) examples reached here.  /* #neg=453 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926078;  // std dev = 6.99e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.09269127618926151;  // std dev = 0.000, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839679;  // std dev = 5.96e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.08518475138839678;  // std dev = 1.37e-07, 460.000 (wgt'ed) examples reached here.  /* #neg=460 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109147;  // std dev = 7.74e-08, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   else return -0.07877675473109184;  // std dev = 0.000, 463.000 (wgt'ed) examples reached here.  /* #neg=463 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333688;  // std dev = 7.15e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.07324622576333718;  // std dev = 5.16e-08, 450.000 (wgt'ed) examples reached here.  /* #neg=450 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420265;  // std dev = 6.75e-08, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   else return -0.06842697784420353;  // std dev = 0.000, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.06419184008202534;  // std dev = 2.46e-07, 521.000 (wgt'ed) examples reached here.  /* #neg=521 */
Inference time using transfer learning 0.9742145538330078
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.5500833988189697 

Total Inference Time : 1.4920942783355713 

Total revision time: 8.246222734451294
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.265233993530273 

Total Inference Time : 1.4920942783355713 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.6928706169128418
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.47260676642480953;  // std dev = 8.869, 332.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004879;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.46590580688571265;  // std dev = 8.136, 302.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=204 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839197;  // std dev = 0.000, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3631655014586281;  // std dev = 8.326, 309.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360672;  // std dev = 0.000, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.25560526911038894;  // std dev = 8.646, 322.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783663;  // std dev = 0.000, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21844753359397473;  // std dev = 8.352, 310.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=204 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926042;  // std dev = 1.70e-07, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.15991313669785948;  // std dev = 8.403, 312.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 9.77e-08, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.11171051611110105;  // std dev = 8.503, 316.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109143;  // std dev = 3.65e-08, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1073272051341606;  // std dev = 8.219, 305.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=204 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333688;  // std dev = 1.10e-07, 272.000 (wgt'ed) examples reached here.  /* #neg=272 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.057817194969539076;  // std dev = 8.503, 316.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.068426977844203;  // std dev = 0.000, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.031853448831326764;  // std dev = 8.646, 322.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202587;  // std dev = 1.33e-07, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
Inference time using transfer learning 1.1869196891784668
Parameter learned model CLL:-0.308721 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.869, 128, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 289, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [8.136, 98, 204], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 285, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.326, 105, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 313, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.646, 118, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 309, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.352, 106, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.7e-07, 317, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.403, 108, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [9.77e-08, 275, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.503, 112, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.65e-08, 300, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.219, 101, 204], 'false,true': [1.1e-07, 272, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.503, 112, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 299, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.646, 118, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.33e-07, 317, 0]}]
{'': [0.2368994048483133, 0.0], 'true': [nan, 0.2368994048483133], 'true,false': [nan, 0.2368994048483133], 'true,false,false': [nan, 0.2368994048483133], 'false': [nan, 0.0]}
{'': [0.21920091224068827, -8.102680320071318e-17], 'true': [nan, 0.21920091224068827], 'true,false': [nan, 0.21920091224068827], 'true,false,false': [0.21920091224068827, nan], 'false': [nan, -8.102680320071318e-17]}
{'': [0.22433782637383587, -5.675261467732429e-17], 'true': [nan, 0.22433782637383587], 'true,false': [nan, 0.22433782637383587], 'true,false,false': [nan, 0.22433782637383587], 'false': [nan, -5.675261467732429e-17]}
{'': [0.23216696886694085, -5.0301366811495766e-17], 'true': [nan, 0.23216696886694085], 'true,false': [0.23216696886694085, nan], 'false': [nan, -5.0301366811495766e-17]}
{'': [0.22501560874089452, 9.105930170427152e-17], 'true': [nan, 0.22501560874089452], 'true,false': [nan, 0.22501560874089452], 'true,false,false': [nan, 0.22501560874089452], 'false': [nan, 9.105930170427152e-17]}
{'': [0.22633136094674391, 3.47197018610049e-17], 'true': [nan, 0.22633136094674391], 'true,false': [0.22633136094674391, nan], 'false': [nan, 3.47197018610049e-17]}
{'': [0.22880948565934933, 4.440892098500626e-18], 'true': [nan, 0.22880948565934933], 'true,false': [0.22880948565934933, nan], 'false': [nan, 4.440892098500626e-18]}
{'': [0.221488847084117, 4.408238480129298e-17], 'true': [nan, 0.221488847084117], 'true,false': [nan, 0.221488847084117], 'true,false,false': [nan, 0.221488847084117], 'false': [4.408238480129298e-17, nan]}
{'': [0.22880948565934883, -5.643943135218187e-17], 'true': [nan, 0.22880948565934883], 'true,false': [0.22880948565934883, nan], 'false': [nan, -5.643943135218187e-17]}
{'': [0.23216696886694302, 5.603649335647477e-17], 'true': [nan, 0.23216696886694302], 'true,false': [nan, 0.23216696886694302], 'true,false,false': [nan, 0.23216696886694302], 'false': [nan, 5.603649335647477e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.003269910812378
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.14185106490048763;  // std dev = 8.43e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else return -0.14185106490048788;  // std dev = 5.96e-08, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.12544463852839133;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   else return -0.12544463852839205;  // std dev = 0.000, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.11231637819360618;  // std dev = 8.82e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   else return -0.11231637819360696;  // std dev = 0.000, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.1015963294878363;  // std dev = 2.11e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.10159632948783663;  // std dev = 0.000, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.09269127618926087;  // std dev = 6.58e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   else return -0.09269127618926042;  // std dev = 1.69e-07, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.08735922012483176;  // std dev = 0.229, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   else return -0.08518475138839678;  // std dev = 1.07e-07, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07861909587669479;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | else return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.07877675473109143;  // std dev = 5.16e-08, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07310944003102818;  // std dev = 1.05e-08, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | else return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.07324622576333699;  // std dev = 9.54e-08, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06830723341091156;  // std dev = 0.000, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | else return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06842697784420292;  // std dev = 0.000, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.0640861789676739;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else return -0.06419184008202597;  // std dev = 1.14e-07, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
Inference time using transfer learning 1.011049747467041
Refined model CLL: -0.064223


******************************************
Best model found
******************************************
Results 

CLL : -0.080841 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.003269910812378 

Total Inference Time : 1.5076649188995361 

Total revision time: 7.083004713058472
Best scored revision CLL: -0.064223


Results 

CLL : -0.080841 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.102015972137451 

Total Inference Time : 1.5076649188995361 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.1494147777557373
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5348557624087449;  // std dev = 10.438, 498.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048766;  // std dev = 0.000, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.43427932044684525;  // std dev = 10.792, 515.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839235;  // std dev = 0.000, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3678525219765915;  // std dev = 10.525, 502.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936059;  // std dev = 0.000, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2580880208866206;  // std dev = 10.948, 523.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783542;  // std dev = 3.40e-07, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1917369707044133;  // std dev = 11.004, 526.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926136;  // std dev = 0.000, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.1538759536952181;  // std dev = 10.851, 518.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.43e-07, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.10557017281280882;  // std dev = 11.004, 526.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109212;  // std dev = 0.000, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10475247323638752;  // std dev = 10.609, 506.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333713;  // std dev = 8.43e-08, 460.000 (wgt'ed) examples reached here.  /* #neg=460 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.05139480590025837;  // std dev = 11.041, 528.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420351;  // std dev = 0.000, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0815424903486854;  // std dev = 10.371, 495.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202539;  // std dev = 2.43e-07, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
Inference time using transfer learning 0.9955356121063232
Parameter learned model CLL:-0.30106 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.438, 161, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 493, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.792, 178, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 507, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.525, 165, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 471, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.948, 186, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.4e-07, 491, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.004, 189, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 479, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.851, 181, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.43e-07, 499, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.004, 189, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 510, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.609, 169, 337], 'false,true': [8.43e-08, 460, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.041, 191, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 479, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.371, 158, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.43e-07, 489, 0]}]
{'': [0.21877469718230622, 0.0], 'true': [nan, 0.21877469718230622], 'true,false': [nan, 0.21877469718230622], 'true,false,false': [nan, 0.21877469718230622], 'false': [nan, 0.0]}
{'': [0.2261702328211984, -1.383946650025836e-16], 'true': [nan, 0.2261702328211984], 'true,false': [nan, 0.2261702328211984], 'true,false,false': [0.2261702328211984, nan], 'false': [nan, -1.383946650025836e-16]}
{'': [0.22065125950382505, -1.3200103902125004e-17], 'true': [nan, 0.22065125950382505], 'true,false': [nan, 0.22065125950382505], 'true,false,false': [nan, 0.22065125950382505], 'false': [nan, -1.3200103902125004e-17]}
{'': [0.22916034497256102, 2.3515925572508406e-16], 'true': [nan, 0.22916034497256102], 'true,false': [0.22916034497256102, nan], 'false': [nan, 2.3515925572508406e-16]}
{'': [0.23020789660107785, -1.4833877573279752e-17], 'true': [nan, 0.23020789660107785], 'true,false': [nan, 0.23020789660107785], 'true,false,false': [nan, 0.23020789660107785], 'false': [nan, -1.4833877573279752e-17]}
{'': [0.22732591941086516, 4.093808347315206e-17], 'true': [nan, 0.22732591941086516], 'true,false': [0.22732591941086516, nan], 'false': [nan, 4.093808347315206e-17]}
{'': [0.230207896601081, -4.6150447298143765e-17], 'true': [nan, 0.230207896601081], 'true,false': [0.230207896601081, nan], 'false': [nan, -4.6150447298143765e-17]}
{'': [0.22244137543158138, 1.544658121217609e-17], 'true': [nan, 0.22244137543158138], 'true,false': [nan, 0.22244137543158138], 'true,false,false': [nan, 0.22244137543158138], 'false': [1.544658121217609e-17, nan]}
{'': [0.2308848427456393, -1.2701507672120788e-16], 'true': [nan, 0.2308848427456393], 'true,false': [0.2308848427456393, nan], 'false': [nan, -1.2701507672120788e-16]}
{'': [0.21730843791449733, 1.207849998160702e-16], 'true': [nan, 0.21730843791449733], 'true,false': [nan, 0.21730843791449733], 'true,false,false': [nan, 0.21730843791449733], 'false': [nan, 1.207849998160702e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.467542886734009
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048835;  // std dev = 0.000, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   else return -0.14185106490048752;  // std dev = 1.69e-07, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839158;  // std dev = 0.000, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   else return -0.12544463852839235;  // std dev = 0.000, 531.000 (wgt'ed) examples reached here.  /* #neg=531 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360644;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else return -0.11231637819360582;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1015963294878365;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else return -0.1015963294878353;  // std dev = 3.76e-07, 524.000 (wgt'ed) examples reached here.  /* #neg=524 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926071;  // std dev = 7.45e-08, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.09269127618926137;  // std dev = 0.000, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6.14e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.08518475138839678;  // std dev = 1.52e-07, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109154;  // std dev = 7.30e-08, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.07877675473109193;  // std dev = 1.59e-07, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333685;  // std dev = 7.38e-08, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.07324622576333699;  // std dev = 1.33e-07, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420262;  // std dev = 3.49e-08, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   else return -0.06842697784420358;  // std dev = 0.000, 518.000 (wgt'ed) examples reached here.  /* #neg=518 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   else return -0.06419184008202533;  // std dev = 2.46e-07, 532.000 (wgt'ed) examples reached here.  /* #neg=532 */
Inference time using transfer learning 0.8205177783966064
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.467542886734009 

Total Inference Time : 1.6964449882507324 

Total revision time: 8.491604089736938
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.510615348815918 

Total Inference Time : 1.6964449882507324 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.263298273086548
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.520231449834282;  // std dev = 10.671, 509.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048777;  // std dev = 0.000, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4267698405923678;  // std dev = 10.948, 523.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283923;  // std dev = 0.000, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3394533874196515;  // std dev = 11.041, 528.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360572;  // std dev = 0.000, 533.000 (wgt'ed) examples reached here.  /* #neg=533 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.28902303906034676;  // std dev = 10.651, 508.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783545;  // std dev = 3.36e-07, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.20025542165510807;  // std dev = 10.948, 523.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926143;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.14919618865522621;  // std dev = 10.967, 524.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.48e-07, 521.000 (wgt'ed) examples reached here.  /* #neg=521 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.12572830399646304;  // std dev = 10.753, 513.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109204;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09203057232164708;  // std dev = 10.792, 515.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333688;  // std dev = 1.62e-07, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.08647136946869614;  // std dev = 10.525, 502.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420353;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.048695967660194434;  // std dev = 10.792, 515.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202537;  // std dev = 2.46e-07, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
Inference time using transfer learning 0.9322731494903564
Parameter learned model CLL:-0.302733 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.671, 172, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 503, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.948, 186, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 508, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.041, 191, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 533, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.651, 171, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.36e-07, 487, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.948, 186, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 494, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.967, 187, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.48e-07, 521, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.753, 176, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 494, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.792, 178, 337], 'false,true': [1.62e-07, 505, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.525, 165, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 489, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.792, 178, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.46e-07, 496, 0]}]
{'': [0.2237292584172544, -3.88467698477192e-17], 'true': [nan, 0.2237292584172544], 'true,false': [nan, 0.2237292584172544], 'true,false,false': [nan, 0.2237292584172544], 'false': [nan, -3.88467698477192e-17]}
{'': [0.22916034497256396, -1.2588355554804924e-16], 'true': [nan, 0.22916034497256396], 'true,false': [nan, 0.22916034497256396], 'true,false,false': [0.22916034497256396, nan], 'false': [nan, -1.2588355554804924e-16]}
{'': [0.23088484274563761, -3.332752043902909e-18], 'true': [nan, 0.23088484274563761], 'true,false': [nan, 0.23088484274563761], 'true,false,false': [nan, 0.23088484274563761], 'false': [nan, -3.332752043902909e-18]}
{'': [0.2233050716101396, 2.316194236178971e-16], 'true': [nan, 0.2233050716101396], 'true,false': [0.2233050716101396, nan], 'false': [nan, 2.316194236178971e-16]}
{'': [0.22916034497256232, -2.5171048331582497e-17], 'true': [nan, 0.22916034497256232], 'true,false': [nan, 0.22916034497256232], 'true,false,false': [nan, 0.22916034497256232], 'false': [nan, -2.5171048331582497e-17]}
{'': [0.2295138686556741, 4.17665475674723e-17], 'true': [nan, 0.2295138686556741], 'true,false': [0.2295138686556741, nan], 'false': [nan, 4.17665475674723e-17]}
{'': [0.22537608912903623, -3.5059674461847047e-17], 'true': [nan, 0.22537608912903623], 'true,false': [0.22537608912903623, nan], 'false': [nan, -3.5059674461847047e-17]}
{'': [0.22617023282118942, 5.1883689863670685e-17], 'true': [nan, 0.22617023282118942], 'true,false': [nan, 0.22617023282118942], 'true,false,false': [nan, 0.22617023282118942], 'false': [5.1883689863670685e-17, nan]}
{'': [0.220651259503819, -1.207849998160702e-16], 'true': [nan, 0.220651259503819], 'true,false': [0.220651259503819, nan], 'false': [nan, -1.207849998160702e-16]}
{'': [0.2261702328211912, 1.217663962492107e-16], 'true': [nan, 0.2261702328211912], 'true,false': [nan, 0.2261702328211912], 'true,false,false': [nan, 0.2261702328211912], 'false': [nan, 1.217663962492107e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.676096200942993
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1418510649004882;  // std dev = 0.000, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else return -0.14185106490048768;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839152;  // std dev = 0.000, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   else return -0.12544463852839233;  // std dev = 0.000, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1123163781936066;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   else return -0.11231637819360582;  // std dev = 0.000, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783649;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.10159632948783541;  // std dev = 3.44e-07, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0926912761892607;  // std dev = 7.45e-08, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   else return -0.0926912761892614;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6.50e-08, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.08518475138839678;  // std dev = 1.44e-07, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109148;  // std dev = 8.02e-08, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.07877675473109225;  // std dev = 0.000, 533.000 (wgt'ed) examples reached here.  /* #neg=533 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333681;  // std dev = 8.49e-08, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else return -0.07324622576333696;  // std dev = 1.41e-07, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420264;  // std dev = 6.91e-08, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.06842697784420355;  // std dev = 0.000, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.06419184008202541;  // std dev = 2.38e-07, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
Inference time using transfer learning 0.8479602336883545
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.676096200942993 

Total Inference Time : 1.5631229877471924 

Total revision time: 8.647307872772217
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.666319131851196 

Total Inference Time : 1.5631229877471924 

Run: 4

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.143495559692383
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5303138835531163;  // std dev = 10.338, 485.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048732;  // std dev = 2.53e-07, 463.000 (wgt'ed) examples reached here.  /* #neg=463 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.44329063750535824;  // std dev = 10.488, 492.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 465.000 (wgt'ed) examples reached here.  /* #neg=465 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3411367882715895;  // std dev = 10.750, 505.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360593;  // std dev = 0.000, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2557076167122136;  // std dev = 10.883, 512.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783541;  // std dev = 3.44e-07, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.21439515603224762;  // std dev = 10.570, 496.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926157;  // std dev = 0.000, 525.000 (wgt'ed) examples reached here.  /* #neg=525 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.18013745467290865;  // std dev = 10.272, 482.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.44e-07, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.1255145830586856;  // std dev = 10.424, 489.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109191;  // std dev = 0.000, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07088044067985161;  // std dev = 10.788, 507.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333709;  // std dev = 1.01e-07, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.09839009343635743;  // std dev = 10.089, 474.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420354;  // std dev = 0.000, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.044299246012113706;  // std dev = 10.570, 496.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820254;  // std dev = 2.45e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
Inference time using transfer learning 1.1244609355926514
Parameter learned model CLL:-0.30251 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.338, 159, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.53e-07, 463, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.488, 166, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 465, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.75, 179, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 468, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.883, 186, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.44e-07, 494, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.57, 170, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 525, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.272, 156, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.44e-07, 506, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.424, 163, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 473, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.788, 181, 326], 'false,true': [1.01e-07, 467, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.089, 148, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 493, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.57, 170, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.45e-07, 488, 0]}]
{'': [0.22035923052396916, 1.3811845835509507e-16], 'true': [nan, 0.22035923052396916], 'true,false': [nan, 0.22035923052396916], 'true,false,false': [nan, 0.22035923052396916], 'false': [nan, 1.3811845835509507e-16]}
{'': [0.22356071121686144, -1.3752440046969682e-16], 'true': [nan, 0.22356071121686144], 'true,false': [nan, 0.22356071121686144], 'true,false,false': [0.22356071121686144, nan], 'false': [nan, -1.3752440046969682e-16]}
{'': [0.228816782668373, -7.591268544445516e-18], 'true': [nan, 0.228816782668373], 'true,false': [nan, 0.228816782668373], 'true,false,false': [nan, 0.228816782668373], 'false': [nan, -7.591268544445516e-18]}
{'': [0.23130798339843323, 2.391249591500337e-16], 'true': [nan, 0.23130798339843323], 'true,false': [0.23130798339843323, nan], 'false': [nan, 2.391249591500337e-16]}
{'': [0.2252699011446395, -4.7369515717340015e-17], 'true': [nan, 0.2252699011446395], 'true,false': [nan, 0.2252699011446395], 'true,false,false': [nan, 0.2252699011446395], 'false': [nan, -4.7369515717340015e-17]}
{'': [0.2189011897178071, 4.124939300978843e-17], 'true': [nan, 0.2189011897178071], 'true,false': [0.2189011897178071, nan], 'false': [nan, 4.124939300978843e-17]}
{'': [0.22222222222222365, -2.0655312086049424e-17], 'true': [nan, 0.22222222222222365], 'true,false': [0.22222222222222365, nan], 'false': [nan, -2.0655312086049424e-17]}
{'': [0.22955156409867364, 2.187163132023863e-17], 'true': [nan, 0.22955156409867364], 'true,false': [nan, 0.22955156409867364], 'true,false,false': [nan, 0.22955156409867364], 'false': [2.187163132023863e-17, nan]}
{'': [0.21474478805034872, -1.2070578928987504e-16], 'true': [nan, 0.21474478805034872], 'true,false': [0.21474478805034872, nan], 'false': [nan, -1.2070578928987504e-16]}
{'': [0.22526990114464002, 1.2285254780688208e-16], 'true': [nan, 0.22526990114464002], 'true,false': [nan, 0.22526990114464002], 'true,false,false': [nan, 0.22526990114464002], 'false': [nan, 1.2285254780688208e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.308469772338867
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1418510649004881;  // std dev = 0.000, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.1418510649004874;  // std dev = 2.11e-07, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1254446385283915;  // std dev = 0.000, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   else return -0.12544463852839235;  // std dev = 0.000, 513.000 (wgt'ed) examples reached here.  /* #neg=513 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360649;  // std dev = 2.11e-08, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else return -0.11231637819360595;  // std dev = 0.000, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783642;  // std dev = 0.000, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   else return -0.1015963294878355;  // std dev = 3.25e-07, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926076;  // std dev = 7.15e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.09269127618926142;  // std dev = 0.000, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 5.77e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.08518475138839678;  // std dev = 1.33e-07, 447.000 (wgt'ed) examples reached here.  /* #neg=447 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109154;  // std dev = 8.16e-08, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.07877675473109184;  // std dev = 0.000, 464.000 (wgt'ed) examples reached here.  /* #neg=464 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333693;  // std dev = 5.37e-08, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   else return -0.07324622576333681;  // std dev = 1.84e-07, 522.000 (wgt'ed) examples reached here.  /* #neg=522 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420264;  // std dev = 6.83e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.06842697784420354;  // std dev = 0.000, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.06419184008202537;  // std dev = 2.45e-07, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
Inference time using transfer learning 0.9941754341125488
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.308469772338867 

Total Inference Time : 1.6423280239105225 

Total revision time: 8.153216123580933
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.171988010406494 

Total Inference Time : 1.6423280239105225 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.167457103729248
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5113747415511208;  // std dev = 10.600, 496.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048718;  // std dev = 2.98e-07, 440.000 (wgt'ed) examples reached here.  /* #neg=440 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.46458667792072733;  // std dev = 10.172, 476.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=324 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839233;  // std dev = 0.000, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.34569535517953165;  // std dev = 10.640, 498.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360585;  // std dev = 0.000, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2758931606813037;  // std dev = 10.518, 492.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783555;  // std dev = 3.13e-07, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.19585868127765113;  // std dev = 10.718, 502.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=324 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926125;  // std dev = 3.65e-08, 459.000 (wgt'ed) examples reached here.  /* #neg=459 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.16968907699477367;  // std dev = 10.371, 485.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.46e-07, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.127356960141902;  // std dev = 10.371, 485.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109191;  // std dev = 1.60e-07, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08509337530784457;  // std dev = 10.539, 493.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=324 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333738;  // std dev = 0.000, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.06573769084943597;  // std dev = 10.518, 492.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420346;  // std dev = 0.000, 443.000 (wgt'ed) examples reached here.  /* #neg=443 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03301880903227105;  // std dev = 10.776, 505.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820254;  // std dev = 2.43e-07, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
Inference time using transfer learning 1.1257429122924805
Parameter learned model CLL:-0.30377 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.6, 172, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.98e-07, 440, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.172, 152, 324], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 485, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.64, 174, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 492, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.518, 168, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.13e-07, 466, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.718, 178, 324], 'false,true': [0.0, 0, 0], 'false,false': [3.65e-08, 459, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.371, 161, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.46e-07, 472, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.371, 161, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.6e-07, 475, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.539, 169, 324], 'false,true': [0.0, 488, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.518, 168, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 443, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.776, 181, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.43e-07, 482, 0]}]
{'': [0.2265218522372556, 2.0185873175002846e-16], 'true': [nan, 0.2265218522372556], 'true,false': [nan, 0.2265218522372556], 'true,false,false': [nan, 0.2265218522372556], 'false': [nan, 2.0185873175002846e-16]}
{'': [0.21735753124779206, -1.3551588259342118e-16], 'true': [nan, 0.21735753124779206], 'true,false': [nan, 0.21735753124779206], 'true,false,false': [0.21735753124779206, nan], 'false': [nan, -1.3551588259342118e-16]}
{'': [0.22731891421105407, -3.6104813808948184e-18], 'true': [nan, 0.22731891421105407], 'true,false': [nan, 0.22731891421105407], 'true,false,false': [nan, 0.22731891421105407], 'false': [nan, -3.6104813808948184e-18]}
{'': [0.22486615110053337, 2.0965585014380638e-16], 'true': [nan, 0.22486615110053337], 'true,false': [0.22486615110053337, nan], 'false': [nan, 2.0965585014380638e-16]}
{'': [0.22885351026174017, 2.9025438552291675e-18], 'true': [nan, 0.22885351026174017], 'true,false': [nan, 0.22885351026174017], 'true,false,false': [nan, 0.22885351026174017], 'false': [nan, 2.9025438552291675e-18]}
{'': [0.22176214262939917, 4.516161456102332e-17], 'true': [nan, 0.22176214262939917], 'true,false': [0.22176214262939917, nan], 'false': [nan, 4.516161456102332e-17]}
{'': [0.22176214262939584, 5.422562983432343e-17], 'true': [nan, 0.22176214262939584], 'true,false': [0.22176214262939584, nan], 'false': [nan, 5.422562983432343e-17]}
{'': [0.2252879049080665, -1.911039632551499e-17], 'true': [nan, 0.2252879049080665], 'true,false': [nan, 0.2252879049080665], 'true,false,false': [nan, 0.2252879049080665], 'false': [-1.911039632551499e-17, nan]}
{'': [0.2248661511005366, -1.2530733912247817e-16], 'true': [nan, 0.2248661511005366], 'true,false': [0.2248661511005366, nan], 'false': [nan, -1.2530733912247817e-16]}
{'': [0.22995392608567722, 1.225391388175484e-16], 'true': [nan, 0.22995392608567722], 'true,false': [nan, 0.22995392608567722], 'true,false,false': [nan, 0.22995392608567722], 'false': [nan, 1.225391388175484e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.5811383724212646
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048824;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else return -0.14185106490048754;  // std dev = 1.46e-07, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.12544463852839133;  // std dev = 5.16e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.12544463852839235;  // std dev = 0.000, 519.000 (wgt'ed) examples reached here.  /* #neg=519 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360644;  // std dev = 4.21e-08, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.1123163781936059;  // std dev = 0.000, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783648;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.10159632948783542;  // std dev = 3.42e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926074;  // std dev = 7.60e-08, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   else return -0.0926912761892614;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839678;  // std dev = 6.83e-08, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else return -0.08518475138839678;  // std dev = 1.37e-07, 460.000 (wgt'ed) examples reached here.  /* #neg=460 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109155;  // std dev = 7.38e-08, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.07877675473109205;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333695;  // std dev = 5.48e-08, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else return -0.073246225763337;  // std dev = 1.30e-07, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420267;  // std dev = 5.67e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.06842697784420351;  // std dev = 0.000, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.06419184008202537;  // std dev = 2.45e-07, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
Inference time using transfer learning 0.9961698055267334
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.5811383724212646 

Total Inference Time : 1.4345002174377441 

Total revision time: 8.19399356842041
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.212765455245972 

Total Inference Time : 1.4345002174377441 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.7347760200500488
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.49168930777031583;  // std dev = 8.646, 322.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048788;  // std dev = 7.88e-08, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4110835472710098;  // std dev = 8.760, 327.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=204 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.125444638528392;  // std dev = 0.000, 297.000 (wgt'ed) examples reached here.  /* #neg=297 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.34589336561616263;  // std dev = 8.623, 321.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360678;  // std dev = 0.000, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.28206403023340443;  // std dev = 8.479, 315.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783619;  // std dev = 1.38e-07, 361.000 (wgt'ed) examples reached here.  /* #neg=361 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.24691362066036088;  // std dev = 8.080, 300.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=204 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926047;  // std dev = 1.41e-07, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.15115841959543885;  // std dev = 8.503, 316.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.03e-07, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.10935330481783866;  // std dev = 8.552, 318.000 (wgt'ed) examples reached here.  /* #neg=114 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109143;  // std dev = 4.21e-08, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07428129772046968;  // std dev = 8.646, 322.000 (wgt'ed) examples reached here.  /* #neg=118 #pos=204 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333699;  // std dev = 9.88e-08, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.07636618632741707;  // std dev = 8.403, 312.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420272;  // std dev = 3.65e-08, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08174633178525194;  // std dev = 8.108, 301.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820259;  // std dev = 1.30e-07, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
Inference time using transfer learning 1.3048710823059082
Parameter learned model CLL:-0.312887 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.646, 118, 204], 'false,true': [0.0, 0, 0], 'false,false': [7.88e-08, 296, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [8.76, 123, 204], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 297, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.623, 117, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 306, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.479, 111, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.38e-07, 361, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.08, 96, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.41e-07, 267, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.503, 112, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.03e-07, 284, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.552, 114, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [4.21e-08, 295, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.646, 118, 204], 'false,true': [9.88e-08, 303, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.403, 108, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.65e-08, 248, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.108, 97, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.3e-07, 314, 0]}]
{'': [0.23216696886694635, 2.100421938480026e-17], 'true': [nan, 0.23216696886694635], 'true,false': [nan, 0.23216696886694635], 'true,false,false': [nan, 0.23216696886694635], 'false': [nan, 2.100421938480026e-17]}
{'': [0.23466038212271487, -8.373399242964144e-17], 'true': [nan, 0.23466038212271487], 'true,false': [nan, 0.23466038212271487], 'true,false,false': [0.23466038212271487, nan], 'false': [nan, -8.373399242964144e-17]}
{'': [0.23163595073805218, -7.11123244531146e-17], 'true': [nan, 0.23163595073805218], 'true,false': [nan, 0.23163595073805218], 'true,false,false': [nan, 0.23163595073805218], 'false': [nan, -7.11123244531146e-17]}
{'': [0.22820861678004603, 5.2897052696821863e-17], 'true': [nan, 0.22820861678004603], 'true,false': [0.22820861678004603, nan], 'false': [nan, 5.2897052696821863e-17]}
{'': [0.2176000000000005, 7.484649604214538e-17], 'true': [nan, 0.2176000000000005], 'true,false': [nan, 0.2176000000000005], 'true,false,false': [nan, 0.2176000000000005], 'false': [nan, 7.484649604214538e-17]}
{'': [0.2288094856593478, 3.752866562113205e-17], 'true': [nan, 0.2288094856593478], 'true,false': [0.2288094856593478, nan], 'false': [nan, 3.752866562113205e-17]}
{'': [0.22997508009967996, 6.021548608136442e-18], 'true': [nan, 0.22997508009967996], 'true,false': [0.22997508009967996, nan], 'false': [nan, 6.021548608136442e-18]}
{'': [0.23216696886694158, 3.224410104521907e-17], 'true': [nan, 0.23216696886694158], 'true,false': [nan, 0.23216696886694158], 'true,false,false': [nan, 0.23216696886694158], 'false': [3.224410104521907e-17, nan]}
{'': [0.22633136094674575, 5.3720468933475315e-18], 'true': [nan, 0.22633136094674575], 'true,false': [0.22633136094674575, nan], 'false': [nan, 5.3720468933475315e-18]}
{'': [0.21840818534011885, 5.3743280172937514e-17], 'true': [nan, 0.21840818534011885], 'true,false': [nan, 0.21840818534011885], 'true,false,false': [nan, 0.21840818534011885], 'false': [nan, 5.3743280172937514e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.115609645843506
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.14185106490048763;  // std dev = 8.16e-08, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   else return -0.1418510649004878;  // std dev = 1.23e-07, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.12544463852839133;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | else return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.12544463852839197;  // std dev = 0.000, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.11231637819360618;  // std dev = 8.69e-08, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | else return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.11231637819360692;  // std dev = 0.000, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10159632948783635;  // std dev = 0.000, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   | else return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.10159632948783653;  // std dev = 0.000, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.09571983651140602;  // std dev = 0.344, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
%   else return -0.09269127618926042;  // std dev = 1.97e-07, 332.000 (wgt'ed) examples reached here.  /* #neg=332 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.08494903710858295;  // std dev = 4.21e-08, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | else return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.08518475138839678;  // std dev = 1.05e-07, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.0819839679638197;  // std dev = 0.397, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   else return -0.07877675473109143;  // std dev = 3.65e-08, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07283997588369133;  // std dev = 1.49e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | else return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.07324622576333696;  // std dev = 9.88e-08, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.0713530462269763;  // std dev = 0.432, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   else return -0.06842697784420292;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06368193676510096;  // std dev = 4.65e-08, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   | else return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06419184008202598;  // std dev = 1.11e-07, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
Inference time using transfer learning 0.9889781475067139
Refined model CLL: -0.064279


******************************************
Best model found
******************************************
Results 

CLL : -0.084297 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.626761 

Recall : 1.0 

F1 : 0.770563 

Total Learning Time : 2.115609645843506 

Total Inference Time : 1.3624553680419922 

Total revision time: 7.184302568435669
Best scored revision CLL: -0.064279


Results 

CLL : -0.084297 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 0.626761 

Recall : 1.0 

F1 : 0.770563 

Total Learning Time : 7.2030744552612305 

Total Inference Time : 1.3624553680419922 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.188098907470703
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.516352060099508;  // std dev = 10.732, 512.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048802;  // std dev = 0.000, 528.000 (wgt'ed) examples reached here.  /* #neg=528 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4237545073059025;  // std dev = 11.004, 526.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283923;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.34947140231446455;  // std dev = 10.910, 521.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936059;  // std dev = 0.000, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.274231029209936;  // std dev = 10.871, 519.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783534;  // std dev = 3.63e-07, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1805459866577738;  // std dev = 11.290, 542.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926129;  // std dev = 0.000, 467.000 (wgt'ed) examples reached here.  /* #neg=467 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.16074067862029656;  // std dev = 10.910, 521.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.43e-07, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.12685101562730014;  // std dev = 10.812, 516.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109196;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10696618907894101;  // std dev = 10.630, 507.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333698;  // std dev = 1.38e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.08738831938494161;  // std dev = 10.525, 502.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420353;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0406037883919334;  // std dev = 10.929, 522.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202532;  // std dev = 2.46e-07, 536.000 (wgt'ed) examples reached here.  /* #neg=536 */
Inference time using transfer learning 1.0585651397705078
Parameter learned model CLL:-0.298581 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.732, 175, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 528, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [11.004, 189, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 502, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.91, 184, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 473, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.871, 182, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.63e-07, 512, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.29, 205, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 467, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.91, 184, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.43e-07, 496, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.812, 179, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 480, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.63, 170, 337], 'false,true': [1.38e-07, 488, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.525, 165, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 490, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.929, 185, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.46e-07, 536, 0]}]
{'': [0.22497177124023698, -1.345724878333523e-16], 'true': [nan, 0.22497177124023698], 'true,false': [nan, 0.22497177124023698], 'true,false,false': [nan, 0.22497177124023698], 'false': [nan, -1.345724878333523e-16]}
{'': [0.23020789660107374, -1.2561886015679063e-16], 'true': [nan, 0.23020789660107374], 'true,false': [nan, 0.23020789660107374], 'true,false,false': [0.23020789660107374, nan], 'false': [nan, -1.2561886015679063e-16]}
{'': [0.22844006616538864, -1.3144289509304178e-17], 'true': [nan, 0.22844006616538864], 'true,false': [nan, 0.22844006616538864], 'true,false,false': [nan, 0.22844006616538864], 'false': [nan, -1.3144289509304178e-17]}
{'': [0.22770185735870885, 2.5673907444456745e-16], 'true': [nan, 0.22770185735870885], 'true,false': [0.22770185735870885, nan], 'false': [nan, 2.5673907444456745e-16]}
{'': [0.23517177053689745, -5.7056429531057295e-18], 'true': [nan, 0.23517177053689745], 'true,false': [nan, 0.23517177053689745], 'true,false,false': [nan, 0.23517177053689745], 'false': [nan, -5.7056429531057295e-18]}
{'': [0.22844006616538862, 4.118569284899774e-17], 'true': [nan, 0.22844006616538862], 'true,false': [0.22844006616538862, nan], 'false': [nan, 4.118569284899774e-17]}
{'': [0.22656015263505905, -2.4980018054066023e-17], 'true': [nan, 0.22656015263505905], 'true,false': [0.22656015263505905, nan], 'false': [nan, -2.4980018054066023e-17]}
{'': [0.22287579410929279, 3.913081152367355e-17], 'true': [nan, 0.22287579410929279], 'true,false': [nan, 0.22287579410929279], 'true,false,false': [nan, 0.22287579410929279], 'false': [3.913081152367355e-17, nan]}
{'': [0.22065125950381687, -1.2053849981644556e-16], 'true': [nan, 0.22065125950381687], 'true,false': [0.22065125950381687, nan], 'false': [nan, -1.2053849981644556e-16]}
{'': [0.22880242509651888, 1.1267935175300097e-16], 'true': [nan, 0.22880242509651888], 'true,false': [nan, 0.22880242509651888], 'true,false,false': [nan, 0.22880242509651888], 'false': [nan, 1.1267935175300097e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.4960849285125732
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048827;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   else return -0.1418510649004876;  // std dev = 9.42e-08, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839155;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else return -0.1254446385283923;  // std dev = 0.000, 454.000 (wgt'ed) examples reached here.  /* #neg=454 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360629;  // std dev = 8.43e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.11231637819360582;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783648;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.10159632948783552;  // std dev = 3.20e-07, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926074;  // std dev = 7.30e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.09269127618926142;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 5.96e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.08518475138839678;  // std dev = 1.41e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109154;  // std dev = 8.02e-08, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.07877675473109201;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333682;  // std dev = 7.88e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.07324622576333703;  // std dev = 1.19e-07, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 6.23e-08, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   else return -0.0684269778442036;  // std dev = 0.000, 526.000 (wgt'ed) examples reached here.  /* #neg=526 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   else return -0.06419184008202536;  // std dev = 2.45e-07, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
Inference time using transfer learning 0.8252882957458496
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.4960849285125732 

Total Inference Time : 1.496896743774414 

Total revision time: 8.30877685546875
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.327548742294312 

Total Inference Time : 1.496896743774414 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.297229051589966
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.4880554771555827;  // std dev = 11.168, 535.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048813;  // std dev = 0.000, 541.000 (wgt'ed) examples reached here.  /* #neg=541 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.42368741959811335;  // std dev = 11.078, 530.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839224;  // std dev = 0.000, 459.000 (wgt'ed) examples reached here.  /* #neg=459 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3865987794178582;  // std dev = 10.416, 497.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360583;  // std dev = 0.000, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.272174590446918;  // std dev = 10.871, 519.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783534;  // std dev = 3.63e-07, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.22977516677013082;  // std dev = 10.503, 501.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0926912761892615;  // std dev = 0.000, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.1505062922325111;  // std dev = 10.851, 518.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.43e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.10184053749306897;  // std dev = 11.023, 527.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109196;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12213358911588763;  // std dev = 10.304, 492.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333673;  // std dev = 2.02e-07, 540.000 (wgt'ed) examples reached here.  /* #neg=540 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.06430855699791325;  // std dev = 10.753, 513.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0684269778442036;  // std dev = 0.000, 527.000 (wgt'ed) examples reached here.  /* #neg=527 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04760213447363888;  // std dev = 10.773, 514.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202543;  // std dev = 2.38e-07, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
Inference time using transfer learning 0.9808518886566162
Parameter learned model CLL:-0.304035 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.168, 198, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 541, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [11.078, 193, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 459, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.416, 160, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 493, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.871, 182, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.63e-07, 512, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.503, 164, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 508, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.851, 181, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.43e-07, 492, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.023, 190, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 480, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.304, 155, 337], 'false,true': [2.02e-07, 540, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.753, 176, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 527, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.773, 177, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.38e-07, 472, 0]}]
{'': [0.23312429033103582, -1.8387427542775237e-16], 'true': [nan, 0.23312429033103582], 'true,false': [nan, 0.23312429033103582], 'true,false,false': [nan, 0.23312429033103582], 'false': [nan, -1.8387427542775237e-16]}
{'': [0.2315450338198616, -1.199718126828056e-16], 'true': [nan, 0.2315450338198616], 'true,false': [nan, 0.2315450338198616], 'true,false,false': [0.2315450338198616, nan], 'false': [nan, -1.199718126828056e-16]}
{'': [0.21829164119526084, -1.0809473667750003e-17], 'true': [nan, 0.21829164119526084], 'true,false': [nan, 0.21829164119526084], 'true,false,false': [nan, 0.21829164119526084], 'false': [nan, -1.0809473667750003e-17]}
{'': [0.22770185735871565, 2.5673907444456745e-16], 'true': [nan, 0.22770185735871565], 'true,false': [0.22770185735871565, nan], 'false': [nan, 2.5673907444456745e-16]}
{'': [0.2201903578073395, -3.496765431890257e-17], 'true': [nan, 0.2201903578073395], 'true,false': [nan, 0.2201903578073395], 'true,false,false': [nan, 0.2201903578073395], 'false': [nan, -3.496765431890257e-17]}
{'': [0.22732591941086486, 4.1520535880290405e-17], 'true': [nan, 0.22732591941086486], 'true,false': [0.22732591941086486, nan], 'false': [nan, 4.1520535880290405e-17]}
{'': [0.2305484843138452, -2.590520390792032e-17], 'true': [nan, 0.2305484843138452], 'true,false': [0.2305484843138452, nan], 'false': [nan, -2.590520390792032e-17]}
{'': [0.21579003899794785, 7.56596431596403e-17], 'true': [nan, 0.21579003899794785], 'true,false': [nan, 0.21579003899794785], 'true,false,false': [nan, 0.21579003899794785], 'false': [7.56596431596403e-17, nan]}
{'': [0.2253760891290405, -1.1881703717051012e-16], 'true': [nan, 0.2253760891290405], 'true,false': [0.2253760891290405, nan], 'false': [nan, -1.1881703717051012e-16]}
{'': [0.22577556056866763, 1.1996053867771819e-16], 'true': [nan, 0.22577556056866763], 'true,false': [nan, 0.22577556056866763], 'true,false,false': [nan, 0.22577556056866763], 'false': [nan, 1.1996053867771819e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.7259223461151123
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1418510649004881;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.14185106490048724;  // std dev = 2.73e-07, 457.000 (wgt'ed) examples reached here.  /* #neg=457 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839136;  // std dev = 3.65e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.12544463852839235;  // std dev = 0.000, 501.000 (wgt'ed) examples reached here.  /* #neg=501 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360646;  // std dev = 4.71e-08, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.11231637819360588;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1015963294878365;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   else return -0.10159632948783556;  // std dev = 3.10e-07, 464.000 (wgt'ed) examples reached here.  /* #neg=464 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0926912761892607;  // std dev = 8.02e-08, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else return -0.09269127618926162;  // std dev = 0.000, 538.000 (wgt'ed) examples reached here.  /* #neg=538 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6.50e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.08518475138839678;  // std dev = 1.50e-07, 535.000 (wgt'ed) examples reached here.  /* #neg=535 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109148;  // std dev = 8.30e-08, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.07877675473109201;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333688;  // std dev = 7.30e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.0732462257633369;  // std dev = 1.59e-07, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 7.07e-08, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   else return -0.06842697784420355;  // std dev = 0.000, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.06419184008202537;  // std dev = 2.45e-07, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
Inference time using transfer learning 0.8398053646087646
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.7259223461151123 

Total Inference Time : 1.505310297012329 

Total revision time: 8.534786224365234
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.553558111190796 

Total Inference Time : 1.505310297012329 

Run: 5

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.3009607791900635
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5221000552624407;  // std dev = 10.467, 491.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004878;  // std dev = 0.000, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.43671056241707723;  // std dev = 10.611, 498.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839227;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3653823211870278;  // std dev = 10.424, 489.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360578;  // std dev = 0.000, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.290311004709713;  // std dev = 10.316, 484.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783537;  // std dev = 3.55e-07, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2184064457176365;  // std dev = 10.338, 485.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=326 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926135;  // std dev = 0.000, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.1639380936546312;  // std dev = 10.338, 485.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.44e-07, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.11086520560982084;  // std dev = 10.529, 494.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109187;  // std dev = 0.000, 468.000 (wgt'ed) examples reached here.  /* #neg=468 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08225875801458575;  // std dev = 10.550, 495.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=326 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333688;  // std dev = 1.63e-07, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.05703054687389134;  // std dev = 10.631, 499.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420354;  // std dev = 0.000, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04338018025981853;  // std dev = 10.631, 499.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202546;  // std dev = 2.30e-07, 458.000 (wgt'ed) examples reached here.  /* #neg=458 */
Inference time using transfer learning 1.079784870147705
Parameter learned model CLL:-0.300535 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.467, 165, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 507, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.611, 172, 326], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 480, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.424, 163, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 510, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.316, 158, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.55e-07, 505, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.338, 159, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 477, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.338, 159, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.44e-07, 508, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.529, 168, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 468, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.55, 169, 326], 'false,true': [1.63e-07, 506, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.631, 173, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 493, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.631, 173, 326], 'false,true': [0.0, 0, 0], 'false,false': [2.3e-07, 458, 0]}]
{'': [0.22312003019732227, -5.605859848205919e-17], 'true': [nan, 0.22312003019732227], 'true,false': [nan, 0.22312003019732227], 'true,false,false': [nan, 0.22312003019732227], 'false': [nan, -5.605859848205919e-17]}
{'': [0.2260931275302025, -1.2397490441647582e-16], 'true': [nan, 0.2260931275302025], 'true,false': [nan, 0.2260931275302025], 'true,false,false': [0.2260931275302025, nan], 'false': [nan, -1.2397490441647582e-16]}
{'': [0.222222222222227, -6.966105252550002e-18], 'true': [nan, 0.222222222222227], 'true,false': [nan, 0.222222222222227], 'true,false,false': [nan, 0.222222222222227], 'false': [nan, -6.966105252550002e-18]}
{'': [0.21987910661839913, 2.497452190047877e-16], 'true': [nan, 0.21987910661839913], 'true,false': [0.21987910661839913, nan], 'false': [nan, 2.497452190047877e-16]}
{'': [0.22035923052396722, -1.3034064859330979e-17], 'true': [nan, 0.22035923052396722], 'true,false': [nan, 0.22035923052396722], 'true,false,false': [nan, 0.22035923052396722], 'false': [nan, -1.3034064859330979e-17]}
{'': [0.22035923052396506, 4.108699382471052e-17], 'true': [nan, 0.22035923052396506], 'true,false': [0.22035923052396506, nan], 'false': [nan, 4.108699382471052e-17]}
{'': [0.22442590437476234, -1.613144565694672e-17], 'true': [nan, 0.22442590437476234], 'true,false': [0.22442590437476234, nan], 'false': [nan, -1.613144565694672e-17]}
{'': [0.22485052545658524, 5.2658799586963945e-17], 'true': [nan, 0.22485052545658524], 'true,false': [nan, 0.22485052545658524], 'true,false,false': [nan, 0.22485052545658524], 'false': [5.2658799586963945e-17, nan]}
{'': [0.22649708234103386, -1.2070578928987504e-16], 'true': [nan, 0.22649708234103386], 'true,false': [0.22649708234103386, nan], 'false': [nan, -1.2070578928987504e-16]}
{'': [0.22649708234103408, 1.1587043794122814e-16], 'true': [nan, 0.22649708234103408], 'true,false': [nan, 0.22649708234103408], 'true,false,false': [nan, 0.22649708234103408], 'false': [nan, 1.1587043794122814e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.4487497806549072
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048816;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.14185106490048782;  // std dev = 0.000, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839133;  // std dev = 4.71e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.1254446385283923;  // std dev = 0.000, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1123163781936062;  // std dev = 9.42e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   else return -0.11231637819360588;  // std dev = 0.000, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783646;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.10159632948783535;  // std dev = 3.58e-07, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926079;  // std dev = 6.99e-08, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.09269127618926148;  // std dev = 0.000, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 5.96e-08, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.08518475138839678;  // std dev = 1.40e-07, 480.000 (wgt'ed) examples reached here.  /* #neg=480 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109148;  // std dev = 7.88e-08, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   else return -0.07877675473109175;  // std dev = 0.000, 450.000 (wgt'ed) examples reached here.  /* #neg=450 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333684;  // std dev = 8.16e-08, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.07324622576333698;  // std dev = 1.38e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420265;  // std dev = 6.41e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.06842697784420355;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else return -0.0641918400820254;  // std dev = 2.45e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
Inference time using transfer learning 0.9959001541137695
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.4487497806549072 

Total Inference Time : 1.4069204330444336 

Total revision time: 8.052901268005371
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.071789264678955 

Total Inference Time : 1.4069204330444336 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.1734261512756348
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.51802673550684;  // std dev = 10.498, 491.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004874;  // std dev = 2.15e-07, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4307854824818939;  // std dev = 10.679, 500.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=324 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839235;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3553617020295095;  // std dev = 10.580, 495.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360599;  // std dev = 0.000, 455.000 (wgt'ed) examples reached here.  /* #neg=455 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2881446109729363;  // std dev = 10.392, 486.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783534;  // std dev = 3.63e-07, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.18331349868933333;  // std dev = 10.926, 513.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=324 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926125;  // std dev = 4.21e-08, 457.000 (wgt'ed) examples reached here.  /* #neg=457 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.14767584956254032;  // std dev = 10.776, 505.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.48e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.10079097816982212;  // std dev = 10.926, 513.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109193;  // std dev = 1.59e-07, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10950632020441448;  // std dev = 10.414, 487.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=324 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333761;  // std dev = 0.000, 453.000 (wgt'ed) examples reached here.  /* #neg=453 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.07590027270734861;  // std dev = 10.518, 492.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420348;  // std dev = 0.000, 459.000 (wgt'ed) examples reached here.  /* #neg=459 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.043165899679435266;  // std dev = 10.738, 503.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202534;  // std dev = 2.46e-07, 523.000 (wgt'ed) examples reached here.  /* #neg=523 */
Inference time using transfer learning 1.1099128723144531
Parameter learned model CLL:-0.300616 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.498, 167, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.15e-07, 471, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.679, 176, 324], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 497, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.58, 171, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 455, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.392, 162, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.63e-07, 511, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.926, 189, 324], 'false,true': [0.0, 0, 0], 'false,false': [4.21e-08, 457, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.776, 181, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.48e-07, 488, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.926, 189, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.59e-07, 477, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.414, 163, 324], 'false,true': [0.0, 453, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.518, 168, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 459, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.738, 179, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.46e-07, 523, 0]}]
{'': [0.22443908893691605, 9.805791470150003e-17], 'true': [nan, 0.22443908893691605], 'true,false': [nan, 0.22443908893691605], 'true,false,false': [nan, 0.22443908893691605], 'false': [nan, 9.805791470150003e-17]}
{'': [0.22809599999999197, -1.393921865927762e-16], 'true': [nan, 0.22809599999999197], 'true,false': [nan, 0.22809599999999197], 'true,false,false': [0.22809599999999197, nan], 'false': [nan, -1.393921865927762e-16]}
{'': [0.22611570247934087, -9.760202414287091e-18], 'true': [nan, 0.22611570247934087], 'true,false': [nan, 0.22611570247934087], 'true,false,false': [nan, 0.22611570247934087], 'false': [nan, -9.760202414287091e-18]}
{'': [0.22222222222222743, 2.5724149924778577e-16], 'true': [nan, 0.22222222222222743], 'true,false': [0.22222222222222743, nan], 'false': [nan, 2.5724149924778577e-16]}
{'': [0.2326869806094185, 3.8869952722106136e-18], 'true': [nan, 0.2326869806094185], 'true,false': [nan, 0.2326869806094185], 'true,false,false': [nan, 0.2326869806094185], 'false': [nan, 3.8869952722106136e-18]}
{'': [0.22995392608567808, 4.4590924759534976e-17], 'true': [nan, 0.22995392608567808], 'true,false': [0.22995392608567808, nan], 'false': [nan, 4.4590924759534976e-17]}
{'': [0.2326869806094189, 5.306726407013327e-17], 'true': [nan, 0.2326869806094189], 'true,false': [0.2326869806094189, nan], 'false': [nan, 5.306726407013327e-17]}
{'': [0.222676656730014, -5.391811598621069e-17], 'true': [nan, 0.222676656730014], 'true,false': [nan, 0.222676656730014], 'true,false,false': [nan, 0.222676656730014], 'false': [-5.391811598621069e-17, nan]}
{'': [0.22486615110053518, -1.238418711564445e-16], 'true': [nan, 0.22486615110053518], 'true,false': [0.22486615110053518, nan], 'false': [nan, -1.238418711564445e-16]}
{'': [0.22922504733033222, 1.1548017693997805e-16], 'true': [nan, 0.22922504733033222], 'true,false': [nan, 0.22922504733033222], 'true,false,false': [nan, 0.22922504733033222], 'false': [nan, 1.1548017693997805e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.514855146408081
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1418510649004882;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.1418510649004874;  // std dev = 2.11e-07, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1254446385283915;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.1254446385283923;  // std dev = 0.000, 454.000 (wgt'ed) examples reached here.  /* #neg=454 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360649;  // std dev = 0.000, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   else return -0.11231637819360575;  // std dev = 0.000, 527.000 (wgt'ed) examples reached here.  /* #neg=527 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783646;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.10159632948783552;  // std dev = 3.17e-07, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926079;  // std dev = 6.66e-08, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   else return -0.09269127618926142;  // std dev = 0.000, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839679;  // std dev = 5.77e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.08518475138839678;  // std dev = 1.48e-07, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109147;  // std dev = 8.16e-08, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.07877675473109177;  // std dev = 1.85e-07, 453.000 (wgt'ed) examples reached here.  /* #neg=453 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.0732462257633369;  // std dev = 5.96e-08, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   else return -0.07324622576333749;  // std dev = 0.000, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420265;  // std dev = 6.14e-08, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.06842697784420353;  // std dev = 0.000, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.0641918400820254;  // std dev = 2.43e-07, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
Inference time using transfer learning 0.9801380634307861
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.514855146408081 

Total Inference Time : 1.5157673358917236 

Total revision time: 8.217984437942505
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.236872434616089 

Total Inference Time : 1.5157673358917236 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.8149700164794922
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.4956489350995084;  // std dev = 8.599, 320.000 (wgt'ed) examples reached here.  /* #neg=116 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.141851064900488;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4104195604051416;  // std dev = 8.760, 327.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=204 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839197;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.38075346186163234;  // std dev = 8.192, 304.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360685;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.27939733968660196;  // std dev = 8.403, 312.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1015963294878366;  // std dev = 0.000, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.18394730798322356;  // std dev = 8.737, 326.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=204 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926042;  // std dev = 1.59e-07, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.1726499459170881;  // std dev = 8.326, 309.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 9.88e-08, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.09318761000202086;  // std dev = 8.760, 327.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109141;  // std dev = 4.47e-08, 295.000 (wgt'ed) examples reached here.  /* #neg=295 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07390025654414722;  // std dev = 8.715, 325.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=204 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333698;  // std dev = 9.66e-08, 300.000 (wgt'ed) examples reached here.  /* #neg=300 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.09469393407486297;  // std dev = 8.246, 306.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420296;  // std dev = 0.000, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0652124858242166;  // std dev = 8.326, 309.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202596;  // std dev = 1.17e-07, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
Inference time using transfer learning 1.2199885845184326
Parameter learned model CLL:-0.309585 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.599, 116, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 279, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [8.76, 123, 204], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 280, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.192, 100, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 250, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.403, 108, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 280, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.737, 122, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.59e-07, 303, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.326, 105, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [9.88e-08, 285, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.76, 123, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [4.47e-08, 295, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.715, 121, 204], 'false,true': [9.66e-08, 300, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.246, 102, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 290, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.326, 105, 204], 'false,true': [0.0, 0, 0], 'false,false': [1.17e-07, 301, 0]}]
{'': [0.23109375000000448, -2.865091676452017e-17], 'true': [nan, 0.23109375000000448], 'true,false': [nan, 0.23109375000000448], 'true,false,false': [nan, 0.23109375000000448], 'false': [nan, -2.865091676452017e-17]}
{'': [0.23466038212272008, -7.612957883143931e-17], 'true': [nan, 0.23466038212272008], 'true,false': [nan, 0.23466038212272008], 'true,false,false': [0.23466038212272008, nan], 'false': [nan, -7.612957883143931e-17]}
{'': [0.22074099722991336, -9.237055564881302e-17], 'true': [nan, 0.22074099722991336], 'true,false': [nan, 0.22074099722991336], 'true,false,false': [nan, 0.22074099722991336], 'false': [nan, -9.237055564881302e-17]}
{'': [0.2263313609467427, -6.026924990822278e-17], 'true': [nan, 0.2263313609467427], 'true,false': [0.2263313609467427, nan], 'false': [nan, -6.026924990822278e-17]}
{'': [0.23418269411720427, 8.35415345262494e-17], 'true': [nan, 0.23418269411720427], 'true,false': [nan, 0.23418269411720427], 'true,false,false': [nan, 0.23418269411720427], 'false': [nan, 8.35415345262494e-17]}
{'': [0.22433782637383193, 3.4280570584917116e-17], 'true': [nan, 0.22433782637383193], 'true,false': [0.22433782637383193, nan], 'false': [nan, 3.4280570584917116e-17]}
{'': [0.2346603821227171, 6.774242184153498e-18], 'true': [nan, 0.2346603821227171], 'true,false': [0.2346603821227171, nan], 'false': [nan, 6.774242184153498e-18]}
{'': [0.23369467455621432, 3.1086244689504386e-17], 'true': [nan, 0.23369467455621432], 'true,false': [nan, 0.23369467455621432], 'true,false,false': [nan, 0.23369467455621432], 'false': [3.1086244689504386e-17, nan]}
{'': [0.22222222222222177, -4.8237276242334385e-17], 'true': [nan, 0.22222222222222177], 'true,false': [0.22222222222222177, nan], 'false': [nan, -4.8237276242334385e-17]}
{'': [0.22433782637383357, 4.5736762476252294e-17], 'true': [nan, 0.22433782637383357], 'true,false': [nan, 0.22433782637383357], 'true,false,false': [nan, 0.22433782637383357], 'false': [nan, 4.5736762476252294e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.085078477859497
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048768;  // std dev = 6.32e-08, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.1418510649004878;  // std dev = 1.23e-07, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.1267931772176144;  // std dev = 0.154, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   else return -0.125444638528392;  // std dev = 0.000, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.11361678726185645;  // std dev = 0.143, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   else return -0.11231637819360696;  // std dev = 0.000, 288.000 (wgt'ed) examples reached here.  /* #neg=288 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.10135480310138464;  // std dev = 0.000, 116.000 (wgt'ed) examples reached here.  /* #neg=116 */
%   | else return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.1015963294878366;  // std dev = 0.000, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.09248901143764937;  // std dev = 0.000, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | else return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.09269127618926043;  // std dev = 1.52e-07, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0850130643780968;  // std dev = 2.98e-08, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.08518475138839678;  // std dev = 9.77e-08, 275.000 (wgt'ed) examples reached here.  /* #neg=275 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.07862931019718311;  // std dev = 4.59e-08, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | else return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.07877675473109143;  // std dev = 2.58e-08, 313.000 (wgt'ed) examples reached here.  /* #neg=313 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( actor(A) )
%   | | then return -0.07311830308632576;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else if ( female(B) )
%   | | | then return -0.07311830308632569;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return -0.2891708515446641;  // std dev = 0.432, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else return -0.07324622576333688;  // std dev = 1.10e-07, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( actor(A) )
%   | | then return -0.06831499308481995;  // std dev = 4.08e-08, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | | else if ( actor(B) )
%   | | | then return -0.06167953793456138;  // std dev = 0.026, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.4333302627104582;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.068426977844203;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06373903533821433;  // std dev = 0.023, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06419184008202578;  // std dev = 1.56e-07, 343.000 (wgt'ed) examples reached here.  /* #neg=343 */
Inference time using transfer learning 1.1147129535675049
Refined model CLL: -0.063906


******************************************
Best model found
******************************************
Results 

CLL : -0.076174 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.085078477859497 

Total Inference Time : 1.4912214279174805 

Total revision time: 7.201690435409546
Best scored revision CLL: -0.063906


Results 

CLL : -0.076174 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.22057843208313 

Total Inference Time : 1.4912214279174805 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.353485584259033
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.49761762580159524;  // std dev = 11.023, 527.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048788;  // std dev = 0.000, 515.000 (wgt'ed) examples reached here.  /* #neg=515 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4522435648206351;  // std dev = 10.609, 506.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1254446385283923;  // std dev = 0.000, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.34619012982988157;  // std dev = 10.929, 522.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360589;  // std dev = 0.000, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.26529159775618233;  // std dev = 10.985, 525.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783551;  // std dev = 3.22e-07, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.25566367343012186;  // std dev = 10.117, 484.000 (wgt'ed) examples reached here.  /* #neg=147 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926154;  // std dev = 0.000, 518.000 (wgt'ed) examples reached here.  /* #neg=518 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.16175635969904567;  // std dev = 10.609, 506.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.37e-07, 459.000 (wgt'ed) examples reached here.  /* #neg=459 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.11491908896450247;  // std dev = 10.712, 511.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109201;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06295173915891986;  // std dev = 11.078, 530.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333692;  // std dev = 1.53e-07, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.0573685462851386;  // std dev = 10.929, 522.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420355;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.016301451769326708;  // std dev = 11.341, 545.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202536;  // std dev = 2.43e-07, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
Inference time using transfer learning 0.979423999786377
Parameter learned model CLL:-0.293321 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.023, 190, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 515, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.609, 169, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 509, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.929, 185, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 478, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.985, 188, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.22e-07, 475, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.117, 147, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 518, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.609, 169, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.37e-07, 459, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.712, 174, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 490, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.078, 193, 337], 'false,true': [1.53e-07, 499, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.929, 185, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 502, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [11.341, 208, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.43e-07, 512, 0]}]
{'': [0.2305484843138481, -8.968015111535245e-17], 'true': [nan, 0.2305484843138481], 'true,false': [nan, 0.2305484843138481], 'true,false,false': [nan, 0.2305484843138481], 'false': [nan, -8.968015111535245e-17]}
{'': [0.22244137543158282, -1.2563624011475248e-16], 'true': [nan, 0.22244137543158282], 'true,false': [nan, 0.22244137543158282], 'true,false,false': [0.22244137543158282, nan], 'false': [nan, -1.2563624011475248e-16]}
{'': [0.22880242509651752, -1.3006796941215223e-17], 'true': [nan, 0.22880242509651752], 'true,false': [nan, 0.22880242509651752], 'true,false,false': [nan, 0.22880242509651752], 'false': [nan, -1.3006796941215223e-17]}
{'': [0.22986303854875428, 2.1877236864192558e-16], 'true': [nan, 0.22986303854875428], 'true,false': [0.22986303854875428, nan], 'false': [nan, 2.1877236864192558e-16]}
{'': [0.2114737722833117, -4.115112369266989e-17], 'true': [nan, 0.2114737722833117], 'true,false': [nan, 0.2114737722833117], 'true,false,false': [nan, 0.2114737722833117], 'false': [nan, -4.115112369266989e-17]}
{'': [0.2224413754315782, 4.063561397320834e-17], 'true': [nan, 0.2224413754315782], 'true,false': [0.2224413754315782, nan], 'false': [nan, 4.063561397320834e-17]}
{'': [0.22456255912010104, -3.2626962356331134e-17], 'true': [nan, 0.22456255912010104], 'true,false': [0.22456255912010104, nan], 'false': [nan, -3.2626962356331134e-17]}
{'': [0.23154503381986577, 4.716779182776216e-17], 'true': [nan, 0.23154503381986577], 'true,false': [nan, 0.23154503381986577], 'true,false,false': [nan, 0.23154503381986577], 'false': [4.716779182776216e-17, nan]}
{'': [0.22880242509651721, -1.2561886015679063e-16], 'true': [nan, 0.22880242509651721], 'true,false': [0.22880242509651721, nan], 'false': [nan, -1.2561886015679063e-16]}
{'': [0.23599360323205146, 1.1535911115245767e-16], 'true': [nan, 0.23599360323205146], 'true,false': [nan, 0.23599360323205146], 'true,false,false': [nan, 0.23599360323205146], 'false': [nan, 1.1535911115245767e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.4976327419281006
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1418510649004882;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.14185106490048782;  // std dev = 0.000, 509.000 (wgt'ed) examples reached here.  /* #neg=509 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1254446385283913;  // std dev = 5.16e-08, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   else return -0.1254446385283923;  // std dev = 0.000, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360653;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   else return -0.11231637819360576;  // std dev = 0.000, 518.000 (wgt'ed) examples reached here.  /* #neg=518 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783645;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.1015963294878352;  // std dev = 3.96e-07, 547.000 (wgt'ed) examples reached here.  /* #neg=547 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926074;  // std dev = 7.74e-08, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.0926912761892616;  // std dev = 0.000, 531.000 (wgt'ed) examples reached here.  /* #neg=531 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6.83e-08, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   else return -0.08518475138839678;  // std dev = 1.43e-07, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109148;  // std dev = 8.30e-08, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   else return -0.07877675473109196;  // std dev = 0.000, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333684;  // std dev = 8.16e-08, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.07324622576333684;  // std dev = 1.76e-07, 516.000 (wgt'ed) examples reached here.  /* #neg=516 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 6.58e-08, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.06842697784420351;  // std dev = 0.000, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202625;  // std dev = 0.000, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   else return -0.06419184008202543;  // std dev = 2.37e-07, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
Inference time using transfer learning 0.8288640975952148
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.4976327419281006 

Total Inference Time : 1.570936679840088 

Total revision time: 8.407334327697754
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.426222324371338 

Total Inference Time : 1.570936679840088 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 2.2102208137512207
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5099864592774577;  // std dev = 10.832, 517.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048785;  // std dev = 0.000, 512.000 (wgt'ed) examples reached here.  /* #neg=512 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, A) )
%   | | | then return 0.4635849649474081;  // std dev = 10.394, 496.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=337 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(H, B), genre(H, I) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.12544463852839227;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.3375040037208272;  // std dev = 10.985, 525.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360571;  // std dev = 0.000, 537.000 (wgt'ed) examples reached here.  /* #neg=537 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.3219363896319714;  // std dev = 10.020, 480.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.10159632948783535;  // std dev = 3.59e-07, 508.000 (wgt'ed) examples reached here.  /* #neg=508 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.19222945605429664;  // std dev = 10.851, 518.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=337 */
%   else if ( movie(I, B), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.09269127618926137;  // std dev = 0.000, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A) )
%   | | then return 0.15318121034527096;  // std dev = 10.712, 511.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.08518475138839678;  // std dev = 1.46e-07, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.0854188790063266;  // std dev = 11.168, 535.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, A), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.07877675473109194;  // std dev = 1.58e-07, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0775494226446857;  // std dev = 10.967, 524.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=337 */
%   else if ( movie(I, B) )
%   | then return -0.07324622576333692;  // std dev = 1.55e-07, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.0827984108883805;  // std dev = 10.588, 505.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06842697784420354;  // std dev = 0.000, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.056299061773033156;  // std dev = 10.692, 510.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.0641918400820254;  // std dev = 2.45e-07, 488.000 (wgt'ed) examples reached here.  /* #neg=488 */
Inference time using transfer learning 0.9719455242156982
Parameter learned model CLL:-0.303121 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.832, 180, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 512, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B), genre(E, F)', 'true,false,false': 'movie(G, A)', 'false': 'movie(H, B), genre(H, I)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [10.394, 159, 337], 'true,false,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 490, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.985, 188, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 537, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.02, 143, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [3.59e-07, 508, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.851, 181, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 482, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.712, 174, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.46e-07, 478, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, A), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.168, 198, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.58e-07, 478, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, B)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.967, 187, 337], 'false,true': [1.55e-07, 499, 0], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.588, 168, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 496, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.692, 173, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.45e-07, 488, 0]}]
{'': [0.22694536625151315, -7.632783294297951e-17], 'true': [nan, 0.22694536625151315], 'true,false': [nan, 0.22694536625151315], 'true,false,false': [nan, 0.22694536625151315], 'false': [nan, -7.632783294297951e-17]}
{'': [0.21780290712799158, -1.2325741334613983e-16], 'true': [nan, 0.21780290712799158], 'true,false': [nan, 0.21780290712799158], 'true,false,false': [0.21780290712799158, nan], 'false': [nan, -1.2325741334613983e-16]}
{'': [0.22986303854875506, -3.307927075233241e-18], 'true': [nan, 0.22986303854875506], 'true,false': [nan, 0.22986303854875506], 'true,false,false': [nan, 0.22986303854875506], 'false': [nan, -3.307927075233241e-18]}
{'': [0.20916232638888607, 2.535154938120436e-16], 'true': [nan, 0.20916232638888607], 'true,false': [0.20916232638888607, nan], 'false': [nan, 2.535154938120436e-16]}
{'': [0.22732591941086316, -1.842693816805239e-17], 'true': [nan, 0.22732591941086316], 'true,false': [nan, 0.22732591941086316], 'true,false,false': [nan, 0.22732591941086316], 'false': [nan, -1.842693816805239e-17]}
{'': [0.22456255912010198, 4.4594732369880764e-17], 'true': [nan, 0.22456255912010198], 'true,false': [0.22456255912010198, nan], 'false': [nan, 4.4594732369880764e-17]}
{'': [0.23312429033103593, 5.202718776486089e-17], 'true': [nan, 0.23312429033103593], 'true,false': [0.23312429033103593, nan], 'false': [nan, 5.202718776486089e-17]}
{'': [0.22951386865567133, 4.805775016413503e-17], 'true': [nan, 0.22951386865567133], 'true,false': [nan, 0.22951386865567133], 'true,false,false': [nan, 0.22951386865567133], 'false': [4.805775016413503e-17, nan]}
{'': [0.22200176453288703, -1.2087105510031945e-16], 'true': [nan, 0.22200176453288703], 'true,false': [0.22200176453288703, nan], 'false': [nan, -1.2087105510031945e-16]}
{'': [0.22414840445982345, 1.2285254780688208e-16], 'true': [nan, 0.22414840445982345], 'true,false': [nan, 0.22414840445982345], 'true,false,false': [nan, 0.22414840445982345], 'false': [nan, 1.2285254780688208e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
1;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
2;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
3;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
4;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
5;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
6;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
7;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.5672037601470947
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1418510649004883;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.1418510649004878;  // std dev = 0.000, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839144;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.12544463852839227;  // std dev = 0.000, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360621;  // std dev = 8.94e-08, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else return -0.11231637819360578;  // std dev = 0.000, 514.000 (wgt'ed) examples reached here.  /* #neg=514 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783652;  // std dev = 0.000, 193.000 (wgt'ed) examples reached here.  /* #neg=193 */
%   else return -0.1015963294878354;  // std dev = 3.50e-07, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926074;  // std dev = 7.60e-08, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.09269127618926161;  // std dev = 0.000, 536.000 (wgt'ed) examples reached here.  /* #neg=536 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839678;  // std dev = 6.32e-08, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   else return -0.08518475138839678;  // std dev = 1.40e-07, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109154;  // std dev = 7.88e-08, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   else return -0.07877675473109234;  // std dev = 0.000, 554.000 (wgt'ed) examples reached here.  /* #neg=554 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333674;  // std dev = 1.08e-07, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   else return -0.07324622576333709;  // std dev = 9.66e-08, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420265;  // std dev = 6.75e-08, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   else return -0.06842697784420357;  // std dev = 0.000, 510.000 (wgt'ed) examples reached here.  /* #neg=510 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202626;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   else return -0.06419184008202539;  // std dev = 2.43e-07, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
Inference time using transfer learning 0.8481934070587158
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.5672037601470947 

Total Inference Time : 1.5215048789978027 

Total revision time: 8.283874034881592
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 8.302762031555176 

Total Inference Time : 1.5215048789978027 

Starting experiments for fasttext using wmd 

Run: 1

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.7190556526184082
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5289308281036232;  // std dev = 10.360, 486.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=326 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004876;  // std dev = 9.42e-08, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1572262194613761;  // std dev = 13.798, 988.000 (wgt'ed) examples reached here.  /* #neg=662 #pos=326 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14352871860543287;  // std dev = 13.597, 957.000 (wgt'ed) examples reached here.  /* #neg=631 #pos=326 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11843719928445501;  // std dev = 13.548, 958.000 (wgt'ed) examples reached here.  /* #neg=632 #pos=326 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08213713442047034;  // std dev = 13.603, 1,023.000 (wgt'ed) examples reached here.  /* #neg=697 #pos=326 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08027271975252148;  // std dev = 13.416, 976.000 (wgt'ed) examples reached here.  /* #neg=650 #pos=326 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06434349472128396;  // std dev = 13.402, 972.000 (wgt'ed) examples reached here.  /* #neg=646 #pos=326 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.053240946474818154;  // std dev = 13.321, 974.000 (wgt'ed) examples reached here.  /* #neg=648 #pos=326 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.29250410701840823;  // std dev = 10.631, 499.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.2239725085267456;  // std dev = 7.40e-07, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2674666858951039;  // std dev = 9.921, 467.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18745429020610047;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
Inference time using transfer learning 0.9597508907318115
Parameter learned model CLL:-0.318087 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.36, 160, 326], 'false,true': [0.0, 0, 0], 'false,false': [9.42e-08, 489, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.798, 662, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.597, 631, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.548, 632, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.603, 697, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.416, 650, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.402, 646, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.321, 648, 326], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.631, 173, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [7.4e-07, 495, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [9.921, 141, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 494, 0]}]
{'': [0.22083354502193364, 1.8163157867078227e-17], 'true': [nan, 0.22083354502193364], 'true,false': [nan, 0.22083354502193364], 'true,false,false': [nan, 0.22083354502193364], 'false': [nan, 1.8163157867078227e-17]}
{'': [nan, 0.1926963366257158], 'false': [nan, 0.1926963366257158]}
{'': [nan, 0.19318881223807277], 'false': [nan, 0.19318881223807277]}
{'': [nan, 0.19160113913431273], 'false': [nan, 0.19160113913431273]}
{'': [nan, 0.1808738931398683], 'false': [nan, 0.1808738931398683]}
{'': [nan, 0.18441313944967005], 'false': [nan, 0.18441313944967005]}
{'': [nan, 0.18479309478734843], 'false': [nan, 0.18479309478734843]}
{'': [nan, 0.1821953060195668], 'false': [0.1821953060195668, nan]}
{'': [0.2264970823410312, 1.105288700071267e-15], 'true': [nan, 0.2264970823410312], 'true,false': [0.2264970823410312, nan], 'false': [nan, 1.105288700071267e-15]}
{'': [0.2107671638642976, -4.674623261579606e-16], 'true': [nan, 0.2107671638642976], 'true,false': [nan, 0.2107671638642976], 'true,false,false': [nan, 0.2107671638642976], 'false': [nan, -4.674623261579606e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.9977915287017822
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048818;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.14185106490048788;  // std dev = 0.000, 516.000 (wgt'ed) examples reached here.  /* #neg=516 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839122;  // std dev = 5.27e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.12544463852839227;  // std dev = 0.000, 569.000 (wgt'ed) examples reached here.  /* #neg=569 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360633;  // std dev = 2.79e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.1123163781936059;  // std dev = 0.000, 613.000 (wgt'ed) examples reached here.  /* #neg=613 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783619;  // std dev = 4.59e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.10159632948783542;  // std dev = 3.77e-07, 605.000 (wgt'ed) examples reached here.  /* #neg=605 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926105;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.09269127618926176;  // std dev = 0.000, 610.000 (wgt'ed) examples reached here.  /* #neg=610 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 1.67e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.08518475138839678;  // std dev = 1.49e-07, 605.000 (wgt'ed) examples reached here.  /* #neg=605 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109179;  // std dev = 7.45e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.07877675473109243;  // std dev = 0.000, 599.000 (wgt'ed) examples reached here.  /* #neg=599 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333704;  // std dev = 1.18e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.07324622576333693;  // std dev = 1.46e-07, 579.000 (wgt'ed) examples reached here.  /* #neg=579 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420261;  // std dev = 4.71e-08, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   else return -0.06842697784420354;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202619;  // std dev = 0.000, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.06419184008202541;  // std dev = 2.39e-07, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
Inference time using transfer learning 0.9722943305969238
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.9977915287017822 

Total Inference Time : 1.495678186416626 

Total revision time: 7.757157564163208
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.771598815917969 

Total Inference Time : 1.495678186416626 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.7685489654541016
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.4984651406331048;  // std dev = 10.795, 506.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=324 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048766;  // std dev = 0.000, 493.000 (wgt'ed) examples reached here.  /* #neg=493 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.17047786664537898;  // std dev = 13.689, 949.000 (wgt'ed) examples reached here.  /* #neg=625 #pos=324 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13468364107272413;  // std dev = 13.705, 983.000 (wgt'ed) examples reached here.  /* #neg=659 #pos=324 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1134418939577416;  // std dev = 13.599, 987.000 (wgt'ed) examples reached here.  /* #neg=663 #pos=324 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08918184581650636;  // std dev = 13.610, 996.000 (wgt'ed) examples reached here.  /* #neg=672 #pos=324 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08372716852509147;  // std dev = 13.443, 960.000 (wgt'ed) examples reached here.  /* #neg=636 #pos=324 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07004240494566087;  // std dev = 13.361, 956.000 (wgt'ed) examples reached here.  /* #neg=632 #pos=324 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.064288641033366;  // std dev = 13.222, 934.000 (wgt'ed) examples reached here.  /* #neg=610 #pos=324 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2525517660238265;  // std dev = 11.205, 529.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22863980133894646;  // std dev = 6.36e-07, 461.000 (wgt'ed) examples reached here.  /* #neg=461 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.23463466777133574;  // std dev = 10.580, 495.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1908267028758103;  // std dev = 0.000, 471.000 (wgt'ed) examples reached here.  /* #neg=471 */
Inference time using transfer learning 1.0334227085113525
Parameter learned model CLL:-0.315035 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.795, 182, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 493, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.689, 625, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.705, 659, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.599, 663, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.61, 672, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.443, 636, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.361, 632, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.222, 610, 324], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.205, 205, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.36e-07, 461, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.58, 171, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 471, 0]}]
{'': [0.2303113624646561, 0.0], 'true': [nan, 0.2303113624646561], 'true,false': [nan, 0.2303113624646561], 'true,false,false': [nan, 0.2303113624646561], 'false': [nan, 0.0]}
{'': [nan, 0.19746188437348766], 'false': [nan, 0.19746188437348766]}
{'': [nan, 0.19106334709634765], 'false': [nan, 0.19106334709634765]}
{'': [nan, 0.1873566462954801], 'false': [nan, 0.1873566462954801]}
{'': [nan, 0.18597834584254183], 'false': [nan, 0.18597834584254183]}
{'': [nan, 0.18825036960428188], 'false': [nan, 0.18825036960428188]}
{'': [nan, 0.186719339655808], 'false': [nan, 0.186719339655808]}
{'': [nan, 0.18717524329026508], 'false': [0.18717524329026508, nan]}
{'': [0.23734906607680262, 8.785452481198635e-16], 'true': [nan, 0.23734906607680262], 'true,false': [0.23734906607680262, nan], 'false': [nan, 8.785452481198635e-16]}
{'': [0.22611570247934007, -4.224033248680001e-16], 'true': [nan, 0.22611570247934007], 'true,false': [nan, 0.22611570247934007], 'true,false,false': [nan, 0.22611570247934007], 'false': [nan, -4.224033248680001e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.8511617183685303
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048816;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   else return -0.14185106490048738;  // std dev = 2.23e-07, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.12544463852839158;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.12544463852839233;  // std dev = 0.000, 579.000 (wgt'ed) examples reached here.  /* #neg=579 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1123163781936063;  // std dev = 3.49e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.11231637819360568;  // std dev = 4.21e-08, 586.000 (wgt'ed) examples reached here.  /* #neg=586 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783624;  // std dev = 3.65e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.10159632948783552;  // std dev = 3.55e-07, 602.000 (wgt'ed) examples reached here.  /* #neg=602 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926105;  // std dev = 0.000, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   else return -0.0926912761892617;  // std dev = 0.000, 590.000 (wgt'ed) examples reached here.  /* #neg=590 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839679;  // std dev = 1.83e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.08518475138839678;  // std dev = 1.49e-07, 591.000 (wgt'ed) examples reached here.  /* #neg=591 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.07877675473109261;  // std dev = 0.000, 646.000 (wgt'ed) examples reached here.  /* #neg=646 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333704;  // std dev = 1.05e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else return -0.07324622576333692;  // std dev = 1.53e-07, 589.000 (wgt'ed) examples reached here.  /* #neg=589 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420261;  // std dev = 3.65e-08, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   else return -0.06842697784420347;  // std dev = 0.000, 458.000 (wgt'ed) examples reached here.  /* #neg=458 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06419184008202622;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.06419184008202539;  // std dev = 2.44e-07, 499.000 (wgt'ed) examples reached here.  /* #neg=499 */
Inference time using transfer learning 0.9892165660858154
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.8511617183685303 

Total Inference Time : 1.392744541168213 

Total revision time: 7.443698167800903
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.458139419555664 

Total Inference Time : 1.392744541168213 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.293931245803833
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.48391580626515257;  // std dev = 8.737, 326.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=204 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048796;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.17425264092909154;  // std dev = 10.853, 594.000 (wgt'ed) examples reached here.  /* #neg=390 #pos=204 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14579889106953256;  // std dev = 10.826, 594.000 (wgt'ed) examples reached here.  /* #neg=390 #pos=204 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1266859216247669;  // std dev = 10.691, 591.000 (wgt'ed) examples reached here.  /* #neg=387 #pos=204 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08955297305734952;  // std dev = 10.781, 618.000 (wgt'ed) examples reached here.  /* #neg=414 #pos=204 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07323148053887289;  // std dev = 10.749, 616.000 (wgt'ed) examples reached here.  /* #neg=412 #pos=204 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05686514631918849;  // std dev = 10.763, 616.000 (wgt'ed) examples reached here.  /* #neg=412 #pos=204 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.052272979540660715;  // std dev = 10.669, 605.000 (wgt'ed) examples reached here.  /* #neg=401 #pos=204 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2906363941719212;  // std dev = 8.503, 316.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22737537582658437;  // std dev = 4.66e-07, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2155994309524348;  // std dev = 8.576, 319.000 (wgt'ed) examples reached here.  /* #neg=115 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18991441063395395;  // std dev = 4.46e-07, 287.000 (wgt'ed) examples reached here.  /* #neg=287 */
Inference time using transfer learning 0.9677162170410156
Parameter learned model CLL:-0.315745 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.737, 122, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 283, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.853, 390, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.826, 390, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.691, 387, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.781, 414, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.749, 412, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.763, 412, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [10.669, 401, 204], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.503, 112, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [4.66e-07, 280, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.576, 115, 204], 'false,true': [0.0, 0, 0], 'false,false': [4.46e-07, 287, 0]}]
{'': [0.2341826941172087, -1.5692198227917407e-17], 'true': [nan, 0.2341826941172087], 'true,false': [nan, 0.2341826941172087], 'true,false,false': [nan, 0.2341826941172087], 'false': [nan, -1.5692198227917407e-17]}
{'': [nan, 0.19828991978913424], 'false': [nan, 0.19828991978913424]}
{'': [nan, 0.19732240925540462], 'false': [nan, 0.19732240925540462]}
{'': [nan, 0.19340546735413897], 'false': [nan, 0.19340546735413897]}
{'': [nan, 0.18807144789176983], 'false': [nan, 0.18807144789176983]}
{'': [nan, 0.18756448623778674], 'false': [nan, 0.18756448623778674]}
{'': [nan, 0.1880418206491909], 'false': [nan, 0.1880418206491909]}
{'': [nan, 0.18815581239943877], 'false': [0.18815581239943877, nan]}
{'': [0.228809485659347, 7.739840514529663e-16], 'true': [nan, 0.228809485659347], 'true,false': [0.228809485659347, nan], 'false': [nan, 7.739840514529663e-16]}
{'': [0.2305401873016195, 6.932124251318051e-16], 'true': [nan, 0.2305401873016195], 'true,false': [nan, 0.2305401873016195], 'true,false,false': [nan, 0.2305401873016195], 'false': [nan, 6.932124251318051e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.285768508911133
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048763;  // std dev = 8.69e-08, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
%   | else return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.14185106490048788;  // std dev = 7.88e-08, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.12626301293082307;  // std dev = 0.219, 379.000 (wgt'ed) examples reached here.  /* #neg=379 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.11231637819360635;  // std dev = 1.67e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.11223481099568731;  // std dev = 0.000, 383.000 (wgt'ed) examples reached here.  /* #neg=383 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.10152909750612563;  // std dev = 2.17e-07, 405.000 (wgt'ed) examples reached here.  /* #neg=405 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.09269127618926093;  // std dev = 1.29e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.09323922912688619;  // std dev = 0.225, 373.000 (wgt'ed) examples reached here.  /* #neg=373 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.08518475138839685;  // std dev = 1.18e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.08508990626621973;  // std dev = 5.23e-06, 399.000 (wgt'ed) examples reached here.  /* #neg=399 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else return -0.07869530638430289;  // std dev = 4.87e-06, 385.000 (wgt'ed) examples reached here.  /* #neg=385 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07324622576333704;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.07364016425743088;  // std dev = 0.192, 413.000 (wgt'ed) examples reached here.  /* #neg=413 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.06833554976654276;  // std dev = 0.000, 122.000 (wgt'ed) examples reached here.  /* #neg=122 */
%   else return -0.06834031671532624;  // std dev = 0.000345, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06411116689231398;  // std dev = 4.53e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | else return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06411575836728321;  // std dev = 0.000335, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
Inference time using transfer learning 0.9996044635772705
Refined model CLL: -0.063877


******************************************
Best model found
******************************************
Results 

CLL : -0.074114 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.285768508911133 

Total Inference Time : 1.3440415859222412 

Total revision time: 6.4090516567230225
Best scored revision CLL: -0.063877


Results 

CLL : -0.074114 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 6.423492908477783 

Total Inference Time : 1.3440415859222412 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.7262778282165527
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5228432151784035;  // std dev = 10.630, 507.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=337 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004876;  // std dev = 9.42e-08, 489.000 (wgt'ed) examples reached here.  /* #neg=489 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16963464654566732;  // std dev = 13.884, 988.000 (wgt'ed) examples reached here.  /* #neg=651 #pos=337 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13241049668332489;  // std dev = 13.940, 1,021.000 (wgt'ed) examples reached here.  /* #neg=684 #pos=337 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11285199121841201;  // std dev = 13.838, 1,014.000 (wgt'ed) examples reached here.  /* #neg=677 #pos=337 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0976895958439215;  // std dev = 13.693, 1,006.000 (wgt'ed) examples reached here.  /* #neg=669 #pos=337 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07932594387537029;  // std dev = 13.670, 1,000.000 (wgt'ed) examples reached here.  /* #neg=663 #pos=337 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07073773691308208;  // std dev = 13.511, 988.000 (wgt'ed) examples reached here.  /* #neg=651 #pos=337 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.04398074591974388;  // std dev = 13.631, 1,028.000 (wgt'ed) examples reached here.  /* #neg=691 #pos=337 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2945264755234923;  // std dev = 10.773, 514.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.2252691257915122;  // std dev = 0.000, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.22293402317638406;  // std dev = 10.792, 515.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1883925401806773;  // std dev = 3.72e-07, 460.000 (wgt'ed) examples reached here.  /* #neg=460 */
Inference time using transfer learning 0.842919111251831
Parameter learned model CLL:-0.314274 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.63, 170, 337], 'false,true': [0.0, 0, 0], 'false,false': [9.42e-08, 489, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.884, 651, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.94, 684, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.838, 677, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.693, 669, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.67, 663, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.511, 651, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.631, 691, 337], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.773, 177, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 505, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.792, 178, 337], 'false,true': [0.0, 0, 0], 'false,false': [3.72e-07, 460, 0]}]
{'': [0.22287579410929698, 1.8163157867078227e-17], 'true': [nan, 0.22287579410929698], 'true,false': [nan, 0.22287579410929698], 'true,false,false': [nan, 0.22287579410929698], 'false': [nan, 1.8163157867078227e-17]}
{'': [nan, 0.1951181608298285], 'false': [nan, 0.1951181608298285]}
{'': [nan, 0.1903257401610561], 'false': [nan, 0.1903257401610561]}
{'': [nan, 0.18885379749602654], 'false': [nan, 0.18885379749602654]}
{'': [nan, 0.18636917164187364], 'false': [nan, 0.18636917164187364]}
{'': [nan, 0.18687033106336878], 'false': [nan, 0.18687033106336878]}
{'': [nan, 0.18476013656370352], 'false': [nan, 0.18476013656370352]}
{'': [nan, 0.18074571698835104], 'false': [0.18074571698835104, nan]}
{'': [0.22577556056866227, -1.2663137865031488e-15], 'true': [nan, 0.22577556056866227], 'true,false': [0.22577556056866227, nan], 'false': [nan, -1.2663137865031488e-15]}
{'': [0.22617023282119242, 3.0120833363743376e-16], 'true': [nan, 0.22617023282119242], 'true,false': [nan, 0.22617023282119242], 'true,false,false': [nan, 0.22617023282119242], 'false': [nan, 3.0120833363743376e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 3.121140241622925
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048824;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   else return -0.14185106490048766;  // std dev = 0.000, 494.000 (wgt'ed) examples reached here.  /* #neg=494 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839158;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.12544463852839235;  // std dev = 0.000, 607.000 (wgt'ed) examples reached here.  /* #neg=607 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360629;  // std dev = 3.80e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.11231637819360595;  // std dev = 0.000, 631.000 (wgt'ed) examples reached here.  /* #neg=631 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783621;  // std dev = 4.08e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.10159632948783538;  // std dev = 3.86e-07, 616.000 (wgt'ed) examples reached here.  /* #neg=616 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926105;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.0926912761892619;  // std dev = 0.000, 649.000 (wgt'ed) examples reached here.  /* #neg=649 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 2.24e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return -0.08518475138839678;  // std dev = 1.43e-07, 565.000 (wgt'ed) examples reached here.  /* #neg=565 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.07877675473109251;  // std dev = 0.000, 632.000 (wgt'ed) examples reached here.  /* #neg=632 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.07324622576333681;  // std dev = 1.85e-07, 617.000 (wgt'ed) examples reached here.  /* #neg=617 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420261;  // std dev = 3.94e-08, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   else return -0.06842697784420348;  // std dev = 0.000, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202619;  // std dev = 0.000, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.06419184008202534;  // std dev = 2.45e-07, 517.000 (wgt'ed) examples reached here.  /* #neg=517 */
Inference time using transfer learning 0.8055975437164307
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 3.121140241622925 

Total Inference Time : 1.410099983215332 

Total revision time: 7.856889247894287
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.871330499649048 

Total Inference Time : 1.410099983215332 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.7248508930206299
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5062258581764311;  // std dev = 10.890, 520.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=337 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048727;  // std dev = 2.63e-07, 460.000 (wgt'ed) examples reached here.  /* #neg=460 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1652126712168082;  // std dev = 14.002, 1,001.000 (wgt'ed) examples reached here.  /* #neg=664 #pos=337 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13830090287223898;  // std dev = 13.928, 1,010.000 (wgt'ed) examples reached here.  /* #neg=673 #pos=337 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12710980572423453;  // std dev = 13.719, 974.000 (wgt'ed) examples reached here.  /* #neg=637 #pos=337 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11362370716363529;  // std dev = 13.521, 953.000 (wgt'ed) examples reached here.  /* #neg=616 #pos=337 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07490203481902581;  // std dev = 13.683, 1,003.000 (wgt'ed) examples reached here.  /* #neg=666 #pos=337 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06526972917135215;  // std dev = 13.587, 987.000 (wgt'ed) examples reached here.  /* #neg=650 #pos=337 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.025291798389885434;  // std dev = 13.882, 1,076.000 (wgt'ed) examples reached here.  /* #neg=739 #pos=337 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.29132750515207245;  // std dev = 10.871, 519.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22580702252484738;  // std dev = 0.000, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.23999254826645694;  // std dev = 10.588, 505.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18878145996939588;  // std dev = 6.31e-07, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
Inference time using transfer learning 0.9010026454925537
Parameter learned model CLL:-0.316081 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.89, 183, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.63e-07, 460, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.002, 664, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.928, 673, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.719, 637, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.521, 616, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.683, 666, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.587, 650, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.882, 739, 337], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.871, 182, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 481, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.588, 168, 337], 'false,true': [0.0, 0, 0], 'false,false': [6.31e-07, 503, 0]}]
{'': [0.22807322485207357, 1.5060416681871688e-16], 'true': [nan, 0.22807322485207357], 'true,false': [nan, 0.22807322485207357], 'true,false,false': [nan, 0.22807322485207357], 'false': [nan, 1.5060416681871688e-16]}
{'': [nan, 0.1958670624686323], 'false': [nan, 0.1958670624686323]}
{'': [nan, 0.19207506017810602], 'false': [nan, 0.19207506017810602]}
{'': [nan, 0.19323748172115704], 'false': [nan, 0.19323748172115704]}
{'': [nan, 0.19184098739600913], 'false': [nan, 0.19184098739600913]}
{'': [nan, 0.18665682626708377], 'false': [nan, 0.18665682626708377]}
{'': [nan, 0.18703576746871617], 'false': [nan, 0.18703576746871617]}
{'': [nan, 0.17910216477488458], 'false': [0.17910216477488458, nan]}
{'': [0.22770185735871, -4.136215509622205e-16], 'true': [nan, 0.22770185735871], 'true,false': [0.22770185735871, nan], 'false': [nan, -4.136215509622205e-16]}
{'': [0.22200176453289516, 7.910614950808273e-16], 'true': [nan, 0.22200176453289516], 'true,false': [nan, 0.22200176453289516], 'true,false,false': [nan, 0.22200176453289516], 'false': [nan, 7.910614950808273e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.896733522415161
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048818;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.14185106490048807;  // std dev = 0.000, 534.000 (wgt'ed) examples reached here.  /* #neg=534 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1254446385283912;  // std dev = 5.77e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.12544463852839235;  // std dev = 0.000, 638.000 (wgt'ed) examples reached here.  /* #neg=638 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360629;  // std dev = 4.08e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.11231637819360603;  // std dev = 0.000, 625.000 (wgt'ed) examples reached here.  /* #neg=625 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783624;  // std dev = 3.16e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.10159632948783545;  // std dev = 3.70e-07, 617.000 (wgt'ed) examples reached here.  /* #neg=617 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.09269127618926193;  // std dev = 0.000, 652.000 (wgt'ed) examples reached here.  /* #neg=652 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 1.67e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.08518475138839678;  // std dev = 1.52e-07, 626.000 (wgt'ed) examples reached here.  /* #neg=626 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.07877675473109245;  // std dev = 0.000, 607.000 (wgt'ed) examples reached here.  /* #neg=607 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 1.18e-08, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.07324622576333699;  // std dev = 1.25e-07, 577.000 (wgt'ed) examples reached here.  /* #neg=577 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420261;  // std dev = 0.000, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
%   else return -0.06842697784420353;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202618;  // std dev = 0.000, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else return -0.0641918400820254;  // std dev = 2.38e-07, 469.000 (wgt'ed) examples reached here.  /* #neg=469 */
Inference time using transfer learning 0.8258109092712402
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.896733522415161 

Total Inference Time : 1.4532699584960938 

Total revision time: 7.775609254837036
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.790050506591797 

Total Inference Time : 1.4532699584960938 

Run: 2

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.7515745162963867
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.4961137100505843;  // std dev = 10.864, 511.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=326 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004875;  // std dev = 1.84e-07, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16636039662007984;  // std dev = 13.780, 969.000 (wgt'ed) examples reached here.  /* #neg=643 #pos=326 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13196939077951153;  // std dev = 13.800, 999.000 (wgt'ed) examples reached here.  /* #neg=673 #pos=326 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11460568243265808;  // std dev = 13.654, 993.000 (wgt'ed) examples reached here.  /* #neg=667 #pos=326 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10707482142032826;  // std dev = 13.460, 952.000 (wgt'ed) examples reached here.  /* #neg=626 #pos=326 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09224980263500755;  // std dev = 13.358, 935.000 (wgt'ed) examples reached here.  /* #neg=609 #pos=326 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.058617060984222265;  // std dev = 13.473, 989.000 (wgt'ed) examples reached here.  /* #neg=663 #pos=326 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.03765388081229485;  // std dev = 13.563, 1,017.000 (wgt'ed) examples reached here.  /* #neg=691 #pos=326 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.292704276117154;  // std dev = 10.711, 503.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22560087127456152;  // std dev = 0.000, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.23367630079533758;  // std dev = 10.550, 495.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18863242615677106;  // std dev = 0.000, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
Inference time using transfer learning 1.0091114044189453
Parameter learned model CLL:-0.31271 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.864, 185, 326], 'false,true': [0.0, 0, 0], 'false,false': [1.84e-07, 477, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.78, 643, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.8, 673, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.654, 667, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.46, 626, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.358, 609, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.473, 663, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.563, 691, 326], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.711, 177, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 495, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.55, 169, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 505, 0]}]
{'': [0.23096572087270154, 7.075635209351103e-17], 'true': [nan, 0.23096572087270154], 'true,false': [nan, 0.23096572087270154], 'true,false,false': [nan, 0.23096572087270154], 'false': [nan, 7.075635209351103e-17]}
{'': [nan, 0.19595238544700438], 'false': [nan, 0.19595238544700438]}
{'': [nan, 0.1906338426868143], 'false': [nan, 0.1906338426868143]}
{'': [nan, 0.18775883883541167], 'false': [nan, 0.18775883883541167]}
{'': [nan, 0.19030620713749402], 'false': [nan, 0.19030620713749402]}
{'': [nan, 0.190840209117107], 'false': [nan, 0.190840209117107]}
{'': [nan, 0.18353364356749777], 'false': [nan, 0.18353364356749777]}
{'': [nan, 0.1808904231348877], 'false': [0.1808904231348877, nan]}
{'': [0.228063033330824, -1.162706294880164e-15], 'true': [nan, 0.228063033330824], 'true,false': [0.228063033330824, nan], 'false': [nan, -1.162706294880164e-15]}
{'': [0.22485052545658973, -9.708405696524142e-16], 'true': [nan, 0.22485052545658973], 'true,false': [nan, 0.22485052545658973], 'true,false,false': [nan, 0.22485052545658973], 'false': [nan, -9.708405696524142e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.759390115737915
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1418510649004882;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.14185106490048752;  // std dev = 1.63e-07, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839155;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.12544463852839233;  // std dev = 0.000, 582.000 (wgt'ed) examples reached here.  /* #neg=582 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360628;  // std dev = 4.21e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.11231637819360576;  // std dev = 0.000, 605.000 (wgt'ed) examples reached here.  /* #neg=605 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783619;  // std dev = 4.71e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.10159632948783573;  // std dev = 2.97e-07, 557.000 (wgt'ed) examples reached here.  /* #neg=557 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.09269127618926176;  // std dev = 0.000, 600.000 (wgt'ed) examples reached here.  /* #neg=600 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 1.83e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.08518475138839678;  // std dev = 1.46e-07, 580.000 (wgt'ed) examples reached here.  /* #neg=580 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109176;  // std dev = 1.83e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.07877675473109251;  // std dev = 0.000, 628.000 (wgt'ed) examples reached here.  /* #neg=628 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.07324622576333696;  // std dev = 1.40e-07, 596.000 (wgt'ed) examples reached here.  /* #neg=596 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420261;  // std dev = 3.94e-08, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else return -0.06842697784420353;  // std dev = 0.000, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   else return -0.06419184008202539;  // std dev = 2.44e-07, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
Inference time using transfer learning 0.966806173324585
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.759390115737915 

Total Inference Time : 1.4122931957244873 

Total revision time: 7.4704835414886475
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.485284328460693 

Total Inference Time : 1.4122931957244873 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.6042139530181885
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5207256222160724;  // std dev = 10.456, 489.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=324 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048718;  // std dev = 2.95e-07, 447.000 (wgt'ed) examples reached here.  /* #neg=447 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15715874215565873;  // std dev = 13.788, 982.000 (wgt'ed) examples reached here.  /* #neg=658 #pos=324 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13385368853156243;  // std dev = 13.676, 987.000 (wgt'ed) examples reached here.  /* #neg=663 #pos=324 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1104360056120736;  // std dev = 13.616, 993.000 (wgt'ed) examples reached here.  /* #neg=669 #pos=324 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09132426489520801;  // std dev = 13.583, 985.000 (wgt'ed) examples reached here.  /* #neg=661 #pos=324 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0878898666921127;  // std dev = 13.392, 941.000 (wgt'ed) examples reached here.  /* #neg=617 #pos=324 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05918192855282993;  // std dev = 13.432, 991.000 (wgt'ed) examples reached here.  /* #neg=667 #pos=324 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.048595963153253534;  // std dev = 13.411, 982.000 (wgt'ed) examples reached here.  /* #neg=658 #pos=324 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.26069931950940417;  // std dev = 11.138, 525.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22211030513308233;  // std dev = 0.000, 483.000 (wgt'ed) examples reached here.  /* #neg=483 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.20848458289376964;  // std dev = 10.998, 517.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18610491276082966;  // std dev = 3.48e-07, 438.000 (wgt'ed) examples reached here.  /* #neg=438 */
Inference time using transfer learning 0.980525016784668
Parameter learned model CLL:-0.308509 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.456, 165, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.95e-07, 447, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.788, 658, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.676, 663, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.616, 669, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.583, 661, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.392, 617, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.432, 667, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.411, 658, 324], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.138, 201, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 483, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.998, 193, 324], 'false,true': [0.0, 0, 0], 'false,false': [3.48e-07, 438, 0]}]
{'': [0.22356882080620546, 1.9472368038168294e-16], 'true': [nan, 0.22356882080620546], 'true,false': [nan, 0.22356882080620546], 'true,false,false': [nan, 0.22356882080620546], 'false': [nan, 1.9472368038168294e-16]}
{'': [nan, 0.19357998941797433], 'false': [nan, 0.19357998941797433]}
{'': [nan, 0.18948543549822655], 'false': [nan, 0.18948543549822655]}
{'': [nan, 0.18670480036333656], 'false': [nan, 0.18670480036333656]}
{'': [nan, 0.18730807414825168], 'false': [nan, 0.18730807414825168]}
{'': [nan, 0.19060210945014552], 'false': [nan, 0.19060210945014552]}
{'': [nan, 0.18206793021626844], 'false': [nan, 0.18206793021626844]}
{'': [nan, 0.18314878479736482], 'false': [0.18314878479736482, nan]}
{'': [0.23627755102040437, -6.987739119793946e-16], 'true': [nan, 0.23627755102040437], 'true,false': [0.23627755102040437, nan], 'false': [nan, -6.987739119793946e-16]}
{'': [0.23394902147113886, 2.7578142712150006e-16], 'true': [nan, 0.23394902147113886], 'true,false': [nan, 0.23394902147113886], 'true,false,false': [nan, 0.23394902147113886], 'false': [nan, 2.7578142712150006e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.8231351375579834
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048807;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.14185106490048768;  // std dev = 0.000, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.12544463852839155;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.12544463852839233;  // std dev = 0.000, 629.000 (wgt'ed) examples reached here.  /* #neg=629 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360632;  // std dev = 2.98e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.11231637819360585;  // std dev = 0.000, 604.000 (wgt'ed) examples reached here.  /* #neg=604 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783628;  // std dev = 2.47e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.1015963294878357;  // std dev = 3.08e-07, 560.000 (wgt'ed) examples reached here.  /* #neg=560 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.09269127618926176;  // std dev = 0.000, 601.000 (wgt'ed) examples reached here.  /* #neg=601 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839679;  // std dev = 1.67e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.08518475138839678;  // std dev = 1.46e-07, 594.000 (wgt'ed) examples reached here.  /* #neg=594 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.0787767547310917;  // std dev = 2.79e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.07877675473109248;  // std dev = 0.000, 618.000 (wgt'ed) examples reached here.  /* #neg=618 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333704;  // std dev = 1.05e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.07324622576333699;  // std dev = 1.28e-07, 578.000 (wgt'ed) examples reached here.  /* #neg=578 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420261;  // std dev = 3.16e-08, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   else return -0.06842697784420353;  // std dev = 0.000, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.06419184008202544;  // std dev = 2.30e-07, 460.000 (wgt'ed) examples reached here.  /* #neg=460 */
Inference time using transfer learning 0.9662261009216309
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.8231351375579834 

Total Inference Time : 1.367333173751831 

Total revision time: 7.344407081604004
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.35920786857605 

Total Inference Time : 1.367333173751831 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.3257787227630615
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.509906123597911;  // std dev = 8.429, 313.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=204 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048785;  // std dev = 8.94e-08, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.17614570956613135;  // std dev = 10.789, 585.000 (wgt'ed) examples reached here.  /* #neg=381 #pos=204 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1356061621013978;  // std dev = 10.830, 613.000 (wgt'ed) examples reached here.  /* #neg=409 #pos=204 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11697741415068123;  // std dev = 10.752, 603.000 (wgt'ed) examples reached here.  /* #neg=399 #pos=204 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0964256043463572;  // std dev = 10.706, 602.000 (wgt'ed) examples reached here.  /* #neg=398 #pos=204 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07960077675906051;  // std dev = 10.620, 607.000 (wgt'ed) examples reached here.  /* #neg=403 #pos=204 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05022427651365708;  // std dev = 10.715, 636.000 (wgt'ed) examples reached here.  /* #neg=432 #pos=204 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.052768663213677125;  // std dev = 10.627, 601.000 (wgt'ed) examples reached here.  /* #neg=397 #pos=204 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2892259217673992;  // std dev = 8.479, 315.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22546420626653202;  // std dev = 0.000, 333.000 (wgt'ed) examples reached here.  /* #neg=333 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.22660578272488002;  // std dev = 8.403, 312.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1885336116936997;  // std dev = 0.000, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
Inference time using transfer learning 0.9944491386413574
Parameter learned model CLL:-0.317848 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.429, 109, 204], 'false,true': [0.0, 0, 0], 'false,false': [8.94e-08, 298, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.789, 381, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.83, 409, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.752, 399, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.706, 398, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.62, 403, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.715, 432, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [10.627, 397, 204], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.479, 111, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 333, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.403, 108, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 301, 0]}]
{'': [0.22696975573906492, 2.682418046074204e-17], 'true': [nan, 0.22696975573906492], 'true,false': [nan, 0.22696975573906492], 'true,false,false': [nan, 0.22696975573906492], 'false': [nan, 2.682418046074204e-17]}
{'': [nan, 0.19897835894547802], 'false': [nan, 0.19897835894547802]}
{'': [nan, 0.19134641545677367], 'false': [nan, 0.19134641545677367]}
{'': [nan, 0.19173070396518446], 'false': [nan, 0.19173070396518446]}
{'': [nan, 0.19041022929825602], 'false': [nan, 0.19041022929825602]}
{'': [nan, 0.18580845623690095], 'false': [nan, 0.18580845623690095]}
{'': [nan, 0.18050431717968118], 'false': [nan, 0.18050431717968118]}
{'': [nan, 0.18789443579548604], 'false': [0.18789443579548604, nan]}
{'': [0.22820861678004553, -2.13376196924955e-16], 'true': [nan, 0.22820861678004553], 'true,false': [0.22820861678004553, nan], 'false': [nan, -2.13376196924955e-16]}
{'': [0.22633136094674286, -5.901517738871264e-18], 'true': [nan, 0.22633136094674286], 'true,false': [nan, 0.22633136094674286], 'true,false,false': [nan, 0.22633136094674286], 'false': [nan, -5.901517738871264e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.3754756450653076
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.14185106490048763;  // std dev = 8.69e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   else return -0.14185106490048793;  // std dev = 0.000, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.12544463852839138;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else return -0.12586491481365136;  // std dev = 0.155, 369.000 (wgt'ed) examples reached here.  /* #neg=369 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.11231637819360636;  // std dev = 1.05e-08, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.1122744828824333;  // std dev = 0.000, 396.000 (wgt'ed) examples reached here.  /* #neg=396 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.10159632948783631;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.10156179815377424;  // std dev = 0.000, 396.000 (wgt'ed) examples reached here.  /* #neg=396 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.09269127618926096;  // std dev = 5.27e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else return -0.09298109343307626;  // std dev = 0.124, 391.000 (wgt'ed) examples reached here.  /* #neg=391 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08513538377750096;  // std dev = 0.000, 379.000 (wgt'ed) examples reached here.  /* #neg=379 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.08518475138839682;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07877675473109175;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.07873435254847277;  // std dev = 3.57e-06, 379.000 (wgt'ed) examples reached here.  /* #neg=379 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   else return -0.07359912542764742;  // std dev = 0.158, 407.000 (wgt'ed) examples reached here.  /* #neg=407 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06836996129165744;  // std dev = 0.000, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | else return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06837256458687596;  // std dev = 0.000209, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.0641415319509644;  // std dev = 0.000, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | else return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06414441092246842;  // std dev = 0.000215, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
Inference time using transfer learning 0.9376893043518066
Refined model CLL: -0.063838


******************************************
Best model found
******************************************
Results 

CLL : -0.072663 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.3754756450653076 

Total Inference Time : 1.4433844089508057 

Total revision time: 6.53344202041626
Best scored revision CLL: -0.063838


Results 

CLL : -0.072663 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 6.548242807388306 

Total Inference Time : 1.4433844089508057 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.6802787780761719
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5062258581764311;  // std dev = 10.890, 520.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=337 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048754;  // std dev = 1.52e-07, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15805217798409074;  // std dev = 14.104, 1,019.000 (wgt'ed) examples reached here.  /* #neg=682 #pos=337 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15090078660135323;  // std dev = 13.791, 976.000 (wgt'ed) examples reached here.  /* #neg=639 #pos=337 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11877301831963745;  // std dev = 13.810, 995.000 (wgt'ed) examples reached here.  /* #neg=658 #pos=337 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09492812280766577;  // std dev = 13.731, 1,017.000 (wgt'ed) examples reached here.  /* #neg=680 #pos=337 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07857263114227292;  // std dev = 13.701, 1,004.000 (wgt'ed) examples reached here.  /* #neg=667 #pos=337 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05776896955480659;  // std dev = 13.748, 1,017.000 (wgt'ed) examples reached here.  /* #neg=680 #pos=337 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.04491692171175147;  // std dev = 13.682, 1,036.000 (wgt'ed) examples reached here.  /* #neg=699 #pos=337 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.3173333698761928;  // std dev = 10.482, 500.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.2247950344945022;  // std dev = 0.000, 523.000 (wgt'ed) examples reached here.  /* #neg=523 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2417134550003817;  // std dev = 10.482, 500.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18804960388718076;  // std dev = 5.33e-07, 482.000 (wgt'ed) examples reached here.  /* #neg=482 */
Inference time using transfer learning 0.8456544876098633
Parameter learned model CLL:-0.316501 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.89, 183, 337], 'false,true': [0.0, 0, 0], 'false,false': [1.52e-07, 482, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.104, 682, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.791, 639, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.81, 658, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.731, 680, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.701, 667, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.748, 680, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.682, 699, 337], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.482, 163, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 523, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.482, 163, 337], 'false,true': [0.0, 0, 0], 'false,false': [5.33e-07, 482, 0]}]
{'': [0.22807322485207357, 4.791003923693622e-17], 'true': [nan, 0.22807322485207357], 'true,false': [nan, 0.22807322485207357], 'true,false,false': [nan, 0.22807322485207357], 'false': [nan, 4.791003923693622e-17]}
{'': [nan, 0.1952079967471345], 'false': [nan, 0.1952079967471345]}
{'': [nan, 0.1948815914754058], 'false': [nan, 0.1948815914754058]}
{'': [nan, 0.1916836081269043], 'false': [nan, 0.1916836081269043]}
{'': [nan, 0.18538466428668832], 'false': [nan, 0.18538466428668832]}
{'': [nan, 0.1869668171089696], 'false': [nan, 0.1869668171089696]}
{'': [nan, 0.18584848934432918], 'false': [nan, 0.18584848934432918]}
{'': [nan, 0.180683971730022], 'false': [0.180683971730022, nan]}
{'': [0.2197240000000054, -1.3314185106020998e-15], 'true': [nan, 0.2197240000000054], 'true,false': [0.2197240000000054, nan], 'false': [nan, -1.3314185106020998e-15]}
{'': [0.21972399999999628, 5.896620213776765e-16], 'true': [nan, 0.21972399999999628], 'true,false': [nan, 0.21972399999999628], 'true,false,false': [nan, 0.21972399999999628], 'false': [nan, 5.896620213776765e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 3.0977652072906494
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048796;  // std dev = 0.000, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   else return -0.1418510649004874;  // std dev = 2.11e-07, 472.000 (wgt'ed) examples reached here.  /* #neg=472 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839158;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.12544463852839235;  // std dev = 0.000, 639.000 (wgt'ed) examples reached here.  /* #neg=639 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360628;  // std dev = 4.47e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.11231637819360579;  // std dev = 0.000, 609.000 (wgt'ed) examples reached here.  /* #neg=609 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783628;  // std dev = 2.47e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.10159632948783545;  // std dev = 3.76e-07, 625.000 (wgt'ed) examples reached here.  /* #neg=625 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926105;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.09269127618926182;  // std dev = 0.000, 609.000 (wgt'ed) examples reached here.  /* #neg=609 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 2.24e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else return -0.08518475138839678;  // std dev = 1.55e-07, 626.000 (wgt'ed) examples reached here.  /* #neg=626 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109177;  // std dev = 1.05e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.07877675473109244;  // std dev = 0.000, 590.000 (wgt'ed) examples reached here.  /* #neg=590 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.07324622576333695;  // std dev = 1.43e-07, 568.000 (wgt'ed) examples reached here.  /* #neg=568 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420261;  // std dev = 4.59e-08, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   else return -0.0684269778442036;  // std dev = 0.000, 532.000 (wgt'ed) examples reached here.  /* #neg=532 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.06419184008202536;  // std dev = 2.44e-07, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
Inference time using transfer learning 0.7914907932281494
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 3.0977652072906494 

Total Inference Time : 1.4419724941253662 

Total revision time: 7.905609369277954
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.92041015625 

Total Inference Time : 1.4419724941253662 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.7009284496307373
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5254756677727753;  // std dev = 10.588, 505.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=337 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004879;  // std dev = 0.000, 518.000 (wgt'ed) examples reached here.  /* #neg=518 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1573405794228568;  // std dev = 14.052, 1,018.000 (wgt'ed) examples reached here.  /* #neg=681 #pos=337 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1340315170296645;  // std dev = 13.936, 1,023.000 (wgt'ed) examples reached here.  /* #neg=686 #pos=337 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11783951813134608;  // std dev = 13.798, 1,003.000 (wgt'ed) examples reached here.  /* #neg=666 #pos=337 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09390713879599905;  // std dev = 13.770, 1,014.000 (wgt'ed) examples reached here.  /* #neg=677 #pos=337 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0712793460677734;  // std dev = 13.784, 1,031.000 (wgt'ed) examples reached here.  /* #neg=694 #pos=337 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0668141962223001;  // std dev = 13.616, 1,006.000 (wgt'ed) examples reached here.  /* #neg=669 #pos=337 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.05475387824665989;  // std dev = 13.601, 994.000 (wgt'ed) examples reached here.  /* #neg=657 #pos=337 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.26829609255953696;  // std dev = 11.203, 537.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22341329668670087;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2563847109909309;  // std dev = 10.394, 496.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1870493094217381;  // std dev = 2.31e-07, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
Inference time using transfer learning 0.876838207244873
Parameter learned model CLL:-0.314845 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.588, 168, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 518, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.052, 681, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.936, 686, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.798, 666, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.77, 677, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.784, 694, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.616, 669, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.601, 657, 337], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.203, 200, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 487, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.394, 159, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.31e-07, 490, 0]}]
{'': [0.22200176453289158, -9.601928861622976e-17], 'true': [nan, 0.22200176453289158], 'true,false': [nan, 0.22200176453289158], 'true,false,false': [nan, 0.22200176453289158], 'false': [nan, -9.601928861622976e-17]}
{'': [nan, 0.1939639111896263], 'false': [nan, 0.1939639111896263]}
{'': [nan, 0.18984988151603885], 'false': [nan, 0.18984988151603885]}
{'': [nan, 0.1898278406836372], 'false': [nan, 0.1898278406836372]}
{'': [nan, 0.18699498794768332], 'false': [nan, 0.18699498794768332]}
{'': [nan, 0.1842852389459542], 'false': [nan, 0.1842852389459542]}
{'': [nan, 0.18429908764753397], 'false': [nan, 0.18429908764753397]}
{'': [nan, 0.1861120641540528], 'false': [0.1861120641540528, nan]}
{'': [0.2337283133762622, -1.8237749891173002e-16], 'true': [nan, 0.2337283133762622], 'true,false': [0.2337283133762622, nan], 'false': [nan, -1.8237749891173002e-16]}
{'': [0.21780290712798775, 1.0875654118777043e-16], 'true': [nan, 0.21780290712798775], 'true,false': [nan, 0.21780290712798775], 'true,false,false': [nan, 0.21780290712798775], 'false': [nan, 1.0875654118777043e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.9178526401519775
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1418510649004882;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.14185106490048757;  // std dev = 1.19e-07, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839158;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.12544463852839235;  // std dev = 0.000, 613.000 (wgt'ed) examples reached here.  /* #neg=613 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360633;  // std dev = 2.36e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.1123163781936058;  // std dev = 0.000, 607.000 (wgt'ed) examples reached here.  /* #neg=607 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783616;  // std dev = 5.37e-08, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   else return -0.10159632948783537;  // std dev = 3.92e-07, 625.000 (wgt'ed) examples reached here.  /* #neg=625 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926105;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else return -0.09269127618926179;  // std dev = 0.000, 612.000 (wgt'ed) examples reached here.  /* #neg=612 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 1.83e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.08518475138839678;  // std dev = 1.55e-07, 636.000 (wgt'ed) examples reached here.  /* #neg=636 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109173;  // std dev = 2.36e-08, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   else return -0.07877675473109251;  // std dev = 0.000, 606.000 (wgt'ed) examples reached here.  /* #neg=606 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07324622576333661;  // std dev = 2.29e-07, 568.000 (wgt'ed) examples reached here.  /* #neg=568 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.17271732473929494;  // std dev = 0.608, 343.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.153311442978996;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06863218469798246;  // std dev = 0.025, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.06842697784420354;  // std dev = 0.000, 498.000 (wgt'ed) examples reached here.  /* #neg=498 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.13444997893788782;  // std dev = 2.19e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06533821734175092;  // std dev = 0.050, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   else return -0.06419184008202539;  // std dev = 2.44e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
Inference time using transfer learning 0.8082103729248047
Refined model CLL: -0.064233


******************************************
Best model found
******************************************
Results 

CLL : -0.06373 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.9178526401519775 

Total Inference Time : 1.4634130001068115 

Total revision time: 7.744579076766968
Best scored revision CLL: -0.064233


Results 

CLL : -0.06373 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.759379863739014 

Total Inference Time : 1.4634130001068115 

Run: 3

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.7170827388763428
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5532448839268002;  // std dev = 9.970, 469.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=326 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004875;  // std dev = 1.79e-07, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1576326322906658;  // std dev = 13.716, 983.000 (wgt'ed) examples reached here.  /* #neg=657 #pos=326 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1451841131985852;  // std dev = 13.480, 951.000 (wgt'ed) examples reached here.  /* #neg=625 #pos=326 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09905250655513842;  // std dev = 13.671, 1,016.000 (wgt'ed) examples reached here.  /* #neg=690 #pos=326 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08966204547588559;  // std dev = 13.523, 989.000 (wgt'ed) examples reached here.  /* #neg=663 #pos=326 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07065710215186467;  // std dev = 13.471, 1,005.000 (wgt'ed) examples reached here.  /* #neg=679 #pos=326 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06489858059728856;  // std dev = 13.360, 975.000 (wgt'ed) examples reached here.  /* #neg=649 #pos=326 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.046686656848085366;  // std dev = 13.402, 989.000 (wgt'ed) examples reached here.  /* #neg=663 #pos=326 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.3143990910095839;  // std dev = 10.294, 483.000 (wgt'ed) examples reached here.  /* #neg=157 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.21958654237965577;  // std dev = 0.000, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.23095444615151772;  // std dev = 10.424, 489.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18427261163194103;  // std dev = 6.90e-07, 474.000 (wgt'ed) examples reached here.  /* #neg=474 */
Inference time using transfer learning 1.002227544784546
Parameter learned model CLL:-0.314323 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [9.97, 143, 326], 'false,true': [0.0, 0, 0], 'false,false': [1.79e-07, 478, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.716, 657, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.48, 625, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.671, 690, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.523, 663, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.471, 679, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.36, 649, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.402, 663, 326], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.294, 157, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 491, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.424, 163, 326], 'false,true': [0.0, 0, 0], 'false,false': [6.9e-07, 474, 0]}]
{'': [0.21193757075118141, 6.689209855482115e-17], 'true': [nan, 0.21193757075118141], 'true,false': [nan, 0.21193757075118141], 'true,false,false': [nan, 0.21193757075118141], 'false': [nan, 6.689209855482115e-17]}
{'': [nan, 0.1913750769292244], 'false': [nan, 0.1913750769292244]}
{'': [nan, 0.19106418012522502], 'false': [nan, 0.19106418012522502]}
{'': [nan, 0.18395516796930633], 'false': [nan, 0.18395516796930633]}
{'': [nan, 0.18489962164417906], 'false': [nan, 0.18489962164417906]}
{'': [nan, 0.18056934827609047], 'false': [nan, 0.18056934827609047]}
{'': [nan, 0.18307249469385403], 'false': [nan, 0.18307249469385403]}
{'': [nan, 0.18162483143800587], 'false': [0.18162483143800587, nan]}
{'': [0.21939311326295136, -1.9536307398699292e-16], 'true': [nan, 0.21939311326295136], 'true,false': [0.21939311326295136, nan], 'false': [nan, -1.9536307398699292e-16]}
{'': [0.22222222222221882, 1.004353656032209e-15], 'true': [nan, 0.22222222222221882], 'true,false': [nan, 0.22222222222221882], 'true,false,false': [nan, 0.22222222222221882], 'false': [nan, 1.004353656032209e-15]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.9114227294921875
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048824;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.1418510649004872;  // std dev = 2.98e-07, 433.000 (wgt'ed) examples reached here.  /* #neg=433 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1254446385283916;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.12544463852839235;  // std dev = 0.000, 607.000 (wgt'ed) examples reached here.  /* #neg=607 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360629;  // std dev = 4.71e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.11231637819360572;  // std dev = 0.000, 567.000 (wgt'ed) examples reached here.  /* #neg=567 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783621;  // std dev = 4.21e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.10159632948783558;  // std dev = 3.37e-07, 578.000 (wgt'ed) examples reached here.  /* #neg=578 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926108;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.09269127618926175;  // std dev = 0.000, 597.000 (wgt'ed) examples reached here.  /* #neg=597 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839682;  // std dev = 4.94e-08, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
%   else return -0.08518475138839678;  // std dev = 1.49e-07, 600.000 (wgt'ed) examples reached here.  /* #neg=600 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.0787767547310918;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.07877675473109241;  // std dev = 0.000, 607.000 (wgt'ed) examples reached here.  /* #neg=607 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333704;  // std dev = 7.45e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.07324622576333689;  // std dev = 1.62e-07, 619.000 (wgt'ed) examples reached here.  /* #neg=619 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420261;  // std dev = 4.08e-08, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   else return -0.06842697784420353;  // std dev = 0.000, 490.000 (wgt'ed) examples reached here.  /* #neg=490 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202619;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.06419184008202537;  // std dev = 2.44e-07, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
Inference time using transfer learning 0.9460899829864502
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.9114227294921875 

Total Inference Time : 1.5709710121154785 

Total revision time: 7.7330241203308105
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.747437238693237 

Total Inference Time : 1.5709710121154785 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.637268304824829
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5153497464585344;  // std dev = 10.539, 493.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=324 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048718;  // std dev = 2.98e-07, 440.000 (wgt'ed) examples reached here.  /* #neg=440 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16166749727470026;  // std dev = 13.741, 972.000 (wgt'ed) examples reached here.  /* #neg=648 #pos=324 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13810809635798146;  // std dev = 13.644, 970.000 (wgt'ed) examples reached here.  /* #neg=646 #pos=324 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10752611206566702;  // std dev = 13.661, 995.000 (wgt'ed) examples reached here.  /* #neg=671 #pos=324 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10888456251428535;  // std dev = 13.358, 936.000 (wgt'ed) examples reached here.  /* #neg=612 #pos=324 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09282454092994082;  // std dev = 13.267, 921.000 (wgt'ed) examples reached here.  /* #neg=597 #pos=324 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06238043180307944;  // std dev = 13.351, 961.000 (wgt'ed) examples reached here.  /* #neg=637 #pos=324 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.05659760294006014;  // std dev = 13.237, 942.000 (wgt'ed) examples reached here.  /* #neg=618 #pos=324 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.3037209406549195;  // std dev = 10.371, 485.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22901838896128945;  // std dev = 0.000, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2214367030731276;  // std dev = 10.518, 492.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.19109966592047106;  // std dev = 0.000, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
Inference time using transfer learning 1.0308477878570557
Parameter learned model CLL:-0.321428 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.539, 169, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.98e-07, 440, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.741, 648, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.644, 646, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.661, 671, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.358, 612, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.267, 597, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.351, 637, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.237, 618, 324], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.371, 161, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 479, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.518, 168, 324], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 504, 0]}]
{'': [0.22528790490806652, 2.0185873175002846e-16], 'true': [nan, 0.22528790490806652], 'true,false': [nan, 0.22528790490806652], 'true,false,false': [nan, 0.22528790490806652], 'false': [nan, 2.0185873175002846e-16]}
{'': [nan, 0.19424394652886004], 'false': [nan, 0.19424394652886004]}
{'': [nan, 0.19191029104203167], 'false': [nan, 0.19191029104203167]}
{'': [nan, 0.1875512760200205], 'false': [nan, 0.1875512760200205]}
{'': [nan, 0.1906290064949548], 'false': [nan, 0.1906290064949548]}
{'': [nan, 0.191106846315717], 'false': [nan, 0.191106846315717]}
{'': [nan, 0.18548594817181377], 'false': [nan, 0.18548594817181377]}
{'': [nan, 0.18600756907509514], 'false': [0.18600756907509514, nan]}
{'': [0.2217621426294044, -3.0409449025223493e-16], 'true': [nan, 0.2217621426294044], 'true,false': [0.2217621426294044, nan], 'false': [nan, -3.0409449025223493e-16]}
{'': [0.22486615110053756, -3.101575433873453e-16], 'true': [nan, 0.22486615110053756], 'true,false': [nan, 0.22486615110053756], 'true,false,false': [nan, 0.22486615110053756], 'false': [nan, -3.101575433873453e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.751497983932495
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048832;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   else return -0.14185106490048752;  // std dev = 1.63e-07, 481.000 (wgt'ed) examples reached here.  /* #neg=481 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1254446385283916;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.12544463852839235;  // std dev = 0.000, 609.000 (wgt'ed) examples reached here.  /* #neg=609 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1123163781936063;  // std dev = 3.49e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.11231637819360576;  // std dev = 0.000, 603.000 (wgt'ed) examples reached here.  /* #neg=603 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783624;  // std dev = 3.49e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.1015963294878354;  // std dev = 3.86e-07, 624.000 (wgt'ed) examples reached here.  /* #neg=624 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   else return -0.09269127618926173;  // std dev = 0.000, 602.000 (wgt'ed) examples reached here.  /* #neg=602 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.0851847513883968;  // std dev = 1.97e-08, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   else return -0.08518475138839678;  // std dev = 1.46e-07, 587.000 (wgt'ed) examples reached here.  /* #neg=587 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.07877675473109241;  // std dev = 0.000, 591.000 (wgt'ed) examples reached here.  /* #neg=591 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333704;  // std dev = 1.05e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.07324622576333695;  // std dev = 1.46e-07, 605.000 (wgt'ed) examples reached here.  /* #neg=605 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420261;  // std dev = 2.79e-08, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else return -0.06842697784420355;  // std dev = 0.000, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.06419184008202546;  // std dev = 2.27e-07, 454.000 (wgt'ed) examples reached here.  /* #neg=454 */
Inference time using transfer learning 0.9018247127532959
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.751497983932495 

Total Inference Time : 1.490954875946045 

Total revision time: 7.471966743469238
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.486379861831665 

Total Inference Time : 1.490954875946045 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.3995375633239746
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.505767982718556;  // std dev = 8.479, 315.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=204 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048793;  // std dev = 0.000, 285.000 (wgt'ed) examples reached here.  /* #neg=285 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.18572513585467662;  // std dev = 10.694, 572.000 (wgt'ed) examples reached here.  /* #neg=368 #pos=204 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1351589787145344;  // std dev = 10.844, 608.000 (wgt'ed) examples reached here.  /* #neg=404 #pos=204 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1482642396089678;  // std dev = 10.443, 549.000 (wgt'ed) examples reached here.  /* #neg=345 #pos=204 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07447200832785944;  // std dev = 10.801, 639.000 (wgt'ed) examples reached here.  /* #neg=435 #pos=204 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06991108737211568;  // std dev = 10.691, 618.000 (wgt'ed) examples reached here.  /* #neg=414 #pos=204 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07923224326743607;  // std dev = 10.428, 579.000 (wgt'ed) examples reached here.  /* #neg=375 #pos=204 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.03213847364728596;  // std dev = 10.697, 638.000 (wgt'ed) examples reached here.  /* #neg=434 #pos=204 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.32317228566046385;  // std dev = 8.022, 298.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22847383349352537;  // std dev = 1.79e-07, 306.000 (wgt'ed) examples reached here.  /* #neg=306 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2150766756362478;  // std dev = 8.403, 312.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.19070701182395314;  // std dev = 2.49e-07, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
Inference time using transfer learning 0.9662508964538574
Parameter learned model CLL:-0.323579 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.479, 111, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 285, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.694, 368, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.844, 404, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.443, 345, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.801, 435, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.691, 414, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.428, 375, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [10.697, 434, 204], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.022, 94, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [1.79e-07, 306, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.403, 108, 204], 'false,true': [0.0, 0, 0], 'false,false': [2.49e-07, 308, 0]}]
{'': [0.22820861678004992, -9.349246523159213e-18], 'true': [nan, 0.22820861678004992], 'true,false': [nan, 0.22820861678004992], 'true,false,false': [nan, 0.22820861678004992], 'false': [nan, -9.349246523159213e-18]}
{'': [nan, 0.19991875139792867], 'false': [nan, 0.19991875139792867]}
{'': [nan, 0.19342095869106166], 'false': [nan, 0.19342095869106166]}
{'': [nan, 0.1986516889912069], 'false': [nan, 0.1986516889912069]}
{'': [nan, 0.18256675929048663], 'false': [nan, 0.18256675929048663]}
{'': [nan, 0.18494641637227727], 'false': [nan, 0.18494641637227727]}
{'': [nan, 0.18780737475123593], 'false': [nan, 0.18780737475123593]}
{'': [nan, 0.17934820104532923], 'false': [0.17934820104532923, nan]}
{'': [0.21593621908923002, 1.0449157878825003e-16], 'true': [nan, 0.21593621908923002], 'true,false': [0.21593621908923002, nan], 'false': [nan, 1.0449157878825003e-16]}
{'': [0.22633136094674683, 2.0185873175002846e-16], 'true': [nan, 0.22633136094674683], 'true,false': [nan, 0.22633136094674683], 'true,false,false': [nan, 0.22633136094674683], 'false': [nan, 2.0185873175002846e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.2390856742858887
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B) )
%   | then return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.14185106490048768;  // std dev = 6.66e-08, 115.000 (wgt'ed) examples reached here.  /* #neg=115 */
%   else return -0.14185106490048796;  // std dev = 0.000, 281.000 (wgt'ed) examples reached here.  /* #neg=281 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.1254446385283922;  // std dev = 0.000, 386.000 (wgt'ed) examples reached here.  /* #neg=386 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.12544463852839136;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.11231637819360636;  // std dev = 1.18e-08, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.11231637819360622;  // std dev = 0.000, 398.000 (wgt'ed) examples reached here.  /* #neg=398 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.10159632948783631;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.10159632948783638;  // std dev = 6.66e-08, 378.000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.09269127618926075;  // std dev = 1.65e-07, 383.000 (wgt'ed) examples reached here.  /* #neg=383 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.09269127618926097;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.08518475138839678;  // std dev = 1.23e-07, 399.000 (wgt'ed) examples reached here.  /* #neg=399 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.08518475138839683;  // std dev = 5.27e-09, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07877675473109172;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   else return -0.07877675473109144;  // std dev = 7.88e-08, 386.000 (wgt'ed) examples reached here.  /* #neg=386 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07324622576333704;  // std dev = 3.73e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else return -0.07434561216456276;  // std dev = 0.441, 402.000 (wgt'ed) examples reached here.  /* #neg=402 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( actor(A) )
%   | | then return -0.06835693100055357;  // std dev = 0.000, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | else if ( female(B) )
%   | | | then return -0.06835693100055346;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.13973375786704653;  // std dev = 0.391, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else return -0.06836135035977431;  // std dev = 0.000303, 317.000 (wgt'ed) examples reached here.  /* #neg=317 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else if ( actor(A) )
%   | | then return -0.06413003410172997;  // std dev = 2.69e-08, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else return -0.11796785714338698;  // std dev = 0.140, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else return -0.06413604481005582;  // std dev = 0.000326, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
Inference time using transfer learning 0.9822001457214355
Refined model CLL: -0.064044


******************************************
Best model found
******************************************
Results 

CLL : -0.079512 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.2390856742858887 

Total Inference Time : 1.3755722045898438 

Total revision time: 6.433988094329834
Best scored revision CLL: -0.064044


Results 

CLL : -0.079512 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 6.448401212692261 

Total Inference Time : 1.3755722045898438 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.6773526668548584
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5254756677727753;  // std dev = 10.588, 505.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=337 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004872;  // std dev = 2.83e-07, 455.000 (wgt'ed) examples reached here.  /* #neg=455 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15377461082466226;  // std dev = 14.077, 1,034.000 (wgt'ed) examples reached here.  /* #neg=697 #pos=337 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14220439185164577;  // std dev = 13.843, 1,000.000 (wgt'ed) examples reached here.  /* #neg=663 #pos=337 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11795646235952702;  // std dev = 13.774, 1,003.000 (wgt'ed) examples reached here.  /* #neg=666 #pos=337 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08925366627673004;  // std dev = 13.807, 1,028.000 (wgt'ed) examples reached here.  /* #neg=691 #pos=337 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07948012289656374;  // std dev = 13.647, 1,014.000 (wgt'ed) examples reached here.  /* #neg=677 #pos=337 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.058062062932728364;  // std dev = 13.696, 1,030.000 (wgt'ed) examples reached here.  /* #neg=693 #pos=337 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.05414046834596239;  // std dev = 13.560, 1,009.000 (wgt'ed) examples reached here.  /* #neg=672 #pos=337 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2616136044389703;  // std dev = 11.307, 543.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22322347799384376;  // std dev = 4.13e-07, 537.000 (wgt'ed) examples reached here.  /* #neg=537 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2555530804649037;  // std dev = 10.438, 498.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1869117977973839;  // std dev = 3.67e-07, 455.000 (wgt'ed) examples reached here.  /* #neg=455 */
Inference time using transfer learning 0.8267736434936523
Parameter learned model CLL:-0.312294 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.588, 168, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.83e-07, 455, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.077, 697, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.843, 663, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.774, 666, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.807, 691, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.647, 677, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.696, 693, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.56, 672, 337], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.307, 206, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [4.13e-07, 537, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.438, 161, 337], 'false,true': [0.0, 0, 0], 'false,false': [3.67e-07, 455, 0]}]
{'': [0.22200176453289158, 1.7568364345716762e-16], 'true': [nan, 0.22200176453289158], 'true,false': [nan, 0.22200176453289158], 'true,false,false': [nan, 0.22200176453289158], 'false': [nan, 1.7568364345716762e-16]}
{'': [nan, 0.191653873107853], 'false': [nan, 0.191653873107853]}
{'': [nan, 0.19163512433035018], 'false': [nan, 0.19163512433035018]}
{'': [nan, 0.18915326007633324], 'false': [nan, 0.18915326007633324]}
{'': [nan, 0.18543634286676505], 'false': [nan, 0.18543634286676505]}
{'': [nan, 0.1836718296006094], 'false': [nan, 0.1836718296006094]}
{'': [nan, 0.18210541647083675], 'false': [nan, 0.18210541647083675]}
{'': [nan, 0.18222256887761232], 'false': [0.18222256887761232, nan]}
{'': [0.2354493316918171, 3.1756099922239115e-16], 'true': [nan, 0.2354493316918171], 'true,false': [0.2354493316918171, nan], 'false': [nan, 3.1756099922239115e-16]}
{'': [0.21877469718230483, 2.9671015339432753e-16], 'true': [nan, 0.21877469718230483], 'true,false': [nan, 0.21877469718230483], 'true,false,false': [nan, 0.21877469718230483], 'false': [nan, 2.9671015339432753e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.8899600505828857
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1418510649004882;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.1418510649004873;  // std dev = 2.53e-07, 462.000 (wgt'ed) examples reached here.  /* #neg=462 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839158;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.1254446385283923;  // std dev = 0.000, 594.000 (wgt'ed) examples reached here.  /* #neg=594 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360635;  // std dev = 3.16e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.11231637819360585;  // std dev = 2.98e-08, 581.000 (wgt'ed) examples reached here.  /* #neg=581 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1015963294878363;  // std dev = 2.24e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.10159632948783551;  // std dev = 3.49e-07, 565.000 (wgt'ed) examples reached here.  /* #neg=565 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926105;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.09269127618926182;  // std dev = 0.000, 627.000 (wgt'ed) examples reached here.  /* #neg=627 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0851847513883968;  // std dev = 1.97e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.08518475138839678;  // std dev = 1.55e-07, 638.000 (wgt'ed) examples reached here.  /* #neg=638 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.07877675473109268;  // std dev = 0.000, 661.000 (wgt'ed) examples reached here.  /* #neg=661 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 1.05e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.07324622576333678;  // std dev = 1.93e-07, 621.000 (wgt'ed) examples reached here.  /* #neg=621 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420261;  // std dev = 3.65e-08, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   else return -0.06842697784420354;  // std dev = 0.000, 496.000 (wgt'ed) examples reached here.  /* #neg=496 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202619;  // std dev = 0.000, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   else return -0.06419184008202539;  // std dev = 2.44e-07, 492.000 (wgt'ed) examples reached here.  /* #neg=492 */
Inference time using transfer learning 0.8217182159423828
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.8899600505828857 

Total Inference Time : 1.6243383884429932 

Total revision time: 7.895267724990845
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.9096808433532715 

Total Inference Time : 1.6243383884429932 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.6586837768554688
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5459040371403243;  // std dev = 10.258, 490.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=337 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004875;  // std dev = 1.79e-07, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1601241750186964;  // std dev = 13.949, 1,007.000 (wgt'ed) examples reached here.  /* #neg=670 #pos=337 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14999806367759977;  // std dev = 13.671, 968.000 (wgt'ed) examples reached here.  /* #neg=631 #pos=337 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11165884141907917;  // std dev = 13.781, 1,000.000 (wgt'ed) examples reached here.  /* #neg=663 #pos=337 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09416694840885349;  // std dev = 13.672, 997.000 (wgt'ed) examples reached here.  /* #neg=660 #pos=337 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06521327654462084;  // std dev = 13.757, 1,034.000 (wgt'ed) examples reached here.  /* #neg=697 #pos=337 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.061480560088274974;  // std dev = 13.610, 1,006.000 (wgt'ed) examples reached here.  /* #neg=669 #pos=337 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.041329581458836015;  // std dev = 13.664, 1,035.000 (wgt'ed) examples reached here.  /* #neg=698 #pos=337 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.26056312383797026;  // std dev = 11.290, 542.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22133912007171933;  // std dev = 8.11e-07, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.22610382458911987;  // std dev = 10.871, 519.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18554545325059646;  // std dev = 0.000, 521.000 (wgt'ed) examples reached here.  /* #neg=521 */
Inference time using transfer learning 0.8732767105102539
Parameter learned model CLL:-0.310649 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.258, 153, 337], 'false,true': [0.0, 0, 0], 'false,false': [1.79e-07, 478, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.949, 670, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.671, 631, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.781, 663, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.672, 660, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.757, 697, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.61, 669, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.664, 698, 337], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.29, 205, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [8.11e-07, 504, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.871, 182, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 521, 0]}]
{'': [0.21474802165764528, 6.689209855482115e-17], 'true': [nan, 0.21474802165764528], 'true,false': [nan, 0.21474802165764528], 'true,false,false': [nan, 0.21474802165764528], 'false': [nan, 6.689209855482115e-17]}
{'': [nan, 0.19322670036363915], 'false': [nan, 0.19322670036363915]}
{'': [nan, 0.19307483121251132], 'false': [nan, 0.19307483121251132]}
{'': [nan, 0.18990576111412616], 'false': [nan, 0.18990576111412616]}
{'': [nan, 0.18748542061554643], 'false': [nan, 0.18748542061554643]}
{'': [nan, 0.18302216641950708], 'false': [nan, 0.18302216641950708]}
{'': [nan, 0.1841348754095377], 'false': [nan, 0.1841348754095377]}
{'': [nan, 0.1803800073562561], 'false': [0.1803800073562561, nan]}
{'': [0.2351717705368988, 1.3040714892422473e-15], 'true': [nan, 0.2351717705368988], 'true,false': [0.2351717705368988, nan], 'false': [nan, 1.3040714892422473e-15]}
{'': [0.2277018573587085, -7.296360146480876e-16], 'true': [nan, 0.2277018573587085], 'true,false': [nan, 0.2277018573587085], 'true,false,false': [nan, 0.2277018573587085], 'false': [nan, -7.296360146480876e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.9822325706481934
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048832;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   else return -0.14185106490048757;  // std dev = 1.26e-07, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1254446385283916;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.12544463852839238;  // std dev = 0.000, 621.000 (wgt'ed) examples reached here.  /* #neg=621 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360626;  // std dev = 5.16e-08, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.1123163781936059;  // std dev = 0.000, 626.000 (wgt'ed) examples reached here.  /* #neg=626 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783623;  // std dev = 3.80e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.1015963294878354;  // std dev = 3.96e-07, 666.000 (wgt'ed) examples reached here.  /* #neg=666 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.09269127618926179;  // std dev = 0.000, 611.000 (wgt'ed) examples reached here.  /* #neg=611 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 1.83e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.08518475138839678;  // std dev = 1.58e-07, 639.000 (wgt'ed) examples reached here.  /* #neg=639 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0787767547310917;  // std dev = 3.07e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   else return -0.0787767547310926;  // std dev = 0.000, 632.000 (wgt'ed) examples reached here.  /* #neg=632 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 7.45e-09, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.07324622576333689;  // std dev = 1.59e-07, 582.000 (wgt'ed) examples reached here.  /* #neg=582 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420261;  // std dev = 0.000, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   else return -0.0684269778442036;  // std dev = 0.000, 528.000 (wgt'ed) examples reached here.  /* #neg=528 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202619;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   else return -0.06419184008202537;  // std dev = 2.43e-07, 500.000 (wgt'ed) examples reached here.  /* #neg=500 */
Inference time using transfer learning 0.8053421974182129
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.9822325706481934 

Total Inference Time : 1.5225207805633545 

Total revision time: 7.7884674072265625
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.802880525588989 

Total Inference Time : 1.5225207805633545 

Run: 4

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.7244303226470947
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.507551325537755;  // std dev = 10.691, 502.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=326 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048804;  // std dev = 0.000, 531.000 (wgt'ed) examples reached here.  /* #neg=531 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1660785687220347;  // std dev = 13.752, 967.000 (wgt'ed) examples reached here.  /* #neg=641 #pos=326 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14242508491193226;  // std dev = 13.640, 965.000 (wgt'ed) examples reached here.  /* #neg=639 #pos=326 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1272146695989758;  // std dev = 13.458, 943.000 (wgt'ed) examples reached here.  /* #neg=617 #pos=326 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0753103508863573;  // std dev = 13.747, 1,033.000 (wgt'ed) examples reached here.  /* #neg=707 #pos=326 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07085953764588847;  // std dev = 13.568, 1,009.000 (wgt'ed) examples reached here.  /* #neg=683 #pos=326 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.059707723320867705;  // std dev = 13.526, 995.000 (wgt'ed) examples reached here.  /* #neg=669 #pos=326 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.04993691488010241;  // std dev = 13.476, 988.000 (wgt'ed) examples reached here.  /* #neg=662 #pos=326 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2888638320901412;  // std dev = 10.788, 507.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.2226450591576291;  // std dev = 6.50e-07, 506.000 (wgt'ed) examples reached here.  /* #neg=506 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2739672465988422;  // std dev = 9.946, 468.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18649262867528169;  // std dev = 0.000, 462.000 (wgt'ed) examples reached here.  /* #neg=462 */
Inference time using transfer learning 1.0087056159973145
Parameter learned model CLL:-0.314624 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.691, 176, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 531, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.752, 641, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.64, 639, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.458, 617, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.747, 707, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.568, 683, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.526, 669, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.476, 662, 326], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.788, 181, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [6.5e-07, 506, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [9.946, 142, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 462, 0]}]
{'': [0.22767892573134024, -1.4719341042111304e-16], 'true': [nan, 0.22767892573134024], 'true,false': [nan, 0.22767892573134024], 'true,false,false': [nan, 0.22767892573134024], 'false': [nan, -1.4719341042111304e-16]}
{'': [nan, 0.1955647723142242], 'false': [nan, 0.1955647723142242]}
{'': [nan, 0.19279965515878222], 'false': [nan, 0.19279965515878222]}
{'': [nan, 0.19207564825357243], 'false': [nan, 0.19207564825357243]}
{'': [nan, 0.18293613039926349], 'false': [nan, 0.18293613039926349]}
{'': [nan, 0.1824428030391219], 'false': [nan, 0.1824428030391219]}
{'': [nan, 0.18388213209575216], 'false': [nan, 0.18388213209575216]}
{'': [nan, 0.18379683940448746], 'false': [0.18379683940448746, nan]}
{'': [0.22955156409867788, 8.355196201131613e-16], 'true': [nan, 0.22955156409867788], 'true,false': [0.22955156409867788, nan], 'false': [nan, 8.355196201131613e-16]}
{'': [0.2113558331507024, -1.1534784671430197e-16], 'true': [nan, 0.2113558331507024], 'true,false': [nan, 0.2113558331507024], 'true,false,false': [nan, 0.2113558331507024], 'false': [nan, -1.1534784671430197e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.760042190551758
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048793;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   else return -0.1418510649004875;  // std dev = 1.84e-07, 477.000 (wgt'ed) examples reached here.  /* #neg=477 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.12544463852839155;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.1254446385283923;  // std dev = 0.000, 587.000 (wgt'ed) examples reached here.  /* #neg=587 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1123163781936063;  // std dev = 3.33e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.1123163781936057;  // std dev = 4.21e-08, 570.000 (wgt'ed) examples reached here.  /* #neg=570 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783615;  // std dev = 5.77e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   else return -0.10159632948783552;  // std dev = 3.60e-07, 627.000 (wgt'ed) examples reached here.  /* #neg=627 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.09269127618926173;  // std dev = 0.000, 590.000 (wgt'ed) examples reached here.  /* #neg=590 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839685;  // std dev = 3.25e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.08518475138839678;  // std dev = 1.49e-07, 594.000 (wgt'ed) examples reached here.  /* #neg=594 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109177;  // std dev = 1.29e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.0787767547310924;  // std dev = 0.000, 587.000 (wgt'ed) examples reached here.  /* #neg=587 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.07324622576333693;  // std dev = 1.49e-07, 601.000 (wgt'ed) examples reached here.  /* #neg=601 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420262;  // std dev = 3.49e-08, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.06842697784420358;  // std dev = 0.000, 517.000 (wgt'ed) examples reached here.  /* #neg=517 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06419184008202623;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   else return -0.06419184008202544;  // std dev = 2.33e-07, 466.000 (wgt'ed) examples reached here.  /* #neg=466 */
Inference time using transfer learning 0.9031002521514893
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.760042190551758 

Total Inference Time : 1.3465797901153564 

Total revision time: 7.26175332069397
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.276182413101196 

Total Inference Time : 1.3465797901153564 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.6901860237121582
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5193734248954264;  // std dev = 10.477, 490.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=324 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048746;  // std dev = 1.88e-07, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1637559143074513;  // std dev = 13.724, 960.000 (wgt'ed) examples reached here.  /* #neg=636 #pos=324 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14708394352458812;  // std dev = 13.550, 935.000 (wgt'ed) examples reached here.  /* #neg=611 #pos=324 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09662505816359279;  // std dev = 13.731, 1,028.000 (wgt'ed) examples reached here.  /* #neg=704 #pos=324 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09132750822705613;  // std dev = 13.518, 996.000 (wgt'ed) examples reached here.  /* #neg=672 #pos=324 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07218602305743514;  // std dev = 13.500, 1,003.000 (wgt'ed) examples reached here.  /* #neg=679 #pos=324 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06809067749128775;  // std dev = 13.360, 969.000 (wgt'ed) examples reached here.  /* #neg=645 #pos=324 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.050108614467789914;  // std dev = 13.385, 982.000 (wgt'ed) examples reached here.  /* #neg=658 #pos=324 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.3089952480979845;  // std dev = 10.414, 487.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22223771643120602;  // std dev = 0.000, 503.000 (wgt'ed) examples reached here.  /* #neg=503 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2395691383443686;  // std dev = 10.349, 484.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18619730712746213;  // std dev = 4.54e-07, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
Inference time using transfer learning 1.0597095489501953
Parameter learned model CLL:-0.317036 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.477, 166, 324], 'false,true': [0.0, 0, 0], 'false,false': [1.88e-07, 476, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.724, 636, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.55, 611, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.731, 704, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.518, 672, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.5, 679, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.36, 645, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.385, 658, 324], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.414, 163, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 503, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.349, 160, 324], 'false,true': [0.0, 0, 0], 'false,false': [4.54e-07, 511, 0]}]
{'': [0.22400666389004856, 7.463684199160717e-17], 'true': [nan, 0.22400666389004856], 'true,false': [nan, 0.22400666389004856], 'true,false,false': [nan, 0.22400666389004856], 'false': [nan, 7.463684199160717e-17]}
{'': [nan, 0.19620724930717443], 'false': [nan, 0.19620724930717443]}
{'': [nan, 0.19635519892204734], 'false': [nan, 0.19635519892204734]}
{'': [nan, 0.18339755593368334], 'false': [nan, 0.18339755593368334]}
{'': [nan, 0.18347129421667507], 'false': [nan, 0.18347129421667507]}
{'': [nan, 0.18169892192511555], 'false': [nan, 0.18169892192511555]}
{'': [nan, 0.18421110322820816], 'false': [nan, 0.18421110322820816]}
{'': [nan, 0.18244765350359118], 'false': [0.18244765350359118, nan]}
{'': [0.22267665673001283, -9.181963782188174e-16], 'true': [nan, 0.22267665673001283], 'true,false': [0.22267665673001283, nan], 'false': [nan, -9.181963782188174e-16]}
{'': [0.2212963595382832, 4.032434312532858e-16], 'true': [nan, 0.2212963595382832], 'true,false': [nan, 0.2212963595382832], 'true,false,false': [nan, 0.2212963595382832], 'false': [nan, 4.032434312532858e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.8692502975463867
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048813;  // std dev = 0.000, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   else return -0.1418510649004872;  // std dev = 2.86e-07, 454.000 (wgt'ed) examples reached here.  /* #neg=454 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1254446385283916;  // std dev = 0.000, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   else return -0.12544463852839233;  // std dev = 0.000, 572.000 (wgt'ed) examples reached here.  /* #neg=572 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.11231637819360632;  // std dev = 3.65e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.11231637819360578;  // std dev = 0.000, 597.000 (wgt'ed) examples reached here.  /* #neg=597 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783621;  // std dev = 3.94e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.1015963294878356;  // std dev = 3.37e-07, 600.000 (wgt'ed) examples reached here.  /* #neg=600 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   else return -0.09269127618926187;  // std dev = 0.000, 630.000 (wgt'ed) examples reached here.  /* #neg=630 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839683;  // std dev = 3.80e-08, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.08518475138839678;  // std dev = 1.49e-07, 592.000 (wgt'ed) examples reached here.  /* #neg=592 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109182;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.0787767547310923;  // std dev = 0.000, 582.000 (wgt'ed) examples reached here.  /* #neg=582 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333704;  // std dev = 1.29e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.07324622576333696;  // std dev = 1.38e-07, 583.000 (wgt'ed) examples reached here.  /* #neg=583 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420261;  // std dev = 4.08e-08, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.06842697784420353;  // std dev = 0.000, 486.000 (wgt'ed) examples reached here.  /* #neg=486 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.0641918400820254;  // std dev = 2.43e-07, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
Inference time using transfer learning 0.9163143634796143
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.8692502975463867 

Total Inference Time : 1.3529553413391113 

Total revision time: 7.367977142333984
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.382406234741211 

Total Inference Time : 1.3529553413391113 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.3132352828979492
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.48584124279181606;  // std dev = 8.715, 325.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=204 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048788;  // std dev = 7.88e-08, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1634558770003499;  // std dev = 10.986, 606.000 (wgt'ed) examples reached here.  /* #neg=402 #pos=204 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.14467188346652968;  // std dev = 10.805, 608.000 (wgt'ed) examples reached here.  /* #neg=404 #pos=204 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1159170825451307;  // std dev = 10.823, 612.000 (wgt'ed) examples reached here.  /* #neg=408 #pos=204 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08900371142582081;  // std dev = 10.865, 619.000 (wgt'ed) examples reached here.  /* #neg=415 #pos=204 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07277511993691631;  // std dev = 10.771, 631.000 (wgt'ed) examples reached here.  /* #neg=427 #pos=204 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09084041866126695;  // std dev = 10.467, 567.000 (wgt'ed) examples reached here.  /* #neg=363 #pos=204 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.05092427809552071;  // std dev = 10.629, 608.000 (wgt'ed) examples reached here.  /* #neg=404 #pos=204 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2922593753356116;  // std dev = 8.454, 314.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.2289476855747096;  // std dev = 0.000, 323.000 (wgt'ed) examples reached here.  /* #neg=323 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.25305121063271263;  // std dev = 8.080, 300.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.19104869517181347;  // std dev = 0.000, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
Inference time using transfer learning 1.0760431289672852
Parameter learned model CLL:-0.322536 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.715, 121, 204], 'false,true': [0.0, 0, 0], 'false,false': [7.88e-08, 296, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.986, 402, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.805, 404, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.823, 408, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.865, 415, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.771, 427, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.467, 363, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [10.629, 404, 204], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [8.454, 110, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 323, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.08, 96, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 283, 0]}]
{'': [0.23369467455621745, 2.100421938480026e-17], 'true': [nan, 0.23369467455621745], 'true,false': [nan, 0.23369467455621745], 'true,false,false': [nan, 0.23369467455621745], 'false': [nan, 2.100421938480026e-17]}
{'': [nan, 0.19915707622242704], 'false': [nan, 0.19915707622242704]}
{'': [nan, 0.1920218471036812], 'false': [nan, 0.1920218471036812]}
{'': [nan, 0.19138473166756906], 'false': [nan, 0.19138473166756906]}
{'': [nan, 0.190719025931305], 'false': [nan, 0.190719025931305]}
{'': [nan, 0.18384649969767433], 'false': [nan, 0.18384649969767433]}
{'': [nan, 0.19323049085681354], 'false': [nan, 0.19323049085681354]}
{'': [nan, 0.18582188993032348], 'false': [0.18582188993032348, nan]}
{'': [0.22759543997727816, -4.0696720159634223e-16], 'true': [nan, 0.22759543997727816], 'true,false': [0.22759543997727816, nan], 'false': [nan, -4.0696720159634223e-16]}
{'': [0.2175999999999993, -4.393815503816874e-16], 'true': [nan, 0.2175999999999993], 'true,false': [nan, 0.2175999999999993], 'true,false,false': [nan, 0.2175999999999993], 'false': [nan, -4.393815503816874e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.3132705688476562
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048766;  // std dev = 7.60e-08, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | else return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.14185106490048777;  // std dev = 1.33e-07, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else return -0.1254446385283922;  // std dev = 0.000, 399.000 (wgt'ed) examples reached here.  /* #neg=399 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.11231637819360635;  // std dev = 1.67e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else return -0.11301178414275645;  // std dev = 0.203, 413.000 (wgt'ed) examples reached here.  /* #neg=413 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.10159632948783635;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.10153287422985631;  // std dev = 1.86e-07, 415.000 (wgt'ed) examples reached here.  /* #neg=415 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.09269127618926094;  // std dev = 9.13e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.09296776997774407;  // std dev = 0.124, 378.000 (wgt'ed) examples reached here.  /* #neg=378 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.08518475138839686;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.08578292518604096;  // std dev = 0.165, 349.000 (wgt'ed) examples reached here.  /* #neg=349 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(B) )
%   then return -0.07866748733400261;  // std dev = 1.21e-07, 385.000 (wgt'ed) examples reached here.  /* #neg=385 */
%   else if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07877675473109173;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.07351757958924075;  // std dev = 0.149, 408.000 (wgt'ed) examples reached here.  /* #neg=408 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06832068329361546;  // std dev = 3.41e-08, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | else return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06832683280021117;  // std dev = 0.000438, 310.000 (wgt'ed) examples reached here.  /* #neg=310 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.06569496076843157;  // std dev = 0.172, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   else return -0.06410861254547626;  // std dev = 0.000535, 292.000 (wgt'ed) examples reached here.  /* #neg=292 */
Inference time using transfer learning 0.9915039539337158
Refined model CLL: -0.063693


******************************************
Best model found
******************************************
Results 

CLL : -0.070832 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.3132705688476562 

Total Inference Time : 1.4165375232696533 

Total revision time: 6.591950416564941
Best scored revision CLL: -0.063693


Results 

CLL : -0.070832 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 6.606379508972168 

Total Inference Time : 1.4165375232696533 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.7225408554077148
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5049819485352085;  // std dev = 10.910, 521.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=337 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048796;  // std dev = 0.000, 522.000 (wgt'ed) examples reached here.  /* #neg=522 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16554414195365616;  // std dev = 13.991, 1,003.000 (wgt'ed) examples reached here.  /* #neg=666 #pos=337 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1385482716459143;  // std dev = 13.930, 1,009.000 (wgt'ed) examples reached here.  /* #neg=672 #pos=337 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10974070480578879;  // std dev = 13.903, 1,035.000 (wgt'ed) examples reached here.  /* #neg=698 #pos=337 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10158067736505327;  // std dev = 13.734, 994.000 (wgt'ed) examples reached here.  /* #neg=657 #pos=337 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08738563318302163;  // std dev = 13.613, 983.000 (wgt'ed) examples reached here.  /* #neg=646 #pos=337 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07214732164539536;  // std dev = 13.544, 979.000 (wgt'ed) examples reached here.  /* #neg=642 #pos=337 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.0416508758481178;  // std dev = 13.704, 1,030.000 (wgt'ed) examples reached here.  /* #neg=693 #pos=337 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.296345888567436;  // std dev = 10.773, 514.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22701326459205656;  // std dev = 0.000, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.24270944125664964;  // std dev = 10.503, 501.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18965296331923745;  // std dev = 5.23e-07, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
Inference time using transfer learning 0.8172581195831299
Parameter learned model CLL:-0.316589 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.91, 184, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 522, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.991, 666, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.93, 672, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.903, 698, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.734, 657, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.613, 646, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.544, 642, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.704, 693, 337], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.773, 177, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 485, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.503, 164, 337], 'false,true': [0.0, 0, 0], 'false,false': [5.23e-07, 511, 0]}]
{'': [0.22844006616539395, -1.1570140333258335e-16], 'true': [nan, 0.22844006616539395], 'true,false': [nan, 0.22844006616539395], 'true,false,false': [nan, 0.22844006616539395], 'false': [nan, -1.1570140333258335e-16]}
{'': [nan, 0.19516513632710525], 'false': [nan, 0.19516513632710525]}
{'': [nan, 0.1923100172521702], 'false': [nan, 0.1923100172521702]}
{'': [nan, 0.18676974382106099], 'false': [nan, 0.18676974382106099]}
{'': [nan, 0.18975427514346901], 'false': [nan, 0.18975427514346901]}
{'': [nan, 0.18851201307423235], 'false': [nan, 0.18851201307423235]}
{'': [nan, 0.1873828076536883], 'false': [nan, 0.1873828076536883]}
{'': [nan, 0.18232656852038434], 'false': [0.18232656852038434, nan]}
{'': [0.22577556056867681, -1.904547539150784e-16], 'true': [nan, 0.22577556056867681], 'true,false': [0.22577556056867681, nan], 'false': [nan, -1.904547539150784e-16]}
{'': [0.22019035780733798, 5.353404173535001e-16], 'true': [nan, 0.22019035780733798], 'true,false': [nan, 0.22019035780733798], 'true,false,false': [nan, 0.22019035780733798], 'false': [nan, 5.353404173535001e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.8869917392730713
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048824;  // std dev = 0.000, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   else return -0.1418510649004876;  // std dev = 1.12e-07, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839158;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.12544463852839238;  // std dev = 0.000, 622.000 (wgt'ed) examples reached here.  /* #neg=622 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360633;  // std dev = 2.79e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.1123163781936058;  // std dev = 0.000, 613.000 (wgt'ed) examples reached here.  /* #neg=613 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783624;  // std dev = 2.98e-08, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.1015963294878353;  // std dev = 4.12e-07, 649.000 (wgt'ed) examples reached here.  /* #neg=649 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926105;  // std dev = 0.000, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   else return -0.09269127618926193;  // std dev = 0.000, 655.000 (wgt'ed) examples reached here.  /* #neg=655 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 1.97e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   else return -0.08518475138839678;  // std dev = 1.58e-07, 658.000 (wgt'ed) examples reached here.  /* #neg=658 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109177;  // std dev = 1.29e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.07877675473109244;  // std dev = 0.000, 605.000 (wgt'ed) examples reached here.  /* #neg=605 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 1.18e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   else return -0.07324622576333693;  // std dev = 1.50e-07, 600.000 (wgt'ed) examples reached here.  /* #neg=600 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420261;  // std dev = 3.65e-08, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   else return -0.06842697784420357;  // std dev = 0.000, 515.000 (wgt'ed) examples reached here.  /* #neg=515 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   else return -0.0641918400820253;  // std dev = 2.46e-07, 543.000 (wgt'ed) examples reached here.  /* #neg=543 */
Inference time using transfer learning 0.8137614727020264
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.8869917392730713 

Total Inference Time : 1.4464428424835205 

Total revision time: 7.705337047576904
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.719766139984131 

Total Inference Time : 1.4464428424835205 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.705249309539795
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5189332488249981;  // std dev = 10.692, 510.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=337 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048774;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.17057422391691382;  // std dev = 13.906, 981.000 (wgt'ed) examples reached here.  /* #neg=644 #pos=337 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13396578151799254;  // std dev = 13.911, 1,022.000 (wgt'ed) examples reached here.  /* #neg=685 #pos=337 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11386647192273844;  // std dev = 13.846, 1,007.000 (wgt'ed) examples reached here.  /* #neg=670 #pos=337 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09556069942628018;  // std dev = 13.730, 1,010.000 (wgt'ed) examples reached here.  /* #neg=673 #pos=337 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0850127116895844;  // std dev = 13.615, 982.000 (wgt'ed) examples reached here.  /* #neg=645 #pos=337 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05972349425423094;  // std dev = 13.634, 1,021.000 (wgt'ed) examples reached here.  /* #neg=684 #pos=337 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.05993096580231658;  // std dev = 13.510, 970.000 (wgt'ed) examples reached here.  /* #neg=633 #pos=337 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.30040099107368173;  // std dev = 10.651, 508.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22737086370405177;  // std dev = 0.000, 478.000 (wgt'ed) examples reached here.  /* #neg=478 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.23378638568208268;  // std dev = 10.567, 504.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18991115334252232;  // std dev = 4.15e-07, 439.000 (wgt'ed) examples reached here.  /* #neg=439 */
Inference time using transfer learning 0.8439033031463623
Parameter learned model CLL:-0.31953 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.692, 173, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 502, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.906, 644, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.911, 685, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.846, 670, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.73, 673, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.615, 645, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.634, 684, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.51, 633, 337], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.651, 171, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 478, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.567, 167, 337], 'false,true': [0.0, 0, 0], 'false,false': [4.15e-07, 439, 0]}]
{'': [0.22414840445982576, -3.5385594410363554e-17], 'true': [nan, 0.22414840445982576], 'true,false': [nan, 0.22414840445982576], 'true,false,false': [nan, 0.22414840445982576], 'false': [nan, -3.5385594410363554e-17]}
{'': [nan, 0.1971101960049361], 'false': [nan, 0.1971101960049361]}
{'': [nan, 0.18934094797946943], 'false': [nan, 0.18934094797946943]}
{'': [nan, 0.19038803704534782], 'false': [nan, 0.19038803704534782]}
{'': [nan, 0.18664347348837387], 'false': [nan, 0.18664347348837387]}
{'': [nan, 0.18876692981045914], 'false': [nan, 0.18876692981045914]}
{'': [nan, 0.1820603838037184], 'false': [nan, 0.1820603838037184]}
{'': [nan, 0.18816389530797598], 'false': [0.18816389530797598, nan]}
{'': [0.2233050716101428, -5.500016992285294e-16], 'true': [nan, 0.2233050716101428], 'true,false': [0.2233050716101428, nan], 'false': [nan, -5.500016992285294e-16]}
{'': [0.22155690980095846, 3.9249798045973644e-16], 'true': [nan, 0.22155690980095846], 'true,false': [nan, 0.22155690980095846], 'true,false,false': [nan, 0.22155690980095846], 'false': [nan, 3.9249798045973644e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.910465955734253
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048818;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.14185106490048768;  // std dev = 0.000, 495.000 (wgt'ed) examples reached here.  /* #neg=495 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1254446385283916;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.12544463852839235;  // std dev = 0.000, 611.000 (wgt'ed) examples reached here.  /* #neg=611 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360625;  // std dev = 5.27e-08, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   else return -0.11231637819360601;  // std dev = 0.000, 628.000 (wgt'ed) examples reached here.  /* #neg=628 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783631;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   else return -0.10159632948783537;  // std dev = 3.91e-07, 624.000 (wgt'ed) examples reached here.  /* #neg=624 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926104;  // std dev = 0.000, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   else return -0.09269127618926185;  // std dev = 0.000, 634.000 (wgt'ed) examples reached here.  /* #neg=634 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0851847513883968;  // std dev = 1.29e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.08518475138839678;  // std dev = 1.55e-07, 651.000 (wgt'ed) examples reached here.  /* #neg=651 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109172;  // std dev = 1.83e-08, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
%   else return -0.07877675473109251;  // std dev = 0.000, 607.000 (wgt'ed) examples reached here.  /* #neg=607 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 7.45e-09, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.07324622576333678;  // std dev = 1.94e-07, 632.000 (wgt'ed) examples reached here.  /* #neg=632 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420261;  // std dev = 3.16e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   else return -0.0684269778442035;  // std dev = 0.000, 475.000 (wgt'ed) examples reached here.  /* #neg=475 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   else return -0.0641918400820254;  // std dev = 2.44e-07, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
Inference time using transfer learning 0.8417644500732422
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.910465955734253 

Total Inference Time : 1.4023385047912598 

Total revision time: 7.585662603378296
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.6000916957855225 

Total Inference Time : 1.4023385047912598 

Run: 5

 Starting fold 1 of 5 folds 

Start transfer learning experiment

Target train facts examples: 863
Target train pos examples: 326
Target train neg examples: 10928

Target test facts examples: 215
Target test pos examples: 56
Target test neg examples: 3308

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.666041612625122
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5502933087725441;  // std dev = 10.018, 471.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=326 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004878;  // std dev = 0.000, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15040958069485127;  // std dev = 13.818, 1,004.000 (wgt'ed) examples reached here.  /* #neg=678 #pos=326 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13598086348927646;  // std dev = 13.602, 986.000 (wgt'ed) examples reached here.  /* #neg=660 #pos=326 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1241111823175439;  // std dev = 13.435, 946.000 (wgt'ed) examples reached here.  /* #neg=620 #pos=326 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10493697961637354;  // std dev = 13.277, 951.000 (wgt'ed) examples reached here.  /* #neg=625 #pos=326 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06536541415327116;  // std dev = 13.472, 1,010.000 (wgt'ed) examples reached here.  /* #neg=684 #pos=326 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06162165966515653;  // std dev = 13.376, 970.000 (wgt'ed) examples reached here.  /* #neg=644 #pos=326 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.04335979526306626;  // std dev = 13.373, 1,000.000 (wgt'ed) examples reached here.  /* #neg=674 #pos=326 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.295945206235322;  // std dev = 10.550, 495.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=326 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22165192251232121;  // std dev = 0.000, 452.000 (wgt'ed) examples reached here.  /* #neg=452 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.22651497934597659;  // std dev = 10.529, 494.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=326 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18577242315278814;  // std dev = 5.75e-07, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
Inference time using transfer learning 0.978832483291626
Parameter learned model CLL:-0.313797 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.018, 145, 326], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 507, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.818, 678, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.602, 660, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.435, 620, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.277, 625, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.472, 684, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.376, 644, 326]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.373, 674, 326], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.55, 169, 326], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 452, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.529, 168, 326], 'false,true': [0.0, 0, 0], 'false,false': [5.75e-07, 473, 0]}]
{'': [0.21308053966579948, -5.605859848205919e-17], 'true': [nan, 0.21308053966579948], 'true,false': [nan, 0.21308053966579948], 'true,false,false': [nan, 0.21308053966579948], 'false': [nan, -5.605859848205919e-17]}
{'': [nan, 0.19016783309650584], 'false': [nan, 0.19016783309650584]}
{'': [nan, 0.18765424830139876], 'false': [nan, 0.18765424830139876]}
{'': [nan, 0.19080244734371268], 'false': [nan, 0.19080244734371268]}
{'': [nan, 0.18535202644702792], 'false': [nan, 0.18535202644702792]}
{'': [nan, 0.1796961320210296], 'false': [nan, 0.1796961320210296]}
{'': [nan, 0.1844479204525909], 'false': [nan, 0.1844479204525909]}
{'': [nan, 0.1788474509042917], 'false': [0.1788474509042917, nan]}
{'': [0.22485052545658257, -1.964996503761339e-16], 'true': [nan, 0.22485052545658257], 'true,false': [0.22485052545658257, nan], 'false': [nan, -1.964996503761339e-16]}
{'': [0.22442590437477075, 6.985250996373078e-16], 'true': [nan, 0.22442590437477075], 'true,false': [nan, 0.22442590437477075], 'true,false,false': [nan, 0.22442590437477075], 'false': [nan, 6.985250996373078e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 3.1624763011932373
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.05e-06, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.14185106490048818;  // std dev = 0.000, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   else return -0.14185106490048774;  // std dev = 0.000, 502.000 (wgt'ed) examples reached here.  /* #neg=502 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.1254446385283912;  // std dev = 5.58e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.12544463852839233;  // std dev = 0.000, 612.000 (wgt'ed) examples reached here.  /* #neg=612 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.11231637819360638;  // std dev = 2.11e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.11231637819360572;  // std dev = 0.000, 603.000 (wgt'ed) examples reached here.  /* #neg=603 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.10159632948783626;  // std dev = 3.16e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.10159632948783552;  // std dev = 3.56e-07, 603.000 (wgt'ed) examples reached here.  /* #neg=603 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.09269127618926107;  // std dev = 0.000, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.09269127618926178;  // std dev = 0.000, 603.000 (wgt'ed) examples reached here.  /* #neg=603 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.08518475138839679;  // std dev = 1.83e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   else return -0.08518475138839678;  // std dev = 1.46e-07, 581.000 (wgt'ed) examples reached here.  /* #neg=581 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.46e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.0787767547310926;  // std dev = 0.000, 637.000 (wgt'ed) examples reached here.  /* #neg=637 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.1770964977452765;  // std dev = 2.76e-07, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.07324622576333704;  // std dev = 1.05e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.0732462257633369;  // std dev = 1.53e-07, 587.000 (wgt'ed) examples reached here.  /* #neg=587 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.06842697784420261;  // std dev = 2.58e-08, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   else return -0.06842697784420353;  // std dev = 0.000, 487.000 (wgt'ed) examples reached here.  /* #neg=487 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #pos=326 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   else return -0.06419184008202534;  // std dev = 2.44e-07, 520.000 (wgt'ed) examples reached here.  /* #neg=520 */
Inference time using transfer learning 0.9816715717315674
Refined model CLL: -0.064216


******************************************
Best model found
******************************************
Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 3.1624763011932373 

Total Inference Time : 1.3922619819641113 

Total revision time: 7.692412614822388
Best scored revision CLL: -0.064216


Results 

CLL : -0.063421 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.707071542739868 

Total Inference Time : 1.3922619819641113 


 Starting fold 2 of 5 folds 

Start transfer learning experiment

Target train facts examples: 870
Target train pos examples: 324
Target train neg examples: 10813

Target test facts examples: 208
Target test pos examples: 58
Target test neg examples: 3423

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.6234514713287354
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5022841239663072;  // std dev = 10.738, 503.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=324 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048718;  // std dev = 2.98e-07, 445.000 (wgt'ed) examples reached here.  /* #neg=445 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15792181600183933;  // std dev = 13.811, 989.000 (wgt'ed) examples reached here.  /* #neg=665 #pos=324 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1331513026590958;  // std dev = 13.759, 988.000 (wgt'ed) examples reached here.  /* #neg=664 #pos=324 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12009973856763256;  // std dev = 13.559, 969.000 (wgt'ed) examples reached here.  /* #neg=645 #pos=324 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09742912986703148;  // std dev = 13.497, 979.000 (wgt'ed) examples reached here.  /* #neg=655 #pos=324 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06779518614657547;  // std dev = 13.580, 1,018.000 (wgt'ed) examples reached here.  /* #neg=694 #pos=324 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.06607373876314251;  // std dev = 13.408, 983.000 (wgt'ed) examples reached here.  /* #neg=659 #pos=324 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.04810379011489654;  // std dev = 13.484, 986.000 (wgt'ed) examples reached here.  /* #neg=662 #pos=324 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.32228838971660856;  // std dev = 10.262, 480.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=324 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.2224792725204554;  // std dev = 0.000, 484.000 (wgt'ed) examples reached here.  /* #neg=484 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1974280013958657;  // std dev = 10.998, 517.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=324 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18637244693845398;  // std dev = 7.30e-07, 523.000 (wgt'ed) examples reached here.  /* #neg=523 */
Inference time using transfer learning 1.0182664394378662
Parameter learned model CLL:-0.312305 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.738, 179, 324], 'false,true': [0.0, 0, 0], 'false,false': [2.98e-07, 445, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.811, 665, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.759, 664, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.559, 645, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.497, 655, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.58, 694, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.408, 659, 324]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.484, 662, 324], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.262, 156, 324], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 484, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.998, 193, 324], 'false,true': [0.0, 0, 0], 'false,false': [7.3e-07, 523, 0]}]
{'': [0.2292250473303348, 1.9959065611238769e-16], 'true': [nan, 0.2292250473303348], 'true,false': [nan, 0.2292250473303348], 'true,false,false': [nan, 0.2292250473303348], 'false': [nan, 1.9959065611238769e-16]}
{'': [nan, 0.19286657549524808], 'false': [nan, 0.19286657549524808]}
{'': [nan, 0.1916158010451347], 'false': [nan, 0.1916158010451347]}
{'': [nan, 0.18971647404236364], 'false': [nan, 0.18971647404236364]}
{'': [nan, 0.18607455990055455], 'false': [nan, 0.18607455990055455]}
{'': [nan, 0.18116542481702935], 'false': [nan, 0.18116542481702935]}
{'': [nan, 0.18288258042280264], 'false': [nan, 0.18288258042280264]}
{'': [nan, 0.18438843453292297], 'false': [0.18438843453292297, nan]}
{'': [0.21937500000000817, -1.4166812810092907e-15], 'true': [nan, 0.21937500000000817], 'true,false': [0.21937500000000817, nan], 'false': [nan, -1.4166812810092907e-15]}
{'': [0.23394902147114083, 1.0189427377056886e-15], 'true': [nan, 0.23394902147114083], 'true,false': [nan, 0.23394902147114083], 'true,false,false': [nan, 0.23394902147114083], 'false': [nan, 1.0189427377056886e-15]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.853405237197876
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995085;  // std dev = 1.04e-06, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.14185106490048827;  // std dev = 0.000, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   else return -0.14185106490048724;  // std dev = 2.70e-07, 458.000 (wgt'ed) examples reached here.  /* #neg=458 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.12544463852839155;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.1254446385283923;  // std dev = 0.000, 563.000 (wgt'ed) examples reached here.  /* #neg=563 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.1123163781936063;  // std dev = 4.47e-08, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
%   else return -0.11231637819360578;  // std dev = 0.000, 602.000 (wgt'ed) examples reached here.  /* #neg=602 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831163;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.10159632948783626;  // std dev = 2.98e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else return -0.10159632948783541;  // std dev = 3.86e-07, 628.000 (wgt'ed) examples reached here.  /* #neg=628 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601511;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.09269127618926108;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.09269127618926178;  // std dev = 0.000, 603.000 (wgt'ed) examples reached here.  /* #neg=603 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948756;  // std dev = 3.86e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.08518475138839683;  // std dev = 3.49e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.08518475138839679;  // std dev = 1.55e-07, 582.000 (wgt'ed) examples reached here.  /* #neg=582 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07877675473109182;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.07877675473109233;  // std dev = 0.000, 582.000 (wgt'ed) examples reached here.  /* #neg=582 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527653;  // std dev = 2.73e-07, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.0732462257633369;  // std dev = 1.58e-07, 589.000 (wgt'ed) examples reached here.  /* #neg=589 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.06842697784420261;  // std dev = 4.59e-08, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   else return -0.06842697784420351;  // std dev = 0.000, 476.000 (wgt'ed) examples reached here.  /* #neg=476 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080118;  // std dev = 0.000, 324.000 (wgt'ed) examples reached here.  /* #pos=324 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.06419184008202543;  // std dev = 2.37e-07, 470.000 (wgt'ed) examples reached here.  /* #neg=470 */
Inference time using transfer learning 0.9484503269195557
Refined model CLL: -0.064225


******************************************
Best model found
******************************************
Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.853405237197876 

Total Inference Time : 1.4039325714111328 

Total revision time: 7.448412179946899
Best scored revision CLL: -0.064225


Results 

CLL : -0.063422 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.46307110786438 

Total Inference Time : 1.4039325714111328 


 Starting fold 3 of 5 folds 

Start transfer learning experiment

Target train facts examples: 737
Target train pos examples: 204
Target train neg examples: 10693

Target test facts examples: 341
Target test pos examples: 178
Target test neg examples: 3543

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.358180046081543
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5292015666784559;  // std dev = 8.192, 304.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=204 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1418510649004879;  // std dev = 0.000, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.15283899472871595;  // std dev = 10.968, 624.000 (wgt'ed) examples reached here.  /* #neg=420 #pos=204 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.1440644532944053;  // std dev = 10.770, 597.000 (wgt'ed) examples reached here.  /* #neg=393 #pos=204 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11719619245785731;  // std dev = 10.731, 604.000 (wgt'ed) examples reached here.  /* #neg=400 #pos=204 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.09735009527412453;  // std dev = 10.645, 608.000 (wgt'ed) examples reached here.  /* #neg=404 #pos=204 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.07052249756702655;  // std dev = 10.721, 618.000 (wgt'ed) examples reached here.  /* #neg=414 #pos=204 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.059381780771314556;  // std dev = 10.675, 612.000 (wgt'ed) examples reached here.  /* #neg=408 #pos=204 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.05579295746027532;  // std dev = 10.546, 602.000 (wgt'ed) examples reached here.  /* #neg=398 #pos=204 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.3406362310983919;  // std dev = 7.810, 291.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=204 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22361823174185425;  // std dev = 2.63e-07, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.17060426405784757;  // std dev = 8.890, 333.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=204 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18719774622655197;  // std dev = 2.46e-07, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
Inference time using transfer learning 1.0680623054504395
Parameter learned model CLL:-0.3175 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.192, 100, 204], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 289, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.968, 420, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.77, 393, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.731, 400, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.645, 404, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.721, 414, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [10.675, 408, 204]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [10.546, 398, 204], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [7.81, 87, 204], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [2.63e-07, 271, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [8.89, 129, 204], 'false,true': [0.0, 0, 0], 'false,false': [2.46e-07, 298, 0]}]
{'': [0.22074099722992158, 0.0], 'true': [nan, 0.22074099722992158], 'true,false': [nan, 0.22074099722992158], 'true,false,false': [nan, 0.22074099722992158], 'false': [nan, 0.0]}
{'': [nan, 0.1927879734333421], 'false': [nan, 0.1927879734333421]}
{'': [nan, 0.1942842617695709], 'false': [nan, 0.1942842617695709]}
{'': [nan, 0.19064645535075989], 'false': [nan, 0.19064645535075989]}
{'': [nan, 0.18636610857070174], 'false': [nan, 0.18636610857070174]}
{'': [nan, 0.1859808045226333], 'false': [nan, 0.1859808045226333]}
{'': [nan, 0.1861991386972118], 'false': [nan, 0.1861991386972118]}
{'': [nan, 0.18473727835670253], 'false': [0.18473727835670253, nan]}
{'': [0.20958656605378254, 2.556380691387814e-16], 'true': [nan, 0.20958656605378254], 'true,false': [0.20958656605378254, nan], 'false': [nan, 2.556380691387814e-16]}
{'': [0.2373183994805617, 2.0267158570338428e-16], 'true': [nan, 0.2373183994805617], 'true,false': [nan, 0.2373183994805617], 'true,false,false': [nan, 0.2373183994805617], 'false': [nan, 2.0267158570338428e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.1914994716644287
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.14185106490048763;  // std dev = 8.43e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
%   | else return 0.8581489350995092;  // std dev = 1.08e-06, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.141851064900488;  // std dev = 0.000, 278.000 (wgt'ed) examples reached here.  /* #neg=278 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.7194734122109571;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.12544463852839136;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.1254446385283922;  // std dev = 0.000, 397.000 (wgt'ed) examples reached here.  /* #neg=397 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462833;  // std dev = 6.36e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.11231637819360638;  // std dev = 1.05e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   else return -0.11271975271186371;  // std dev = 0.143, 356.000 (wgt'ed) examples reached here.  /* #neg=356 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831014;  // std dev = 2.53e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.10159632948783633;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   else return -0.10189241010828756;  // std dev = 0.133, 401.000 (wgt'ed) examples reached here.  /* #neg=401 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601491;  // std dev = 4.00e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.09269127618926094;  // std dev = 9.13e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.09295193870844698;  // std dev = 0.124, 390.000 (wgt'ed) examples reached here.  /* #neg=390 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.25517224256948845;  // std dev = 4.46e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.08518475138839683;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else return -0.08510996083506504;  // std dev = 0.000, 391.000 (wgt'ed) examples reached here.  /* #neg=391 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.20975771563253498;  // std dev = 3.04e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07877675473109172;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else return -0.07899252815269028;  // std dev = 0.110, 392.000 (wgt'ed) examples reached here.  /* #neg=392 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527791;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   else return -0.07317151683367511;  // std dev = 1.69e-07, 374.000 (wgt'ed) examples reached here.  /* #neg=374 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06836157976721792;  // std dev = 4.41e-08, 104.000 (wgt'ed) examples reached here.  /* #neg=104 */
%   | else return 0.15274385809367166;  // std dev = 0.000, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06836458391916427;  // std dev = 0.000230, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(B) )
%   | then return -0.06413413617357674;  // std dev = 0.000, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else return 0.13400703000801098;  // std dev = 1.38e-07, 204.000 (wgt'ed) examples reached here.  /* #pos=204 */
%   else return -0.06413703748191855;  // std dev = 0.000225, 280.000 (wgt'ed) examples reached here.  /* #neg=280 */
Inference time using transfer learning 0.9841887950897217
Refined model CLL: -0.063726


******************************************
Best model found
******************************************
Results 

CLL : -0.070331 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.1914994716644287 

Total Inference Time : 1.3294258117675781 

Total revision time: 6.274485111236572
Best scored revision CLL: -0.063726


Results 

CLL : -0.070331 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 6.289144039154053 

Total Inference Time : 1.3294258117675781 


 Starting fold 4 of 5 folds 

Start transfer learning experiment

Target train facts examples: 927
Target train pos examples: 337
Target train neg examples: 12345

Target test facts examples: 151
Target test pos examples: 45
Target test neg examples: 1891

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.701653242111206
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5137909584458115;  // std dev = 10.773, 514.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=337 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048743;  // std dev = 2.02e-07, 473.000 (wgt'ed) examples reached here.  /* #neg=473 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16180593564599563;  // std dev = 14.024, 1,009.000 (wgt'ed) examples reached here.  /* #neg=672 #pos=337 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.13935980334001968;  // std dev = 13.898, 1,007.000 (wgt'ed) examples reached here.  /* #neg=670 #pos=337 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.11020120153552757;  // std dev = 13.920, 1,021.000 (wgt'ed) examples reached here.  /* #neg=684 #pos=337 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08656969931419038;  // std dev = 13.876, 1,045.000 (wgt'ed) examples reached here.  /* #neg=708 #pos=337 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.08046822111212694;  // std dev = 13.687, 1,019.000 (wgt'ed) examples reached here.  /* #neg=682 #pos=337 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05187936936911074;  // std dev = 13.821, 1,059.000 (wgt'ed) examples reached here.  /* #neg=722 #pos=337 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.058459952957102754;  // std dev = 13.632, 993.000 (wgt'ed) examples reached here.  /* #neg=656 #pos=337 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.2578033645413758;  // std dev = 11.424, 550.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.2221627861250854;  // std dev = 5.87e-07, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.2649163741828289;  // std dev = 10.371, 495.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1861429714606401;  // std dev = 0.000, 543.000 (wgt'ed) examples reached here.  /* #neg=543 */
Inference time using transfer learning 0.809729814529419
Parameter learned model CLL:-0.310473 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.773, 177, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.02e-07, 473, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [14.024, 672, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.898, 670, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.92, 684, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.876, 708, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.687, 682, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.821, 722, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.632, 656, 337], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [11.424, 213, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [5.87e-07, 511, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.371, 158, 337], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 543, 0]}]
{'': [0.22577556056867135, 8.637675963257032e-17], 'true': [nan, 0.22577556056867135], 'true,false': [nan, 0.22577556056867135], 'true,false,false': [nan, 0.22577556056867135], 'false': [nan, 8.637675963257032e-17]}
{'': [nan, 0.19491651319942777], 'false': [nan, 0.19491651319942777]}
{'': [nan, 0.1918092334821472], 'false': [nan, 0.1918092334821472]}
{'': [nan, 0.1897709549331521], 'false': [nan, 0.1897709549331521]}
{'': [nan, 0.18425126402422298], 'false': [nan, 0.18425126402422298]}
{'': [nan, 0.1838357766445173], 'false': [nan, 0.1838357766445173]}
{'': [nan, 0.1803853683128813], 'false': [nan, 0.1803853683128813]}
{'': [nan, 0.18714476810556777], 'false': [0.18714476810556777, nan]}
{'': [0.23729256198346838, 6.743898764063573e-16], 'true': [nan, 0.23729256198346838], 'true,false': [0.23729256198346838, nan], 'false': [nan, 6.743898764063573e-16]}
{'': [0.21730843791449483, -3.075092871153288e-16], 'true': [nan, 0.21730843791449483], 'true,false': [nan, 0.21730843791449483], 'true,false,false': [nan, 0.21730843791449483], 'false': [nan, -3.075092871153288e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.9378106594085693
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.14185106490048813;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   else return -0.1418510649004875;  // std dev = 1.74e-07, 479.000 (wgt'ed) examples reached here.  /* #neg=479 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.12544463852839158;  // std dev = 0.000, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   else return -0.12544463852839235;  // std dev = 0.000, 625.000 (wgt'ed) examples reached here.  /* #neg=625 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360628;  // std dev = 4.34e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   else return -0.11231637819360603;  // std dev = 0.000, 629.000 (wgt'ed) examples reached here.  /* #neg=629 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783628;  // std dev = 2.47e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else return -0.10159632948783555;  // std dev = 3.50e-07, 609.000 (wgt'ed) examples reached here.  /* #neg=609 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926105;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.09269127618926182;  // std dev = 0.000, 616.000 (wgt'ed) examples reached here.  /* #neg=616 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 1.83e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   else return -0.08518475138839678;  // std dev = 1.49e-07, 616.000 (wgt'ed) examples reached here.  /* #neg=616 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.07877675473109272;  // std dev = 0.000, 669.000 (wgt'ed) examples reached here.  /* #neg=669 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
%   else return -0.07324622576333684;  // std dev = 1.78e-07, 615.000 (wgt'ed) examples reached here.  /* #neg=615 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420261;  // std dev = 2.79e-08, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.06842697784420355;  // std dev = 0.000, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.0641918400820262;  // std dev = 0.000, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   else return -0.0641918400820254;  // std dev = 2.42e-07, 485.000 (wgt'ed) examples reached here.  /* #neg=485 */
Inference time using transfer learning 0.8089709281921387
Refined model CLL: -0.064062


******************************************
Best model found
******************************************
Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.9378106594085693 

Total Inference Time : 1.5990777015686035 

Total revision time: 7.816480398178101
Best scored revision CLL: -0.064062


Results 

CLL : -0.063847 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.831139326095581 

Total Inference Time : 1.5990777015686035 


 Starting fold 5 of 5 folds 

Start transfer learning experiment

Target train facts examples: 915
Target train pos examples: 337
Target train neg examples: 12165

Target test facts examples: 163
Target test pos examples: 45
Target test neg examples: 2071

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
0;true;haswordtitle(D, C).;true;true
0;true,true;title(E, D), venue(E, A).;false;true
0;true,true,false;title(F, D), venue(F, B).;false;false
0;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
0;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
0;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
0;false;haswordvenue(A, M), haswordtitle(N, M).;false;false
1;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
1;true;haswordtitle(D, C).;true;true
1;true,true;title(E, D), venue(E, B).;false;true
1;true,true,false;title(F, D), venue(F, A).;false;false
1;true,false;haswordvenue(B, G), haswordtitle(H, G).;true;true
1;true,false,true;haswordtitle(H, I), haswordauthor(J, I).;false;false
1;true,false,false;haswordvenue(A, K), haswordauthor(L, K).;false;false
1;false;haswordvenue(B, M), haswordtitle(N, M).;false;false
2;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
2;true;haswordtitle(D, C).;true;true
2;true,true;title(E, D), venue(E, A).;false;true
2;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
2;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
2;true,false,true;haswordtitle(I, J), haswordauthor(K, J).;false;false
2;true,false,false;haswordvenue(B, L), haswordtitle(M, L).;false;false
2;false;haswordvenue(A, N), haswordtitle(P, N).;false;false
3;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
3;true;haswordtitle(D, C).;true;true
3;true,true;haswordauthor(E, C).;false;true
3;true,true,false;title(F, D), venue(F, B).;false;false
3;true,false;haswordvenue(B, G), haswordauthor(H, G).;false;true
3;true,false,false;haswordvenue(B, I), haswordtitle(J, I).;false;false
3;false;haswordvenue(B, K), haswordtitle(L, K).;true;false
3;false,true;haswordtitle(L, M), haswordauthor(N, M).;false;false
4;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
4;true;haswordtitle(D, C).;true;true
4;true,true;title(E, D), venue(E, B).;false;true
4;true,true,false;title(F, D), venue(F, A).;false;false
4;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
4;true,false,true;title(I, H), venue(I, A).;false;false
4;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
4;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
5;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
5;true;haswordtitle(D, C).;true;true
5;true,true;title(E, D), venue(E, A).;false;true
5;true,true,false;title(F, D), venue(F, B).;false;false
5;true,false;haswordvenue(A, G), haswordauthor(H, G).;false;true
5;true,false,false;haswordvenue(A, I), haswordtitle(J, I).;false;false
5;false;haswordvenue(A, K), haswordtitle(L, K).;true;false
5;false,true;haswordauthor(M, K).;false;false
6;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
6;true;haswordtitle(D, C).;true;true
6;true,true;haswordauthor(E, C).;true;true
6;true,true,true;author(F, E), title(F, D).;false;false
6;true,true,false;title(G, D), venue(G, B).;false;false
6;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
6;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
6;false;haswordvenue(A, L), haswordtitle(M, L).;false;false
7;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
7;true;haswordtitle(D, C).;true;true
7;true,true;title(E, D), venue(E, B).;false;true
7;true,true,false;haswordtitle(D, F), haswordauthor(G, F).;false;false
7;true,false;haswordvenue(A, H), haswordtitle(I, H).;true;true
7;true,false,true;title(J, I), venue(J, A).;false;false
7;true,false,false;haswordvenue(B, K), haswordtitle(L, K).;false;false
7;false;haswordvenue(B, M), haswordauthor(N, M).;false;false
8;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
8;true;haswordtitle(D, C).;true;true
8;true,true;haswordauthor(E, C).;true;true
8;true,true,true;author(F, E), title(F, D).;false;false
8;true,true,false;title(G, D), venue(G, A).;false;false
8;true,false;haswordvenue(B, H), haswordauthor(I, H).;false;true
8;true,false,false;haswordvenue(A, J), haswordauthor(K, J).;false;false
8;false;haswordvenue(B, L), haswordtitle(M, L).;false;false
9;;samevenue(A, B) :- haswordvenue(A, C), haswordvenue(B, C).;true;true
9;true;haswordtitle(D, C).;true;true
9;true,true;title(E, D), venue(E, A).;false;true
9;true,true,false;title(F, D), venue(F, B).;false;false
9;true,false;haswordvenue(A, G), haswordtitle(H, G).;true;true
9;true,false,true;title(I, H), venue(I, A).;false;false
9;true,false,false;haswordvenue(B, J), haswordtitle(K, J).;false;false
9;false;haswordvenue(A, L), haswordtitle(M, L).;false;false


Model training time 1.7083187103271484
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( genre(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( genre(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.5241568402378479;  // std dev = 10.609, 506.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=337 */
%   else if ( genre(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048763;  // std dev = 5.96e-08, 491.000 (wgt'ed) examples reached here.  /* #neg=491 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.16209642094989327;  // std dev = 13.977, 1,009.000 (wgt'ed) examples reached here.  /* #neg=672 #pos=337 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12802334306668042;  // std dev = 13.999, 1,041.000 (wgt'ed) examples reached here.  /* #neg=704 #pos=337 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.12852174030835575;  // std dev = 13.680, 971.000 (wgt'ed) examples reached here.  /* #neg=634 #pos=337 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, B), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.10166808674913312;  // std dev = 13.688, 977.000 (wgt'ed) examples reached here.  /* #neg=640 #pos=337 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.0730445887028237;  // std dev = 13.681, 1,025.000 (wgt'ed) examples reached here.  /* #neg=688 #pos=337 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( genre(D, A), genre(D, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.05138769921594916;  // std dev = 13.761, 1,043.000 (wgt'ed) examples reached here.  /* #neg=706 #pos=337 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( genre(C, A), genre(C, B) )
%   then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(D, B) )
%   | then return 0.07348228655344695;  // std dev = 13.332, 945.000 (wgt'ed) examples reached here.  /* #neg=608 #pos=337 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, B) )
%   | | then return 0.3222558215170408;  // std dev = 10.281, 491.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=337 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( movie(F, B), genre(F, G) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.22729881354174017;  // std dev = 8.51e-07, 507.000 (wgt'ed) examples reached here.  /* #neg=507 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( genre(C, D) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( movie(E, A), genre(E, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( movie(G, B), genre(G, H) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.22722145529542512;  // std dev = 10.567, 504.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=337 */
%   else if ( movie(I, A), genre(I, J) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.18985913878427527;  // std dev = 2.31e-07, 504.000 (wgt'ed) examples reached here.  /* #neg=504 */
Inference time using transfer learning 0.8649494647979736
Parameter learned model CLL:-0.321764 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'genre(E, A), genre(E, F)', 'true,false,false': 'genre(G, B), genre(G, H)', 'false': 'genre(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.609, 169, 337], 'false,true': [0.0, 0, 0], 'false,false': [5.96e-08, 491, 0]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.977, 672, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.999, 704, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.68, 634, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, B), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.688, 640, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.681, 688, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'genre(D, A), genre(D, E)'}, {'true': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [13.761, 706, 337]}]
['workedunder(A, B)', {'': 'genre(C, A), genre(C, B)', 'false': 'movie(D, B)'}, {'true': [0.0, 0, 0], 'false,true': [13.332, 608, 337], 'false,false': [0.0, 0, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, B)', 'false': 'movie(F, B), genre(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [10.281, 154, 337], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false': [8.51e-07, 507, 0]}]
['workedunder(A, B)', {'': 'movie(C, A), movie(C, B)', 'true': 'genre(C, D)', 'true,false': 'movie(E, A), genre(E, F)', 'true,false,false': 'movie(G, B), genre(G, H)', 'false': 'movie(I, A), genre(I, J)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false,true': [0.0, 0, 0], 'true,false,false,false': [10.567, 167, 337], 'false,true': [0.0, 0, 0], 'false,false': [2.31e-07, 504, 0]}]
{'': [0.22244137543158254, 7.235669406925663e-18], 'true': [nan, 0.22244137543158254], 'true,false': [nan, 0.22244137543158254], 'true,false,false': [nan, 0.22244137543158254], 'false': [nan, 7.235669406925663e-18]}
{'': [nan, 0.19362703144074336], 'false': [nan, 0.19362703144074336]}
{'': [nan, 0.18824793117775943], 'false': [nan, 0.18824793117775943]}
{'': [nan, 0.19274187467605178], 'false': [nan, 0.19274187467605178]}
{'': [nan, 0.19176022844665072], 'false': [nan, 0.19176022844665072]}
{'': [nan, 0.1825952263480664], 'false': [nan, 0.1825952263480664]}
{'': [nan, 0.18155698016543903], 'false': [nan, 0.18155698016543903]}
{'': [nan, 0.18809308553738274], 'false': [0.18809308553738274, nan]}
{'': [0.21527204549508777, 1.4294942612925093e-15], 'true': [nan, 0.21527204549508777], 'true,false': [0.21527204549508777, nan], 'false': [nan, 1.4294942612925093e-15]}
{'': [0.22155690980095474, 1.0573552615477681e-16], 'true': [nan, 0.22155690980095474], 'true,false': [nan, 0.22155690980095474], 'true,false,false': [nan, 0.22155690980095474], 'false': [nan, 1.0573552615477681e-16]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
8;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true
9;;workedunder(A, B) :- movie(C, A), movie(C, B).;true;true


Refining candidate
***************************
Model training time 2.900545120239258
WILL Produced-Tree #1
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( director(B), actor(A) )
%   | then return 0.8581489350995084;  // std dev = 1.04e-06, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1418510649004882;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   else return -0.14185106490048777;  // std dev = 0.000, 505.000 (wgt'ed) examples reached here.  /* #neg=505 */
WILL Produced-Tree #2
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.719473412210958;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.1254446385283912;  // std dev = 5.87e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.12544463852839233;  // std dev = 0.000, 566.000 (wgt'ed) examples reached here.  /* #neg=566 */
WILL Produced-Tree #3
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.5553664367462832;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.11231637819360629;  // std dev = 4.08e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   else return -0.11231637819360578;  // std dev = 0.000, 602.000 (wgt'ed) examples reached here.  /* #neg=602 */
WILL Produced-Tree #4
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.41751358415831175;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.10159632948783627;  // std dev = 2.98e-08, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   else return -0.10159632948783541;  // std dev = 3.87e-07, 634.000 (wgt'ed) examples reached here.  /* #neg=634 */
WILL Produced-Tree #5
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.3207118471601512;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.09269127618926105;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   else return -0.09269127618926162;  // std dev = 0.000, 569.000 (wgt'ed) examples reached here.  /* #neg=569 */
WILL Produced-Tree #6
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2551722425694875;  // std dev = 4.00e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.08518475138839679;  // std dev = 2.24e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   else return -0.08518475138839678;  // std dev = 1.49e-07, 592.000 (wgt'ed) examples reached here.  /* #neg=592 */
WILL Produced-Tree #7
% FOR workedunder(A, B):
%   if ( director(B), actor(A) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.2097577156325347;  // std dev = 2.49e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07877675473109179;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else return -0.07877675473109245;  // std dev = 0.000, 606.000 (wgt'ed) examples reached here.  /* #neg=606 */
WILL Produced-Tree #8
% FOR workedunder(A, B):
%   if ( actor(A), director(B) )
%   then if ( movie(C, A), movie(C, B) )
%   | then return 0.17709649774527644;  // std dev = 2.92e-07, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.07324622576333704;  // std dev = 7.45e-09, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   else return -0.07324622576333682;  // std dev = 1.80e-07, 608.000 (wgt'ed) examples reached here.  /* #neg=608 */
WILL Produced-Tree #9
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1527438580936716;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06842697784420262;  // std dev = 3.94e-08, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   else return -0.06842697784420354;  // std dev = 0.000, 497.000 (wgt'ed) examples reached here.  /* #neg=497 */
WILL Produced-Tree #10
% FOR workedunder(A, B):
%   if ( movie(C, A), movie(C, B) )
%   then if ( actor(A), director(B) )
%   | then return 0.1340070300080119;  // std dev = 0.000, 337.000 (wgt'ed) examples reached here.  /* #pos=337 */
%   | else return -0.06419184008202623;  // std dev = 0.000, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   else return -0.06419184008202536;  // std dev = 2.44e-07, 511.000 (wgt'ed) examples reached here.  /* #neg=511 */
Inference time using transfer learning 0.8149571418762207
Refined model CLL: -0.064087


******************************************
Best model found
******************************************
Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 2.900545120239258 

Total Inference Time : 1.408888578414917 

Total revision time: 7.684708118438721
Best scored revision CLL: -0.064087


Results 

CLL : -0.063719 

AUC ROC : 1.0 

AUC PR : 1.0 

Precision : 1.0 

Recall : 1.0 

F1 : 1.0 

Total Learning Time : 7.699367046356201 

Total Inference Time : 1.408888578414917 

