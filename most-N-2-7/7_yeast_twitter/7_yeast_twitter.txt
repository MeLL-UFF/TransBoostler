Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Run: 1
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.398
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8031030635398779;  // std dev = 2.381, 109.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048824;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | | else return -0.05851773156715447;  // std dev = 0.276, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0.23314893509951237;  // std dev = 0.484, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7320904328059066;  // std dev = 0.134, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.034295703634221596;  // std dev = 0.265, 205.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09320924930520752;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4272294705269064;  // std dev = 1.114, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.13920929764676532;  // std dev = 3.141, 55.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.580502860287999;  // std dev = 0.401, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | | else return 0.7371470486512801;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8154068983331221;  // std dev = 0.085, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6588194823206656;  // std dev = 0.114, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5658174676289417;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5658174676289417;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04267425941542782;  // std dev = 3.675, 213.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=21 */
%   | | | else return 0.02819981308660833;  // std dev = 2.798, 60.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4987312786425646;  // std dev = 2.303, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11774656064777869;  // std dev = 0.031, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | | | else return -0.12500808265372307;  // std dev = 0.004, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16423657222731566;  // std dev = 0.198, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3003984506579935;  // std dev = 1.522, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.43557965153649514;  // std dev = 0.111, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31008065837562737;  // std dev = 4.21e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5938303609570603;  // std dev = 0.990, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.08605076029654159;  // std dev = 2.291, 249.000 (wgt'ed) examples reached here.  /* #neg=240 #pos=9 */
%   | | else return -0.10792171385164574;  // std dev = 1.86e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02609836984905694;  // std dev = 3.503, 274.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25568310179916026;  // std dev = 0.097, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5352458697356398;  // std dev = 0.701, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11876165054111244;  // std dev = 0.118, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.12424640638727769;  // std dev = 0.164, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2663013537968684;  // std dev = 2.050, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else return -0.07988290997035048;  // std dev = 2.007, 258.000 (wgt'ed) examples reached here.  /* #neg=247 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.013651982286518736;  // std dev = 0.664, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17184360405031163;  // std dev = 1.394, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.21940841778575976;  // std dev = 0.031, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.043944755510614344;  // std dev = 0.166, 193.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.0010003518332661419;  // std dev = 1.374, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.018853031104512284;  // std dev = 1.846, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15219771304191582;  // std dev = 0.202, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.29113413937197324;  // std dev = 0.741, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0900285685947015;  // std dev = 0.034, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.44251285712292965;  // std dev = 0.600, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11682231421147361;  // std dev = 0.153, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17385505668197332;  // std dev = 1.579, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return -0.043980658624118665;  // std dev = 1.281, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08330903377000802;  // std dev = 0.025, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08168334425473714;  // std dev = 6.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.04526309337906423;  // std dev = 0.480, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return -0.011633049861043038;  // std dev = 1.328, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2535206789273915;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05936970696584772;  // std dev = 1.317, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.745', 'seconds']
Parameter learned model CLL:-0.109963 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.381, 6, 103], 'true,false,true': [0.0, 171, 0], 'true,false,false': [0.276, 22, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 17, 0], 'false,false': [0.484, 15, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.134, 0, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.265, 183, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.979, 23, 1], 'false,false,false,true': [1.114, 2, 4], 'false,false,false,false': [3.141, 38, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.401, 0, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.085, 0, 2], 'true,false,false': [0.114, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.675, 192, 21], 'false,false,false,false': [2.798, 49, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.303, 3, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.031, 174, 0], 'false,true,false,false': [0.004, 35, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.198, 42, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.522, 2, 73], 'true,false': [0.111, 0, 4], 'false,true,true': [4.21e-08, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.99, 1, 23], 'false,false,true,false': [2.291, 240, 9], 'false,false,false': [1.86e-09, 17, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.503, 183, 91], 'false,true': [0.097, 0, 13], 'false,false,true': [0.701, 0, 22], 'false,false,false,true': [0.118, 30, 0], 'false,false,false,false': [0.164, 32, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.05, 3, 107], 'true,false': [2.007, 247, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.664, 15, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.394, 2, 80], 'true,false,true': [0.031, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.166, 171, 22], 'false,false,false,true': [1.374, 45, 13], 'false,false,false,false': [1.846, 26, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.202, 3, 77], 'false,true,true,true': [0.741, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.034, 212, 0], 'false,false,true': [0.6, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.153, 44, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.579, 2, 94], 'true,true,false': [1.281, 2, 9], 'true,false,true': [0.025, 171, 0], 'true,false,false,true': [6.45e-09, 15, 0], 'true,false,false,false': [0.48, 17, 2], 'false,true': [1.328, 31, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.317, 16, 8]}]
{'': [0.2260972126038804, 0.23923104307582765], 'false': [0.24256837098691986, 0.23437500000000003], 'false,true': [-1.4802973661668753e-16, -3.2653618371328133e-18], 'true': [0.05201582358387565, 0.010151216305062292], 'true,false': [-1.7659687877078512e-16, 0.07638888888888894], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.00021849323898124926, 0.10036883792413992], 'false': [0.07040854041986436, 0.1610058769357073], 'false,false': [0.039930555555555504, 0.18944496925131962], 'false,false,false': [0.20684578069463166, 0.1793871297331076], 'false,true': [nan, 0.07040854041986436], 'false,false,true': [nan, 0.039930555555555504]}
{'': [0.004276065362827097, 0.09379007799317936], 'false': [nan, 0.09379007799317926], 'false,false': [5.224578939412501e-17, 0.07902248746881266], 'false,false,false': [0.06341914847041387, 0.13049519228824152], 'true': [0.0026087113170625786, 0.008826738152132751], 'true,false': [0.0036274036840898694, 0.003253199101668325], 'true,true': [0.0023003814138739137, 0.0], 'false,false,true': [0.0, 0.0]}
{'': [0.04111967402982126, 0.00045232083361772913], 'false': [1.205793666765777e-05, 0.0009364038221351176], 'false,false': [nan, 0.0009364038221351176], 'false,false,false': [nan, 0.0009364038221351176], 'false,true': [nan, 1.205793666765777e-05], 'false,true,false': [5.538868638359532e-06, 5.676487291740782e-07]}
{'': [0.03036235736134172, 0.05968611489588785], 'false': [1.0449157878825003e-16, 0.05674037203091938], 'false,false': [0.05988293620688887, 1.6326809185664067e-18], 'false,false,true': [0.04081769087049877, 0.021084212717452824], 'true': [0.030891569286432, 0.003090940344104176], 'false,true': [1.0449157878825003e-16, nan]}
{'': [0.044779820636318475, 0.0827061692470756], 'false': [0.0007261905047551975, 0.08974777751840995], 'false,false': [0.022358952509554563, 0.0006646323788900306], 'true': [nan, 0.0447798206363186], 'true,false': [nan, 0.044779820636318475], 'false,false,false': [0.00046678766061393576, 0.0008355557312938345]}
{'': [0.047487864898602836, 0.0191915508801813], 'true': [0.038221466205667694, 0.015615856417246677], 'false': [nan, 0.0191915508801813], 'false,false': [nan, 0.0191915508801813], 'false,false,false': [nan, 0.0191915508801813]}
{'': [0.023211321167664143, 0.03772081440784118], 'false': [nan, 0.03772081440784122], 'false,false': [0.027554826115138955, 0.057016760469664585], 'false,false,false': [0.032528798054270606, 0.09739804200871083], 'true': [0.023711838334217337, 0.00048157277390673686], 'true,false': [0.00048157277390673686, nan]}
{'': [0.04065244409156928, 0.02988458519241084], 'false': [0.018811026674551097, 0.06917362486544933], 'false,false': [0.021159174626419475, 0.0005353317011022495], 'false,true': [0.017166481830461586, 5.4880625661797344e-06], 'false,true,true': [0.017166481830461586, nan], 'false,false,false': [nan, 0.0005353317011022495]}
{'': [0.027605881785642498, 0.053421016171274906], 'false': [0.0410160773547546, 0.07083406245619744], 'false,false': [0.0, 0.07227769772866119], 'false,false,false': [nan, 0.07227769772866119], 'true': [0.043003543661677975, 0.0012492192086915612], 'true,true': [0.02596278245518738, 0.14914879932338693], 'true,false': [3.709881373631861e-06, 0.007110471996132646], 'true,false,false': [2.7755575615628915e-18, 0.012138810751521604]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 10.391
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8462441731947502;  // std dev = 0.108, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.7331489350995123;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.13209496733951276;  // std dev = 0.098, 205.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.13087620782678508;  // std dev = 0.445, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7093935722304046;  // std dev = 0.122, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else return 0.7390927739180474;  // std dev = 0.038, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.7302927242857451;  // std dev = 0.147, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.565068846611221;  // std dev = 0.900, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.12651888019475882;  // std dev = 1.67e-07, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7194734122109542;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.23666309750275685;  // std dev = 1.106, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.17479229827352707;  // std dev = 2.000, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5656266199695033;  // std dev = 0.013, 71.000 (wgt'ed) examples reached here.  /* #pos=71 */
%   | else return 0.6707017765275859;  // std dev = 0.285, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.3107883766770531;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.5505166257783649;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5607883766770531;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.563126920405695;  // std dev = 0.058, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11318488925316601;  // std dev = 1.80e-07, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.140363469973555;  // std dev = 1.632, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
%   | | | else return 0.04616190494265139;  // std dev = 2.280, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.35222472930572557;  // std dev = 1.924, 56.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=52 */
%   | | | else return 0.43058968873968667;  // std dev = 0.029, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.42494929750585636;  // std dev = 0.109, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.4509407684836003;  // std dev = 0.070, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.500239705614922;  // std dev = 0.272, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.39824834575074936;  // std dev = 0.909, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.5816576056044575;  // std dev = 0.194, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.6504722453191812;  // std dev = 0.914, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.11142882834936121;  // std dev = 0.023, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.3385037559513015;  // std dev = 0.025, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else return 0.2742223333635509;  // std dev = 0.265, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A), follows(A, G) )
%   | | | then return 0.03138970732129641;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.12488190693254694;  // std dev = 0.966, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.2086269845128247;  // std dev = 0.781, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.34004614906320174;  // std dev = 0.029, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.06974013623777972;  // std dev = 1.782, 222.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=15 */
%   | | | else return 0.07773215810532931;  // std dev = 2.242, 52.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=17 */
%   | | else return -0.09252160573407318;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.2707890883221747;  // std dev = 0.014, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else return 0.16389082732185983;  // std dev = 0.304, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), follows(F, G) )
%   | | | then return 0.1463952868439828;  // std dev = 0.916, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.01212332420236036;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.05014475860028607;  // std dev = 0.119, 174.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=15 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2768515868863105;  // std dev = 0.048, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.03448390420415299;  // std dev = 1.329, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.4933553568092751;  // std dev = 0.496, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12172315167832723;  // std dev = 0.038, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then return 0.19768181423088788;  // std dev = 0.136, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | else return 0.23431252053296112;  // std dev = 0.031, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(E, G) )
%   | | | then return 0.3269148221045525;  // std dev = 0.129, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.18239212957061215;  // std dev = 0.919, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return -0.08184732826730316;  // std dev = 0.048, 217.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=1 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.288304222504915;  // std dev = 0.143, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.12517947956915018;  // std dev = 0.087, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.08184636749007375;  // std dev = 0.616, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.09936060309422312;  // std dev = 1.380, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.11864513968874256;  // std dev = 1.673, 45.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=42 */
%   | | | else return 0.19104631791418641;  // std dev = 0.048, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.18817138383693666;  // std dev = 0.019, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.24372625137831244;  // std dev = 0.094, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, G) )
%   | | then return 0.25592815964422794;  // std dev = 0.084, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.026659210150238727;  // std dev = 0.919, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(I, A) )
%   | | then return -0.054622977759646626;  // std dev = 0.101, 226.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=15 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.023014776837977022;  // std dev = 0.944, 40.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=9 */
%   | | | else return 0.027085038611532594;  // std dev = 1.464, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(A, F), follows(A, D) )
%   | | | then return 0.14624294695947998;  // std dev = 0.989, 49.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=48 */
%   | | | else return 0.18194665256016612;  // std dev = 0.082, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, G), follows(G, D) )
%   | | | then return 0.10425369355446615;  // std dev = 0.968, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return -0.15157616936068227;  // std dev = 0.835, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.03721481969795396;  // std dev = 0.437, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   else if ( follows(H, A) )
%   | then return -0.036348036801227716;  // std dev = 0.112, 244.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=32 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.25617962590103033;  // std dev = 0.115, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.43627662864579964;  // std dev = 0.324, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.12862274680182068;  // std dev = 0.032, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.11137994275804002;  // std dev = 0.196, 74.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=71 */
%   | | else return 0.22965418515984778;  // std dev = 0.076, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.06832881083683862;  // std dev = 0.048, 208.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.07067972692549557;  // std dev = 0.960, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.08633972092648892;  // std dev = 6.45e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return 0.0762771034897256;  // std dev = 0.172, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.46039355003916516;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.041769273633838984;  // std dev = 0.499, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return 0.041369695264127766;  // std dev = 1.047, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.149', 'seconds']
Refined model CLL: -0.104036


******************************************
Best model found
******************************************
Results 

CLL : -0.102022 

AUC ROC : 0.994867 

AUC PR : 0.415355 

Precision : 0.342222 

Recall : 0.987179 

F1 : 0.508251 

Total Learning Time : 10.391 

Total Inference Time : 11.631012439727783 

Total revision time: 33.600575412750246
Best scored revision CLL: -0.104036


Results 

CLL : -0.102022 

AUC ROC : 0.994867 

AUC PR : 0.415355 

Precision : 0.342222 

Recall : 0.987179 

F1 : 0.508251 

Total Learning Time : 35.12427755737305 

Total Inference Time : 11.631012439727783 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.593
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.62e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | | else return -0.07042249347191629;  // std dev = 0.258, 56.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 5.58e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return 0.26886322081379715;  // std dev = 0.492, 56.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.677833721058187;  // std dev = 1.972, 89.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03525675670789916;  // std dev = 0.261, 178.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.057861568319893524;  // std dev = 1.782, 49.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6311843378742767;  // std dev = 0.975, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.12515299448454587;  // std dev = 4.912, 134.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.577631823665796;  // std dev = 0.346, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7352955667913349;  // std dev = 0.221, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6105209272667;  // std dev = 0.164, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5992202792336041;  // std dev = 0.184, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5656235862079296;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.011537436817115942;  // std dev = 4.564, 244.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=34 */
%   | | | else return 0.03851610506197133;  // std dev = 4.106, 110.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5204882787351061;  // std dev = 3.020, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12272965112058802;  // std dev = 0.073, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | | | else return -0.12680996684665635;  // std dev = 0.013, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16715113326299383;  // std dev = 0.289, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2977355495377721;  // std dev = 1.429, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.4842064874756996;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3035495141008913;  // std dev = 0.014, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5182119932023481;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6279205724372323;  // std dev = 0.316, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10275565763175835;  // std dev = 1.792, 276.000 (wgt'ed) examples reached here.  /* #neg=271 #pos=5 */
%   | | else return 0.012742156738603402;  // std dev = 0.298, 73.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.024794080381442544;  // std dev = 3.093, 252.000 (wgt'ed) examples reached here.  /* #neg=170 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25466295688975615;  // std dev = 0.187, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.515325017321847;  // std dev = 1.036, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1207479630101717;  // std dev = 0.187, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
%   | | | else return -0.1287719019726075;  // std dev = 0.210, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2747135818440794;  // std dev = 1.779, 123.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=121 */
%   | else return -0.08939053517016075;  // std dev = 1.674, 250.000 (wgt'ed) examples reached here.  /* #neg=243 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.036216867535644716;  // std dev = 2.337, 82.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15667886286969507;  // std dev = 1.700, 86.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.26402962279331343;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03962330938672898;  // std dev = 0.149, 164.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.004391213487989556;  // std dev = 2.171, 114.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=28 */
%   | | | else return 0.02361995720002865;  // std dev = 2.580, 81.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16221102717923291;  // std dev = 0.137, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28416516251746665;  // std dev = 0.863, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09605797381315548;  // std dev = 0.572, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3859737812830353;  // std dev = 0.791, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12348619874758764;  // std dev = 0.302, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17328613035682733;  // std dev = 1.238, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.1623117716600877;  // std dev = 0.362, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08258801773960535;  // std dev = 0.016, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09442565060761653;  // std dev = 0.028, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.03295490564226125;  // std dev = 1.131, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return -0.01352918073318198;  // std dev = 1.657, 87.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18173124742703284;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.008576086217075646;  // std dev = 1.977, 74.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.821', 'seconds']
Parameter learned model CLL:-0.111655 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [4.62e-07, 0, 104], 'true,false,true': [0.0, 168, 0], 'true,false,false': [0.258, 52, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.58e-08, 54, 0], 'false,false': [0.492, 33, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.972, 4, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.261, 159, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.782, 45, 4], 'false,false,false,true': [0.975, 1, 8], 'false,false,false,false': [4.912, 94, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.346, 0, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.221, 0, 3], 'true,false,false': [0.164, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.184, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.564, 210, 34], 'false,false,false,false': [4.106, 87, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [3.02, 5, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.073, 180, 0], 'false,true,false,false': [0.013, 38, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.289, 81, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.429, 2, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.316, 0, 39], 'false,false,true,false': [1.792, 271, 5], 'false,false,false': [0.298, 60, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.093, 170, 82], 'false,true': [0.187, 0, 22], 'false,false,true': [1.036, 0, 52], 'false,false,false,true': [0.187, 67, 0], 'false,false,false,false': [0.21, 57, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.779, 2, 121], 'true,false': [1.674, 243, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.337, 54, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.7, 3, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.149, 145, 19], 'false,false,false,true': [2.171, 86, 28], 'false,false,false,false': [2.58, 57, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.137, 2, 78], 'false,true,true,true': [0.863, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.572, 209, 0], 'false,false,true': [0.791, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.302, 110, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.238, 1, 85], 'true,true,false': [0.362, 0, 19], 'true,false,true': [0.016, 167, 0], 'true,false,false,true': [0.028, 16, 0], 'true,false,false,false': [1.131, 21, 4], 'false,true': [1.657, 62, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.977, 53, 21]}]
{'': [0.2208506841165995, 0.22913580246913645], 'false': [0.21631148854350374, 0.24202806122449091], 'true': [2.049642507000289e-15, 0.017538265306122344], 'false,true': [7.105427357601002e-16, 5.756711979537848e-17], 'true,false': [-1.691768418476429e-16, 0.06632653061224474], 'false,true,true': [0.0, 0.0]}
{'': [0.04369577481254546, 0.12421740002632195], 'false': [0.06806751528081288, 0.1671877501539194], 'false,false': [0.06479221357002854, 0.1904923910173847], 'false,false,false': [0.10565995459528502, 0.18007394173030108], 'false,true': [nan, 0.06806751528081288], 'false,false,true': [nan, 0.06479221357002854]}
{'': [0.003484050085680096, 0.11835701567245017], 'false': [nan, 0.11835701567245134], 'false,false': [0.0018428371955289283, 0.10699735531406067], 'false,false,false': [0.08537158886569997, 0.15324038097910753], 'true': [0.0017880523088725769, 0.009967651784952332], 'true,false': [0.016261859403838026, 0.003361311927369437], 'false,false,true': [0.005643688911306954, -1.7763568394002506e-16], 'true,true': [0.0017880523088725769, nan]}
{'': [0.05663227696740786, 0.0006762797916583383], 'false': [2.7345195396682246e-05, 0.0010297936472135301], 'false,false': [nan, 0.0010297936472135301], 'false,false,false': [nan, 0.0010297936472135301], 'false,true': [nan, 2.7345195396690395e-05], 'false,true,false': [2.9267308037391377e-05, 4.493590041542092e-06]}
{'': [0.025940902891582275, 0.0737470807684408], 'false': [0.0020987432998720726, 0.07232270927089102], 'false,false': [0.06842941590218236, 0.0886137809609709], 'false,false,true': [0.002554633860185982, 0.011637420526889472], 'true': [0.025834626117276265, 0.0], 'false,true': [9.395706104531332e-06, 0.0]}
{'': [0.03795090778364912, 0.08530604343318368], 'false': [0.001584554531287434, 0.0917567851987577], 'false,false': [0.020637344468827583, 0.0006531008690306482], 'true': [nan, 0.037950907783649034], 'true,false': [nan, 0.03795090778364912], 'false,false,false': [0.0005232017677523531, 0.0007710013753252292]}
{'': [0.04529597050039601, 0.06662798229404981], 'false': [nan, 0.06662798229404975], 'false,false': [nan, 0.06662798229404981], 'false,false,false': [nan, 0.06662798229404981], 'true': [0.02572969408965631, 0.011205869681379394]}
{'': [0.03309838094727521, 0.04244487853833532], 'false': [nan, 0.042444878538335354], 'false,false': [0.02216363947105175, 0.058498476781382744], 'false,false,false': [0.041343789946939845, 0.08218340585830265], 'true': [0.033603911946297624, 9.827564350077533e-05], 'true,false': [9.827564350077533e-05, nan]}
{'': [0.018695899430857515, 0.035983349437677656], 'false': [0.0231650433208308, 0.05553964513074024], 'false,false': [0.015657367889409014, 0.0008290990662344511], 'false,true': [0.019621640045575, 0.0015678164000796336], 'false,true,true': [0.019621640045575, nan], 'false,false,false': [nan, 0.0008290990662344511]}
{'': [0.02340213547675014, 0.04134455146478201], 'false': [0.03155501371756237, 0.0521715792401693], 'false,false': [0.0, 0.052792603241976904], 'false,false,false': [nan, 0.05279260324197692], 'true': [0.01586323648670239, 0.006436598407468201], 'true,true': [0.01782509716135757, 0.006884592269717984], 'true,false': [1.5342950188828843e-06, 0.032119702681511646], 'true,false,false': [4.809894810006883e-05, 0.05117093297856504]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 33.651
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.097, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048807;  // std dev = 0.000, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | | else return -0.07042249347191629;  // std dev = 0.258, 56.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048768;  // std dev = 4.71e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.7331489350995123;  // std dev = 1.323, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.20814893509951235;  // std dev = 2.133, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7113948476138742;  // std dev = 0.121, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | else return 0.5108652765113861;  // std dev = 0.408, 19.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=15 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.6533631875545958;  // std dev = 1.291, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0.2596825345935472;  // std dev = 0.930, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.1271437041463546;  // std dev = 0.044, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(I, H), follows(A, I) )
%   | | | then return 0.17564693257183242;  // std dev = 2.377, 34.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=12 */
%   | | | else return 0.14304075082780177;  // std dev = 3.253, 67.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=21 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.17276173232078948;  // std dev = 1.665, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | | | else return 0.2040906952962576;  // std dev = 2.373, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5225570482273966;  // std dev = 0.183, 70.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=67 */
%   | else if ( follows(E, A) )
%   | | then return 0.465988992778357;  // std dev = 0.819, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.6901866424003065;  // std dev = 0.032, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5932832706745274;  // std dev = 0.184, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.6083804510269523;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.27504711769361895;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(I, A) )
%   | | then return -0.05586783940118727;  // std dev = 0.198, 204.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=17 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0876447217198749;  // std dev = 3.076, 68.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=19 */
%   | | | else return 0.11565241965253896;  // std dev = 3.511, 68.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, A), follows(D, E) )
%   | | | then return 0.3856949039771606;  // std dev = 1.373, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | | | else return 0.44270232757358635;  // std dev = 0.243, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.4550574239756896;  // std dev = 0.155, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.6096676243343108;  // std dev = 0.214, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.5432132875541557;  // std dev = 0.136, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.6980045495275436;  // std dev = 0.286, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.10834006381140267;  // std dev = 0.040, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | | else return -0.10775401334325156;  // std dev = 0.016, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return -0.17154570072341896;  // std dev = 0.269, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.33737019594917256;  // std dev = 0.029, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.29194834331119435;  // std dev = 1.020, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return 0.2825572302171805;  // std dev = 0.315, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.023668689263819542;  // std dev = 0.793, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.35251874418034645;  // std dev = 0.041, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.0936809314099179;  // std dev = 0.533, 125.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=1 */
%   | | | else return -8.286985448941578E-4;  // std dev = 2.096, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.032112912429659;  // std dev = 2.823, 95.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=25 */
%   | | | else return 0.08521757513142005;  // std dev = 2.383, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.26729361124525947;  // std dev = 0.004, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else return 0.1941391926928133;  // std dev = 0.258, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.4240934043641991;  // std dev = 0.194, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.09138222981753819;  // std dev = 0.041, 127.000 (wgt'ed) examples reached here.  /* #neg=127 */
%   | | else return -0.07156998214988515;  // std dev = 0.113, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then if ( follows(A, I), follows(I, J) )
%   | | then return 0.3194430104511432;  // std dev = 0.275, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.22124653550170034;  // std dev = 0.238, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.49614129963460835;  // std dev = 0.088, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else return -0.12842525730701618;  // std dev = 0.031, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.22211183373292862;  // std dev = 0.016, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( follows(E, A), follows(C, E) )
%   | | | then return 0.024645573169759814;  // std dev = 1.760, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | | else return 0.184738063051145;  // std dev = 0.979, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | else return 0.2791178965696351;  // std dev = 0.226, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.08129357500222537;  // std dev = 0.068, 132.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=2 */
%   | | else return 0.0019237604856397314;  // std dev = 0.203, 91.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=21 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.22973361640708223;  // std dev = 0.009, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.061763824227268865;  // std dev = 1.689, 50.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=19 */
%   | | | else return 0.045342620153277356;  // std dev = 2.226, 63.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=21 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19331517700241468;  // std dev = 0.019, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else return 0.32408972052386287;  // std dev = 0.101, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), tweets(E, G) )
%   | | | then return 0.3124960217721881;  // std dev = 0.227, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.5014777820152109;  // std dev = 0.111, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.08167473638074203;  // std dev = 0.007, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.33608546359398384;  // std dev = 0.491, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.13389339074999804;  // std dev = 0.135, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.030587118705897528;  // std dev = 1.019, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.006487493107729111;  // std dev = 1.510, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.16946715830664608;  // std dev = 0.028, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else if ( tweets(A, E) )
%   | | then return -0.0018570795456922845;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.17712478517813432;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1689823012366402;  // std dev = 0.126, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.2909774179278907;  // std dev = 0.203, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07576984664826177;  // std dev = 0.006, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.30119421134052604;  // std dev = 0.151, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.43522662822664593;  // std dev = 0.219, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.1305041069159667;  // std dev = 0.029, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.11501432257347992;  // std dev = 0.164, 70.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=68 */
%   | | else return 0.15998307480741442;  // std dev = 0.143, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | else return -0.06395115651702335;  // std dev = 0.048, 209.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.20175079209180038;  // std dev = 0.176, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.10335816345804147;  // std dev = 0.014, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | | else return 0.06840541280446322;  // std dev = 0.188, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.18099976730738898;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.0011898813618990455;  // std dev = 1.160, 47.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=14 */
%   | | | else return -0.004935349442025813;  // std dev = 1.218, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.809', 'seconds']
Refined model CLL: -0.106148


******************************************
Best model found
******************************************
Results 

CLL : -0.104412 

AUC ROC : 0.994188 

AUC PR : 0.450139 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 33.651 

Total Inference Time : 17.626839637756348 

Total revision time: 63.64724664115906
Best scored revision CLL: -0.106148


Results 

CLL : -0.104412 

AUC ROC : 0.994188 

AUC PR : 0.450139 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 65.17094878578186 

Total Inference Time : 17.626839637756348 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.36
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8207657575294176;  // std dev = 1.962, 107.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004883;  // std dev = 0.000, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | | else return -0.09056901361843647;  // std dev = 0.221, 39.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return 0.15814893509951236;  // std dev = 0.458, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7166172607266629;  // std dev = 1.006, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03556434691210422;  // std dev = 0.263, 207.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09546531876854703;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7604969749842877;  // std dev = 0.089, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1331472804308743;  // std dev = 3.209, 57.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5380476066743901;  // std dev = 1.765, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.7339581902196117;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.507501494845148;  // std dev = 0.774, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5999352364396116;  // std dev = 0.124, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5652794947151172;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.4541683836040061;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.036557727647554446;  // std dev = 3.677, 203.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=21 */
%   | | | else return 0.01395642070874925;  // std dev = 2.846, 67.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5206075874088248;  // std dev = 1.942, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11804564330906361;  // std dev = 0.050, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | | | else return -0.12305287446755568;  // std dev = 0.001, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15618177968960917;  // std dev = 0.155, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2982788609136844;  // std dev = 1.539, 76.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=73 */
%   | else return 0.4285230972410695;  // std dev = 0.171, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31638854183557674;  // std dev = 0.049, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6340202858504366;  // std dev = 0.180, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.0874538873232781;  // std dev = 2.330, 278.000 (wgt'ed) examples reached here.  /* #neg=269 #pos=9 */
%   | | else return -0.10520934080006131;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.026657683107319283;  // std dev = 3.394, 276.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2697119428464656;  // std dev = 0.170, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.48107212080348205;  // std dev = 1.517, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11884404909679673;  // std dev = 0.105, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.12105870085805864;  // std dev = 0.167, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.24256838523818702;  // std dev = 2.601, 113.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=107 */
%   | else return -0.07327781975072806;  // std dev = 2.067, 223.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.020281166347246256;  // std dev = 1.048, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20317568050673457;  // std dev = 0.086, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.2537572596715105;  // std dev = 0.081, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0442105278045934;  // std dev = 0.148, 209.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0033197779119615097;  // std dev = 1.466, 65.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=13 */
%   | | | else return 0.07512293233681867;  // std dev = 1.834, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13780517363591202;  // std dev = 0.227, 82.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2717332006919314;  // std dev = 0.828, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09030804895198438;  // std dev = 0.041, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4016220417338176;  // std dev = 1.204, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11017386229111177;  // std dev = 0.126, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18610728096289827;  // std dev = 1.174, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | | else return 0.0469667792836127;  // std dev = 0.948, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08399986039595642;  // std dev = 0.020, 178.000 (wgt'ed) examples reached here.  /* #neg=178 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07721413032100205;  // std dev = 3.73e-09, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.009081516753419394;  // std dev = 0.566, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.026000115432415215;  // std dev = 1.053, 37.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21611795016009394;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06872265040572423;  // std dev = 1.369, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.589', 'seconds']
Parameter learned model CLL:-0.1104 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.962, 4, 103], 'true,false,true': [0.0, 182, 0], 'true,false,false': [0.221, 37, 2], 'false,true,true,true': [0.961, 1, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [2.98e-08, 32, 0], 'false,false': [0.458, 21, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.006, 1, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.263, 185, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.982, 27, 1], 'false,false,false,true': [0.089, 0, 4], 'false,false,false,false': [3.209, 40, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.765, 3, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.774, 1, 2], 'true,false,false': [0.124, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 9], 'false,false,true,false': [0.943, 1, 8], 'false,false,false,true': [3.677, 182, 21], 'false,false,false,false': [2.846, 56, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.942, 1, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.05, 199, 0], 'false,true,false,false': [0.001, 46, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.155, 45, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.539, 3, 73], 'true,false': [0.171, 0, 4], 'false,true,true': [0.049, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.18, 0, 23], 'false,false,true,false': [2.33, 269, 9], 'false,false,false': [0.0, 16, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.394, 185, 91], 'false,true': [0.17, 0, 13], 'false,false,true': [1.517, 1, 22], 'false,false,false,true': [0.105, 33, 0], 'false,false,false,false': [0.167, 44, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.601, 6, 107], 'true,false': [2.067, 212, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.048, 18, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.086, 0, 80], 'true,false,true': [0.081, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.148, 187, 22], 'false,false,false,true': [1.466, 52, 13], 'false,false,false,false': [1.834, 18, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.227, 5, 77], 'false,true,true,true': [0.828, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.041, 210, 0], 'false,false,true': [1.204, 1, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.126, 36, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.174, 1, 94], 'true,true,false': [0.948, 1, 9], 'true,false,true': [0.02, 178, 0], 'true,false,false,true': [3.73e-09, 18, 0], 'true,false,false,false': [0.566, 10, 2], 'false,true': [1.053, 25, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.369, 16, 8]}]
{'': [0.2176438875669264, 0.20160000000000022], 'true': [0.03598567560485849, 0.008967875350627381], 'false': [0.19555555555555507, 0.21000000000000008], 'false,true': [0.07100591715976314, 2.7755575615628914e-17], 'false,true,true': [0.07100591715976314, nan], 'true,false': [-2.049642507000289e-16, 0.048652202498356334]}
{'': [0.012183773276805435, 0.09946330884469866], 'false': [0.06924861253504327, 0.15881378464311058], 'false,false': [0.03443877551020411, 0.19301152533780097], 'false,false,false': [0.0019912315344613463, 0.18060874418669018], 'false,true': [nan, 0.06924861253504327], 'false,false,true': [nan, 0.03443877551020411]}
{'': [0.04673387536853341, 0.09549006624961837], 'false': [nan, 0.09549006624961835], 'false,false': [0.052469135802469195, 0.08055278374987791], 'false,false,false': [0.06660014188899763, 0.12090872138454102], 'false,false,true': [4.9343245538895844e-17, 0.09876543209876548], 'true': [0.04262759839260572, 0.08979120611425621], 'true,false': [0.19952614183580955, 0.003828291500883263], 'true,true': [0.04269287651897849, 0.0]}
{'': [0.02970498970425493, 0.0002760197545838641], 'false': [1.3974686590017085e-05, 0.0005338545694184768], 'false,false': [nan, 0.0005338545694184768], 'false,false,false': [nan, 0.0005338545694184768], 'false,true': [nan, 1.3974686590018897e-05], 'false,true,false': [1.2489285256323537e-05, 3.576228813084725e-08]}
{'': [0.030793338228243483, 0.05569978814389026], 'false': [0.0001441243467402382, 0.052358572546605565], 'false,false': [0.05487362979039025, -1.734723475976807e-18], 'false,false,true': [0.0014120015099883061, 0.019522379929228343], 'true': [0.031180954493600622, 0.0073132461447801], 'false,true': [0.0001441243467402382, nan]}
{'': [0.041735126417879735, 0.08404867530477307], 'false': [0.0022259086372463997, 0.0874059500257988], 'false,false': [0.100027386160949, 0.0005094443802681275], 'true': [nan, 0.041735126417879645], 'true,false': [nan, 0.041735126417879735], 'false,false,false': [0.0003372622188469841, 0.0006364789945809538]}
{'': [0.05510815107336428, 0.042279520392696376], 'true': [0.059851949970996125, 0.019154499662559554], 'false': [nan, 0.042279520392696376], 'false,false': [nan, 0.042279520392696376], 'false,false,false': [nan, 0.042279520392696376]}
{'': [0.00023050117230677267, 0.03471392816651438], 'false': [nan, 0.03471392816651472], 'false,false': [0.021811097791563445, 0.061189543951630586], 'false,false,false': [0.0330754385964753, 0.12452423833380401], 'true': [9.164372733648229e-05, 0.0032887051654561655], 'true,false': [0.0032887051654561655, nan]}
{'': [0.05152509218218978, 0.031950456059794255], 'false': [0.018213131052471646, 0.08532821878054031], 'false,false': [0.08047338010988409, 0.0004439556569702164], 'false,true': [0.02078948982278806, 8.119972044423343e-06], 'false,true,true': [0.02078948982278806, nan], 'false,false,false': [nan, 0.0004439556569702164]}
{'': [0.02320688263416892, 0.04899746325640902], 'false': [0.029960843663000804, 0.07576103903732935], 'false,false': [0.0, 0.07804873402163083], 'false,false,false': [nan, 0.07804873402163083], 'true': [0.023342704036665243, 0.001844150907294977], 'true,true': [0.014496929913327138, 0.08986129606820088], 'true,false': [2.3251417431861273e-06, 0.011780790162840848], 'true,false,false': [7.709882115452476e-19, 0.026666743588172403]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 16.223
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8485335504841266;  // std dev = 0.098, 104.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004883;  // std dev = 0.000, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | | else if ( follows(A, E), follows(E, F) )
%   | | | then return 0.039967116917694;  // std dev = 1.279, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.723017360404018;  // std dev = 0.131, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.7214099972173457;  // std dev = 2.98e-08, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.05495794652349975;  // std dev = 2.815, 142.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=12 */
%   | | | else return -0.06770454972754565;  // std dev = 1.416, 44.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=3 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return -0.04038374659132872;  // std dev = 0.942, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return -0.12849343609225614;  // std dev = 0.034, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7479064319661028;  // std dev = 0.098, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.13700509818319215;  // std dev = 3.065, 55.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.54301484590981;  // std dev = 0.117, 72.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | else return 0.49894296028773777;  // std dev = 0.403, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.390198509136312;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5568651758029787;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.44575406469186757;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7328180697618608;  // std dev = 0.004, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.12025984190361963;  // std dev = 0.108, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.05211606456066336;  // std dev = 2.215, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
%   | | | else return 0.16438128277849337;  // std dev = 2.146, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), recursion_accounttype(E, B) )
%   | | | then return 0.40815536142058484;  // std dev = 0.993, 72.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | | | else return 0.5315154239899954;  // std dev = 0.403, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return 0.2458865317490228;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.4987632674667667;  // std dev = 0.206, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.6704302108124939;  // std dev = 0.034, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7393618461794654;  // std dev = 0.160, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(J, A) )
%   | then if ( tweets(A, K) )
%   | | then return -0.10831752724200787;  // std dev = 0.091, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | | else return -0.10654151231217852;  // std dev = 0.012, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else return -0.17085776512344478;  // std dev = 0.195, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.32679405582496196;  // std dev = 6.66e-08, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.2158794546143583;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.21568294471385085;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.32691196176526643;  // std dev = 0.000408, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.4311303544581094;  // std dev = 0.340, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.34975190699298886;  // std dev = 0.037, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.462083518462426;  // std dev = 0.172, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08394670328985161;  // std dev = 2.101, 248.000 (wgt'ed) examples reached here.  /* #neg=239 #pos=9 */
%   | | else return -0.09121229063301285;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.26398896174654113;  // std dev = 0.009, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | | else return 0.10362791598415745;  // std dev = 0.901, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.2605683293339123;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.057154462139877085;  // std dev = 1.388, 151.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=12 */
%   | | | else return -0.050111917110862915;  // std dev = 0.692, 32.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2908012534601117;  // std dev = 0.048, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.1771794734315886;  // std dev = 0.865, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5031383338847224;  // std dev = 0.462, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.1164855564796213;  // std dev = 0.028, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.2190327094035295;  // std dev = 0.013, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else if ( follows(A, C), tweets(A, E) )
%   | | then return 0.03907425622480545;  // std dev = 0.904, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.21541896279263187;  // std dev = 0.044, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return 0.08489545200594738;  // std dev = 0.781, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.33984396080174034;  // std dev = 0.249, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.08529608237814915;  // std dev = 0.005, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.22738650934949906;  // std dev = 0.109, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.01116966283816739;  // std dev = 0.965, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
%   | | | else return 0.05495276475344892;  // std dev = 1.539, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(G, F), follows(G, A) )
%   | | | then return 0.16026007869717432;  // std dev = 0.994, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.22804731502682052;  // std dev = 0.062, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1957758754163355;  // std dev = 0.015, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.23453070400032394;  // std dev = 0.078, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, H), recursion_accounttype(H, B) )
%   | then if ( follows(H, I) )
%   | | then return 0.22461932480018743;  // std dev = 0.085, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.0076620061825148356;  // std dev = 0.748, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(J, A) )
%   | | then return -0.0595707860632319;  // std dev = 0.097, 230.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=15 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.018644115970435297;  // std dev = 0.983, 35.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=8 */
%   | | | else return 0.07376170975262741;  // std dev = 1.476, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.15662710580954628;  // std dev = 0.025, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.08954519547570744;  // std dev = 0.967, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.19360063020412493;  // std dev = 0.027, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(F, A), follows(A, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.0057634277490289;  // std dev = 0.922, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.16095253518927763;  // std dev = 0.823, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.22170603269727343;  // std dev = 0.232, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(H, A) )
%   | then return -0.04021965995542184;  // std dev = 0.107, 249.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=32 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.37199891897012166;  // std dev = 0.092, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.1250149944289077;  // std dev = 0.027, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.10212176822961995;  // std dev = 1.711, 72.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=69 */
%   | | | else return -0.1600170619974424;  // std dev = 0.829, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.22369220276873675;  // std dev = 0.063, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.06838808611308123;  // std dev = 0.037, 190.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1188116227715305;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.041802530887161016;  // std dev = 0.963, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
%   | | | else return 0.036443101941929575;  // std dev = 0.630, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | then return 0.2338254190251311;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.023307343786673724;  // std dev = 0.253, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.317', 'seconds']
Refined model CLL: -0.105638


******************************************
Best model found
******************************************
Results 

CLL : -0.104316 

AUC ROC : 0.994165 

AUC PR : 0.337573 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 16.223 

Total Inference Time : 11.27837061882019 

Total revision time: 39.06470280456543
Best scored revision CLL: -0.105638


Results 

CLL : -0.104316 

AUC ROC : 0.994165 

AUC PR : 0.337573 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 39.09718685913086 

Total Inference Time : 11.27837061882019 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.613
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.62e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004881;  // std dev = 0.000, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | | else return -0.08302753548872299;  // std dev = 0.235, 68.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 6.83e-08, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   | else return 0.2119950889456654;  // std dev = 0.478, 65.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7229671787131909;  // std dev = 0.208, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03970510982280806;  // std dev = 0.262, 180.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05305162764474956;  // std dev = 1.786, 45.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7471888648717928;  // std dev = 0.136, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.1013941893462551;  // std dev = 5.018, 149.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5380479844741604;  // std dev = 1.460, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7299226622377528;  // std dev = 0.229, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5860436054501237;  // std dev = 0.184, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5889768961529845;  // std dev = 0.189, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5545035390214562;  // std dev = 2.98e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.023477852450472847;  // std dev = 4.605, 278.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=34 */
%   | | | else return 0.05107591898067945;  // std dev = 4.104, 108.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5268150774572702;  // std dev = 2.911, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12036531973183674;  // std dev = 0.044, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | | | else return -0.12766566773314297;  // std dev = 0.012, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16028261432563626;  // std dev = 0.286, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2844839626794874;  // std dev = 1.640, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   | else return 0.47584946162412134;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29504475902046795;  // std dev = 0.014, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.511065288805918;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6349502033055906;  // std dev = 0.335, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10351888254030535;  // std dev = 1.810, 259.000 (wgt'ed) examples reached here.  /* #neg=254 #pos=5 */
%   | | else return 0.011776466031234655;  // std dev = 0.308, 71.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.039367202697398664;  // std dev = 2.954, 230.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2049611682186435;  // std dev = 1.005, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.46652416170266175;  // std dev = 2.046, 55.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12308183520352409;  // std dev = 0.195, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | | | else return -0.12408610211879181;  // std dev = 0.196, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.280228011498917;  // std dev = 1.629, 123.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=121 */
%   | else return -0.08848742875017857;  // std dev = 1.715, 268.000 (wgt'ed) examples reached here.  /* #neg=261 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.023971538389477045;  // std dev = 2.359, 93.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15530296668250967;  // std dev = 1.704, 86.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2681158734679589;  // std dev = 0.015, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05651957473580574;  // std dev = 0.156, 192.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.020092431376825814;  // std dev = 2.505, 119.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=28 */
%   | | | else return 0.0763323261581993;  // std dev = 2.420, 68.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1496474941744016;  // std dev = 0.173, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2866752554259184;  // std dev = 0.865, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09092482061735216;  // std dev = 0.090, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3801923866948453;  // std dev = 1.183, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11888088906608917;  // std dev = 0.289, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18548739485851956;  // std dev = 0.696, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else return 0.16592586545690385;  // std dev = 0.368, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.0842030921241292;  // std dev = 0.363, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0938700582417069;  // std dev = 0.020, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.011568406987611173;  // std dev = 0.977, 25.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.02326649470817248;  // std dev = 1.457, 68.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.17810218838569802;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.004065992801346884;  // std dev = 2.078, 83.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.851', 'seconds']
Parameter learned model CLL:-0.110651 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [4.62e-07, 0, 104], 'true,false,true': [0.0, 154, 0], 'true,false,false': [0.235, 64, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [6.83e-08, 69, 0], 'false,false': [0.478, 42, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.208, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.262, 161, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.786, 41, 4], 'false,false,false,true': [0.136, 0, 8], 'false,false,false,false': [5.018, 109, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.46, 2, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.229, 0, 3], 'true,false,false': [0.184, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.189, 0, 6], 'false,false,true,false': [2.98e-08, 0, 15], 'false,false,false,true': [4.605, 244, 34], 'false,false,false,false': [4.104, 85, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.911, 4, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.044, 146, 0], 'false,true,false,false': [0.012, 37, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.286, 98, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.64, 3, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.335, 0, 39], 'false,false,true,false': [1.81, 254, 5], 'false,false,false': [0.308, 58, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.954, 148, 82], 'false,true': [1.005, 1, 22], 'false,false,true': [2.046, 3, 52], 'false,false,false,true': [0.195, 74, 0], 'false,false,false,false': [0.196, 74, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.629, 2, 121], 'true,false': [1.715, 261, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.359, 65, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.704, 3, 83], 'true,false,true': [0.015, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.156, 173, 19], 'false,false,false,true': [2.505, 91, 28], 'false,false,false,false': [2.42, 44, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.173, 3, 78], 'false,true,true,true': [0.865, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.09, 225, 0], 'false,false,true': [1.183, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.289, 97, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.696, 0, 85], 'true,true,false': [0.368, 0, 19], 'true,false,true': [0.363, 181, 0], 'true,false,false,true': [0.02, 29, 0], 'true,false,false,false': [0.977, 21, 4], 'false,true': [1.457, 43, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.078, 62, 21]}]
{'': [0.22153637698069403, 0.2107511569953729], 'true': [2.049642507000289e-15, 0.017693369044720287], 'false': [0.19522408329560992, 0.2286390532544389], 'false,true': [7.105427357601002e-16, 6.75787928032704e-17], 'true,false': [-1.2688263138573217e-16, 0.055363321799307884], 'false,true,true': [0.0, 0.0]}
{'': [0.0005065657814452105, 0.12248320233513543], 'false': [0.06853787422170096, 0.16230952786241687], 'false,false': [0.07092066821985961, 0.18068426202445634], 'false,false,false': [0.002304438948585452, 0.16901070789981332], 'false,false,true': [nan, 0.07092066821985961], 'false,true': [nan, 0.06853787422170096]}
{'': [0.02918097270480984, 0.11037807573213093], 'false': [nan, 0.11037807573213063], 'false,false': [0.001940265064355544, 0.09969133578751968], 'false,false,false': [0.07629009634037177, 0.15592475689672008], 'true': [0.0308813180329663, 0.01195153769998545], 'true,true': [0.0308813180329663, nan], 'true,false': [0.01749820103795822, 0.004225761771309899], 'false,false,true': [0.005942061759589408, 5.921189464667501e-17]}
{'': [0.05295837006952593, 0.0006389635388350476], 'false': [2.020582543289651e-05, 0.0008320330675068353], 'false,false': [nan, 0.0008320330675068353], 'false,false,false': [nan, 0.0008320330675068353], 'false,true': [nan, 2.0205825432901362e-05], 'false,true,false': [1.3532770107791353e-05, 4.017768268101092e-06]}
{'': [0.033636038310774025, 0.07834638849808867], 'false': [0.0021254358652697033, 0.07755563361376043], 'false,false': [0.07340525430169953, 0.09469463623776177], 'false,false,true': [0.0028801506681661823, 0.012655310678346944], 'true': [0.03360438071328429, 0.0], 'false,true': [9.571025733856598e-06, 0.0]}
{'': [0.03793778944182162, 0.08771510861089568], 'false': [0.043925660284573356, 0.08978138346821704], 'false,false': [0.07610545964579726, 0.0005162716499653149], 'true': [nan, 0.03793778944182156], 'true,false': [nan, 0.03793778944182162], 'false,false,false': [0.0005129628631856563, 0.0005190761607263343]}
{'': [0.04362027889585906, 0.05986266126352616], 'false': [nan, 0.05986266126352616], 'false,false': [nan, 0.05986266126352616], 'false,false,false': [nan, 0.05986266126352616], 'true': [0.02157461758523514, 0.010971032075294646]}
{'': [0.03328726916871744, 0.04673367207665927], 'false': [nan, 0.04673367207665919], 'false,false': [0.024445796200693214, 0.06702830778740054], 'false,false,false': [0.052735498246143125, 0.0861239847518897], 'true': [0.03376964662889662, 0.00010753080584283148], 'true,false': [0.00010753080584283148, nan]}
{'': [0.030058668447649498, 0.03602027878084623], 'false': [0.020503559650768298, 0.06275571105516496], 'false,false': [0.03412164502606222, 0.0008584835318551377], 'false,true': [0.01971257923442564, 3.597231274584741e-05], 'false,true,true': [0.01971257923442564, nan], 'false,false,false': [nan, 0.0008584835318551377]}
{'': [0.019747863956355187, 0.042659987576782736], 'false': [0.031216609980030945, 0.05157863352481067], 'false,false': [0.0, 0.05204066284073927], 'false,false,false': [nan, 0.05204066284073932], 'true': [0.0060159622221426495, 0.005152851911805213], 'true,true': [0.0056962252829853765, 0.007133618724477422], 'true,false': [0.0007285561273046278, 0.019359652514673028], 'true,false,false': [1.3943165791804591e-05, 0.03816302180057209]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 21.634
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.097, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else return -0.1241519498562406;  // std dev = 0.132, 226.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.733148935099512;  // std dev = 1.620, 24.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=21 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.2265699877310913;  // std dev = 2.103, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7114261386657711;  // std dev = 0.122, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else return 0.6625680628890951;  // std dev = 0.235, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.6213915923008597;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | | else return -0.1273992849272786;  // std dev = 0.000, 129.000 (wgt'ed) examples reached here.  /* #neg=129 */
%   | | else return -0.10788597665283492;  // std dev = 0.164, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.005934048406054989;  // std dev = 1.317, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | | else return -0.08024423619238173;  // std dev = 1.167, 36.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7378665638113542;  // std dev = 0.030, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.10258169333402438;  // std dev = 4.844, 149.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.5621016118853679;  // std dev = 0.037, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | | else return 0.23036867583422604;  // std dev = 0.821, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.31901158890898806;  // std dev = 0.418, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0.6175577422436369;  // std dev = 0.099, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5714671501253903;  // std dev = 0.045, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6265745416737646;  // std dev = 0.353, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.11665423003291193;  // std dev = 0.078, 211.000 (wgt'ed) examples reached here.  /* #neg=211 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.07814065319059363;  // std dev = 2.888, 60.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=15 */
%   | | | else return 0.16554922769316732;  // std dev = 3.626, 70.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=25 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, D), tweets(A, F) )
%   | | | then return 0.4220745342167435;  // std dev = 0.082, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.3176852226782733;  // std dev = 1.459, 25.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=22 */
%   | | else if ( follows(A, G), follows(G, E) )
%   | | | then return 0.4173591001937368;  // std dev = 0.959, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.6399942186263724;  // std dev = 0.299, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.4207788066200586;  // std dev = 0.037, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6469689203139427;  // std dev = 1.010, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.5633967461807408;  // std dev = 0.927, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.7816346450632361;  // std dev = 0.029, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.12390607814410859;  // std dev = 0.032, 346.000 (wgt'ed) examples reached here.  /* #neg=346 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A) )
%   | | then return 0.33926510027729667;  // std dev = 0.383, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else return 0.2126272764082503;  // std dev = 0.312, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.487052682187339;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.33685134600269423;  // std dev = 0.066, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.49857243906682913;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.08934231108727587;  // std dev = 0.419, 120.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=1 */
%   | | | else return -0.010949349804235044;  // std dev = 1.738, 90.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.039854474407323356;  // std dev = 2.883, 95.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=25 */
%   | | | else return 0.1098660396117648;  // std dev = 2.393, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.25942945845417037;  // std dev = 0.146, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return 0.19834607191007725;  // std dev = 0.953, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return -0.008284686498995794;  // std dev = 0.821, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.3266403566712821;  // std dev = 0.080, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.0870984577797217;  // std dev = 0.038, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | | else return -0.07319850473487387;  // std dev = 0.098, 36.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=1 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.2755083935919648;  // std dev = 0.033, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.5023308247734286;  // std dev = 0.104, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else return -0.13800833822159916;  // std dev = 0.038, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, C) )
%   | then return 0.21126425598713325;  // std dev = 0.123, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return 0.24540716929876152;  // std dev = 0.037, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return -0.22764673469337104;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.26815071116454153;  // std dev = 0.880, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return -0.08133795752198586;  // std dev = 0.066, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.34921131118953447;  // std dev = 0.536, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.12511794884487662;  // std dev = 0.038, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.0635933811411659;  // std dev = 1.104, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | | | else return 0.13970604838387576;  // std dev = 1.405, 18.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.17624956079702073;  // std dev = 0.014, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.11193684410998751;  // std dev = 1.006, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.1374437169640729;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else return 0.26068483147982313;  // std dev = 0.005, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(H, A) )
%   | then return -0.05102157998216513;  // std dev = 0.122, 244.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=23 */
%   | else if ( follows(A, I), tweets(A, J) )
%   | | then if ( tweets(K, J), recursion_accounttype(K, B) )
%   | | | then return 0.2927726273978254;  // std dev = 0.438, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.1109659224575382;  // std dev = 0.045, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return -0.20305742590777195;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.017098000068380557;  // std dev = 2.321, 69.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=25 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then return 0.16603239040999332;  // std dev = 0.045, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.18093268711634547;  // std dev = 0.022, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.1124162794933583;  // std dev = 3.73e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.18531346313800423;  // std dev = 0.687, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.16566008258143913;  // std dev = 0.075, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.2666349426002685;  // std dev = 0.343, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07241542435092832;  // std dev = 0.070, 256.000 (wgt'ed) examples reached here.  /* #neg=256 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.3337200260810772;  // std dev = 0.065, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.12639592612137235;  // std dev = 0.042, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then return 0.14804610976528715;  // std dev = 0.034, 72.000 (wgt'ed) examples reached here.  /* #pos=72 */
%   | | else return 0.11859037969428107;  // std dev = 0.183, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | else return -0.061870743816458296;  // std dev = 0.047, 245.000 (wgt'ed) examples reached here.  /* #neg=241 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.1898571065693055;  // std dev = 0.266, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.09061460616579452;  // std dev = 0.052, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return 0.09742011722227023;  // std dev = 0.231, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.18091647959522672;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.04266235709277541;  // std dev = 0.865, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | | | else return -0.02703582357285307;  // std dev = 1.372, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.074', 'seconds']
Refined model CLL: -0.104341


******************************************
Best model found
******************************************
Results 

CLL : -0.103633 

AUC ROC : 0.993357 

AUC PR : 0.360535 

Precision : 0.348066 

Recall : 1.0 

F1 : 0.516393 

Total Learning Time : 21.634 

Total Inference Time : 21.036007165908813 

Total revision time: 54.80369164657593
Best scored revision CLL: -0.104341


Results 

CLL : -0.103633 

AUC ROC : 0.993357 

AUC PR : 0.360535 

Precision : 0.348066 

Recall : 1.0 

F1 : 0.516393 

Total Learning Time : 54.83617570114136 

Total Inference Time : 21.036007165908813 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.354
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8485335504841266;  // std dev = 0.995, 104.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | else return -0.07518439823382113;  // std dev = 0.249, 30.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else return 0.3875606998053947;  // std dev = 0.499, 17.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.676591939303979;  // std dev = 1.962, 86.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03229062859636001;  // std dev = 0.265, 200.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10263995302906395;  // std dev = 0.985, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5364088098180215;  // std dev = 0.916, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.04725394205266855;  // std dev = 3.347, 76.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5403081447108306;  // std dev = 1.759, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.7278530663317377;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8233616703435311;  // std dev = 0.078, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6264956280400498;  // std dev = 0.092, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5682891965059738;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5682891965059738;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04031877125613014;  // std dev = 3.674, 212.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=21 */
%   | | | else return 0.006537023953241998;  // std dev = 2.823, 65.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.49292091374169833;  // std dev = 2.650, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11763717709434239;  // std dev = 0.002, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | | | else return -0.12262114302220063;  // std dev = 0.000663, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16303221962524772;  // std dev = 0.228, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2717433430646832;  // std dev = 2.287, 78.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=73 */
%   | else return 0.41995158651130937;  // std dev = 0.108, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3129560281962185;  // std dev = 2.11e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5915961867042393;  // std dev = 0.992, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.08306126879969078;  // std dev = 2.297, 242.000 (wgt'ed) examples reached here.  /* #neg=233 #pos=9 */
%   | | else return -0.10566749610062093;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04274027705387608;  // std dev = 3.296, 259.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1869343386873497;  // std dev = 0.979, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5390236856648302;  // std dev = 0.709, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11511104257815348;  // std dev = 0.167, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return -0.1288991058656456;  // std dev = 0.187, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.260209395490599;  // std dev = 2.256, 112.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=107 */
%   | else return -0.07982012336827672;  // std dev = 2.019, 252.000 (wgt'ed) examples reached here.  /* #neg=241 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03341387650582577;  // std dev = 1.062, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20848325943473928;  // std dev = 0.076, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.23470198549368781;  // std dev = 0.053, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.048285441005724586;  // std dev = 0.163, 200.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.004051863137308338;  // std dev = 1.418, 61.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=13 */
%   | | | else return 0.13473610762170443;  // std dev = 1.497, 21.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14665044719104137;  // std dev = 0.219, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.289581834845264;  // std dev = 0.694, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09135669865268187;  // std dev = 0.040, 207.000 (wgt'ed) examples reached here.  /* #neg=207 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3468517750803488;  // std dev = 1.257, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11680475355619291;  // std dev = 0.249, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16500825473268801;  // std dev = 1.902, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | | else return 0.14859722056190716;  // std dev = 0.006, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08443572245922443;  // std dev = 0.016, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07648689200139719;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.012340154636766042;  // std dev = 0.476, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.047023101753671144;  // std dev = 1.029, 33.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.3028064242715931;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04275345148081474;  // std dev = 1.326, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.534', 'seconds']
Parameter learned model CLL:-0.111402 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.995, 1, 103], 'true,false,true': [0.0, 169, 0], 'true,false,false': [0.249, 28, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [2.58e-08, 28, 0], 'false,false': [0.499, 8, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.962, 4, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.265, 178, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.985, 32, 1], 'false,false,false,true': [0.916, 1, 4], 'false,false,false,false': [3.347, 59, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.759, 3, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.078, 0, 2], 'true,false,false': [0.092, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.674, 191, 21], 'false,false,false,false': [2.823, 54, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.65, 4, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.002, 171, 0], 'false,true,false,false': [0.000663, 47, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.228, 34, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.287, 5, 73], 'true,false': [0.108, 0, 4], 'false,true,true': [2.11e-08, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.992, 1, 23], 'false,false,true,false': [2.297, 233, 9], 'false,false,false': [0.0, 17, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.296, 168, 91], 'false,true': [0.979, 1, 13], 'false,false,true': [0.709, 0, 22], 'false,false,false,true': [0.167, 39, 0], 'false,false,false,false': [0.187, 29, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.256, 5, 107], 'true,false': [2.019, 241, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.062, 25, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.076, 0, 80], 'true,false,true': [0.053, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.163, 178, 22], 'false,false,false,true': [1.418, 48, 13], 'false,false,false,false': [1.497, 12, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.219, 4, 77], 'false,true,true,true': [0.694, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.04, 207, 0], 'false,false,true': [1.257, 2, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.249, 48, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.902, 3, 94], 'true,true,false': [0.006, 0, 9], 'true,false,true': [0.016, 158, 0], 'true,false,false,true': [0.0, 19, 0], 'true,false,false,false': [0.476, 9, 2], 'false,true': [1.029, 21, 12], 'false,false,true': [0.707, 1, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.326, 16, 8]}]
{'': [0.226448387413001, 0.23268698060941828], 'false': [0.20999999999999946, 0.24913494809688577], 'true': [0.009522928994084868, 0.009949243705966858], 'false,true': [-1.4802973661668753e-16, 2.3790493384824782e-17], 'true,false': [-1.708035422500241e-16, 0.062222222222222255], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.04474963301365305, 0.09293217084183994], 'false': [0.07021023558282741, 0.13068137630384075], 'false,false': [0.029384756657483944, 0.16256218262863883], 'false,false,false': [0.16792138981126467, 0.1474396967483256], 'false,true': [nan, 0.07021023558282741], 'false,false,true': [nan, 0.029384756657483944]}
{'': [0.04150187362612212, 0.09285800368856234], 'false': [nan, 0.09285800368856234], 'false,false': [-2.0898315757650005e-16, 0.07790584806324569], 'false,false,false': [0.06368561538822048, 0.12260539976567086], 'true': [0.0423014458225728, 0.011028655062216433], 'true,true': [0.0424056055530776, 0.0], 'true,false': [0.0030346189074194063, 0.0021069269355362685], 'false,false,true': [0.0, 0.0]}
{'': [0.053999148547041916, 0.0004387473482071628], 'false': [4.217087193231777e-06, 0.0015255705666659908], 'false,false': [nan, 0.0015255705666659908], 'false,false,false': [nan, 0.0015255705666659908], 'false,true': [nan, 4.217087193231777e-06], 'false,true,false': [1.82029222130856e-08, 9.357346141435282e-09]}
{'': [0.06496977191087261, 0.06055473267664649], 'true': [0.06707988394472746, 0.002928400577635132], 'false': [2.6122894697062506e-17, 0.057635443331597806], 'false,false': [0.06090030869213641, -1.3061447348531253e-17], 'false,false,true': [0.041004313024146345, 0.021806155609080436], 'false,true': [2.6122894697062506e-17, nan]}
{'': [0.04194757207737734, 0.08680696001203078], 'false': [0.06847652528199952, 0.08676571623030714], 'false,false': [0.022820560188779367, 0.0009690369320232886], 'true': [nan, 0.04194757207737689], 'true,false': [nan, 0.04194757207737734], 'false,false,false': [0.0007145514084453977, 0.0012022420126627013]}
{'': [0.049804740721056937, 0.03416005222041252], 'true': [0.04543167982132239, 0.016172916052268903], 'false': [nan, 0.03416005222041252], 'false,false': [nan, 0.03416005222041252], 'false,false,false': [nan, 0.03416005222041252]}
{'': [0.00011990778708143702, 0.03631759843402478], 'false': [nan, 0.036317598434024545], 'false,false': [0.02648235737745224, 0.055084334623588076], 'false,false,false': [0.03295255629604105, 0.10666723878988794], 'true': [7.146625232842818e-05, 0.0013869139614414439], 'true,false': [0.0013869139614414439, nan]}
{'': [0.047756464753960615, 0.03017133233399365], 'false': [0.018851836668127054, 0.06818439168335956], 'false,false': [0.08315279713721167, 0.001295664210138057], 'false,true': [0.015065877099004199, 7.593973926787629e-06], 'false,true,true': [0.015065877099004199, nan], 'false,false,false': [nan, 0.001295664210138057]}
{'': [0.02688325748052172, 0.060192608068828424], 'false': [0.03209689808671669, 0.09532018760272995], 'false,false': [0.24999999999999994, 0.0732446934109046], 'false,false,false': [nan, 0.0732446934109046], 'true': [0.034146503261280915, 0.0014931850128995132], 'true,true': [0.03729154461017615, 3.491424288404321e-06], 'true,false': [1.6875160916432662e-06, 0.008516117560009384], 'true,false,false': [-2.1912296538654404e-18, 0.020619732684461524]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 20.914
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8459538131482928;  // std dev = 0.110, 82.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=81 */
%   | | else return 0.8146706742299468;  // std dev = 0.204, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else return -0.13296217601159951;  // std dev = 0.094, 225.000 (wgt'ed) examples reached here.  /* #neg=223 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( recursion_accounttype(K, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(A, D) )
%   | then return 0.6750531704122615;  // std dev = 0.211, 64.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=61 */
%   | else return 0.7291495397072238;  // std dev = 0.148, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.11040751241645946;  // std dev = 0.120, 151.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=3 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.7354350170084135;  // std dev = 0.142, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.12642307439350822;  // std dev = 0.000, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.6544106191066159;  // std dev = 0.975, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.3815061919152162;  // std dev = 0.926, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.14899496491575887;  // std dev = 2.026, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.498382321395643;  // std dev = 2.072, 69.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=64 */
%   | | | else return 0.4192933436417185;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.5621504864988613;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6771424640840106;  // std dev = 0.107, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5591203658174008;  // std dev = 0.006, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09593743370439148;  // std dev = 1.480, 138.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=3 */
%   | | | else return 0.03422152812962918;  // std dev = 2.068, 55.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09378250918385457;  // std dev = 1.713, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
%   | | | else return 0.17034693003592416;  // std dev = 2.133, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, F), follows(E, F) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.4280336681759528;  // std dev = 0.992, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | | else return 0.5539979246802235;  // std dev = 0.463, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.3149703190505363;  // std dev = 0.307, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.4600183139003211;  // std dev = 0.195, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.56175352553106;  // std dev = 0.045, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.6145697919506518;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.7677051980484162;  // std dev = 0.089, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(K, A) )
%   | then return -0.10955395713310206;  // std dev = 0.005, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else return -0.16389495544084084;  // std dev = 0.262, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.3188970437359029;  // std dev = 0.987, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.3370608411703903;  // std dev = 0.030, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.33693276746176287;  // std dev = 0.049, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.4017329291872947;  // std dev = 0.251, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3341874914925262;  // std dev = 0.043, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return -0.06211478442612483;  // std dev = 2.140, 230.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=15 */
%   | | | else return 0.046190087224393106;  // std dev = 2.227, 57.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=17 */
%   | | else return -0.09544775114660181;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.22226739947584315;  // std dev = 1.692, 60.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=57 */
%   | | | else return 0.4445975731226738;  // std dev = 0.503, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.09249448591309334;  // std dev = 0.049, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.2681632073465751;  // std dev = 0.025, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.04322877337800793;  // std dev = 0.164, 38.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2783243564678814;  // std dev = 0.041, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.1448413339851446;  // std dev = 0.834, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.4787399870049522;  // std dev = 0.375, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12363391374740856;  // std dev = 0.038, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then if ( follows(A, E), follows(E, C) )
%   | | then if ( tweets(E, D), follows(A, C) )
%   | | | then return 0.14779738470746462;  // std dev = 1.656, 35.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=32 */
%   | | | else return 0.21508749887546058;  // std dev = 0.067, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.2283897170738028;  // std dev = 0.034, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.2222735662157752;  // std dev = 0.040, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.3439104035927615;  // std dev = 0.109, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.08643632521326947;  // std dev = 0.083, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.24132208334680857;  // std dev = 0.149, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.028806953276911264;  // std dev = 0.996, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
%   | | | else return -0.014678752653003321;  // std dev = 1.607, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), tweets(F, E) )
%   | | | then return 0.09838115153882651;  // std dev = 2.111, 47.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=42 */
%   | | | else return 0.18115529566349758;  // std dev = 0.061, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.18344119074588;  // std dev = 0.020, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.23548995983940768;  // std dev = 0.093, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.04537264457487484;  // std dev = 0.109, 240.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=23 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2667895124280953;  // std dev = 0.225, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.11717978439727052;  // std dev = 0.118, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.04402024433073512;  // std dev = 0.668, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.12302581874399429;  // std dev = 1.176, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.18080156457961385;  // std dev = 0.017, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.029514972182380732;  // std dev = 0.773, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.17056844648730174;  // std dev = 0.142, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.23002154628869642;  // std dev = 0.075, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.14953304940563403;  // std dev = 0.042, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.28585656760420003;  // std dev = 0.779, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.07574816266521263;  // std dev = 0.064, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.32845937840144573;  // std dev = 0.096, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12508360503863092;  // std dev = 0.040, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17162937024152725;  // std dev = 0.057, 94.000 (wgt'ed) examples reached here.  /* #pos=94 */
%   | | else return 0.1391780350920263;  // std dev = 0.000951, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06756782769830234;  // std dev = 0.032, 186.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=2 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return -0.13844694620301534;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.19571738028970506;  // std dev = 0.058, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.089861352591291;  // std dev = 0.017, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.2366965604118858;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.10060286406816292;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return -0.027477263541479332;  // std dev = 0.243, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '19.162', 'seconds']
Refined model CLL: -0.103628


******************************************
Best model found
******************************************
Results 

CLL : -0.101486 

AUC ROC : 0.995037 

AUC PR : 0.406357 

Precision : 0.33913 

Recall : 1.0 

F1 : 0.506494 

Total Learning Time : 20.914 

Total Inference Time : 18.298424243927002 

Total revision time: 50.23438321876526
Best scored revision CLL: -0.103628


Results 

CLL : -0.101486 

AUC ROC : 0.995037 

AUC PR : 0.406357 

Precision : 0.33913 

Recall : 1.0 

F1 : 0.506494 

Total Learning Time : 50.260252588272095 

Total Inference Time : 18.298424243927002 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.767
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else return -0.07288554765910842;  // std dev = 0.253, 58.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 5.77e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0.2232283001788766;  // std dev = 0.481, 63.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7266428197085572;  // std dev = 0.201, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03684300605498074;  // std dev = 0.260, 182.000 (wgt'ed) examples reached here.  /* #neg=163 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05069824113532909;  // std dev = 1.778, 45.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4866116973495698;  // std dev = 1.456, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.11034886700104773;  // std dev = 5.022, 145.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5417551619539891;  // std dev = 1.459, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7298716029810967;  // std dev = 0.225, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5394644917930006;  // std dev = 0.985, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.591681746237979;  // std dev = 0.183, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5582533021135827;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.017705995344689585;  // std dev = 4.648, 263.000 (wgt'ed) examples reached here.  /* #neg=229 #pos=34 */
%   | | | else return 0.07342346677340351;  // std dev = 4.050, 94.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5420473396028178;  // std dev = 2.550, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12119678002631078;  // std dev = 0.041, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | | | else return -0.13060013089810274;  // std dev = 0.014, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16681798925216065;  // std dev = 0.315, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2777320035875661;  // std dev = 1.969, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   | else return 0.0402859125779397;  // std dev = 0.606, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.24677416309488548;  // std dev = 0.974, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.5031283697046045;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6319934767962544;  // std dev = 0.296, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10180247834571739;  // std dev = 1.792, 248.000 (wgt'ed) examples reached here.  /* #neg=243 #pos=5 */
%   | | else return 0.02648030241369501;  // std dev = 0.320, 65.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.017730062291184227;  // std dev = 3.184, 264.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2601891801390315;  // std dev = 0.245, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5135606822501706;  // std dev = 1.252, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1217120030365008;  // std dev = 0.205, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | | else return -0.13312809763017808;  // std dev = 0.240, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25725875080397226;  // std dev = 2.315, 127.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=121 */
%   | else return -0.08926463297956472;  // std dev = 1.702, 266.000 (wgt'ed) examples reached here.  /* #neg=259 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.043101720962809606;  // std dev = 2.233, 83.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16023958795018117;  // std dev = 1.701, 86.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.3014299005650132;  // std dev = 0.048, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.047101528054458025;  // std dev = 0.140, 195.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.009213227367508809;  // std dev = 2.064, 111.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=28 */
%   | | | else return 0.022087741490324397;  // std dev = 2.485, 86.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16878937835313412;  // std dev = 0.150, 80.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2858504520987288;  // std dev = 0.869, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09220344237387652;  // std dev = 0.106, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3739660397468118;  // std dev = 1.135, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12015447300558685;  // std dev = 0.282, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18919496214520937;  // std dev = 0.710, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | | else return 0.16068477982572288;  // std dev = 0.346, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08197846830295842;  // std dev = 0.029, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09885094521641159;  // std dev = 0.024, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.017654829023015024;  // std dev = 0.961, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.016370956529253793;  // std dev = 1.373, 79.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.08520462021626778;  // std dev = 0.762, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.017948335394663128;  // std dev = 2.018, 68.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.866', 'seconds']
Parameter learned model CLL:-0.111019 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 164, 0], 'true,false,false': [0.253, 54, 4], 'false,true,true,true': [0.977, 1, 21], 'false,true,true,false': [0.894, 1, 4], 'false,true,false': [5.77e-08, 56, 0], 'false,false': [0.481, 40, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.201, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.26, 163, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.778, 41, 4], 'false,false,false,true': [1.456, 3, 8], 'false,false,false,false': [5.022, 105, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.459, 2, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.225, 0, 3], 'true,false,false': [0.985, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.183, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.648, 229, 34], 'false,false,false,false': [4.05, 71, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.55, 3, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.041, 173, 0], 'false,true,false,false': [0.014, 35, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.315, 100, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.969, 4, 77], 'true,false': [0.606, 1, 1], 'false,true,true': [0.974, 1, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.296, 0, 39], 'false,false,true,false': [1.792, 243, 5], 'false,false,false': [0.32, 52, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.184, 182, 82], 'false,true': [0.245, 0, 22], 'false,false,true': [1.252, 1, 52], 'false,false,false,true': [0.205, 80, 0], 'false,false,false,false': [0.24, 74, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.315, 6, 121], 'true,false': [1.702, 259, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.233, 55, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.701, 3, 83], 'true,false,true': [0.048, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.14, 176, 19], 'false,false,false,true': [2.064, 83, 28], 'false,false,false,false': [2.485, 62, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.15, 2, 78], 'false,true,true,true': [0.869, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.106, 192, 0], 'false,false,true': [1.135, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.282, 101, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.71, 0, 85], 'true,true,false': [0.346, 0, 19], 'true,false,true': [0.029, 151, 0], 'true,false,false,true': [0.024, 37, 0], 'true,false,false,false': [0.961, 23, 4], 'false,true': [1.373, 54, 25], 'false,false,true': [0.762, 1, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.018, 47, 21]}]
{'': [0.2208506841165995, 0.2206793019328212], 'true': [0.01851192595229848, 0.017693369044720294], 'false': [0.21048047612135395, 0.2317964222726138], 'false,true': [0.06858710562414343, 5.947623346206196e-17], 'false,true,true': [0.04338842975206614, 0.15999999999999986], 'true,false': [-1.5705594006892458e-16, 0.06420927467300819]}
{'': [0.00047329490327436305, 0.12294898882105616], 'false': [0.0673468753759671, 0.1650494507149812], 'false,false': [0.07023866737373526, 0.18452132426557688], 'false,false,false': [0.19261898370670016, 0.17392425693505212], 'false,false,true': [nan, 0.07023866737373526], 'false,true': [nan, 0.0673468753759671]}
{'': [0.04015202252863768, 0.11869828495101994], 'false': [nan, 0.11869828495101954], 'false,false': [0.0018244259209433452, 0.108056575908808], 'false,false,false': [0.08212863220068399, 0.17448171340138463], 'true': [0.030865212464938813, 0.09180224636047396], 'true,false': [0.016881550047891974, 0.1077120948002524], 'true,true': [0.030865212464938813, nan], 'false,false,true': [0.00558730438288942, -5.921189464667501e-17]}
{'': [0.040889971870035145, 0.0007613187277709899], 'false': [2.1354029079376865e-05, 0.0009907030673845351], 'false,false': [nan, 0.0009907030673845351], 'false,false,false': [nan, 0.0009907030673845351], 'false,true': [nan, 2.1354029079376865e-05], 'false,true,false': [9.639900615178082e-06, 5.711156486931657e-06]}
{'': [0.052436867522046404, 0.08159544575872113], 'false': [0.0459999552199132, 0.07998798253053206], 'false,false': [0.07471592120473247, 0.1026007201110198], 'false,false,true': [0.002242589119324142, 0.012942889585162466], 'true': [0.04784286223597532, 0.18347200525857826], 'false,true': [0.045203271130436186, 0.0]}
{'': [0.03840105681303081, 0.08258538373534467], 'false': [0.0027257591982838532, 0.0862813599141661], 'false,false': [0.029566760338397557, 0.0006779128767257971], 'true': [nan, 0.038401056813030215], 'true,false': [nan, 0.03840105681303081], 'false,false,false': [0.0005230282429152716, 0.0007776532743370018]}
{'': [0.04726980299331232, 0.06005991940080166], 'false': [nan, 0.06005991940080154], 'false,false': [nan, 0.06005991940080166], 'false,false,false': [nan, 0.06005991940080166], 'true': [0.04220524533161027, 0.010883864420307466]}
{'': [0.03335129260613687, 0.037404946720703866], 'false': [nan, 0.03740494672070397], 'false,false': [0.019698588270676273, 0.053023352380002886], 'false,false,false': [0.038391538470280845, 0.07181520667929564], 'true': [0.0336468468972023, 0.001160815177147001], 'true,false': [0.001160815177147001, nan]}
{'': [0.02246869373832755, 0.037706535691107664], 'false': [0.023041063961271722, 0.05977210756626153], 'false,false': [0.03141584823923111, 0.0007875831535503494], 'false,true': [0.019850489255694444, 5.887799877501409e-05], 'false,true,true': [0.019850489255694444, nan], 'false,false,false': [nan, 0.0007875831535503494]}
{'': [0.020205996137973255, 0.0438069955810159], 'false': [0.02386886570770681, 0.06598760150345795], 'false,false': [0.19375248934720046, 0.059901315320778595], 'false,false,false': [nan, 0.059901315320778505], 'true': [0.006125715282280653, 0.004843813347118904], 'true,true': [0.00593747719447247, 0.0063035004266942035], 'true,false': [5.636420836560776e-06, 0.01604668736223741], 'true,false,false': [1.598036886474458e-05, 0.03420322537421645]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 10.683
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8462441731947502;  // std dev = 0.108, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.12383304688247035;  // std dev = 0.133, 222.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.1418510649004877;  // std dev = 3.49e-08, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | else return 0.24703782398840124;  // std dev = 0.487, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then return 0.7005932817457997;  // std dev = 0.144, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | else return 0.721869877490481;  // std dev = 5.96e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.7355694576121367;  // std dev = 0.203, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A) )
%   | | then return 0.7719714327399515;  // std dev = 0.110, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5194734122109544;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.12142830036717552;  // std dev = 0.844, 141.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=1 */
%   | | | else return 0.006914497071184159;  // std dev = 3.149, 102.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=16 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08791850559770607;  // std dev = 3.652, 99.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=25 */
%   | | | else return 0.1332621321294952;  // std dev = 2.966, 49.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.5492776147053527;  // std dev = 0.126, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else if ( follows(E, A) )
%   | | then return 0.37747619686062417;  // std dev = 0.414, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.6040520610480191;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5902447294361503;  // std dev = 0.193, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.49183122529795065;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.10861587348173249;  // std dev = 0.855, 145.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=1 */
%   | | | else return 0.025663747969688958;  // std dev = 3.112, 88.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=16 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.05176714045879762;  // std dev = 3.204, 84.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=19 */
%   | | | else return 0.1015727287582129;  // std dev = 3.453, 73.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.43264682355821293;  // std dev = 0.315, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.42036384965745005;  // std dev = 0.013, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.09867917459757351;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.46931551114715103;  // std dev = 0.060, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2096478820680375;  // std dev = 0.897, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.708819443161347;  // std dev = 0.310, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.11344932129786725;  // std dev = 0.167, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | | else return -0.12141146499691875;  // std dev = 0.084, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return -0.1552113191093751;  // std dev = 0.229, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2978712798502984;  // std dev = 0.174, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.20846933098645323;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.3935399300916365;  // std dev = 0.269, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.13350480485215102;  // std dev = 0.955, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.343014927808652;  // std dev = 0.051, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5077635699480971;  // std dev = 0.915, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.09576689164320376;  // std dev = 1.512, 248.000 (wgt'ed) examples reached here.  /* #neg=243 #pos=5 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.05458774398891178;  // std dev = 0.885, 31.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=2 */
%   | | | else return 0.13425589957461734;  // std dev = 1.991, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2679867109440019;  // std dev = 0.017, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.4155362079895198;  // std dev = 0.189, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.0925364136715267;  // std dev = 0.122, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | | else return -0.07878707687663315;  // std dev = 0.091, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.31913521152883123;  // std dev = 0.256, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.20757423469163255;  // std dev = 0.238, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.3737688337831279;  // std dev = 0.325, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.519690314112777;  // std dev = 0.981, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return -0.11642675696351715;  // std dev = 0.030, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(C, D) )
%   | | then if ( follows(C, E), follows(E, A) )
%   | | | then return 0.21507187407081127;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.11507187407081125;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else return 0.015071874070811186;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.22516324136645494;  // std dev = 0.043, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(F, A) )
%   | then return -0.04564375548540614;  // std dev = 0.139, 232.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=23 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.2586638170931168;  // std dev = 0.989, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return -0.11376708967663904;  // std dev = 0.652, 71.000 (wgt'ed) examples reached here.  /* #neg=71 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.12413083575733784;  // std dev = 0.858, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
%   | | | else return 0.020922305421894327;  // std dev = 1.615, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.16785295411047932;  // std dev = 0.118, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | | else return 0.12958408786596498;  // std dev = 0.245, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0.33657763911851984;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.31756738224047587;  // std dev = 0.233, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else return -0.08372734467088616;  // std dev = 0.010, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2084202411691302;  // std dev = 1.004, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return -0.09453743728988685;  // std dev = 0.016, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.053243462553696816;  // std dev = 0.918, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | | | else return 0.07524383412313011;  // std dev = 1.559, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( follows(A, E), follows(D, E) )
%   | | | then return 0.15945886989266414;  // std dev = 0.056, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return -0.08914847961427941;  // std dev = 0.870, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.16738715775705676;  // std dev = 0.026, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.1944217629145177;  // std dev = 0.066, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.23248701312998568;  // std dev = 0.094, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.07713588487586641;  // std dev = 0.009, 230.000 (wgt'ed) examples reached here.  /* #neg=230 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.2177200870069887;  // std dev = 0.021, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.39889593849282634;  // std dev = 0.251, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.1107441092662481;  // std dev = 0.043, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.12808606398477443;  // std dev = 0.972, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | | else return -0.8514664257146742;  // std dev = 0.041, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.23340359202985206;  // std dev = 0.040, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.06540710851394142;  // std dev = 0.056, 239.000 (wgt'ed) examples reached here.  /* #neg=235 #pos=4 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then return 0.139064621179234;  // std dev = 0.181, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | else return -0.07822936900736717;  // std dev = 0.016, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else if ( follows(A, I) )
%   | | then return 0.20326249166554974;  // std dev = 0.350, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.014133596374750548;  // std dev = 0.609, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.04167692462998101;  // std dev = 1.127, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.921', 'seconds']
Refined model CLL: -0.101913


******************************************
Best model found
******************************************
Results 

CLL : -0.10242 

AUC ROC : 0.993648 

AUC PR : 0.383798 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 10.683 

Total Inference Time : 15.444692611694336 

Total revision time: 38.37463088035584
Best scored revision CLL: -0.101913


Results 

CLL : -0.10242 

AUC ROC : 0.993648 

AUC PR : 0.383798 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 38.400500249862674 

Total Inference Time : 15.444692611694336 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.513
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8391013160518921;  // std dev = 1.401, 105.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048824;  // std dev = 0.000, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | | else return -0.0877970108464337;  // std dev = 0.226, 37.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0.21814893509951236;  // std dev = 0.480, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6897158469212322;  // std dev = 1.710, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03960392760495293;  // std dev = 0.259, 214.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10119282666257988;  // std dev = 0.985, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7469716877023695;  // std dev = 0.095, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.14855781659565123;  // std dev = 3.126, 53.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.567138826084688;  // std dev = 1.077, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.7311573865822063;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8239097417993491;  // std dev = 0.079, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.58577109290075;  // std dev = 0.129, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5673832666541488;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.45627215554303774;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03759098393834787;  // std dev = 3.635, 203.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=21 */
%   | | | else return 0.003852535656937618;  // std dev = 2.847, 69.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4837539252944609;  // std dev = 2.748, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11727251004003238;  // std dev = 0.028, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | | | else return -0.1215324186403528;  // std dev = 0.001, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15551808743231724;  // std dev = 0.158, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3190797181331865;  // std dev = 1.141, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | else return 0.41378220384812514;  // std dev = 0.140, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.32582439783395434;  // std dev = 0.050, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5926519892116189;  // std dev = 0.995, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.08615183262819433;  // std dev = 2.326, 251.000 (wgt'ed) examples reached here.  /* #neg=242 #pos=9 */
%   | | else return -0.1049070045644128;  // std dev = 1.32e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.026257275739670554;  // std dev = 3.355, 286.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.27127919361711783;  // std dev = 0.111, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.47391446000474424;  // std dev = 1.502, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1195342439423535;  // std dev = 0.122, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.12201587900530227;  // std dev = 0.154, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2887763105635436;  // std dev = 1.332, 108.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=107 */
%   | else return -0.0766315654104229;  // std dev = 2.053, 247.000 (wgt'ed) examples reached here.  /* #neg=236 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.008534710853018277;  // std dev = 0.719, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1843600321077878;  // std dev = 0.999, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.22369679266190445;  // std dev = 0.041, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.043250135722481584;  // std dev = 0.148, 207.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.018046808003322375;  // std dev = 1.641, 63.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=13 */
%   | | | else return 0.06723533715639306;  // std dev = 1.703, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17569424779584944;  // std dev = 0.110, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.24221409310504083;  // std dev = 1.304, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08972300164161419;  // std dev = 0.044, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4557713116252704;  // std dev = 0.605, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11628998217603814;  // std dev = 0.155, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18972132574477193;  // std dev = 0.837, 94.000 (wgt'ed) examples reached here.  /* #pos=94 */
%   | | else return 0.1539545732396082;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08342822929308746;  // std dev = 0.015, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.077987421598827;  // std dev = 6.45e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.016229655588776277;  // std dev = 0.468, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.016253015746405475;  // std dev = 1.016, 39.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.216083038938384;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08669445374003673;  // std dev = 1.299, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.638', 'seconds']
Parameter learned model CLL:-0.111261 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 103], 'true,false,true': [0.0, 170, 0], 'true,false,false': [0.226, 35, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.05e-08, 21, 0], 'false,false': [0.48, 16, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.71, 3, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.259, 192, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.985, 32, 1], 'false,false,false,true': [0.095, 0, 4], 'false,false,false,false': [3.126, 36, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.077, 1, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.079, 0, 2], 'true,false,false': [0.129, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.943, 1, 8], 'false,false,false,true': [3.635, 182, 21], 'false,false,false,false': [2.847, 58, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.748, 5, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.028, 175, 0], 'false,true,false,false': [0.001, 38, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.158, 38, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.141, 1, 73], 'true,false': [0.14, 0, 4], 'false,true,true': [0.05, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.995, 1, 23], 'false,false,true,false': [2.326, 242, 9], 'false,false,false': [1.32e-09, 14, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.355, 195, 91], 'false,true': [0.111, 0, 13], 'false,false,true': [1.502, 1, 22], 'false,false,false,true': [0.122, 31, 0], 'false,false,false,false': [0.154, 31, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.332, 1, 107], 'true,false': [2.053, 236, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.719, 18, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.999, 1, 80], 'true,false,true': [0.041, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.148, 185, 22], 'false,false,false,true': [1.641, 50, 13], 'false,false,false,false': [1.703, 21, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.11, 1, 77], 'false,true,true,true': [1.304, 2, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.044, 217, 0], 'false,false,true': [0.605, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.155, 39, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.837, 0, 94], 'true,true,false': [0.003, 0, 9], 'true,false,true': [0.015, 156, 0], 'true,false,false,true': [6.45e-09, 17, 0], 'true,false,false,false': [0.468, 10, 2], 'false,true': [1.016, 27, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.299, 13, 8]}]
{'': [0.22328032544378915, 0.23097502972651607], 'false': [0.23140495867768548, 0.23040000000000005], 'false,true': [-1.4802973661668753e-16, 5.28677630773884e-18], 'true': [0.01868480725623786, 0.009568484678755469], 'true,false': [-1.750233944703188e-16, 0.05113221329437545], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.03441415219331933, 0.09585910401504216], 'false': [0.06690194710355588, 0.15403111004257597], 'false,false': [0.029384756657483916, 0.19498598757458743], 'false,false,false': [0.002268465465005254, 0.18440094053082842], 'false,true': [nan, 0.06690194710355588], 'false,false,true': [nan, 0.029384756657483916]}
{'': [0.01713654349617053, 0.09398622491226556], 'false': [nan, 0.09398622491226553], 'false,false': [0.05246913580246905, 0.07870766727552983], 'false,false,false': [0.06508624003012121, 0.1175004416465355], 'false,false,true': [-4.9343245538895844e-17, 0.0987654320987654], 'true': [0.016492444165119795, 0.016405775343100466], 'true,true': [0.01635109199738959, 0.0], 'true,false': [0.0031054410679106637, 0.004152603780945341]}
{'': [0.05766181391537232, 0.0002849932128688822], 'false': [6.273021001352497e-06, 0.0006548583610550785], 'false,false': [nan, 0.0006548583610550785], 'false,false,false': [nan, 0.0006548583610550785], 'false,true': [nan, 6.273021001352497e-06], 'false,true,false': [4.3907309043029435e-06, 3.2102028462389106e-08]}
{'': [0.017367698052526113, 0.06084254251099371], 'false': [0.0001486434750089478, 0.05735155520895471], 'false,false': [0.059976572572029145, 1.982541115402065e-18], 'false,false,true': [0.041283011979952024, 0.021550946169372656], 'true': [0.017581791574751635, 0.004898333285665246], 'false,true': [0.0001486434750089478, nan]}
{'': [0.03935778313348846, 0.09024198003633482], 'false': [0.0009398429693112493, 0.09681297761734449], 'false,false': [0.09814794621693308, 0.0006226953304298315], 'true': [nan, 0.03935778313348783], 'true,false': [nan, 0.03935778313348846], 'false,false,false': [0.00047844872942384616, 0.0007638626751429742]}
{'': [0.04513906670204196, 0.019865430193486903], 'true': [0.016428609045955448, 0.01707157105305428], 'false': [nan, 0.019865430193486903], 'false,false': [nan, 0.019865430193486903], 'false,false,false': [nan, 0.019865430193486903]}
{'': [0.012084167965491954, 0.034826350641501184], 'false': [nan, 0.03482635064150114], 'false,false': [0.021893295335302397, 0.06169550221450264], 'false,false,false': [0.04271853827987022, 0.09662022551129884], 'true': [0.012324257361995864, 0.0008504529588635318], 'true,false': [0.0008504529588635318, nan]}
{'': [0.012132745276572095, 0.031542512732498355], 'false': [0.01968595487832198, 0.07615725142724435], 'false,false': [0.0215560250783093, 0.0006127841018211385], 'false,true': [0.05001500258029139, 8.854579958357604e-06], 'false,true,true': [0.05001500258029139, nan], 'false,false,false': [nan, 0.0006127841018211385]}
{'': [0.01955701971843761, 0.04620677654729884], 'false': [0.02647866168505671, 0.07745506103172083], 'false,false': [0.0, 0.08038242427225249], 'false,false,false': [nan, 0.08038242427225249], 'true': [0.0069010346149717934, 0.0014567515413486663], 'true,true': [0.007449885430637912, 1.112228789796394e-06], 'true,false': [1.513289304681346e-06, 0.008474795390250476], 'true,false,false': [2.44902137784961e-18, 0.018244949724252894]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 14.394
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return -0.13254873931909303;  // std dev = 0.096, 215.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.15814893509951236;  // std dev = 0.458, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | then return 0.6576051045213578;  // std dev = 0.249, 46.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=43 */
%   | | else return 0.7194734122109543;  // std dev = 4.21e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.7194734122109542;  // std dev = 8.43e-08, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7320024275302001;  // std dev = 0.080, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.126468741510516;  // std dev = 0.000, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | | else return -0.02612204214358055;  // std dev = 0.277, 43.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=5 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.10265921770099219;  // std dev = 0.152, 42.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7490517228539605;  // std dev = 0.102, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09169967633563614;  // std dev = 3.172, 67.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5570692010617998;  // std dev = 0.121, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.76677599689228;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.5168255545160031;  // std dev = 0.778, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5884051924240863;  // std dev = 0.140, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5867594483613422;  // std dev = 0.267, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11546244962805506;  // std dev = 0.058, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08000397920208505;  // std dev = 2.038, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | | else return 0.1610090150383524;  // std dev = 2.267, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A), follows(A, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.39296412247037704;  // std dev = 1.394, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | | | else return 0.11795718243686146;  // std dev = 1.285, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | else if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.42403729776864735;  // std dev = 0.116, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.530310165115245;  // std dev = 0.440, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.4927133946218588;  // std dev = 0.258, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.6756520408548585;  // std dev = 0.026, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.7566168506006021;  // std dev = 0.160, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(I, A) )
%   | then return -0.1040505142254693;  // std dev = 0.004, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | else return -0.16679132978591946;  // std dev = 0.160, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.3117014013497651;  // std dev = 0.985, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | | else return 0.1560649059191558;  // std dev = 1.718, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | else return 0.35449790079060084;  // std dev = 0.064, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.4370167715393409;  // std dev = 0.407, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.3172790913799919;  // std dev = 0.034, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.20818117286439008;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.059015895839822044;  // std dev = 1.685, 190.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=15 */
%   | | | else return 0.05682046092368009;  // std dev = 2.487, 57.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=17 */
%   | | else return -0.09494302515479486;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.2394496447329194;  // std dev = 1.386, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.06663060029390194;  // std dev = 0.768, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.2759437853860535;  // std dev = 0.045, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( tweets(A, G) )
%   | | then return -0.04511689011282985;  // std dev = 0.127, 144.000 (wgt'ed) examples reached here.  /* #neg=129 #pos=15 */
%   | | else return -0.03620290653141701;  // std dev = 0.164, 40.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.28173850240722553;  // std dev = 0.052, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.3785757615920819;  // std dev = 1.001, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.5573887992441728;  // std dev = 0.303, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.1271614718222494;  // std dev = 0.034, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then if ( follows(D, A) )
%   | | then if ( follows(C, D), follows(A, C) )
%   | | | then return 0.17416343491208494;  // std dev = 1.655, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   | | | else return 0.2637883496955782;  // std dev = 0.099, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.14401150159776643;  // std dev = 0.801, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.22712935226371198;  // std dev = 0.045, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(E, A) )
%   | then return -0.04171523336845195;  // std dev = 0.143, 221.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=23 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.3436718001097378;  // std dev = 0.381, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.12163906219980115;  // std dev = 0.023, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.03910233680765946;  // std dev = 0.668, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return 0.043631187846577345;  // std dev = 1.272, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then return 0.2010815634527531;  // std dev = 0.021, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | else return 0.17979004195623938;  // std dev = 0.034, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.26926553802177;  // std dev = 0.095, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(A, F) )
%   | | | then return 0.3325066029236177;  // std dev = 0.210, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.45964421126987975;  // std dev = 0.188, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.08219712726614124;  // std dev = 0.060, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.14242754295091758;  // std dev = 0.097, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.02020947324247892;  // std dev = 1.076, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return 0.07099976333207712;  // std dev = 1.354, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.15009893704431962;  // std dev = 0.998, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.16204571501051002;  // std dev = 0.096, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.25260231855003273;  // std dev = 0.073, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.05848276632933127;  // std dev = 0.831, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1629785330772862;  // std dev = 0.065, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.30685291331000253;  // std dev = 0.178, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.07661246400381144;  // std dev = 0.056, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.368512551164412;  // std dev = 0.071, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.13987557476428522;  // std dev = 0.032, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.13503354533912604;  // std dev = 0.183, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | | else return 0.13841164001178202;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06751773605682307;  // std dev = 0.037, 216.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.10606998710005344;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.05748912212372431;  // std dev = 0.997, 29.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=5 */
%   | | | else return 0.0052065634766473344;  // std dev = 0.552, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.21243651705531585;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.008377153943888733;  // std dev = 0.552, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   | | | else return 0.04938282890468116;  // std dev = 0.959, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.825', 'seconds']
Refined model CLL: -0.104973


******************************************
Best model found
******************************************
Results 

CLL : -0.103672 

AUC ROC : 0.994179 

AUC PR : 0.337331 

Precision : 0.335484 

Recall : 1.0 

F1 : 0.502415 

Total Learning Time : 14.394 

Total Inference Time : 15.043486595153809 

Total revision time: 40.009457284927365
Best scored revision CLL: -0.104973


Results 

CLL : -0.103672 

AUC ROC : 0.994179 

AUC PR : 0.337331 

Precision : 0.335484 

Recall : 1.0 

F1 : 0.502415 

Total Learning Time : 45.69824999046325 

Total Inference Time : 15.043486595153809 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.644
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.821111898062474;  // std dev = 1.963, 108.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048813;  // std dev = 0.000, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | | else return -0.0812450042944271;  // std dev = 0.239, 66.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.59e-08, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return 0.18209259707134262;  // std dev = 0.468, 71.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7071373410226216;  // std dev = 1.416, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.029620311241777685;  // std dev = 0.269, 169.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0547820405983906;  // std dev = 1.786, 48.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7550431343948422;  // std dev = 0.130, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.12686252976079793;  // std dev = 4.949, 137.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5649642429085279;  // std dev = 1.066, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7351081264270217;  // std dev = 0.220, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.594169173294698;  // std dev = 0.178, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6002500017628155;  // std dev = 0.179, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5675226636268464;  // std dev = 5.96e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.011098579169180792;  // std dev = 4.587, 249.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=34 */
%   | | | else return 0.0567426908592012;  // std dev = 4.105, 103.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5397490409548125;  // std dev = 2.566, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.122244274542437;  // std dev = 0.047, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | | | else return -0.1292729266927957;  // std dev = 0.011, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17010231155136254;  // std dev = 0.232, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.29710652674737675;  // std dev = 1.412, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.47483390766197575;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30076395427641905;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5085263285284451;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6107043619541072;  // std dev = 0.970, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.10451610136729364;  // std dev = 1.805, 247.000 (wgt'ed) examples reached here.  /* #neg=242 #pos=5 */
%   | | else return 0.006027915559187035;  // std dev = 0.307, 72.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02980858618807068;  // std dev = 3.047, 244.000 (wgt'ed) examples reached here.  /* #neg=162 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25231049049987103;  // std dev = 0.180, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4874781214108947;  // std dev = 1.665, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12582625976728387;  // std dev = 0.198, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | | else return -0.12625618831823657;  // std dev = 0.205, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26487233249664105;  // std dev = 2.173, 125.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=121 */
%   | else return -0.088213722016971;  // std dev = 1.692, 252.000 (wgt'ed) examples reached here.  /* #neg=245 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04129130865483531;  // std dev = 2.361, 81.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17998459777876116;  // std dev = 0.996, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.26084689754590434;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.057513788135968344;  // std dev = 0.162, 191.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.020069577189584603;  // std dev = 2.349, 132.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=28 */
%   | | | else return 0.013888193102039217;  // std dev = 2.575, 96.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13222522493403566;  // std dev = 0.223, 82.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2868904795182983;  // std dev = 0.907, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09161269954719992;  // std dev = 0.085, 208.000 (wgt'ed) examples reached here.  /* #neg=208 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.405831713133492;  // std dev = 0.791, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11108419094673615;  // std dev = 0.233, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1586247034156651;  // std dev = 1.702, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   | | else return 0.10807954720228256;  // std dev = 1.073, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08263645761947795;  // std dev = 0.022, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0926890661469196;  // std dev = 0.044, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.01922413382786094;  // std dev = 0.969, 28.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.005695499084948116;  // std dev = 1.544, 77.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18745623928465238;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0456271509261822;  // std dev = 1.946, 62.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.720', 'seconds']
Parameter learned model CLL:-0.11075 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.963, 4, 104], 'true,false,true': [0.0, 156, 0], 'true,false,false': [0.239, 62, 4], 'false,true,true,true': [0.977, 1, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [4.59e-08, 44, 0], 'false,false': [0.468, 48, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.416, 2, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.269, 150, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.786, 44, 4], 'false,false,false,true': [0.13, 0, 8], 'false,false,false,false': [4.949, 97, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.066, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.22, 0, 3], 'true,false,false': [0.178, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.179, 0, 6], 'false,false,true,false': [5.96e-08, 0, 15], 'false,false,false,true': [4.587, 215, 34], 'false,false,false,false': [4.105, 80, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.566, 3, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.047, 187, 0], 'false,true,false,false': [0.011, 44, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.232, 77, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.412, 2, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.97, 1, 39], 'false,false,true,false': [1.805, 242, 5], 'false,false,false': [0.307, 59, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.047, 162, 82], 'false,true': [0.18, 0, 22], 'false,false,true': [1.665, 2, 52], 'false,false,false,true': [0.198, 80, 0], 'false,false,false,false': [0.205, 87, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.173, 4, 121], 'true,false': [1.692, 245, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.361, 53, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.996, 1, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.162, 172, 19], 'false,false,false,true': [2.349, 104, 28], 'false,false,false,false': [2.575, 72, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.223, 4, 78], 'false,true,true,true': [0.907, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.085, 208, 0], 'false,false,true': [0.791, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.233, 83, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.702, 3, 85], 'true,true,false': [1.073, 1, 19], 'true,false,true': [0.022, 171, 0], 'true,false,false,true': [0.044, 33, 0], 'true,false,false,false': [0.969, 24, 4], 'false,true': [1.544, 52, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.946, 41, 21]}]
{'': [0.22016528925620055, 0.22453598913535608], 'false': [0.22959183673469508, 0.2190041658401121], 'false,true': [0.03698224852071082, 4.794144879063176e-17], 'true': [0.035665294924556515, 0.01769336904472029], 'false,true,true': [0.04338842975206614, 0.0], 'true,false': [-1.3664283380001927e-16, 0.05693296602387503]}
{'': [0.02305460518718691, 0.12796167021074914], 'false': [0.07249185552577843, 0.16772710165088522], 'false,false': [0.06642060840293636, 0.18962692257370026], 'false,false,false': [0.0021047999709660203, 0.17880548519464598], 'false,true': [nan, 0.07249185552577843], 'false,false,true': [nan, 0.06642060840293636]}
{'': [0.016488563023692258, 0.11973203171123567], 'false': [nan, 0.11973203171123607], 'false,false': [0.001748699855455026, 0.10859927636558221], 'false,false,false': [0.08451236583559595, 0.16357309611464668], 'true': [0.016706164045008486, 0.011204943248123943], 'true,true': [0.016706164045008486, nan], 'true,false': [0.01606014926627301, 0.003966844124944746], 'false,false,true': [0.005355393307330258, 2.3684757858670006e-16]}
{'': [0.04142223579452185, 0.0005941909998248285], 'false': [1.7576615179284764e-05, 0.0007010039588627867], 'false,false': [nan, 0.0007010039588627867], 'false,false,false': [nan, 0.0007010039588627867], 'false,true': [nan, 1.7576615179282843e-05], 'false,true,false': [1.1683539667295406e-05, 2.630130492779139e-06]}
{'': [0.02531418765462634, 0.08055513584928513], 'false': [0.00196600921381447, 0.07972736802119032], 'false,false': [0.07598797432436614, 0.09453869089970666], 'false,false,true': [0.02351931839308543, 0.013190105767788418], 'true': [0.025239782635663652, 0.0], 'false,true': [8.823762370002709e-06, 0.0]}
{'': [0.03805441890360095, 0.07938178254414024], 'false': [0.001477558007671293, 0.0824120365864837], 'false,false': [0.051337125282455674, 0.0004850062920166837], 'true': [nan, 0.0380544189036005], 'true,false': [nan, 0.03805441890360095], 'false,false,false': [0.000489511240434451, 0.0004807752652955802]}
{'': [0.04775379437141872, 0.06884515111068745], 'false': [nan, 0.06884515111068745], 'false,false': [nan, 0.06884515111068745], 'false,false,false': [nan, 0.06884515111068745], 'true': [0.037779469717246314, 0.011365248096842799]}
{'': [0.011675621323795538, 0.041718409345433555], 'false': [nan, 0.04171840934543333], 'false,false': [0.02611943399310412, 0.053565551648944845], 'false,false,false': [0.041792085881768457, 0.06908646540539325], 'true': [0.01179928624557079, 9.504614429206582e-05], 'true,false': [9.504614429206582e-05, nan]}
{'': [0.0496324049531768, 0.03791785142442029], 'false': [0.0220842634843609, 0.06416541702678359], 'false,false': [0.015644401589311886, 0.0006540626996192602], 'false,true': [0.021643830593707062, 3.4414383171450474e-05], 'false,true,true': [0.021643830593707062, nan], 'false,false,false': [nan, 0.0006540626996192602]}
{'': [0.026150138668369603, 0.044520505273501466], 'false': [0.03096533306736089, 0.05975426776360272], 'false,false': [0.0, 0.06105321571621644], 'false,false,false': [nan, 0.06105321571621648], 'true': [0.03786368991413244, 0.0045193888310367525], 'true,true': [0.032905927976979284, 0.05759614310553337], 'true,false': [2.9249961028249703e-06, 0.016767373729289593], 'true,false,false': [5.797851806684761e-05, 0.033540848903104895]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 17.529
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.8158954139727522;  // std dev = 0.201, 71.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=68 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else return -0.12243358917233295;  // std dev = 0.138, 206.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.71e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.1914822684328457;  // std dev = 3.055, 42.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=14 */
%   | | | else return 0.29564893509951234;  // std dev = 1.984, 16.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.6853023092473614;  // std dev = 0.208, 67.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=64 */
%   | else return 0.7267560861436616;  // std dev = 0.149, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.6695097756025922;  // std dev = 0.968, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return -0.12759043520218893;  // std dev = 1.01e-07, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | | else return -0.10026579496305545;  // std dev = 0.150, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.07240956479781088;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | | else return -0.0925633546967475;  // std dev = 1.185, 44.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.629238410013833;  // std dev = 0.958, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.11223606239185192;  // std dev = 5.007, 141.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then return 0.5786317808293975;  // std dev = 0.288, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | else return 0.5403379296469033;  // std dev = 0.258, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5892653033454794;  // std dev = 0.196, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5535673754216326;  // std dev = 2.98e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.10997882090924228;  // std dev = 0.682, 122.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=1 */
%   | | | else return 0.02302461224631405;  // std dev = 2.676, 83.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=16 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.10786177696246418;  // std dev = 3.088, 65.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=19 */
%   | | | else return 0.13986485559861528;  // std dev = 3.756, 64.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.42880720340070233;  // std dev = 0.049, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | | else return 0.3536805978360744;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | | then return 0.2677049250119141;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.6212387181367371;  // std dev = 0.405, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(G, I) )
%   | | | then return 0.45455805643115793;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5734104801195717;  // std dev = 0.115, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.6791421185427775;  // std dev = 0.037, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.7893475223361319;  // std dev = 0.038, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.13188659585945497;  // std dev = 0.035, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3267093229900028;  // std dev = 0.118, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return -0.21078864595926516;  // std dev = 0.926, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then if ( tweets(A, G) )
%   | | | then return 0.27262866841833483;  // std dev = 0.967, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.32549918587875;  // std dev = 0.020, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4818255309471068;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4058837526900996;  // std dev = 1.113, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.09805022936468835;  // std dev = 0.125, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | | else if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.01565187490185376;  // std dev = 2.272, 63.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=15 */
%   | | | else return 0.12137539360481799;  // std dev = 3.130, 65.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.2620489781707146;  // std dev = 7.88e-08, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else return 0.13099636538330314;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then return -0.04916265743972492;  // std dev = 0.118, 145.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=14 */
%   | | else return -0.06194066401989796;  // std dev = 0.125, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), tweets(A, I) )
%   | | then return 0.3287743948006397;  // std dev = 0.295, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2726497697699872;  // std dev = 0.032, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.2352485006871305;  // std dev = 0.832, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.5340317646534728;  // std dev = 1.104, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return -0.14889021922311366;  // std dev = 0.047, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D), follows(D, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(C, A), recursion_accounttype(D, B) )
%   | | | then return 0.2146037591807968;  // std dev = 7.60e-08, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.012397295600627568;  // std dev = 0.892, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.25528470596629377;  // std dev = 0.060, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.37169155146697674;  // std dev = 0.280, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, F), follows(F, A) )
%   | then return -0.04940058078609671;  // std dev = 0.116, 182.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=15 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.40156396059142624;  // std dev = 0.458, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return -0.1358027521373908;  // std dev = 0.292, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.02295152203974515;  // std dev = 1.710, 64.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=22 */
%   | | | else return 0.05451861528902447;  // std dev = 1.604, 32.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=12 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then return 0.16727882779587397;  // std dev = 0.122, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0.21742220431039844;  // std dev = 0.031, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.05377444572245682;  // std dev = 0.909, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( tweets(A, H) )
%   | | then return 0.22078859970693765;  // std dev = 0.066, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.061056967428568774;  // std dev = 0.680, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(J, I), follows(J, A) )
%   | | | then return -0.07405668505917627;  // std dev = 0.443, 142.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=1 */
%   | | | else return -0.022540533624174807;  // std dev = 1.803, 102.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=16 */
%   | | else if ( tweets(A, K) )
%   | | | then return -3.6753498635588687E-4;  // std dev = 1.737, 67.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=19 */
%   | | | else return -0.02651058864079454;  // std dev = 2.321, 81.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.09031292648507723;  // std dev = 1.640, 44.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | | else return 0.15719115083447907;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.22461369496247557;  // std dev = 0.083, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( tweets(A, F) )
%   | | then return 0.010674496553765163;  // std dev = 0.348, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.07870766808059082;  // std dev = 0.749, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.031086906847451294;  // std dev = 0.131, 269.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=38 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.30801949811167495;  // std dev = 0.111, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.36623046502825246;  // std dev = 0.959, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | else return -0.1381173218476964;  // std dev = 0.032, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.15270407209108677;  // std dev = 0.194, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else return 0.2717624388556534;  // std dev = 0.223, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else return -0.0693293649151963;  // std dev = 0.072, 220.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.20978113586148703;  // std dev = 0.174, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.11031469619647398;  // std dev = 1.088, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
%   | | else return 0.10226375367393754;  // std dev = 0.192, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.24135220822871828;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.02662546610496329;  // std dev = 1.605, 50.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=14 */
%   | | | else return -0.04749521007953606;  // std dev = 1.340, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.622', 'seconds']
Refined model CLL: -0.110252


******************************************
Best model found
******************************************
Results 

CLL : -0.107297 

AUC ROC : 0.992416 

AUC PR : 0.339034 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 17.529 

Total Inference Time : 14.398305654525757 

Total revision time: 44.33444704818726
Best scored revision CLL: -0.110252


Results 

CLL : -0.107297 

AUC ROC : 0.992416 

AUC PR : 0.339034 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 50.023239753723146 

Total Inference Time : 14.398305654525757 

Run: 2
Starting experiments for fasttext using euclidean 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.31
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8207657575294176;  // std dev = 1.962, 107.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048816;  // std dev = 0.000, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   | | else return -0.04661296966239256;  // std dev = 0.294, 21.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0.23314893509951237;  // std dev = 0.484, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7047749693790399;  // std dev = 1.406, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.042302200465384195;  // std dev = 0.256, 222.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10995527437056628;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7464386189627429;  // std dev = 0.093, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.13530165547187192;  // std dev = 3.148, 56.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5408243989336424;  // std dev = 1.764, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.7352717718582495;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8170890078960189;  // std dev = 0.084, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5851046539752132;  // std dev = 0.126, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5681873207612894;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.36818732076128946;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.041023885482693076;  // std dev = 3.662, 210.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=21 */
%   | | | else return 0.023871780027840517;  // std dev = 2.793, 64.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.49417253259095767;  // std dev = 2.553, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11727081821810648;  // std dev = 0.045, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | | | else return -0.12351809667799098;  // std dev = 0.003, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16392896939923246;  // std dev = 0.183, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.33707407789004845;  // std dev = 0.530, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | else return 0.4084937373610805;  // std dev = 0.135, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.279312612816262;  // std dev = 0.953, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5622203874294143;  // std dev = 1.255, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return -0.08211772431365305;  // std dev = 2.282, 233.000 (wgt'ed) examples reached here.  /* #neg=224 #pos=9 */
%   | | else return -0.10766059226953299;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.026033489716284552;  // std dev = 3.506, 277.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.288447824494566;  // std dev = 0.098, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5303179128211951;  // std dev = 0.767, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11112028655466918;  // std dev = 0.061, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.12249204965416846;  // std dev = 0.149, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2883115797846969;  // std dev = 1.456, 108.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=107 */
%   | else return -0.07647169937381032;  // std dev = 1.997, 240.000 (wgt'ed) examples reached here.  /* #neg=229 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05018748520374192;  // std dev = 0.704, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1741595177493919;  // std dev = 1.405, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.22019737878774653;  // std dev = 0.027, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04936670086252237;  // std dev = 0.158, 214.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.008451940074533825;  // std dev = 1.385, 63.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=13 */
%   | | | else return 0.08828322477882639;  // std dev = 1.614, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15104152186222058;  // std dev = 0.192, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28506431259915455;  // std dev = 0.847, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08995964722489833;  // std dev = 0.034, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3795457953945933;  // std dev = 1.192, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10964086059321594;  // std dev = 0.164, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18279004073809652;  // std dev = 1.332, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | | else return 0.15801919724170047;  // std dev = 0.009, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08299756083601684;  // std dev = 0.024, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0836896585616557;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.038235483762009435;  // std dev = 0.469, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.007702500012788642;  // std dev = 1.044, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2041542681982914;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.011788897380654017;  // std dev = 1.410, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.591', 'seconds']
Parameter learned model CLL:-0.110935 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.962, 4, 103], 'true,false,true': [0.0, 159, 0], 'true,false,false': [0.294, 19, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [7.45e-09, 20, 0], 'false,false': [0.484, 15, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.406, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.256, 200, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.987, 37, 1], 'false,false,false,true': [0.093, 0, 4], 'false,false,false,false': [3.148, 39, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.764, 3, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.084, 0, 2], 'true,false,false': [0.126, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [1.265, 2, 8], 'false,false,false,true': [3.662, 189, 21], 'false,false,false,false': [2.793, 53, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.553, 5, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.045, 162, 0], 'false,true,false,false': [0.003, 37, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.183, 37, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.53, 0, 73], 'true,false': [0.135, 0, 4], 'false,true,true': [0.953, 1, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.255, 2, 23], 'false,false,true,false': [2.282, 224, 9], 'false,false,false': [0.0, 21, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.506, 186, 91], 'false,true': [0.098, 0, 13], 'false,false,true': [0.767, 0, 22], 'false,false,false,true': [0.061, 30, 0], 'false,false,false,false': [0.149, 31, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.456, 1, 107], 'true,false': [1.997, 229, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.704, 11, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.405, 2, 80], 'true,false,true': [0.027, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.158, 192, 22], 'false,false,false,true': [1.385, 50, 13], 'false,false,false,false': [1.614, 17, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.192, 3, 77], 'false,true,true,true': [0.847, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.034, 202, 0], 'false,false,true': [1.192, 1, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.164, 40, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.332, 1, 94], 'true,true,false': [0.009, 0, 9], 'true,false,true': [0.024, 169, 0], 'true,false,false,true': [0.0, 14, 0], 'true,false,false,false': [0.469, 13, 2], 'false,true': [1.044, 31, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.41, 23, 8]}]
{'': [0.23200475907198348, 0.234375], 'false': [0.2343749999999995, 0.23437500000000003], 'false,true': [-1.4802973661668753e-16, 2.7755575615628915e-18], 'true': [0.03598567560485849, 0.010987654320987484], 'true,false': [-1.424437088198314e-16, 0.08616780045351478], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.02354021436295935, 0.09208624060694856], 'false': [0.06528774456651042, 0.1447835547264364], 'false,false': [0.025623268698060912, 0.18853505394272363], 'false,false,false': [0.0021813671255001, 0.1769468056962025], 'false,true': [nan, 0.06528774456651042], 'false,false,true': [nan, 0.025623268698060912]}
{'': [0.04154190909018447, 0.09369194910087203], 'false': [nan, 0.09369194910087209], 'false,false': [0.09418282548476442, 0.07816508960599478], 'false,false,true': [-1.4802973661668753e-16, 0.15999999999999986], 'false,false,false': [0.06386203016315942, 0.12186925174428956], 'true': [0.042569525240597116, 0.015773298839242427], 'true,true': [0.04264172643768757, 0.0], 'true,false': [0.00348950941545223, 0.003976280063119619]}
{'': [0.04976205532141243, 0.0004294172438276518], 'false': [1.6036244901345277e-05, 0.0009073208845984243], 'false,false': [nan, 0.0009073208845984243], 'false,false,false': [nan, 0.0009073208845984243], 'false,true': [nan, 1.6036244901338582e-05], 'false,true,false': [1.238766478095921e-05, 2.391741307108277e-07]}
{'': [0.004130033077697454, 0.06328517294917593], 'false': [0.05049207365699456, 0.058449839491848066], 'false,false': [0.06262478456278112, -7.93016446160826e-18], 'false,false,true': [0.06299243095319977, 0.022355531106130335], 'false,true': [0.05049207365699456, nan], 'true': [0.003841730082425129, 0.004555769930977199]}
{'': [0.044373811066751014, 0.0834638413783067], 'false': [0.0007462431486740145, 0.08901768091829398], 'false,false': [0.026718657447451753, 0.00045503768995278673], 'true': [nan, 0.044373811066751125], 'true,false': [nan, 0.044373811066751014], 'false,false,false': [0.0001220917552800201, 0.0007136449105659047]}
{'': [0.046030897851302974, 0.02605294239417504], 'true': [0.019621779495923992, 0.016618395360095857], 'false': [nan, 0.02605294239417504], 'false,false': [nan, 0.02605294239417504], 'false,false,false': [nan, 0.02605294239417504]}
{'': [0.023566766097987617, 0.03420586021735224], 'false': [nan, 0.034205860217352016], 'false,false': [0.02508517006397158, 0.05275692753554664], 'false,false,false': [0.03043015762100313, 0.10023242417322338], 'true': [0.0240818853435207, 0.0003778563023583842], 'true,false': [0.0003778563023583842, nan]}
{'': [0.036874905819666105, 0.032152086951686386], 'false': [0.02003617528287104, 0.07617679582691156], 'false,false': [0.07893580476338388, 0.0006686121651948692], 'false,true': [0.021752851483701326, 5.864246330868883e-06], 'false,true,true': [0.021752851483701326, nan], 'false,false,false': [nan, 0.0006686121651948692]}
{'': [0.022013991272344026, 0.041537684628609114], 'false': [0.02532513271856071, 0.06326484082449509], 'false,false': [0.0, 0.06414925351985781], 'false,false,false': [nan, 0.06414925351985781], 'true': [0.01711161621399835, 0.0012554231141358452], 'true,true': [0.01867876064058716, 9.041008304486483e-06], 'true,false': [3.2960749466545062e-06, 0.008107872121465427], 'true,false,false': [-3.96508223080413e-18, 0.01467780053503884]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 12.583
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8446354215859994;  // std dev = 0.993, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | | | else return 0.8146706742299468;  // std dev = 0.978, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.1336877995943659;  // std dev = 0.090, 245.000 (wgt'ed) examples reached here.  /* #neg=243 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.31968739663797385;  // std dev = 0.499, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.7079070429938223;  // std dev = 0.119, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else return 0.7456288131374846;  // std dev = 0.137, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.672608834684538;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.12634295804253168;  // std dev = 0.000, 117.000 (wgt'ed) examples reached here.  /* #neg=117 */
%   | | else return -0.02923985028314237;  // std dev = 0.271, 44.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=5 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.026342958042531523;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=1 */
%   | | | else return -0.12634295804253157;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7432600073969047;  // std dev = 0.082, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.12665209335630911;  // std dev = 3.077, 56.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.4975504722530813;  // std dev = 1.929, 61.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=57 */
%   | | | else return 0.5748092902220893;  // std dev = 0.166, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.7339133917507068;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.661289454973568;  // std dev = 0.308, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.5574137074828385;  // std dev = 0.014, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.46512312105569603;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(I, A) )
%   | | then return -0.061989467371555654;  // std dev = 0.190, 203.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=15 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.045150648697709565;  // std dev = 2.078, 36.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=8 */
%   | | | else return 0.1582473723043684;  // std dev = 2.251, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(F, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.411564154408179;  // std dev = 0.986, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | | else return 0.4291679224549952;  // std dev = 0.055, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else return 0.47931144043840995;  // std dev = 0.053, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( tweets(A, I), tweets(G, I) )
%   | | | then return 0.4939144810267458;  // std dev = 1.363, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | | else return 0.5895402938285192;  // std dev = 0.906, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.6585752754213542;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7262451228610303;  // std dev = 0.227, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(K, A) )
%   | then return -0.10972538554168325;  // std dev = 0.005, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else return -0.17097979647507383;  // std dev = 0.226, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then return 0.33907900584126843;  // std dev = 0.013, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.051874768161822564;  // std dev = 1.465, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.3496662850809152;  // std dev = 0.151, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return 0.39640331024376535;  // std dev = 0.381, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3321799000738058;  // std dev = 0.055, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.054317779938307525;  // std dev = 2.245, 201.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=15 */
%   | | | else return 0.044723041836217975;  // std dev = 2.560, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
%   | | else return -0.09693572410130889;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.2403876495653228;  // std dev = 0.178, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.26535090080002766;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.03619272293993709;  // std dev = 1.197, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( tweets(A, G) )
%   | | then return -0.03893814540378276;  // std dev = 0.172, 152.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=17 */
%   | | else return -0.033288129061456055;  // std dev = 0.202, 45.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.27738761618474156;  // std dev = 0.041, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.10941173550213786;  // std dev = 1.075, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5495502317853386;  // std dev = 0.177, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.13678679472425714;  // std dev = 0.045, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.20867543047565038;  // std dev = 0.121, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | else if ( follows(A, E), follows(E, C) )
%   | | then return 0.17321034317811626;  // std dev = 0.276, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.0456576890548233;  // std dev = 0.885, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( tweets(G, H), follows(A, F) )
%   | | | then return 0.4562978229473721;  // std dev = 0.543, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.3265212675197516;  // std dev = 0.827, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.08935115392742798;  // std dev = 0.060, 198.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.20090739241419875;  // std dev = 0.044, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.0897473592407923;  // std dev = 1.173, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
%   | | | else return 0.015005868815345253;  // std dev = 1.442, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1818328186144888;  // std dev = 0.112, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else return 0.27797383342194554;  // std dev = 0.035, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(F, A), follows(F, E) )
%   | | then if ( tweets(A, G), follows(A, F) )
%   | | | then return 0.19065335537186412;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.43540379554887076;  // std dev = 0.221, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.17465854463907288;  // std dev = 0.043, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.07169984004092547;  // std dev = 0.796, 130.000 (wgt'ed) examples reached here.  /* #neg=127 #pos=3 */
%   | | | else return -0.012948015938607312;  // std dev = 1.631, 84.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.030264188869980457;  // std dev = 1.229, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
%   | | | else return 7.845026368732133E-4;  // std dev = 1.475, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | | then return 0.1162713339288838;  // std dev = 1.383, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.1620733791549349;  // std dev = 0.008, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.22948469729700216;  // std dev = 0.305, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.20786726629813174;  // std dev = 0.032, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.16064962671964864;  // std dev = 0.053, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.41717991571141866;  // std dev = 0.225, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.07784889456791452;  // std dev = 0.075, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.3978523672676571;  // std dev = 0.048, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.14110741426574014;  // std dev = 0.024, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14784293093904174;  // std dev = 0.183, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | | else return 0.14031573674625877;  // std dev = 0.015, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.07025765207733213;  // std dev = 0.041, 216.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.11229814856838771;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.040049464730059124;  // std dev = 0.835, 28.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=5 */
%   | | | else return 0.014044871497916252;  // std dev = 0.598, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.14934720345272756;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.014975322645072998;  // std dev = 0.586, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.0746203843827414;  // std dev = 0.890, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.784', 'seconds']
Refined model CLL: -0.110626


******************************************
Best model found
******************************************
Results 

CLL : -0.10935 

AUC ROC : 0.993567 

AUC PR : 0.306445 

Precision : 0.338428 

Recall : 0.99359 

F1 : 0.504886 

Total Learning Time : 12.583 

Total Inference Time : 14.237663745880127 

Total revision time: 37.4532765083313
Best scored revision CLL: -0.110626


Results 

CLL : -0.10935 

AUC ROC : 0.993567 

AUC PR : 0.306445 

Precision : 0.338428 

Recall : 0.99359 

F1 : 0.504886 

Total Learning Time : 37.47100316810608 

Total Inference Time : 14.237663745880127 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.658
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | | else return -0.0716756263039965;  // std dev = 0.255, 57.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 5.77e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else return 0.24797944357408774;  // std dev = 0.488, 59.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7035734668784736;  // std dev = 1.417, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03519487872963591;  // std dev = 0.263, 177.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06844175618231384;  // std dev = 1.805, 55.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7527178940242053;  // std dev = 0.118, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.09892963019070973;  // std dev = 5.034, 150.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5494115677827714;  // std dev = 1.349, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.733700436147449;  // std dev = 0.222, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.476478525764176;  // std dev = 0.987, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5970790243102116;  // std dev = 0.182, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5639344690080872;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.021723262446527225;  // std dev = 4.632, 276.000 (wgt'ed) examples reached here.  /* #neg=242 #pos=34 */
%   | | | else return 0.029256877961686755;  // std dev = 4.158, 117.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5460741830115663;  // std dev = 2.470, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12076195023949077;  // std dev = 0.049, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | | | else return -0.1253931121381668;  // std dev = 0.009, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16452217563365482;  // std dev = 0.256, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3109734153037835;  // std dev = 0.999, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return 0.4721108622225213;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.297108043842419;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5062369145152293;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.634741050378966;  // std dev = 0.305, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10133297846546153;  // std dev = 1.798, 259.000 (wgt'ed) examples reached here.  /* #neg=254 #pos=5 */
%   | | else return 0.03819081554193021;  // std dev = 0.319, 62.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.021354610618050905;  // std dev = 3.140, 254.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24972543828777471;  // std dev = 0.182, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.457663516631544;  // std dev = 2.192, 55.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12108691559451741;  // std dev = 0.200, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | | else return -0.1292767726934703;  // std dev = 0.233, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26568339846406847;  // std dev = 2.116, 125.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=121 */
%   | else return -0.08988727148391988;  // std dev = 1.764, 263.000 (wgt'ed) examples reached here.  /* #neg=256 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05834898780187467;  // std dev = 2.178, 77.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18959376629321725;  // std dev = 0.085, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2597413278350847;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04515302229511162;  // std dev = 0.141, 187.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.006662488494440319;  // std dev = 2.106, 109.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=28 */
%   | | | else return 0.042409669960051424;  // std dev = 2.586, 76.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17918014292583115;  // std dev = 0.058, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2582718966950029;  // std dev = 1.251, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09230120831229534;  // std dev = 0.122, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3756894938708327;  // std dev = 1.272, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12092819924930398;  // std dev = 0.289, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16164825686921494;  // std dev = 1.433, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   | | else return 0.15854591116166827;  // std dev = 0.380, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08177801890173145;  // std dev = 0.017, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09773782048368161;  // std dev = 0.041, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.03416694328304215;  // std dev = 0.988, 32.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.013841376476194604;  // std dev = 1.549, 73.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1855543011952655;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.018997671154745648;  // std dev = 2.016, 70.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.975', 'seconds']
Parameter learned model CLL:-0.111668 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 163, 0], 'true,false,false': [0.255, 53, 4], 'false,true,true,true': [0.977, 1, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.77e-08, 56, 0], 'false,false': [0.488, 36, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.417, 2, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.263, 158, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.805, 51, 4], 'false,false,false,true': [0.118, 0, 8], 'false,false,false,false': [5.034, 110, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.349, 2, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.222, 0, 3], 'true,false,false': [0.987, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.182, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.632, 242, 34], 'false,false,false,false': [4.158, 94, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.47, 2, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.049, 175, 0], 'false,true,false,false': [0.009, 41, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.256, 73, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.999, 1, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.305, 0, 39], 'false,false,true,false': [1.798, 254, 5], 'false,false,false': [0.319, 49, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.14, 172, 82], 'false,true': [0.182, 0, 22], 'false,false,true': [2.192, 3, 52], 'false,false,false,true': [0.2, 78, 0], 'false,false,false,false': [0.233, 82, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.116, 4, 121], 'true,false': [1.764, 256, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.178, 49, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.085, 0, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.141, 168, 19], 'false,false,false,true': [2.106, 81, 28], 'false,false,false,false': [2.586, 52, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.058, 0, 78], 'false,true,true,true': [1.251, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.122, 215, 0], 'false,false,true': [1.272, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.289, 103, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.433, 2, 85], 'true,true,false': [0.38, 0, 19], 'true,false,true': [0.017, 151, 0], 'true,false,false,true': [0.041, 24, 0], 'true,false,false,false': [0.988, 28, 4], 'false,true': [1.549, 48, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.016, 49, 21]}]
{'': [0.22153637698069403, 0.22453598913535608], 'false': [0.2119274241522914, 0.23786268313703063], 'true': [0.01851192595229848, 0.01785123966942138], 'false,true': [0.03698224852071082, 5.947623346206196e-17], 'false,true,true': [0.04338842975206614, 0.0], 'true,false': [-1.5801947344358056e-16, 0.06525084641428117]}
{'': [0.023073355536188625, 0.12065244061964861], 'false': [0.06930563191672165, 0.15727048033383384], 'false,false': [0.05920779723337386, 0.18102850914942406], 'false,false,false': [0.0017514781251319889, 0.16894746503562677], 'false,true': [nan, 0.06930563191672165], 'false,false,true': [nan, 0.05920779723337386]}
{'': [0.036938875376118716, 0.11039045841486182], 'false': [nan, 0.11039045841486254], 'false,false': [0.0017935698713069975, 0.09913250109564163], 'false,false,false': [0.07774310567654849, 0.14776430229152016], 'true': [0.026359144101273393, 0.09770892272644527], 'true,false': [0.016484634470509185, 0.10824290768311881], 'true,true': [0.026359144101273393, nan], 'false,false,true': [0.005492807730877865, 0.0]}
{'': [0.03859995814834186, 0.0005847863965249209], 'false': [1.4869125317895637e-05, 0.0008967933520523257], 'false,false': [nan, 0.0008967933520523257], 'false,false,false': [nan, 0.0008967933520523257], 'false,true': [nan, 1.486912531789358e-05], 'false,true,false': [1.3792164896160943e-05, 2.0893307859398015e-06]}
{'': [0.012952864974616864, 0.07866466459594577], 'false': [0.001991938846891047, 0.07802234126497062], 'false,false': [0.07279116078400127, 0.10162150023415373], 'false,false,true': [0.0023899679958515863, 0.012484749970875118], 'true': [0.01279025295621936, 0.0], 'false,true': [8.922239288666756e-06, 0.0]}
{'': [0.038820623787981685, 0.08380752928288297], 'false': [0.001505471217604329, 0.08749279035314891], 'false,false': [0.08735918316254841, 0.0006059581459516378], 'true': [nan, 0.038820623787981644], 'true,false': [nan, 0.038820623787981685], 'false,false,false': [0.0005146913448762246, 0.0006600744502909072]}
{'': [0.04716635191476974, 0.06161350569235006], 'false': [nan, 0.06161350569235012], 'false,false': [nan, 0.06161350569235006], 'false,false,false': [nan, 0.06161350569235006], 'true': [0.035824083429675954, 0.011825687989338791]}
{'': [0.00020062269358003912, 0.041161049665720595], 'false': [nan, 0.041161049665720185], 'false,false': [0.019904123197457033, 0.060424711855630954], 'false,false,false': [0.04068519026047778, 0.08798243963552287], 'true': [8.733835082303701e-05, 9.702324279174668e-05], 'true,false': [9.702324279174668e-05, nan]}
{'': [0.003371254301329056, 0.03741273302200578], 'false': [0.022194930202149504, 0.06203799790229884], 'false,false': [0.039445219007400646, 0.0008104451400188767], 'false,true': [0.040139944749794085, 6.908497239117986e-05], 'false,true,true': [0.040139944749794085, nan], 'false,false,false': [nan, 0.0008104451400188767]}
{'': [0.022991173582021882, 0.044979528219789094], 'false': [0.03288706144053349, 0.057191763660450756], 'false,false': [0.0, 0.05805522763379235], 'false,false,false': [nan, 0.058055227633792277], 'true': [0.020726069920562924, 0.005071088956176369], 'true,true': [0.02359436809422798, 0.007584384152512891], 'true,false': [1.82317234462399e-06, 0.018437425175228426], 'true,false,false': [6.972811014977394e-05, 0.03048123093344082]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 29.961
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8244410699309725;  // std dev = 0.180, 89.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=86 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.1239939220433455;  // std dev = 0.132, 224.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048768;  // std dev = 5.37e-08, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.324815601766179;  // std dev = 1.932, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7283987189756183;  // std dev = 0.208, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.7262261227607603;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.1274168537093634;  // std dev = 1.03e-07, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | | else return -0.09966563243573838;  // std dev = 0.170, 25.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=1 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.03924981295730282;  // std dev = 1.291, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   | | | else return -0.08856244823784967;  // std dev = 1.186, 40.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=2 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.5194734122109544;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.07198846173883439;  // std dev = 4.847, 170.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.5737165009407975;  // std dev = 0.372, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( follows(E, A) )
%   | | then return 0.5531613950573959;  // std dev = 2.98e-08, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.3379383362833279;  // std dev = 0.652, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.594468549889669;  // std dev = 0.190, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.560368607210823;  // std dev = 0.011, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5200465973972698;  // std dev = 1.223, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return -0.11648424011295475;  // std dev = 0.078, 226.000 (wgt'ed) examples reached here.  /* #neg=226 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07393612352487226;  // std dev = 3.636, 101.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=25 */
%   | | | else return 0.12777598742661872;  // std dev = 3.006, 46.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.41229342901411603;  // std dev = 1.021, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | | else return 0.29349532627367875;  // std dev = 1.660, 21.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=18 */
%   | | else return 0.663362997109731;  // std dev = 0.315, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.4790544665378399;  // std dev = 0.070, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1917067931475934;  // std dev = 0.903, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.6355433134023443;  // std dev = 0.983, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.7282270152180812;  // std dev = 0.207, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(J, A) )
%   | then return -0.10445047683899447;  // std dev = 0.004, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   | else return -0.1567785982526769;  // std dev = 0.029, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.32888938294021264;  // std dev = 0.078, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.12619240564468936;  // std dev = 1.248, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.39371299561650874;  // std dev = 0.092, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.21858656922982148;  // std dev = 1.012, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.33130068017001013;  // std dev = 0.039, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.46519424905686535;  // std dev = 0.576, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.08900960656973814;  // std dev = 1.569, 251.000 (wgt'ed) examples reached here.  /* #neg=246 #pos=5 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.055477543674500154;  // std dev = 0.876, 31.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=2 */
%   | | | else return 0.06172437399082274;  // std dev = 2.133, 36.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.20092396452626993;  // std dev = 1.375, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | | else return 0.25583328221323454;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.2841205327127065;  // std dev = 0.045, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( tweets(A, G) )
%   | | then return -0.06122852437648488;  // std dev = 0.109, 157.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=14 */
%   | | else return -0.06317075591667169;  // std dev = 0.113, 21.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.280367981166663;  // std dev = 0.089, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.35704882160747303;  // std dev = 1.114, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.5872457817429498;  // std dev = 0.229, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.11910073961660242;  // std dev = 0.031, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, D), tweets(E, D) )
%   | | | then return 0.17692775817375858;  // std dev = 0.979, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.05825909999631965;  // std dev = 0.919, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.21521300186664807;  // std dev = 0.076, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | else return 0.31107274971546295;  // std dev = 0.340, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G) )
%   | | then return 0.24453872202828367;  // std dev = 0.072, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.0037709799000838853;  // std dev = 0.600, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then return -0.0549756671323555;  // std dev = 0.102, 235.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=17 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return -0.006603644573411644;  // std dev = 1.555, 70.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=15 */
%   | | | else return 0.0526299008433953;  // std dev = 2.131, 69.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=25 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.13280001248050347;  // std dev = 1.688, 52.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=49 */
%   | | | else return 0.18075449551139844;  // std dev = 0.027, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.17511405653442247;  // std dev = 0.017, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return 0.3958865360248918;  // std dev = 0.167, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(H, G), follows(H, A) )
%   | | then return -0.07380218363599035;  // std dev = 0.036, 148.000 (wgt'ed) examples reached here.  /* #neg=146 #pos=2 */
%   | | else return -0.014948376388962056;  // std dev = 0.166, 113.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=21 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.18924237190430465;  // std dev = 0.034, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.011850556997345144;  // std dev = 1.842, 92.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=25 */
%   | | | else return 0.06797753013206403;  // std dev = 1.788, 40.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.17181202003359555;  // std dev = 0.080, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.02754731533986029;  // std dev = 1.214, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return 0.1621684048511055;  // std dev = 5.27e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.20646484257690076;  // std dev = 0.103, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.19860093929610234;  // std dev = 0.198, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else return -0.07464110390052785;  // std dev = 0.045, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.2840963808180935;  // std dev = 1.001, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.4131650702691502;  // std dev = 0.192, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.1352405725260598;  // std dev = 0.041, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.13309407330779877;  // std dev = 0.161, 108.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=104 */
%   | else return -0.062231485881290606;  // std dev = 0.059, 225.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.13266721171185106;  // std dev = 1.405, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | | | else return -0.09188701458351513;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( follows(A, H) )
%   | | | then return -0.08690097335072657;  // std dev = 0.891, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return -0.021889393180662374;  // std dev = 0.645, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.17692619565724788;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.01593266848980287;  // std dev = 1.212, 31.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=12 */
%   | | | else return -6.65055748606807E-4;  // std dev = 1.298, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.437', 'seconds']
Refined model CLL: -0.103142


******************************************
Best model found
******************************************
Results 

CLL : -0.102342 

AUC ROC : 0.993129 

AUC PR : 0.371598 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 29.961 

Total Inference Time : 15.068540334701538 

Total revision time: 58.23233918571472
Best scored revision CLL: -0.103142


Results 

CLL : -0.102342 

AUC ROC : 0.993129 

AUC PR : 0.371598 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 58.2500658454895 

Total Inference Time : 15.068540334701538 

Starting experiments for fasttext using softcosine 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.345
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8298470483070582;  // std dev = 1.707, 106.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048816;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | | else return -0.08302753548872306;  // std dev = 0.235, 34.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return 0.15814893509951236;  // std dev = 0.458, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7030405607008858;  // std dev = 1.407, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0327295850023457;  // std dev = 0.269, 197.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09755875282327686;  // std dev = 0.983, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7604969749842877;  // std dev = 0.089, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.13900525556395074;  // std dev = 3.192, 56.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.56626339199347;  // std dev = 1.079, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.7316249421323247;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8218445543471594;  // std dev = 0.080, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.39279073598972386;  // std dev = 0.935, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5663838642883444;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.29365659156107166;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04307893688744663;  // std dev = 3.686, 217.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=21 */
%   | | | else return 0.04008753187565386;  // std dev = 2.775, 60.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5113055194529506;  // std dev = 2.214, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11730228610355647;  // std dev = 0.002, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | | else return -0.12621520985928206;  // std dev = 0.000907, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15799132363477603;  // std dev = 0.167, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.32782309367404433;  // std dev = 0.525, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | else return 0.435076365719253;  // std dev = 0.112, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.33643596891493877;  // std dev = 0.125, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5166886485367128;  // std dev = 1.659, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | | | else return -0.08769480634223735;  // std dev = 2.333, 262.000 (wgt'ed) examples reached here.  /* #neg=253 #pos=9 */
%   | | else return -0.10517829661053611;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.026585453600147583;  // std dev = 3.383, 277.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.28277583746082074;  // std dev = 0.116, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5518476394596433;  // std dev = 0.711, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1172068328844114;  // std dev = 0.095, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.11606333037516897;  // std dev = 0.179, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2770134619333984;  // std dev = 1.673, 109.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else return -0.07623420155511401;  // std dev = 2.022, 237.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.017996382475287013;  // std dev = 0.759, 25.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16995117881372962;  // std dev = 1.408, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return -0.1259962156957474;  // std dev = 0.837, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.047715385235050395;  // std dev = 0.159, 209.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.005451144955887331;  // std dev = 1.422, 65.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=13 */
%   | | | else return 0.06138619712917843;  // std dev = 1.683, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17338880405473958;  // std dev = 0.121, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.27492544889857395;  // std dev = 1.133, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09034597110086853;  // std dev = 0.043, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4543620453912915;  // std dev = 0.559, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1125797504079777;  // std dev = 0.133, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14078371016296887;  // std dev = 2.288, 99.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=94 */
%   | | else return 0.008668570210318477;  // std dev = 1.104, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08470888650369587;  // std dev = 0.223, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08017218417262775;  // std dev = 1.05e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.03391064716896578;  // std dev = 0.488, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.03276729589625606;  // std dev = 0.992, 34.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.23717923571739008;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04549615528767263;  // std dev = 1.335, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.829', 'seconds']
Parameter learned model CLL:-0.110363 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.707, 3, 103], 'true,false,true': [0.0, 161, 0], 'true,false,false': [0.235, 32, 2], 'false,true,true,true': [0.961, 1, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [2.11e-08, 26, 0], 'false,false': [0.458, 21, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.407, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.269, 175, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.983, 28, 1], 'false,false,false,true': [0.089, 0, 4], 'false,false,false,false': [3.192, 39, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.079, 1, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.08, 0, 2], 'true,false,false': [0.935, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.98e-08, 0, 9], 'false,false,true,false': [1.477, 3, 8], 'false,false,false,true': [3.686, 196, 21], 'false,false,false,false': [2.775, 49, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.214, 2, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.002, 158, 0], 'false,true,false,false': [0.000907, 34, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.167, 43, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.525, 0, 73], 'true,false': [0.112, 0, 4], 'false,true,true': [0.125, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.659, 3, 23], 'false,false,true,false': [2.333, 253, 9], 'false,false,false': [0.0, 19, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.383, 186, 91], 'false,true': [0.116, 0, 13], 'false,false,true': [0.711, 0, 22], 'false,false,false,true': [0.095, 22, 0], 'false,false,false,false': [0.179, 44, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.673, 2, 107], 'true,false': [2.022, 226, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.759, 17, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.408, 2, 80], 'true,false,true': [0.837, 1, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.159, 187, 22], 'false,false,false,true': [1.422, 52, 13], 'false,false,false,false': [1.683, 22, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.121, 1, 77], 'false,true,true,true': [1.133, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.043, 197, 0], 'false,false,true': [0.559, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.133, 35, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.288, 5, 94], 'true,true,false': [1.104, 2, 9], 'true,false,true': [0.223, 183, 0], 'true,false,false,true': [1.05e-08, 16, 0], 'true,false,false,false': [0.488, 14, 2], 'false,true': [0.992, 22, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.335, 18, 8]}]
{'': [0.22714981070849338, 0.21172022684310035], 'true': [0.027500889996442155, 0.010151216305062292], 'false': [0.21301775147928945, 0.21000000000000008], 'false,true': [0.07100591715976314, 1.708035422500241e-17], 'false,true,true': [0.07100591715976314, nan], 'true,false': [-1.5170749404815803e-16, 0.05536332179930797]}
{'': [0.023563486162642682, 0.10254145796917277], 'false': [0.07254205354274752, 0.15859391330700393], 'false,false': [0.03329369797859686, 0.19397383868805507], 'false,false,false': [0.0019912315344613463, 0.18193675156896577], 'false,true': [nan, 0.07254205354274752], 'false,false,true': [nan, 0.03329369797859686]}
{'': [0.029769397719781567, 0.09359260131585509], 'false': [nan, 0.09359260131585508], 'false,false': [0.12750000000000014, 0.07802140405226002], 'false,false,true': [9.868649107779169e-17, 0.1983471074380165], 'false,false,false': [0.0626117826882521, 0.1283344002913588], 'true': [0.016538768204478416, 0.16327810645104826], 'true,false': [0.0032375067340703056, 0.1746980094672407], 'true,true': [0.016391924681386772, 0.0]}
{'': [0.03828256122065432, 0.0003571637622515534], 'false': [1.1607934537976225e-05, 0.0006503562226731298], 'false,false': [nan, 0.0006503562226731298], 'false,false,false': [nan, 0.0006503562226731298], 'false,true': [nan, 1.1607934537976225e-05], 'false,true,false': [3.3101703606001386e-08, 2.4190882094873365e-08]}
{'': [0.004308551187480329, 0.05924193225898107], 'false': [0.0009246126576227679, 0.05513098789101542], 'false,false': [0.05844685873499303, -7.304098846218135e-18], 'false,false,true': [0.10584720424944198, 0.020766398716542414], 'true': [0.00377505397382778, 0.003139183147009672], 'false,true': [0.0009246126576227679, nan]}
{'': [0.04130708200914262, 0.08454700959552991], 'false': [0.0010429475434728173, 0.0899461953428585], 'false,false': [0.022959704154513094, 0.0006214305320613751], 'true': [nan, 0.04130708200914249], 'true,false': [nan, 0.04130708200914262], 'false,false,false': [0.00040691045600193843, 0.0007282547040948949]}
{'': [0.04682990664710484, 0.02302671153350535], 'true': [0.025679480621373485, 0.017246779096995752], 'false': [nan, 0.02302671153350535], 'false,false': [nan, 0.02302671153350535], 'false,false,false': [nan, 0.02302671153350535]}
{'': [0.034555550223193385, 0.03436756473535447], 'true': [0.024185654878619234, 0.2335057263553998], 'true,false': [0.23350572635539982, nan], 'false': [nan, 0.034367564735354836], 'false,false': [0.02519503357185461, 0.05154355450785748], 'false,false,false': [0.031098324537143444, 0.09138789791135522]}
{'': [0.01471163366928284, 0.03398820820415388], 'false': [0.02198452631656477, 0.07708588498712395], 'false,false': [0.018409996718484548, 0.0005050060498367125], 'false,true': [0.03889061258294298, 9.212153758629753e-06], 'false,true,true': [0.03889061258294298, nan], 'false,false,false': [nan, 0.0005050060498367125]}
{'': [0.031095476917218354, 0.046009791643648275], 'false': [0.0289201124187953, 0.06731099074592162], 'false,false': [0.0, 0.06853904525267548], 'false,false,false': [nan, 0.06853904525267548], 'true': [0.06024678500766485, 0.0015146759657412943], 'true,true': [0.052879016452855275, 0.11084773281671359], 'true,false': [0.00027154686494582276, 0.007972264806548376], 'true,false,false': [6.938893903907228e-18, 0.014874464710126156]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 9.99
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(E, A) )
%   | | | then return 0.8211118980624753;  // std dev = 1.388, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.8581489350995121;  // std dev = 8.43e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.13276015580957934;  // std dev = 0.095, 220.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.1914822684328457;  // std dev = 0.471, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.6701633118209512;  // std dev = 0.228, 73.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=69 */
%   | else return 0.7313258122527893;  // std dev = 0.148, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), tweets(F, G) )
%   | | | then return 0.4694734122109544;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.7194734122109544;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.05702216229429199;  // std dev = 2.814, 144.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=12 */
%   | | | else return -0.020705537313175534;  // std dev = 1.371, 24.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=3 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.0961423569421638;  // std dev = 0.171, 33.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7479064319661028;  // std dev = 0.098, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.14923681294477312;  // std dev = 3.030, 53.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.534734149709825;  // std dev = 0.199, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6667284759338225;  // std dev = 0.318, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5608096802689867;  // std dev = 0.022, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.441326670901014;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.1019188267612975;  // std dev = 1.458, 139.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=3 */
%   | | | else return 0.0032243884511295924;  // std dev = 2.721, 82.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.04425509336561555;  // std dev = 2.195, 40.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=9 */
%   | | | else return 0.14274279011179428;  // std dev = 2.165, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( tweets(E, F), follows(A, E) )
%   | | | then return 0.42826597534047783;  // std dev = 1.017, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | | else return 0.6234765898476229;  // std dev = 0.249, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.24970230950925618;  // std dev = 0.797, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.4314578498652558;  // std dev = 0.049, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.7192303011897884;  // std dev = 0.233, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.11259369775370486;  // std dev = 0.066, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else return -0.11851924105183606;  // std dev = 0.034, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else return -0.16949066736389698;  // std dev = 0.210, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E) )
%   | | | then return 0.3223572000990891;  // std dev = 0.991, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.25681811626200024;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return 0.1581813374445542;  // std dev = 0.358, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else return 0.4368531402457383;  // std dev = 0.313, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.3213449613197707;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.3402322810641821;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return -0.05486052968273869;  // std dev = 2.522, 208.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=15 */
%   | | | else return 0.08224010298548201;  // std dev = 2.350, 51.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=17 */
%   | | else return -0.09591898574094779;  // std dev = 1.18e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2638269080740627;  // std dev = 0.118, 72.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.5228793342073783;  // std dev = 0.509, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.09671985645317671;  // std dev = 0.046, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | | else return -0.040247068399845605;  // std dev = 0.182, 44.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.27363713463733974;  // std dev = 0.109, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.15734072406231264;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.20756881149482412;  // std dev = 0.753, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.523353788162441;  // std dev = 0.276, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.13107116798386198;  // std dev = 0.037, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.2250146647506611;  // std dev = 0.013, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else if ( follows(A, E), follows(E, C) )
%   | | then return -0.3726446534557004;  // std dev = 1.099, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.22574436010402063;  // std dev = 0.032, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.4168026877922232;  // std dev = 0.114, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.08963098731696978;  // std dev = 0.007, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.21861479619981591;  // std dev = 1.083, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.12538705917561688;  // std dev = 0.024, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.05270588229062521;  // std dev = 0.770, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.027195396141456763;  // std dev = 1.321, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, C) )
%   | then return 0.1857953660205783;  // std dev = 0.012, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | else return 0.21302273582600417;  // std dev = 0.040, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.3767749242551483;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.08028814480052145;  // std dev = 0.046, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | | else if ( follows(A, F), tweets(F, I) )
%   | | | then return 0.0019449329487165224;  // std dev = 1.770, 75.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=19 */
%   | | | else return -0.06253027258402064;  // std dev = 0.495, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.20895040673459783;  // std dev = 0.135, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.020027682144801585;  // std dev = 1.112, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
%   | | | else return -0.03777580976782593;  // std dev = 1.537, 34.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.13712323554197373;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.16843173543682993;  // std dev = 0.136, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.057494053996937716;  // std dev = 0.342, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.2282250052371492;  // std dev = 0.260, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.25562413074885415;  // std dev = 0.113, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.07738910129152295;  // std dev = 0.008, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.22498666958871047;  // std dev = 0.931, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.4246907391704191;  // std dev = 0.277, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.13399681642748176;  // std dev = 0.028, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.12862690788942244;  // std dev = 0.111, 82.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=81 */
%   | | else return 0.2676672608905956;  // std dev = 0.078, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.0703143545684484;  // std dev = 0.036, 215.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.11684026774342893;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.013397049376314103;  // std dev = 0.668, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
%   | | | else return 0.04797364580103499;  // std dev = 0.636, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.23783022649081564;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.034397621510136624;  // std dev = 0.419, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return -0.0035273885571576796;  // std dev = 1.051, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.996', 'seconds']
Refined model CLL: -0.109106


******************************************
Best model found
******************************************
Results 

CLL : -0.107053 

AUC ROC : 0.993406 

AUC PR : 0.312821 

Precision : 0.339912 

Recall : 0.99359 

F1 : 0.506536 

Total Learning Time : 9.99 

Total Inference Time : 14.642319917678833 

Total revision time: 35.29897089958191
Best scored revision CLL: -0.109106


Results 

CLL : -0.107053 

AUC ROC : 0.993406 

AUC PR : 0.312821 

Precision : 0.339912 

Recall : 0.99359 

F1 : 0.506536 

Total Learning Time : 35.33042331695557 

Total Inference Time : 14.642319917678833 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.731
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 166.000 (wgt'ed) examples reached here.  /* #neg=166 */
%   | | else return -0.07042249347191629;  // std dev = 0.258, 56.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 5.37e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0.23519811542738034;  // std dev = 0.485, 61.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.692430313422915;  // std dev = 1.720, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04388320626757329;  // std dev = 0.253, 194.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07359740602981665;  // std dev = 1.802, 62.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.639330048490612;  // std dev = 0.974, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.1067819684525544;  // std dev = 5.014, 145.000 (wgt'ed) examples reached here.  /* #neg=105 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5287059233966781;  // std dev = 1.790, 71.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7353508123356717;  // std dev = 0.221, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6186338582292347;  // std dev = 0.159, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.45208899657695795;  // std dev = 0.973, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5666727292787702;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.014394530319166439;  // std dev = 4.607, 259.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=34 */
%   | | | else return 0.024577901036161302;  // std dev = 4.175, 120.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5140188541501852;  // std dev = 3.441, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1204205266397452;  // std dev = 0.035, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | | | else return -0.12461469165926913;  // std dev = 0.012, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16182254130830973;  // std dev = 0.289, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2691158449199618;  // std dev = 2.219, 83.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=77 */
%   | else return 0.4821632005774069;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3136079959229744;  // std dev = 0.048, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5527737901010206;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6161875119891681;  // std dev = 1.053, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.1018278188629268;  // std dev = 1.815, 254.000 (wgt'ed) examples reached here.  /* #neg=249 #pos=5 */
%   | | else return -0.007298978616509561;  // std dev = 0.290, 83.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.031732453908951616;  // std dev = 3.284, 243.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26107162703371484;  // std dev = 0.201, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5110965455089168;  // std dev = 1.541, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12309253531726319;  // std dev = 0.199, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
%   | | | else return -0.12391307165051463;  // std dev = 0.175, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27596191239583356;  // std dev = 2.195, 125.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=121 */
%   | else return -0.08887884439993117;  // std dev = 1.708, 267.000 (wgt'ed) examples reached here.  /* #neg=260 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.038689903409895775;  // std dev = 2.273, 86.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16794722225997957;  // std dev = 1.668, 86.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.27255926616948384;  // std dev = 0.030, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0450937042822063;  // std dev = 0.144, 188.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.005462526751683341;  // std dev = 2.081, 129.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=28 */
%   | | | else return 0.08788702664251821;  // std dev = 2.367, 64.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.19239980711348345;  // std dev = 0.059, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.26268643745769876;  // std dev = 1.389, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0924090721524223;  // std dev = 0.099, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.37360249055506006;  // std dev = 1.213, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11791303836489854;  // std dev = 0.321, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1809110332287286;  // std dev = 1.262, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.16580701926572533;  // std dev = 0.379, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08225248046780541;  // std dev = 0.011, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0941550335070678;  // std dev = 0.026, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.0265258560183783;  // std dev = 0.978, 31.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return -8.713213685949914E-4;  // std dev = 1.630, 83.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.17600645685068073;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.026928073345407044;  // std dev = 1.968, 66.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.872', 'seconds']
Parameter learned model CLL:-0.111516 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 166, 0], 'true,false,false': [0.258, 52, 4], 'false,true,true,true': [0.977, 1, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.37e-08, 52, 0], 'false,false': [0.485, 38, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.72, 3, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.253, 175, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.802, 58, 4], 'false,false,false,true': [0.974, 1, 8], 'false,false,false,false': [5.014, 105, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.79, 4, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.221, 0, 3], 'true,false,false': [0.159, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.973, 1, 6], 'false,false,true,false': [4.21e-08, 0, 15], 'false,false,false,true': [4.607, 225, 34], 'false,false,false,false': [4.175, 97, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [3.441, 8, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.035, 176, 0], 'false,true,false,false': [0.012, 36, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.289, 105, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.219, 6, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.048, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.053, 1, 39], 'false,false,true,false': [1.815, 249, 5], 'false,false,false': [0.29, 70, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.284, 161, 82], 'false,true': [0.201, 0, 22], 'false,false,true': [1.541, 1, 52], 'false,false,false,true': [0.199, 79, 0], 'false,false,false,false': [0.175, 58, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.195, 4, 121], 'true,false': [1.708, 260, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.273, 58, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.668, 3, 83], 'true,false,true': [0.03, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.144, 169, 19], 'false,false,false,true': [2.081, 101, 28], 'false,false,false,false': [2.367, 40, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.059, 0, 78], 'false,true,true,true': [1.389, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.099, 240, 0], 'false,false,true': [1.213, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.321, 110, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.262, 1, 85], 'true,true,false': [0.379, 0, 19], 'true,false,true': [0.011, 151, 0], 'true,false,false,true': [0.026, 38, 0], 'true,false,false,false': [0.978, 27, 4], 'false,true': [1.63, 58, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.968, 45, 21]}]
{'': [0.2208506841165995, 0.22607525490399116], 'false': [0.21778435239973812, 0.23488309594195214], 'true': [0.01851192595229848, 0.01769336904472029], 'false,true': [0.03698224852071082, 5.551115123125783e-17], 'false,true,true': [0.04338842975206614, 0.0], 'true,false': [-1.6318940843887844e-16, 0.06632653061224474]}
{'': [0.033606406380558826, 0.11624067432850077], 'false': [0.06412945332720023, 0.15610751586433677], 'false,false': [0.052349157920008826, 0.18504026778349003], 'false,false,false': [0.10530538630063685, 0.17341486758777036], 'false,true': [nan, 0.06412945332720023], 'false,false,true': [nan, 0.052349157920008826]}
{'': [0.042055265748903024, 0.11390573686000313], 'false': [nan, 0.11390573686000267], 'false,false': [0.04590577613619566, 0.10230974209393523], 'false,false,false': [0.08193649924714812, 0.14524404333564336], 'false,false,true': [0.13532341110994325, 1.1842378929335003e-16], 'true': [0.04511962300316026, 0.00943955677400098], 'true,true': [0.04511962300316026, nan], 'true,false': [0.016250393549254987, 0.003170170971675823]}
{'': [0.07217799960162617, 0.0006363471434633586], 'false': [8.984952594815538e-06, 0.0007957662413917837], 'false,false': [nan, 0.0007957662413917837], 'false,false,false': [nan, 0.0007957662413917837], 'false,true': [nan, 8.984952594815538e-06], 'false,true,false': [6.974160900197706e-06, 4.2116239325484806e-06]}
{'': [0.059144816245689444, 0.07898465783071683], 'false': [0.0027049862674079946, 0.07749355240416655], 'false,false': [0.07558213799882403, 0.08425631587709145], 'false,false,true': [0.027730807807694456, 0.01297546553654733], 'true': [0.059317057062839434, 0.0], 'false,true': [0.00011641286150143593, 0.0]}
{'': [0.04436939428319, 0.08830910377084605], 'false': [0.0018278461436391376, 0.09385422257162011], 'false,false': [0.04480784679740082, 0.0005139701047575147], 'true': [nan, 0.04436939428319016], 'true,false': [nan, 0.04436939428319], 'false,false,false': [0.0005034872722498704, 0.0005278602039077017]}
{'': [0.04864388554580801, 0.06009409086338558], 'false': [nan, 0.060094090863385484], 'false,false': [nan, 0.06009409086338558], 'false,false,false': [nan, 0.06009409086338558], 'true': [0.03854431175568557, 0.010926749338483758]}
{'': [0.03188564986249441, 0.038537271543553596], 'false': [nan, 0.03853727154355338], 'false,false': [0.02076342376256527, 0.053392125323679714], 'false,false,false': [0.03356479764236131, 0.0875321062754428], 'true': [0.03236815277856428, 0.00044306473444979955], 'true,false': [0.00044306473444979955, nan]}
{'': [0.0034863394924681866, 0.03556258976985219], 'false': [0.02210708470095326, 0.058217481909222935], 'false,false': [0.03591083422763843, 0.0009351677841414623], 'false,true': [0.0494349056561299, 4.0435599085965794e-05], 'false,true,true': [0.0494349056561299, nan], 'false,false,false': [nan, 0.0009351677841414623]}
{'': [0.022767258085505216, 0.04380409482514489], 'false': [0.03202001989270779, 0.057618243737045105], 'false,false': [0.0, 0.05871059334570603], 'false,false,false': [nan, 0.058710593345706004], 'true': [0.01656799544877077, 0.004778196567809609], 'true,true': [0.01851435051881496, 0.007571327416161616], 'true,false': [8.42650921147535e-07, 0.014998545420307742], 'true,false,false': [1.7985461385236635e-05, 0.0308429600809858]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 38.406
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.62e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048804;  // std dev = 0.000, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | | else if ( tweets(A, E), follows(A, F) )
%   | | | then return 0.04862512557570276;  // std dev = 1.799, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | | else return -0.1418510649004877;  // std dev = 2.98e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048766;  // std dev = 5.37e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.20814893509951235;  // std dev = 3.017, 40.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=14 */
%   | | | else return 0.16249676118646889;  // std dev = 2.207, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.722594652627521;  // std dev = 0.185, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.6860782047295091;  // std dev = 1.005, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.3861400788776213;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.1279718758868765;  // std dev = 0.104, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7649856430680623;  // std dev = 0.324, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.14728413148070818;  // std dev = 0.209, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.15619471171805724;  // std dev = 1.380, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.2260838052248979;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D) )
%   | | then return 0.5405515416460327;  // std dev = 0.120, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0.6783254513430323;  // std dev = 0.152, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( tweets(A, E) )
%   | | then return 0.5441014525016589;  // std dev = 2.58e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.2915197328297729;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5632662185113358;  // std dev = 0.039, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5826457036307157;  // std dev = 0.191, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.11429886151997702;  // std dev = 0.092, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.05994900349749739;  // std dev = 3.247, 99.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=25 */
%   | | | else return 0.14535513296679378;  // std dev = 2.802, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.41904482113642605;  // std dev = 0.019, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | | else return 0.3754743823620873;  // std dev = 1.389, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | | else return 0.5429209376487264;  // std dev = 0.158, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.45070731062748715;  // std dev = 0.174, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.18346328291404576;  // std dev = 0.781, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.5135109107894167;  // std dev = 0.911, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.7134700494230346;  // std dev = 0.217, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(J, A) )
%   | then return -0.10209899644148239;  // std dev = 0.004, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else return -0.14874718124507194;  // std dev = 0.349, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.3111374816415943;  // std dev = 0.979, 66.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=65 */
%   | | | else return -8.044759240299534E-4;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.35449844044040507;  // std dev = 0.064, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.04632334793098536;  // std dev = 0.832, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.32664402989354563;  // std dev = 0.037, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.34849957195232967;  // std dev = 0.168, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09353209722140648;  // std dev = 0.064, 205.000 (wgt'ed) examples reached here.  /* #neg=205 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.032526378150361204;  // std dev = 2.484, 95.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=25 */
%   | | | else return 0.09128473981303868;  // std dev = 2.267, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.25962648025906665;  // std dev = 0.014, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.229078622536221;  // std dev = 0.994, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | else return 0.10793675711471783;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then return -0.05269169992802212;  // std dev = 0.100, 150.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=14 */
%   | | else return -0.07025283165750258;  // std dev = 0.075, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.27210793145808326;  // std dev = 0.070, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.35181211007907043;  // std dev = 0.312, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.5042944433437191;  // std dev = 0.472, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return -0.1221269931553552;  // std dev = 0.036, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.22451808723615482;  // std dev = 0.026, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( follows(A, E), follows(E, D) )
%   | | then return -0.0807311854516097;  // std dev = 0.017, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | | else return -0.06125495721331915;  // std dev = 0.082, 43.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=2 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(A, G) )
%   | | | then return 0.0617339862994449;  // std dev = 0.806, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.3411195918177299;  // std dev = 0.269, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else return -0.10905020814820439;  // std dev = 0.018, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.38490294098337463;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1394469940352652;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return 0.047303012324453;  // std dev = 0.324, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.18155489690043025;  // std dev = 0.106, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | else return 0.10857042314436414;  // std dev = 0.241, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0.33633330993411853;  // std dev = 0.092, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G) )
%   | | then return 0.20318135567665016;  // std dev = 0.038, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.125530715609071;  // std dev = 0.780, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.1741274302463162;  // std dev = 0.986, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.07477769628628636;  // std dev = 0.039, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.00791747942778187;  // std dev = 1.633, 103.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=25 */
%   | | | else return 0.05074644575257625;  // std dev = 1.644, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.15309667127820825;  // std dev = 0.010, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.08680431117796272;  // std dev = 0.987, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( tweets(A, G), tweets(D, H) )
%   | | | then return -0.34676871675559573;  // std dev = 0.998, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.16033559957739368;  // std dev = 0.052, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.1783032807328773;  // std dev = 0.035, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(I, A) )
%   | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | then return 0.17711540505644466;  // std dev = 0.033, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return -0.0697601147891868;  // std dev = 0.036, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.3062322514462003;  // std dev = 0.078, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.11060290691810513;  // std dev = 0.034, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.13872534066948933;  // std dev = 0.133, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return -0.21860902517628833;  // std dev = 1.369, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.16858807616127625;  // std dev = 0.088, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.05909905057585554;  // std dev = 0.043, 206.000 (wgt'ed) examples reached here.  /* #neg=202 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H) )
%   | | then return 0.023426298581620854;  // std dev = 0.124, 52.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=21 */
%   | | else return -0.010499337971643891;  // std dev = 0.160, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.184716554098317;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.00925859991559476;  // std dev = 1.035, 44.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=12 */
%   | | | else return -0.05520475391417545;  // std dev = 1.491, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.890', 'seconds']
Refined model CLL: -0.100665


******************************************
Best model found
******************************************
Results 

CLL : -0.097842 

AUC ROC : 0.993718 

AUC PR : 0.39649 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 38.406 

Total Inference Time : 15.398054361343384 

Total revision time: 66.28259936523438
Best scored revision CLL: -0.100665


Results 

CLL : -0.097842 

AUC ROC : 0.993718 

AUC PR : 0.39649 

Precision : 0.340541 

Recall : 1.0 

F1 : 0.508065 

Total Learning Time : 66.31405178260803 

Total Inference Time : 15.398054361343384 

Starting experiments for fasttext using wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.414
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8207657575294176;  // std dev = 1.962, 107.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004884;  // std dev = 0.000, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | | else return -0.07733493586822972;  // std dev = 0.246, 31.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004877;  // std dev = 2.36e-08, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | else return 0.20430278125335852;  // std dev = 0.476, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7048175381353656;  // std dev = 1.407, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.035996463698720976;  // std dev = 0.263, 208.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09821252969219964;  // std dev = 0.983, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7474590973303333;  // std dev = 0.097, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.10849133385422417;  // std dev = 3.223, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5588286188977243;  // std dev = 1.245, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.7340425583532619;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8209027321194868;  // std dev = 0.081, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5863835033812148;  // std dev = 0.131, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.568176876465782;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.568176876465782;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.036365331637216294;  // std dev = 3.655, 202.000 (wgt'ed) examples reached here.  /* #neg=181 #pos=21 */
%   | | | else return 0.020002294088735304;  // std dev = 2.829, 64.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.46982939190386264;  // std dev = 3.110, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11817236422374278;  // std dev = 0.040, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | | else return -0.12370848153942746;  // std dev = 0.000245, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15730640074244906;  // std dev = 0.156, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.27778808749383227;  // std dev = 2.126, 78.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=73 */
%   | else return -0.019036760135181487;  // std dev = 1.346, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31786744084503715;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6420805565666218;  // std dev = 0.183, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08460130312521141;  // std dev = 2.329, 261.000 (wgt'ed) examples reached here.  /* #neg=252 #pos=9 */
%   | | else return -0.10620690728580322;  // std dev = 2.95e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03637010317832736;  // std dev = 3.387, 271.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.270306961915592;  // std dev = 0.213, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5459559299518463;  // std dev = 0.735, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11314688859164561;  // std dev = 0.111, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return -0.10997001150018258;  // std dev = 0.120, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2696129192212991;  // std dev = 2.125, 111.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=107 */
%   | else return -0.07800484033219086;  // std dev = 2.057, 251.000 (wgt'ed) examples reached here.  /* #neg=240 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.024234935258875018;  // std dev = 0.652, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19303157345040894;  // std dev = 0.994, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.27263362856141665;  // std dev = 0.103, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05066058982373699;  // std dev = 0.150, 227.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.018758390253826272;  // std dev = 1.445, 72.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=13 */
%   | | | else return 0.07829203350980075;  // std dev = 1.675, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1765918550505994;  // std dev = 0.159, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2848218440315994;  // std dev = 0.715, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09064412139642342;  // std dev = 0.039, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.447157552631734;  // std dev = 0.612, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1104238604517761;  // std dev = 0.175, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17584078795952948;  // std dev = 1.566, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.1368015246893415;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08407612013049871;  // std dev = 0.022, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0808072123700819;  // std dev = 5.27e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.004234993539894158;  // std dev = 0.499, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.032158983383694995;  // std dev = 0.978, 34.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.28663716531953953;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.037695155732622825;  // std dev = 1.361, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.830', 'seconds']
Parameter learned model CLL:-0.110536 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.962, 4, 103], 'true,false,true': [0.0, 201, 0], 'true,false,false': [0.246, 29, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [2.36e-08, 27, 0], 'false,false': [0.476, 17, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.407, 2, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.263, 186, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.983, 28, 1], 'false,false,false,true': [0.097, 0, 4], 'false,false,false,false': [3.223, 45, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.245, 2, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.081, 0, 2], 'true,false,false': [0.131, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.11e-08, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.655, 181, 21], 'false,false,false,false': [2.829, 53, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [3.11, 7, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.04, 167, 0], 'false,true,false,false': [0.000245, 31, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.156, 34, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.126, 5, 73], 'true,false': [1.346, 3, 4], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.183, 0, 23], 'false,false,true,false': [2.329, 252, 9], 'false,false,false': [2.95e-09, 20, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.387, 180, 91], 'false,true': [0.213, 0, 13], 'false,false,true': [0.735, 0, 22], 'false,false,false,true': [0.111, 38, 0], 'false,false,false,false': [0.12, 34, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.125, 4, 107], 'true,false': [2.057, 240, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.652, 13, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.994, 1, 80], 'true,false,true': [0.103, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.15, 205, 22], 'false,false,false,true': [1.445, 59, 13], 'false,false,false,false': [1.675, 20, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.159, 2, 77], 'false,true,true,true': [0.715, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.039, 209, 0], 'false,false,true': [0.612, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.175, 50, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.566, 2, 94], 'true,true,false': [0.012, 0, 9], 'true,false,true': [0.022, 172, 0], 'true,false,false,true': [5.27e-09, 16, 0], 'true,false,false,false': [0.499, 8, 2], 'false,true': [0.978, 22, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.361, 19, 8]}]
{'': [0.21379904456104815, 0.21869822485207113], 'false': [0.21301775147928945, 0.22633136094674564], 'true': [0.03598567560485849, 0.008546373365041451], 'false,true': [-1.4802973661668753e-16, 2.05596856412066e-17], 'true,false': [-2.386150978298844e-16, 0.060353798126951116], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.02355389771253505, 0.09643021780833222], 'false': [0.06895433857111631, 0.14853751301444673], 'false,false': [0.03329369797859687, 0.18078727293913874], 'false,false,false': [0.0023495957148029767, 0.16755515067675675], 'false,true': [nan, 0.06895433857111631], 'false,false,true': [nan, 0.03329369797859687]}
{'': [0.02198710809304721, 0.09574540661664598], 'false': [nan, 0.09574540661664606], 'false,false': [5.224578939412501e-17, 0.08088434467986771], 'false,false,false': [0.06612428810780345, 0.12505792938410618], 'true': [0.021652273579908485, 0.016195183135377416], 'true,true': [0.02153245268980333, 0.0], 'true,false': [0.0032836322492905134, 0.004317869029089483], 'false,false,true': [4.9343245538895844e-17, 0.0]}
{'': [0.07270063134769893, 0.00029816640394595914], 'false': [1.2247348166502945e-05, 0.0007134484303795479], 'false,false': [nan, 0.0007134484303795479], 'false,false,false': [nan, 0.0007134484303795479], 'false,true': [nan, 1.224734816649173e-05], 'false,true,false': [9.721929771237173e-06, 1.943912407386869e-09]}
{'': [0.08114856839748534, 0.058259986542690524], 'true': [0.05795675483992259, 0.2587223486560204], 'false': [-2.6122894697062506e-17, 0.0550707176065192], 'false,false': [0.05852306449457694, 8.326672684688674e-18], 'false,false,true': [0.0014550870073490971, 0.020786092368678497], 'false,true': [-2.6122894697062506e-17, nan]}
{'': [0.04234338624624699, 0.07938519539128518], 'false': [0.00349931126901011, 0.08356165325988357], 'false,false': [0.024576680384986404, 0.00037519347170546224], 'true': [nan, 0.04234338624624652], 'true,false': [nan, 0.04234338624624699], 'false,false,false': [0.0003247101954786508, 0.00042628933431597486]}
{'': [0.04985400416522382, 0.020238034862065154], 'true': [0.04068155921942778, 0.01685777571389752], 'false': [nan, 0.020238034862065154], 'false,false': [nan, 0.020238034862065154], 'false,false,false': [nan, 0.020238034862065154]}
{'': [0.012185510022349152, 0.031746758470294324], 'false': [nan, 0.031746758470293894], 'false,false': [0.022365327890706586, 0.050359509093377164], 'false,false,false': [0.028988381218320466, 0.09670447984918974], 'true': [0.012202779464653864, 0.005302296869134734], 'true,false': [0.005302296869134734, nan]}
{'': [0.02543012873111449, 0.029369265744580576], 'false': [0.018362709376568732, 0.06492151400735648], 'false,false': [0.022062007874924086, 0.000609424485286949], 'false,true': [0.015991670170780903, 7.108106824065763e-06], 'false,true,true': [0.015991670170780903, nan], 'false,false,false': [nan, 0.000609424485286949]}
{'': [0.023572594650541075, 0.04630992450903669], 'false': [0.028139827325688226, 0.06825947423014582], 'false,false': [0.0, 0.06857431275758025], 'false,false,false': [nan, 0.06857431275758025], 'true': [0.023489056946765254, 0.0015626508066987706], 'true,true': [0.02555909305078465, 1.524182426109682e-05], 'true,false': [2.7486895173767493e-06, 0.01095200207993665], 'true,false,false': [1.734723475976807e-18, 0.024867017902248757]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 15.27
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.8442600462106239;  // std dev = 0.117, 72.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | | else return 0.8581489350995121;  // std dev = 8.43e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | else if ( follows(F, A), follows(G, F) )
%   | | | then return -0.09639651944594235;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.13087620782678508;  // std dev = 0.445, 22.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.6910249401700789;  // std dev = 0.179, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   | else return 0.7209314907277269;  // std dev = 0.007, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7202953682375661;  // std dev = 0.005, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.12544463852839122;  // std dev = 6.32e-08, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
%   | | else return -0.004582365537600227;  // std dev = 0.296, 35.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=5 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return -0.019405750010782423;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | | else return -0.13051686112189348;  // std dev = 1.83e-08, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, M), recursion_accounttype(M, B) )
%   | | | then return 0.7499698003932642;  // std dev = 0.106, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.16354127516053438;  // std dev = 3.095, 50.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.5312861560734087;  // std dev = 1.389, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | | | else return 0.5711071482344258;  // std dev = 0.158, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.24776177072217026;  // std dev = 0.672, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else return 0.5227729969710261;  // std dev = 0.348, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5576087589849198;  // std dev = 0.004, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5882102358852218;  // std dev = 0.256, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11603498569145668;  // std dev = 0.127, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.02963317716734763;  // std dev = 2.231, 36.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=8 */
%   | | | else return 0.10931285894098627;  // std dev = 2.340, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.38573407666014975;  // std dev = 1.379, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.2358913262993063;  // std dev = 2.005, 26.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=21 */
%   | | else if ( tweets(E, G), recursion_accounttype(E, B) )
%   | | | then return 0.43646132309110824;  // std dev = 0.329, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.6295836530739652;  // std dev = 0.276, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.3411875111327645;  // std dev = 0.838, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.6710628257853615;  // std dev = 0.026, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.792396054836967;  // std dev = 0.034, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(J, A) )
%   | then return -0.1051822183284035;  // std dev = 0.010, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | else return -0.18536084081884205;  // std dev = 0.170, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | then return 0.3273527045549385;  // std dev = 0.124, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | else return 0.36805233181791336;  // std dev = 0.067, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then return -0.03469477017784058;  // std dev = 0.884, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.40825380087236063;  // std dev = 0.192, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then if ( follows(I, A), follows(A, I) )
%   | | then return 0.17227906845242666;  // std dev = 0.920, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.3304270223063334;  // std dev = 0.048, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(J, K), recursion_accounttype(K, B) )
%   | | | then return 0.38462031781307765;  // std dev = 1.045, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.07884961661870335;  // std dev = 2.068, 236.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=9 */
%   | | else return -0.0955108388558225;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(D, F), tweets(E, F) )
%   | | | then return 0.2759294748379728;  // std dev = 0.183, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | | else return 0.14867381963192988;  // std dev = 0.956, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.16502672716900416;  // std dev = 1.018, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return -0.05157583547887017;  // std dev = 0.110, 205.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=20 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.28508497722614456;  // std dev = 0.142, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.15417918757246607;  // std dev = 0.317, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.42690463541080953;  // std dev = 0.429, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.5811117621465135;  // std dev = 0.280, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.12686849392787694;  // std dev = 0.031, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(C, D) )
%   | then if ( tweets(A, D) )
%   | | then if ( follows(A, E), follows(E, C) )
%   | | | then return 0.1260139799139319;  // std dev = 1.869, 39.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=35 */
%   | | | else return 0.22927293740248347;  // std dev = 0.034, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.21506745979970052;  // std dev = 0.019, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else return 0.25497379131163367;  // std dev = 0.045, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(F, A) )
%   | then return -0.04700787967949498;  // std dev = 0.115, 237.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=23 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.21528442068096543;  // std dev = 1.117, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.13016454991027765;  // std dev = 0.136, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.017511731593293063;  // std dev = 0.838, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | | | else return 0.07148639645057919;  // std dev = 1.337, 16.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, A) )
%   | then if ( tweets(A, D) )
%   | | then return 0.2030608282474982;  // std dev = 0.087, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else return 0.09447721559545465;  // std dev = 0.262, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( follows(E, A) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return 0.23008188201988694;  // std dev = 0.071, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.42980708398456;  // std dev = 0.244, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.18061752803431677;  // std dev = 0.101, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, G), follows(G, A) )
%   | then return -0.04897328792285815;  // std dev = 0.116, 215.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=20 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.18445024830734535;  // std dev = 0.056, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.09322672407152585;  // std dev = 0.465, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return 0.003567102589079202;  // std dev = 1.892, 67.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.10049868525444332;  // std dev = 1.624, 40.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=37 */
%   | | | else return 0.17384395679066095;  // std dev = 0.047, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.16338493238194432;  // std dev = 0.054, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.22600833753044589;  // std dev = 0.106, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, A) )
%   | | | then return 0.2614821148222899;  // std dev = 0.709, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.08330864585069774;  // std dev = 0.938, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else return -0.07644401707216346;  // std dev = 0.095, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.3818867794720289;  // std dev = 0.089, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12025407123066245;  // std dev = 0.027, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.11692549067106109;  // std dev = 1.655, 74.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=71 */
%   | | | else return 0.22866685423268626;  // std dev = 0.292, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.052815780640584585;  // std dev = 0.301, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.06718449963858159;  // std dev = 0.040, 202.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.10629590526295285;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.009636249947743548;  // std dev = 0.155, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.19587400576377423;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.02186133482066941;  // std dev = 0.560, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return -0.01836407562876082;  // std dev = 1.088, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.221', 'seconds']
Refined model CLL: -0.103251


******************************************
Best model found
******************************************
Results 

CLL : -0.104112 

AUC ROC : 0.994654 

AUC PR : 0.366492 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 15.27 

Total Inference Time : 16.2169828414917 

Total revision time: 42.447035535812375
Best scored revision CLL: -0.103251


Results 

CLL : -0.104112 

AUC ROC : 0.994654 

AUC PR : 0.366492 

Precision : 0.337691 

Recall : 0.99359 

F1 : 0.504065 

Total Learning Time : 42.47274516487121 

Total Inference Time : 16.2169828414917 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.624
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.62e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | | else return -0.07733493586822965;  // std dev = 0.246, 62.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 6.14e-08, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | else return 0.2119950889456654;  // std dev = 0.478, 65.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7112834424313296;  // std dev = 1.019, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0400539844643083;  // std dev = 0.255, 188.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06654640615132341;  // std dev = 1.791, 56.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6513708975521254;  // std dev = 0.880, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.11199863941351211;  // std dev = 4.997, 144.000 (wgt'ed) examples reached here.  /* #neg=104 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5407283418179303;  // std dev = 1.458, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7315321296446;  // std dev = 0.228, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6170068201689607;  // std dev = 0.166, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5915616733515564;  // std dev = 0.187, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5573878953827504;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01985870310487051;  // std dev = 4.616, 269.000 (wgt'ed) examples reached here.  /* #neg=235 #pos=34 */
%   | | | else return 0.033763593681325754;  // std dev = 4.169, 112.000 (wgt'ed) examples reached here.  /* #neg=89 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5190983660903921;  // std dev = 3.154, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12115452806408963;  // std dev = 0.064, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | | | else return -0.12535779345045284;  // std dev = 0.008, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15960316590340792;  // std dev = 0.261, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2700231200972765;  // std dev = 2.010, 82.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=77 */
%   | else return 0.4788678455188894;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29850694432214986;  // std dev = 0.014, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5138443239016542;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6395064175591826;  // std dev = 0.324, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10208162708744838;  // std dev = 1.813, 273.000 (wgt'ed) examples reached here.  /* #neg=268 #pos=5 */
%   | | else return 0.0049558884429376756;  // std dev = 0.297, 77.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04486839313481594;  // std dev = 3.033, 221.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25135405282872075;  // std dev = 0.186, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5070837321520674;  // std dev = 1.541, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12505390797164492;  // std dev = 0.212, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | | | else return -0.12663328081314132;  // std dev = 0.187, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2881598628005721;  // std dev = 1.445, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else return -0.08838654413380224;  // std dev = 1.703, 251.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.019553188851798606;  // std dev = 2.482, 90.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.191124193097087;  // std dev = 0.090, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2592634555084581;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05161479926459315;  // std dev = 0.143, 194.000 (wgt'ed) examples reached here.  /* #neg=175 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.010987701043877036;  // std dev = 2.139, 131.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=28 */
%   | | | else return 0.03598626064458663;  // std dev = 2.512, 83.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13465146825707203;  // std dev = 0.208, 82.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.18104639396445424;  // std dev = 2.001, 43.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09147078972274905;  // std dev = 0.078, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3804891143847793;  // std dev = 1.146, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1133908419771626;  // std dev = 0.250, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17668285922999358;  // std dev = 1.283, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.1321311644609165;  // std dev = 0.897, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08294064084847376;  // std dev = 0.020, 188.000 (wgt'ed) examples reached here.  /* #neg=188 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08573088663273735;  // std dev = 0.037, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.016320288596637943;  // std dev = 0.990, 28.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.00752032978217852;  // std dev = 1.602, 75.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.14107085087992952;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.020877372832364016;  // std dev = 2.015, 72.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.932', 'seconds']
Parameter learned model CLL:-0.110089 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [4.62e-07, 0, 104], 'true,false,true': [0.0, 162, 0], 'true,false,false': [0.246, 58, 4], 'false,true,true,true': [0.977, 1, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [6.14e-08, 59, 0], 'false,false': [0.478, 42, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.019, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.255, 169, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.791, 52, 4], 'false,false,false,true': [0.88, 1, 8], 'false,false,false,false': [4.997, 104, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.458, 2, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.228, 0, 3], 'true,false,false': [0.166, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.187, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.616, 235, 34], 'false,false,false,false': [4.169, 89, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [3.154, 6, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.064, 147, 0], 'false,true,false,false': [0.008, 28, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.261, 91, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.01, 5, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.324, 0, 39], 'false,false,true,false': [1.813, 268, 5], 'false,false,false': [0.297, 64, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.033, 139, 82], 'false,true': [0.186, 0, 22], 'false,false,true': [1.541, 1, 52], 'false,false,false,true': [0.212, 82, 0], 'false,false,false,false': [0.187, 59, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.445, 1, 121], 'true,false': [1.703, 244, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.482, 62, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.09, 0, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.143, 175, 19], 'false,false,false,true': [2.139, 103, 28], 'false,false,false,false': [2.512, 59, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.208, 4, 78], 'false,true,true,true': [2.001, 5, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.078, 223, 0], 'false,false,true': [1.146, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.25, 84, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.283, 1, 85], 'true,true,false': [0.897, 1, 19], 'true,false,true': [0.02, 188, 0], 'true,false,false,true': [0.037, 21, 0], 'true,false,false,false': [0.99, 24, 4], 'false,true': [1.602, 50, 25], 'false,false,true': [0.816, 1, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.015, 51, 21]}]
{'': [0.2208506841165995, 0.21760000000000082], 'true': [2.049642507000289e-15, 0.017538265306122347], 'false': [0.20761245674740594, 0.2286390532544389], 'false,true': [0.03698224852071082, 6.39789539614497e-17], 'false,true,true': [0.04338842975206614, 0.0], 'true,false': [-1.507710280355151e-16, 0.060353798126950985]}
{'': [0.012069066095121272, 0.11844982071695288], 'false': [0.06485654118169015, 0.15896727670500915], 'false,false': [0.05727402160850725, 0.1843413468532623], 'false,false,false': [0.08598896939433479, 0.17337528615917766], 'false,true': [nan, 0.06485654118169015], 'false,false,true': [nan, 0.05727402160850725]}
{'': [0.029287809252665165, 0.1130620671030063], 'false': [nan, 0.11306206710300629], 'false,false': [0.0019066891439368423, 0.10214197770996025], 'false,false,false': [0.07920806045874425, 0.15519422927749763], 'true': [0.030804588572804163, 0.009803854017873658], 'true,true': [0.030804588572804163, nan], 'true,false': [0.017266762314615585, 0.0034281598128250157], 'false,false,true': [0.005839235503306191, -5.921189464667501e-17]}
{'': [0.06141426177759358, 0.0005947164877226923], 'false': [2.645450689099858e-05, 0.0007486892439182935], 'false,false': [nan, 0.0007486892439182935], 'false,false,false': [nan, 0.0007486892439182935], 'false,true': [nan, 2.6454506890993505e-05], 'false,true,false': [2.825299150569648e-05, 2.171813141002169e-06]}
{'': [0.04917902430550031, 0.07557368267306189], 'false': [0.002112037117513822, 0.07444734624368246], 'false,false': [0.07102236579954692, 0.08816028047460991], 'false,false,true': [0.002686984361007333, 0.012040459652557444], 'true': [0.04925327309065595, 0.0], 'false,true': [9.534828429180741e-06, 0.0]}
{'': [0.04161547738627718, 0.08674456097823537], 'false': [0.0015750243959207716, 0.09215635915743299], 'false,false': [0.044778652945643045, 0.0005680946239219835], 'true': [nan, 0.04161547738627678], 'true,false': [nan, 0.04161547738627718], 'false,false,false': [0.0005481937449692993, 0.0005943028178632709]}
{'': [0.044581379754144175, 0.06844322622965532], 'false': [nan, 0.06844322622965522], 'false,false': [nan, 0.06844322622965532], 'false,false,false': [nan, 0.06844322622965532], 'true': [0.017118873403578528, 0.011554252664256498]}
{'': [0.00020507929427913, 0.037511529262771605], 'false': [nan, 0.037511529262771875], 'false,false': [0.02036974894441402, 0.05140472360694024], 'false,false,false': [0.034937671857021915, 0.0760441491870633], 'true': [9.832753721734938e-05, 0.00010156422642387808], 'true,false': [0.00010156422642387808, nan]}
{'': [0.04338056963425323, 0.03981257291845167], 'false': [0.025135672469428133, 0.06477282091468553], 'false,false': [0.03203734252201799, 0.0007459411298039757], 'false,true': [0.09308699554688084, 2.7607135523276454e-05], 'false,true,true': [0.09308699554688084, nan], 'false,false,false': [nan, 0.0007459411298039757]}
{'': [0.023093231980236606, 0.0491193736498989], 'false': [0.034200151646464866, 0.06401493454792076], 'false,false': [0.2222222222222222, 0.05637387514161545], 'false,false,false': [nan, 0.0563738751416155], 'true': [0.023423566822120483, 0.004607785240467365], 'true,true': [0.019146923828652077, 0.04020277884889755], 'true,false': [2.0502652934460893e-06, 0.02120025550786746], 'true,false,false': [6.382886666261591e-05, 0.03498779072317295]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 18.492
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.097, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048824;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | | else if ( follows(E, A), follows(F, E) )
%   | | | then return -0.09837280403092252;  // std dev = 1.383, 46.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=2 */
%   | | | else return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048768;  // std dev = 4.08e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return 0.1273797043302816;  // std dev = 0.444, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.7240792705619308;  // std dev = 0.122, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return 0.6737725446818122;  // std dev = 0.213, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.11538650291066753;  // std dev = 0.097, 152.000 (wgt'ed) examples reached here.  /* #neg=150 #pos=2 */
%   | | else if ( tweets(A, G), follows(H, E) )
%   | | | then return 0.09829769644274865;  // std dev = 3.243, 73.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=19 */
%   | | | else return -0.07809405181866705;  // std dev = 1.180, 28.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=2 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.7194734122109548;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return -0.12544463852839147;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.25007449513354013;  // std dev = 1.260, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.19192486198490877;  // std dev = 2.133, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then return 0.5435729112007665;  // std dev = 0.194, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | else if ( tweets(A, F) )
%   | | then return 0.4125092938891414;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.5047593217998622;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.57789942184186;  // std dev = 0.104, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.4956277395113237;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(J, I), follows(J, A) )
%   | | | then return -0.10841248018994984;  // std dev = 0.868, 122.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=1 */
%   | | | else return -0.00960235637426828;  // std dev = 3.158, 106.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=16 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.09513395213961547;  // std dev = 2.551, 61.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=19 */
%   | | | else return 0.14001309554509864;  // std dev = 2.927, 59.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.4302897330989864;  // std dev = 0.177, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(A, E) )
%   | | then if ( follows(F, A), follows(E, F) )
%   | | | then return 0.6559208998058058;  // std dev = 0.221, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.5220459698071553;  // std dev = 1.353, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.6565542883061141;  // std dev = 0.052, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.7858607093520016;  // std dev = 0.050, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.11708058279704255;  // std dev = 0.272, 198.000 (wgt'ed) examples reached here.  /* #neg=198 */
%   | | else return -0.11052040814428835;  // std dev = 0.045, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else return -0.1425821235129467;  // std dev = 0.295, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.2799031185279716;  // std dev = 1.384, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | | | else return 0.33927304533968455;  // std dev = 0.015, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0.3851799994311171;  // std dev = 0.094, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.4363249055078614;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.33398798409849306;  // std dev = 0.023, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5882017430731545;  // std dev = 0.224, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.10323770898282603;  // std dev = 0.205, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.02983133683204175;  // std dev = 2.158, 91.000 (wgt'ed) examples reached here.  /* #neg=66 #pos=25 */
%   | | | else return 0.07998279388077792;  // std dev = 2.272, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.25462618377719276;  // std dev = 0.122, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return -0.06568576866382995;  // std dev = 0.821, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.2658845850633806;  // std dev = 0.009, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else if ( tweets(A, G) )
%   | | then return -0.04588130858780742;  // std dev = 0.150, 149.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=14 */
%   | | else return -0.060207951424792044;  // std dev = 0.128, 19.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2682616774279312;  // std dev = 0.024, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.09437060787346598;  // std dev = 1.371, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.4216635050509272;  // std dev = 1.008, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return -0.1169598512730028;  // std dev = 0.029, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( tweets(A, C), follows(A, D) )
%   then if ( tweets(E, C), recursion_accounttype(E, B) )
%   | then if ( recursion_accounttype(D, B), follows(D, F) )
%   | | then if ( follows(A, F), follows(E, D) )
%   | | | then return 0.22385279384279488;  // std dev = 0.143, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | | else return -0.19271206739578173;  // std dev = 1.190, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.3486461487739699;  // std dev = 0.090, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else return -0.09264227618505742;  // std dev = 0.013, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   else if ( follows(A, G), follows(G, A) )
%   | then return 0.035114294471336245;  // std dev = 0.167, 39.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=14 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I), follows(I, H) )
%   | | | then return -0.05675745042716965;  // std dev = 0.971, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.012903880994326307;  // std dev = 1.073, 37.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=11 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.2151629107009105;  // std dev = 0.011, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.014198410118553632;  // std dev = 1.996, 73.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=15 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17693438516759538;  // std dev = 0.105, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else return 0.2184037737214139;  // std dev = 0.008, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.07017052118783915;  // std dev = 0.049, 146.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.18227462308908035;  // std dev = 1.978, 25.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=21 */
%   | | | else return -0.097863647714764;  // std dev = 0.052, 74.000 (wgt'ed) examples reached here.  /* #neg=74 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.24692283586419525;  // std dev = 0.206, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return -0.10108524472121581;  // std dev = 0.764, 79.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=1 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.05694091774962043;  // std dev = 0.531, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.03936354584650257;  // std dev = 1.776, 32.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.13906267147387935;  // std dev = 0.930, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | | else return 0.058925363814975075;  // std dev = 0.863, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.21521394554977302;  // std dev = 0.093, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.03519633903486761;  // std dev = 0.403, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.20614079630585694;  // std dev = 0.194, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else return -0.07870312796339786;  // std dev = 0.010, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.2216327509002349;  // std dev = 0.150, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.37379708676322515;  // std dev = 0.936, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return -0.1117864668957794;  // std dev = 0.037, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15681285661900174;  // std dev = 0.106, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else return -0.06565595239507974;  // std dev = 0.054, 229.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=4 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( recursion_accounttype(F, B) )
%   | | then if ( follows(F, E), recursion_accounttype(E, B) )
%   | | | then return 0.004941943921116465;  // std dev = 0.903, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.181873736713249;  // std dev = 0.118, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.07865420317990007;  // std dev = 0.038, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else if ( follows(A, G) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.01685567886331588;  // std dev = 0.296, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.10431815568068135;  // std dev = 0.836, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0315872353597856;  // std dev = 0.712, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return -0.0010504098495614763;  // std dev = 1.391, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '30.163', 'seconds']
Refined model CLL: -0.098773


******************************************
Best model found
******************************************
Results 

CLL : -0.097666 

AUC ROC : 0.994366 

AUC PR : 0.440445 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 18.492 

Total Inference Time : 36.69749140739441 

Total revision time: 67.55940491294861
Best scored revision CLL: -0.098773


Results 

CLL : -0.097666 

AUC ROC : 0.994366 

AUC PR : 0.440445 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 67.58511454200745 

Total Inference Time : 36.69749140739441 

Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.32
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8207657575294176;  // std dev = 1.962, 107.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004883;  // std dev = 0.000, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | | else return -0.08470820775763062;  // std dev = 0.232, 35.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return 0.16849376268571928;  // std dev = 0.463, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.682086418267185;  // std dev = 1.961, 86.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03796776056636489;  // std dev = 0.261, 211.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09851568114786395;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5662343968148907;  // std dev = 0.822, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.1546902059221732;  // std dev = 3.126, 52.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5755025207065351;  // std dev = 0.927, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.7344272253750107;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8240076340333274;  // std dev = 0.078, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6305357751123222;  // std dev = 0.131, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5737451311334202;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.37374513113342017;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.040287289407335024;  // std dev = 3.651, 209.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=21 */
%   | | | else return -0.011030487270578936;  // std dev = 2.881, 80.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5152214645321176;  // std dev = 2.031, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11736699167895231;  // std dev = 0.040, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | | | else return -0.12015732093713524;  // std dev = 0.000355, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15174553149104983;  // std dev = 0.139, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.26711842530306196;  // std dev = 2.197, 78.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=73 */
%   | else return 0.426096991301811;  // std dev = 0.129, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3326909245370436;  // std dev = 0.091, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6316819389874399;  // std dev = 0.203, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.081385145441611;  // std dev = 2.289, 234.000 (wgt'ed) examples reached here.  /* #neg=225 #pos=9 */
%   | | else return -0.10518670533813076;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02827342885936256;  // std dev = 3.402, 280.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2781495509572704;  // std dev = 0.109, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5308294607703864;  // std dev = 0.755, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11290630761463005;  // std dev = 0.083, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.11114990772432966;  // std dev = 0.151, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2691108594633572;  // std dev = 2.010, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else return -0.07219704398418919;  // std dev = 2.001, 215.000 (wgt'ed) examples reached here.  /* #neg=204 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03445703791118758;  // std dev = 0.707, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19230772708716395;  // std dev = 0.979, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.22112115295891377;  // std dev = 0.038, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04689444144604938;  // std dev = 0.154, 206.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.004014607438585228;  // std dev = 1.356, 58.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=13 */
%   | | | else return 0.07445677099814817;  // std dev = 1.661, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16741907755359234;  // std dev = 0.171, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.23532991845008358;  // std dev = 1.377, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0903468984528619;  // std dev = 0.030, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.43642992966484295;  // std dev = 0.620, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11499983045538481;  // std dev = 0.164, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14192563850814366;  // std dev = 2.411, 99.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=94 */
%   | | else return 0.15778082675402955;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.0836444255991813;  // std dev = 0.012, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08187654869161795;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.004136230653703197;  // std dev = 0.457, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.013172089230557581;  // std dev = 1.031, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2302162306614015;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06758743044686692;  // std dev = 1.309, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.702', 'seconds']
Parameter learned model CLL:-0.110802 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.962, 4, 103], 'true,false,true': [0.0, 179, 0], 'true,false,false': [0.232, 33, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 1, 0], 'false,true,false': [2.98e-08, 32, 0], 'false,false': [0.463, 20, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.961, 4, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.261, 189, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.983, 29, 1], 'false,false,false,true': [0.822, 1, 4], 'false,false,false,false': [3.126, 35, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.927, 1, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.078, 0, 2], 'true,false,false': [0.131, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [1.265, 2, 8], 'false,false,false,true': [3.651, 188, 21], 'false,false,false,false': [2.881, 69, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.031, 2, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.04, 184, 0], 'false,true,false,false': [0.000355, 37, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.139, 45, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.197, 5, 73], 'true,false': [0.129, 0, 4], 'false,true,true': [0.091, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.203, 0, 23], 'false,false,true,false': [2.289, 225, 9], 'false,false,false': [0.0, 20, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.402, 189, 91], 'false,true': [0.109, 0, 13], 'false,false,true': [0.755, 0, 22], 'false,false,false,true': [0.083, 33, 0], 'false,false,false,false': [0.151, 47, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.01, 3, 107], 'true,false': [2.001, 204, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.707, 13, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.979, 1, 80], 'true,false,true': [0.038, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.154, 184, 22], 'false,false,false,true': [1.356, 45, 13], 'false,false,false,false': [1.661, 20, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.171, 2, 77], 'false,true,true,true': [1.377, 2, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.03, 218, 0], 'false,false,true': [0.62, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.164, 59, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.411, 5, 94], 'true,true,false': [0.011, 0, 9], 'true,false,true': [0.012, 181, 0], 'true,false,false,true': [0.0, 17, 0], 'true,false,false,false': [0.457, 7, 2], 'false,true': [1.031, 23, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.309, 15, 8]}]
{'': [0.2201065595248514, 0.20325054784514265], 'true': [0.03598567560485849, 0.009258450519695878], 'false': [0.19555555555555507, 0.2140309155766945], 'false,true': [0.07100591715976314, 2.7755575615628914e-17], 'false,true,true': [-1.4802973661668753e-16, 0.0], 'true,false': [-1.9847562451399445e-16, 0.05387755102040817]}
{'': [0.04473013980766836, 0.09822870365165226], 'false': [0.0683122077904189, 0.15900252767808695], 'false,false': [0.032222222222222166, 0.19686758733586335], 'false,false,false': [0.1352232937593326, 0.18793802667268872], 'false,true': [nan, 0.0683122077904189], 'false,false,true': [nan, 0.032222222222222166]}
{'': [0.013247651758853033, 0.09071054303415269], 'false': [nan, 0.0907105430341528], 'false,false': [0.0941828254847646, 0.07501879419818049], 'false,false,true': [-2.4671622769447924e-16, 0.15999999999999986], 'false,false,false': [0.06376979403079952, 0.10378779073928546], 'true': [0.012278527096243627, 0.012172672512978266], 'true,true': [0.012100671573238506, 0.0], 'true,false': [0.0030268457678905847, 0.004268465820739031]}
{'': [0.03221745775783302, 0.00024115532522844108], 'false': [8.341873519316905e-06, 0.00042909210178931407], 'false,false': [nan, 0.00042909210178931407], 'false,false,false': [nan, 0.00042909210178931407], 'false,true': [nan, 8.341873519308866e-06], 'false,true,false': [8.715103934206372e-06, 3.399359772650136e-09]}
{'': [0.06025507577074247, 0.061613290182519036], 'false': [0.0004920061620240828, 0.05801196291343204], 'true': [0.061897341202120156, 0.004189602458055081], 'false,false': [0.061972236633714914, -1.3877787807814458e-18], 'false,false,true': [0.0017966170812699813, 0.022382314287435437], 'false,true': [0.0004920061620240828, nan]}
{'': [0.04132855703759171, 0.0736402718165338], 'false': [0.0009086939782177408, 0.07576532423750125], 'false,false': [0.025940304351390123, 0.0003740458863532581], 'true': [nan, 0.04132855703759156], 'true,false': [nan, 0.04132855703759171], 'false,false,false': [0.00021093110532236032, 0.0004873007478134367]}
{'': [0.05083657465063802, 0.023772378079899244], 'true': [0.03674251009506508, 0.018619739568821247], 'false': [nan, 0.023772378079899244], 'false,false': [nan, 0.023772378079899244], 'false,false,false': [nan, 0.023772378079899244]}
{'': [0.011575429917654345, 0.03370165006757276], 'false': [nan, 0.03370165006757296], 'false,false': [0.023627009717320527, 0.05420563439918224], 'false,false,false': [0.031684853510036505, 0.09514202468829988], 'true': [0.011823561304763659, 0.000715900374090743], 'true,false': [0.000715900374090743, nan]}
{'': [0.029077442851256838, 0.029320262992167705], 'false': [0.01991096329661644, 0.05821628944058102], 'false,false': [0.022625795812195006, 0.00045445025248667644], 'false,true': [0.05579337603484452, 4.2140590780990275e-06], 'false,true,true': [0.05579337603484452, nan], 'false,false,false': [nan, 0.00045445025248667644]}
{'': [0.030533777542817102, 0.04838952555498067], 'false': [0.030352367645010047, 0.07247245713787008], 'false,false': [0.0, 0.07452142825770132], 'false,false,false': [nan, 0.07452142825770132], 'true': [0.05385310648927052, 0.0012729670241950033], 'true,true': [0.05872658074303011, 1.4451619795660983e-05], 'true,false': [7.419987333470268e-07, 0.009410483534346896], 'true,false,false': [-8.163404592832033e-19, 0.023234284789646065]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 8.461
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.8033544145515676;  // std dev = 1.944, 73.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=69 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995121;  // std dev = 8.43e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.132505270507965;  // std dev = 0.096, 214.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(A, I) )
%   | | | then return 0.7812258581764353;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then return 0.7317134155362314;  // std dev = 0.145, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | else if ( follows(C, F), follows(F, A) )
%   | | then return 0.6193853194676692;  // std dev = 0.307, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else return 0.7267568372389234;  // std dev = 0.013, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(G, H), follows(H, A) )
%   | | then return 0.5637318830862411;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.7800760458287821;  // std dev = 0.128, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), follows(J, A) )
%   | | | then return -0.11010037688913768;  // std dev = 1.451, 155.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=3 */
%   | | | else return -0.005623978637810374;  // std dev = 2.713, 84.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=12 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.0957440895349814;  // std dev = 2.224, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
%   | | | else return 0.16361435610542802;  // std dev = 2.283, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5248206267474085;  // std dev = 1.685, 67.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=64 */
%   | | | else return 0.6090258636818511;  // std dev = 0.013, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.6213090891247715;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.505995032912834;  // std dev = 0.356, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5670889146101695;  // std dev = 0.014, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.0957805382335362;  // std dev = 1.466, 135.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=3 */
%   | | | else return 0.025751366456647707;  // std dev = 2.657, 67.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.07666680108124971;  // std dev = 2.214, 36.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=9 */
%   | | | else return 0.12293619938551363;  // std dev = 2.310, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.4440975210945095;  // std dev = 0.230, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else if ( follows(D, F), tweets(D, G) )
%   | | | then return 0.15423657808552768;  // std dev = 1.205, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.505589051005017;  // std dev = 0.209, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.42637120624519204;  // std dev = 0.056, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.6146286300298252;  // std dev = 1.243, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.6747610032472896;  // std dev = 1.013, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   else if ( follows(J, A) )
%   | then if ( tweets(A, K) )
%   | | then return -0.11280690114166864;  // std dev = 0.139, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else return -0.11706771646413737;  // std dev = 0.064, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else return -0.1821419500877125;  // std dev = 0.288, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then return 0.3316993215102588;  // std dev = 0.010, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.36645907503094943;  // std dev = 0.075, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3540094333470948;  // std dev = 0.060, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.43942988876807393;  // std dev = 0.207, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.3165826818944219;  // std dev = 0.008, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.3382742192746658;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.5395213388952289;  // std dev = 0.994, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.08908700748587323;  // std dev = 2.166, 230.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=9 */
%   | | else return -0.09524660135957935;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2506071836614799;  // std dev = 0.117, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(E, F) )
%   | | | then return 0.27206451830849154;  // std dev = 0.002, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.2124019757019127;  // std dev = 1.057, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.050222915773257874;  // std dev = 1.832, 154.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=12 */
%   | | | else return -0.0561110615696706;  // std dev = 0.901, 38.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then if ( follows(A, I) )
%   | | then return 0.2875458806205563;  // std dev = 0.168, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.15601190123834435;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.4830738417571301;  // std dev = 0.128, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.12240977300056191;  // std dev = 0.035, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.22055020159191258;  // std dev = 0.021, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else return 0.1642563926646869;  // std dev = 0.241, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.054884044425513645;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.4469248979480302;  // std dev = 0.209, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.08861030721910645;  // std dev = 0.009, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.048979804997474265;  // std dev = 0.793, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | | | else return -0.012354816462362962;  // std dev = 0.787, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1707582464319271;  // std dev = 0.775, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.1363312120930291;  // std dev = 1.207, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.18067451023959386;  // std dev = 0.007, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return 0.20018183839731432;  // std dev = 0.011, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.2499890742476677;  // std dev = 0.098, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.03957399358732303;  // std dev = 1.202, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.3585465069052589;  // std dev = 0.081, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.0823125168187197;  // std dev = 0.008, 203.000 (wgt'ed) examples reached here.  /* #neg=203 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( recursion_accounttype(K, B) )
%   | | | then return 0.191881572638221;  // std dev = 1.063, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.12773787864338737;  // std dev = 0.145, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else return 0.052635333390254994;  // std dev = 0.291, 28.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return 0.16525126981371072;  // std dev = 0.027, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.1735443987018589;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.060116243414614745;  // std dev = 1.208, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | else return -0.13760507433836677;  // std dev = 1.057, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.1887489508592289;  // std dev = 0.166, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else return -0.07667326155194384;  // std dev = 0.008, 191.000 (wgt'ed) examples reached here.  /* #neg=191 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.3130895947192488;  // std dev = 0.207, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.2426913907550013;  // std dev = 1.208, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return -0.14767086912736105;  // std dev = 0.040, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1397351698542102;  // std dev = 0.150, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.14235590641113177;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.0680732982299605;  // std dev = 0.030, 199.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.17428428189325673;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.005918215140219608;  // std dev = 0.534, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
%   | | | else return 0.02173709037271689;  // std dev = 0.714, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.22231164034879447;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.04202670510421873;  // std dev = 0.628, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return -0.003445923141943934;  // std dev = 1.146, 18.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.618', 'seconds']
Refined model CLL: -0.106007


******************************************
Best model found
******************************************
Results 

CLL : -0.106916 

AUC ROC : 0.994745 

AUC PR : 0.404147 

Precision : 0.339286 

Recall : 0.974359 

F1 : 0.503311 

Total Learning Time : 8.461 

Total Inference Time : 12.313374042510986 

Total revision time: 32.15817318534851
Best scored revision CLL: -0.106007


Results 

CLL : -0.106916 

AUC ROC : 0.994745 

AUC PR : 0.404147 

Precision : 0.339286 

Recall : 0.974359 

F1 : 0.503311 

Total Learning Time : 37.84328446960449 

Total Inference Time : 12.313374042510986 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.564
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.821111898062474;  // std dev = 1.963, 108.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | | else return -0.06341969235146812;  // std dev = 0.269, 51.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 5.05e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | else return 0.16481560176617832;  // std dev = 0.461, 75.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7184877103526702;  // std dev = 1.016, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.02485885398530001;  // std dev = 0.275, 161.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.059857256966061326;  // std dev = 1.791, 50.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6535520273148632;  // std dev = 0.876, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.10283563969254249;  // std dev = 5.044, 151.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5623126498443727;  // std dev = 1.067, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7319407102398093;  // std dev = 0.220, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.34942501673589843;  // std dev = 1.475, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5970429295902774;  // std dev = 0.177, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5647347143746992;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.010072153830266198;  // std dev = 4.603, 246.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=34 */
%   | | | else return 0.059724123375905894;  // std dev = 4.106, 105.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5375660029422347;  // std dev = 2.776, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12356703318844436;  // std dev = 0.061, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | | | else return -0.13046669591969204;  // std dev = 0.013, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.15973902518172792;  // std dev = 0.230, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30365934750344387;  // std dev = 1.463, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.46889653101198525;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29944586518175687;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5025807394484954;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6150691538200546;  // std dev = 0.970, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return -0.10327261035032836;  // std dev = 1.805, 263.000 (wgt'ed) examples reached here.  /* #neg=258 #pos=5 */
%   | | else return 0.008272313630929758;  // std dev = 0.304, 74.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.022066387338326558;  // std dev = 3.096, 255.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2510502089667448;  // std dev = 0.176, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5375857895169454;  // std dev = 0.965, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12265980186007013;  // std dev = 0.152, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return -0.12850504400548285;  // std dev = 0.168, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27075402682055566;  // std dev = 2.132, 124.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=121 */
%   | else return -0.0892602746259153;  // std dev = 1.672, 285.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03638371657526286;  // std dev = 2.230, 88.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17862837734648476;  // std dev = 0.996, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.256537179757899;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05363783290316851;  // std dev = 0.155, 190.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.012180959307948857;  // std dev = 2.064, 135.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=28 */
%   | | | else return 0.038679702751637644;  // std dev = 2.618, 77.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1726698236217659;  // std dev = 0.110, 79.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2848503951790706;  // std dev = 0.889, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09280661069214059;  // std dev = 0.096, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3970733403648015;  // std dev = 0.793, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11550751281917787;  // std dev = 0.242, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1616176021045475;  // std dev = 1.532, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   | | else return 0.07276764607883039;  // std dev = 1.277, 21.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08273712472965689;  // std dev = 0.023, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09414225124180658;  // std dev = 0.033, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return -0.00856077672304617;  // std dev = 0.932, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.009888496599150361;  // std dev = 1.681, 67.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.22640775172104344;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.027236664841046417;  // std dev = 1.963, 69.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.727', 'seconds']
Parameter learned model CLL:-0.110363 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.963, 4, 104], 'true,false,true': [0.0, 168, 0], 'true,false,false': [0.269, 47, 4], 'false,true,true,true': [0.977, 1, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.05e-08, 48, 0], 'false,false': [0.461, 52, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.016, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.275, 142, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.791, 46, 4], 'false,false,false,true': [0.876, 1, 8], 'false,false,false,false': [5.044, 111, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.067, 1, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.22, 0, 3], 'true,false,false': [1.475, 3, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.177, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.603, 212, 34], 'false,false,false,false': [4.106, 82, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.776, 4, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.061, 179, 0], 'false,true,false,false': [0.013, 39, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.23, 83, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.463, 2, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.97, 1, 39], 'false,false,true,false': [1.805, 258, 5], 'false,false,false': [0.304, 61, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.096, 173, 82], 'false,true': [0.176, 0, 22], 'false,false,true': [0.965, 0, 52], 'false,false,false,true': [0.152, 59, 0], 'false,false,false,false': [0.168, 59, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.132, 3, 121], 'true,false': [1.672, 278, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.23, 60, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.996, 1, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.155, 171, 19], 'false,false,false,true': [2.064, 107, 28], 'false,false,false,false': [2.618, 53, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.11, 1, 78], 'false,true,true,true': [0.889, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.096, 218, 0], 'false,false,true': [0.793, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.242, 96, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.532, 2, 85], 'true,true,false': [1.277, 2, 19], 'true,false,true': [0.023, 156, 0], 'true,false,false,true': [0.033, 29, 0], 'true,false,false,false': [0.932, 19, 4], 'false,true': [1.681, 42, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.963, 48, 21]}]
{'': [0.22119350223045423, 0.2183685419575703], 'true': [0.035665294924556515, 0.017931235795750608], 'false': [0.22370343316289376, 0.2126222222222232], 'false,true': [0.03698224852071082, 5.3198186596622086e-17], 'false,true,true': [0.04338842975206614, 0.0], 'true,false': [-1.691768418476429e-16, 0.07227989234909635]}
{'': [0.012005431867125067, 0.12601844473717944], 'false': [0.07561500038974568, 0.15916286889288994], 'false,false': [0.06412364036992126, 0.1799320712572248], 'false,false,false': [0.08532508637269655, 0.16851091781860947], 'false,true': [nan, 0.07561500038974568], 'false,false,true': [nan, 0.06412364036992126]}
{'': [0.04763848256547584, 0.12023001959086131], 'false': [nan, 0.12023001959086121], 'false,false': [0.001704197176189346, 0.10941781670026202], 'false,false,false': [0.08611321677488909, 0.16060293718598745], 'true': [0.016752149608421557, 0.18344412042202843], 'true,false': [0.01614186099953267, 0.19771809740326968], 'true,true': [0.016752149608421557, nan], 'false,false,true': [0.005219103852080724, -2.3684757858670006e-16]}
{'': [0.048167907596619, 0.0004372579741893114], 'false': [2.467497033119232e-05, 0.0006368586691711193], 'false,false': [nan, 0.0006368586691711193], 'false,false,false': [nan, 0.0006368586691711193], 'false,true': [nan, 2.4674970331198432e-05], 'false,true,false': [2.0579333596484167e-05, 4.384099665123459e-06]}
{'': [0.027093110886079387, 0.07785847991577534], 'false': [0.001879522193231847, 0.07687914019948099], 'false,false': [0.07299297936539405, 0.0925668608910176], 'false,false,true': [0.02353774783895459, 0.012393910004598163], 'true': [0.027094770071616293, 0.0], 'false,true': [8.556534161829888e-06, 0.0]}
{'': [0.037588579032810945, 0.09102251474338358], 'false': [0.001411773425833742, 0.09915879392747332], 'false,false': [0.017894830193083792, 0.00044539655862668254], 'true': [nan, 0.03758857903281062], 'true,false': [nan, 0.037588579032810945], 'false,false,false': [0.0003926172628770949, 0.00048109242650708325]}
{'': [0.04533260273024829, 0.056532166671625084], 'false': [nan, 0.056532166671625056], 'false,false': [nan, 0.056532166671625084], 'false,false,false': [nan, 0.056532166671625084], 'true': [0.03666058629345383, 0.009810637139678002]}
{'': [0.011674821161513933, 0.04024045995740718], 'false': [nan, 0.040240459957407056], 'false,false': [0.024080060023225956, 0.053026321055593094], 'false,false,false': [0.03155094837006736, 0.08903068935166197], 'true': [0.01180941887238501, 9.309352089159617e-05], 'true,false': [9.309352089159617e-05, nan]}
{'': [0.012015510690202801, 0.03566925610909692], 'false': [0.02115487822265662, 0.05960499584718622], 'false,false': [0.015731668845920477, 0.0006093337494342752], 'false,true': [0.020818905409606403, 4.257145045092723e-05], 'false,true,true': [0.020818905409606403, nan], 'false,false,false': [nan, 0.0006093337494342752]}
{'': [0.027075203179635316, 0.049089824228054794], 'false': [0.04218524468343757, 0.055349503333391864], 'false,false': [0.0, 0.055836396711261914], 'false,false,false': [nan, 0.055836396711261886], 'true': [0.038050838438058, 0.004764348305999281], 'true,true': [0.026960409073997695, 0.0776375938938804], 'true,false': [3.469343022944341e-06, 0.018522354018931], 'true,false,false': [3.718278185641062e-05, 0.03774510009644895]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 36.272
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8462441731947502;  // std dev = 0.108, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else return 0.8126943896449667;  // std dev = 0.208, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else return -0.12350244104727731;  // std dev = 0.134, 218.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 5.77e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return 0.16249676118646889;  // std dev = 0.460, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then return 0.7095241984781362;  // std dev = 0.110, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else return 0.7821333235112127;  // std dev = 0.165, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, F), follows(A, G) )
%   | | | then return 0.37155203793952707;  // std dev = 1.309, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.7445524116759906;  // std dev = 0.192, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.12747150745768923;  // std dev = 1.32e-07, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.7285554015677008;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.38614007887762103;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.12444968064950676;  // std dev = 3.569, 85.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=25 */
%   | | | else return 0.18117124918230307;  // std dev = 2.910, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5733022257765067;  // std dev = 0.345, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.5906260590624429;  // std dev = 0.184, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5607562025532891;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.5161901833959267;  // std dev = 1.003, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.11395400618909343;  // std dev = 1.32e-07, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.09314517442736045;  // std dev = 3.563, 90.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=25 */
%   | | | else return 0.2383754380314319;  // std dev = 2.683, 34.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(D, E) )
%   | | | then return 0.4064271996838271;  // std dev = 0.998, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | | | else return 0.30146825620186124;  // std dev = 1.816, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | | else return 0.5678608870097354;  // std dev = 0.210, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(G, I) )
%   | | | then return 0.2791468909448128;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.5431738693001925;  // std dev = 0.117, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.6711217907719481;  // std dev = 0.097, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.7358530184501156;  // std dev = 0.157, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(K, A) )
%   | then return -0.10294447878845964;  // std dev = 0.000, 200.000 (wgt'ed) examples reached here.  /* #neg=200 */
%   | else return -0.17307011589592963;  // std dev = 0.030, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A) )
%   | | then return 0.30910552717324863;  // std dev = 0.157, 71.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   | | else return 0.3576825645762419;  // std dev = 0.009, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.5062229342748744;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.3202067927702982;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.26467205131225163;  // std dev = 0.968, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0.4699416062752728;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(J, A) )
%   | | then return -0.06291571691370923;  // std dev = 0.116, 255.000 (wgt'ed) examples reached here.  /* #neg=238 #pos=17 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.05428044474621672;  // std dev = 2.783, 86.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=25 */
%   | | | else return 0.0794941174072199;  // std dev = 2.271, 42.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.2708666282654887;  // std dev = 0.214, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.16935366556426198;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.0153654663313893;  // std dev = 0.848, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.26026275647335295;  // std dev = 1.05e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.05148497424286324;  // std dev = 0.125, 184.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=15 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2752911078661072;  // std dev = 0.032, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.2971971655917873;  // std dev = 0.144, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.46305654859691936;  // std dev = 1.426, 45.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=43 */
%   | | else return -0.13731359032999843;  // std dev = 0.043, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( follows(E, A), follows(E, C) )
%   | | then return 0.1836725139870348;  // std dev = 0.164, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | else return 0.22330428337580213;  // std dev = 0.020, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.2247517108636481;  // std dev = 0.023, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A), follows(A, G) )
%   | | then return 0.13508107463452607;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.23962940291623797;  // std dev = 0.043, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.31474963379202037;  // std dev = 0.968, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return -0.08306260786921056;  // std dev = 0.708, 221.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=1 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return -0.016644115613741753;  // std dev = 1.771, 72.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=15 */
%   | | | else return 0.05421422270386354;  // std dev = 2.226, 69.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=25 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then return 0.16552244564457322;  // std dev = 0.132, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | else return 0.18494944941217953;  // std dev = 0.045, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.2620846942599084;  // std dev = 0.015, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.3030392949810719;  // std dev = 0.043, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.07713551436298434;  // std dev = 0.033, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( tweets(A, K), tweets(I, K) )
%   | | | then return 0.0821358766988931;  // std dev = 1.475, 40.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=18 */
%   | | | else return 0.02398204900740402;  // std dev = 1.725, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
%   | | else if ( follows(A, L) )
%   | | | then return 0.010770126987544012;  // std dev = 0.794, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | | | else return 0.035054595875321864;  // std dev = 1.636, 31.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.16654966135813884;  // std dev = 0.020, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else return 0.0592101213597325;  // std dev = 0.329, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.15938371959780606;  // std dev = 0.070, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.19539111227722972;  // std dev = 0.983, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.07147666589253854;  // std dev = 0.036, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.3051475350308085;  // std dev = 1.364, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | | else return 0.4195110633700779;  // std dev = 0.189, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.13082305193357407;  // std dev = 0.061, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | | else return -0.20084183705542047;  // std dev = 0.043, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.07139431577113385;  // std dev = 0.250, 89.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=83 */
%   | | else return 0.20486941701845454;  // std dev = 0.023, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.06188495662548958;  // std dev = 0.039, 235.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.1638914625578155;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.004582922229270479;  // std dev = 1.393, 53.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=15 */
%   | | | else return -0.03000798050236801;  // std dev = 0.669, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.17675832387207624;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.010059969599992558;  // std dev = 1.364, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | | | else return 0.0020570817937199722;  // std dev = 1.243, 27.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.475', 'seconds']
Refined model CLL: -0.109057


******************************************
Best model found
******************************************
Results 

CLL : -0.105371 

AUC ROC : 0.992499 

AUC PR : 0.333228 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 36.272 

Total Inference Time : 15.480644702911377 

Total revision time: 65.18308476066589
Best scored revision CLL: -0.109057


Results 

CLL : -0.105371 

AUC ROC : 0.992499 

AUC PR : 0.333228 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 70.86819604492187 

Total Inference Time : 15.480644702911377 

