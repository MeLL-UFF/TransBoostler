Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Run: 1
Starting experiments for fasttext using majority_vote 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.555
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8391013160518921;  // std dev = 1.401, 105.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | | else return -0.08124500429442717;  // std dev = 0.239, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else return 0.1795775065280838;  // std dev = 0.467, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6897070224711502;  // std dev = 1.710, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04629435733801312;  // std dev = 0.248, 234.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08679138976802743;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7483184063034612;  // std dev = 0.100, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.14949896829232207;  // std dev = 3.134, 53.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.567251773347928;  // std dev = 1.079, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.7324704637229573;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8222080321657332;  // std dev = 0.078, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5874703659932441;  // std dev = 0.136, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5673854326979249;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5673854326979249;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.042868080218977915;  // std dev = 3.650, 217.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=21 */
%   | | | else return 0.028109491870469183;  // std dev = 2.817, 59.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5076878167948817;  // std dev = 2.040, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11643208941849802;  // std dev = 0.030, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | | | else return -0.12367708382713219;  // std dev = 0.004, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1628498310219392;  // std dev = 0.194, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30214895961830934;  // std dev = 1.444, 75.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=73 */
%   | else return 0.41016734582250536;  // std dev = 0.141, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3091958224200129;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5886672963708429;  // std dev = 0.995, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.08449619312589329;  // std dev = 2.288, 253.000 (wgt'ed) examples reached here.  /* #neg=244 #pos=9 */
%   | | else return -0.10646810597354683;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0262965356443425;  // std dev = 3.413, 280.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2564444577837475;  // std dev = 0.114, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4240104887804728;  // std dev = 1.862, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12252378134409395;  // std dev = 0.144, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | | else return -0.11455278299005188;  // std dev = 0.147, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27143523767443467;  // std dev = 1.867, 110.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=107 */
%   | else return -0.07199188957210309;  // std dev = 2.066, 221.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.004369697651331996;  // std dev = 0.693, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17240621682763363;  // std dev = 1.393, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.2251467076394092;  // std dev = 0.041, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03596328681466527;  // std dev = 0.157, 181.000 (wgt'ed) examples reached here.  /* #neg=159 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.017103063205569237;  // std dev = 1.693, 59.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=13 */
%   | | | else return 0.08709131462986112;  // std dev = 1.692, 28.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1459152632818202;  // std dev = 0.201, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.25986780922599867;  // std dev = 1.122, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09024819314484055;  // std dev = 0.049, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4627093199677764;  // std dev = 0.593, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11409493873496174;  // std dev = 0.143, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14305751402973557;  // std dev = 2.348, 99.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=94 */
%   | | else return 0.14310332676927467;  // std dev = 0.008, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08383031304523765;  // std dev = 0.025, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0787046516974405;  // std dev = 3.73e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.029854552733651875;  // std dev = 0.498, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.05309053555265433;  // std dev = 0.961, 29.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2282451603224176;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05107744095801214;  // std dev = 1.522, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.584', 'seconds']
Parameter learned model CLL:-0.111076 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.401, 2, 103], 'true,false,true': [0.0, 175, 0], 'true,false,false': [0.239, 31, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [7.45e-09, 20, 0], 'false,false': [0.467, 19, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.71, 3, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.248, 212, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.977, 21, 1], 'false,false,false,true': [0.1, 0, 4], 'false,false,false,false': [3.134, 36, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.079, 1, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.078, 0, 2], 'true,false,false': [0.136, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.65, 196, 21], 'false,false,false,false': [2.817, 48, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.04, 2, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.03, 181, 0], 'false,true,false,false': [0.004, 41, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.194, 53, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.444, 2, 73], 'true,false': [0.141, 0, 4], 'false,true,true': [1.49e-08, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.995, 1, 23], 'false,false,true,false': [2.288, 244, 9], 'false,false,false': [0.0, 9, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.413, 189, 91], 'false,true': [0.114, 0, 13], 'false,false,true': [1.862, 2, 22], 'false,false,false,true': [0.144, 39, 0], 'false,false,false,false': [0.147, 34, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.867, 3, 107], 'true,false': [2.066, 210, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.693, 20, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.393, 2, 80], 'true,false,true': [0.041, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.157, 159, 22], 'false,false,false,true': [1.693, 46, 13], 'false,false,false,false': [1.692, 19, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.201, 4, 77], 'false,true,true,true': [1.122, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.049, 225, 0], 'false,false,true': [0.593, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.143, 32, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.348, 5, 94], 'true,true,false': [0.008, 0, 9], 'true,false,true': [0.025, 157, 0], 'true,false,false,true': [3.73e-09, 16, 0], 'true,false,false,false': [0.498, 13, 2], 'false,true': [0.961, 17, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.522, 14, 8]}]
{'': [0.22292766079066043, 0.22750000000000006], 'false': [0.2343749999999995, 0.21811224489795927], 'false,true': [-1.4802973661668753e-16, 2.7755575615628915e-18], 'true': [0.01868480725623786, 0.00952292899408267], 'true,false': [-1.9032394707859825e-16, 0.05693296602387513], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.0344110033176881, 0.09353000149170604], 'false': [0.061560127550344956, 0.1690124649004764], 'false,false': [0.043388429752066124, 0.1959283521623644], 'false,false,false': [0.0024961010525902383, 0.1853631726697969], 'false,true': [nan, 0.061560127550344956], 'false,false,true': [nan, 0.043388429752066124]}
{'': [0.017175575015192505, 0.09272071855391349], 'false': [nan, 0.09272071855391344], 'false,false': [-3.134747363647501e-16, 0.07788550048155016], 'false,false,false': [0.061406322795309644, 0.1345344660347788], 'true': [0.016533822556429694, 0.016339411222239624], 'true,true': [0.016387565301532736, 0.0], 'true,false': [0.0030461584053405044, 0.004618780323986826], 'false,false,true': [-4.9343245538895844e-17, 0.0]}
{'': [0.03249771244949762, 0.00046336034767764097], 'false': [1.2089336827932325e-05, 0.0007130667444323933], 'false,false': [nan, 0.0007130667444323933], 'false,false,false': [nan, 0.0007130667444323933], 'false,true': [nan, 1.2089336827932325e-05], 'false,true,false': [5.037827619136147e-06, 4.2331493659990723e-07]}
{'': [0.027219787586848104, 0.05955605585632889], 'false': [1.3061447348531253e-17, 0.05669038402219951], 'false,false': [0.05832941538273432, -1.5419764230904951e-18], 'false,false,true': [0.041257268241521095, 0.02068689313886867], 'true': [0.027814069431718512, 0.004999814617528908], 'false,true': [1.3061447348531253e-17, nan]}
{'': [0.0415989041530061, 0.08647443165635152], 'false': [0.0010039780261698905, 0.09106800389852811], 'false,false': [0.14451052715486692, 0.0005934173745899019], 'true': [nan, 0.04159890415300594], 'true,false': [nan, 0.0415989041530061], 'false,false,false': [0.0005285188012688439, 0.0006339155300584706]}
{'': [0.04960048851751014, 0.017150664601832736], 'true': [0.031689702238600216, 0.019320069213437086], 'false': [nan, 0.017150664601832736], 'false,false': [nan, 0.017150664601832736], 'false,false,false': [nan, 0.017150664601832736]}
{'': [0.02319665717571722, 0.03949995602969177], 'false': [nan, 0.03949995602969181], 'false,false': [0.024801132442502198, 0.0682262760028597], 'false,false,false': [0.04860094666299303, 0.10221721596597336], 'true': [0.023675632525038372, 0.0008433360865565606], 'true,false': [0.0008433360865565606, nan]}
{'': [0.04022923509925686, 0.03116421953813155], 'false': [0.018563810733381664, 0.08297991097653921], 'false,false': [0.020697590200975523, 0.0006397694277521168], 'false,true': [0.03816014284564195, 1.0689392449456905e-05], 'false,true,true': [0.03816014284564195, nan], 'false,false,false': [nan, 0.0006397694277521168]}
{'': [0.03103506358305801, 0.06290076609429957], 'false': [0.03182580190434778, 0.10206418773341717], 'false,false': [0.0, 0.10533875591642769], 'false,false,false': [nan, 0.10533875591642769], 'true': [0.05104575529327248, 0.0015334393985101604], 'true,true': [0.05568563753189033, 7.048744569409453e-06], 'true,false': [3.825592563411408e-06, 0.008589310506505712], 'true,false,false': [8.673617379884035e-19, 0.01651958640053059]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 10.112
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8462441731947502;  // std dev = 0.108, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.7914822684328456;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.1321892291516961;  // std dev = 0.098, 207.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.10814893509951236;  // std dev = 0.433, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7013312267072227;  // std dev = 0.154, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.7240418953413015;  // std dev = 0.010, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.3921565739085151;  // std dev = 0.821, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.06288008793860897;  // std dev = 2.827, 160.000 (wgt'ed) examples reached here.  /* #neg=148 #pos=12 */
%   | | | else return -0.056009973870199375;  // std dev = 1.403, 36.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=3 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.04015820315272604;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.12650846351394063;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.4486370916900217;  // std dev = 1.052, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.11879566740063957;  // std dev = 3.115, 60.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5248836399994802;  // std dev = 0.198, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.6493904989780006;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.5039808587970807;  // std dev = 0.781, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.6596781914482746;  // std dev = 0.134, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5622558751051673;  // std dev = 0.001, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7335810040432506;  // std dev = 0.006, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.12026406931546609;  // std dev = 0.058, 190.000 (wgt'ed) examples reached here.  /* #neg=190 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.10304749702782429;  // std dev = 2.108, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
%   | | | else return 0.17813411475486388;  // std dev = 2.136, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(E, D), tweets(A, F) )
%   | | | then return 0.3933142206943718;  // std dev = 1.386, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   | | | else return 0.44647244873574027;  // std dev = 0.238, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.3120448121478533;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.4294281396965293;  // std dev = 0.012, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5455031414462809;  // std dev = 0.318, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.5693736383726303;  // std dev = 0.007, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.6571852471978237;  // std dev = 0.916, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   else if ( follows(J, A) )
%   | then return -0.10804507562140223;  // std dev = 0.004, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | else return -0.17176255992402126;  // std dev = 0.157, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.2823112408968325;  // std dev = 1.682, 53.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=50 */
%   | | | else return 0.12925060243967795;  // std dev = 0.914, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.33942044838735486;  // std dev = 0.026, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.46094110728377813;  // std dev = 0.351, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.32247709319931844;  // std dev = 0.019, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.3493548850342459;  // std dev = 1.83e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.06390396933131416;  // std dev = 2.031, 216.000 (wgt'ed) examples reached here.  /* #neg=201 #pos=15 */
%   | | | else return 0.063473115395723;  // std dev = 2.456, 58.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=17 */
%   | | else return -0.0922047811628472;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.23266048948108117;  // std dev = 1.382, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.29672517318098296;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.2695657834612007;  // std dev = 0.008, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.2857882058621473;  // std dev = 1.431, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return -0.09218171571466942;  // std dev = 0.000, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | | else return -0.02786182008642504;  // std dev = 0.164, 36.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=5 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.28190533811668395;  // std dev = 0.051, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.4978689251227506;  // std dev = 0.128, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.12887249643605656;  // std dev = 0.032, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.23119723580164944;  // std dev = 0.009, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else return 0.18055307421554984;  // std dev = 0.212, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | else if ( follows(A, C), tweets(A, E) )
%   | | then return 0.02190548776922894;  // std dev = 0.893, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.22800642012689315;  // std dev = 0.053, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, F) )
%   | | then return 0.25651952552216906;  // std dev = 0.084, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.06005969968900604;  // std dev = 0.908, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(H, A) )
%   | | then return -0.0549932112300941;  // std dev = 0.117, 233.000 (wgt'ed) examples reached here.  /* #neg=218 #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0017476867260727692;  // std dev = 1.309, 37.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=9 */
%   | | | else return 0.01805745948899396;  // std dev = 1.541, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B), tweets(E, F) )
%   | | | then return 0.1547573404935571;  // std dev = 1.383, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return 0.18952716118056379;  // std dev = 0.046, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.18347922285640922;  // std dev = 0.024, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return 0.2517812694125091;  // std dev = 0.116, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.04202942242560063;  // std dev = 0.137, 231.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=23 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.23137827444253445;  // std dev = 0.969, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.12669057014585858;  // std dev = 0.024, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.030841563828503653;  // std dev = 0.835, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return 0.044015890476298156;  // std dev = 1.366, 19.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.17156581300059143;  // std dev = 0.010, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else return 0.07543630087882777;  // std dev = 0.339, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.22728614352677767;  // std dev = 0.273, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.15497414904006893;  // std dev = 0.036, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.3542109595152818;  // std dev = 0.919, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.0779237893846269;  // std dev = 0.051, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.31791990802071274;  // std dev = 0.028, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.45856003203228535;  // std dev = 0.235, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.12732076811610438;  // std dev = 0.022, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.10745589968382911;  // std dev = 1.668, 75.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=72 */
%   | | | else return 0.2864598840354184;  // std dev = 0.329, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.0390648209515039;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.0690452349857988;  // std dev = 0.037, 211.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.10282218520923352;  // std dev = 0.023, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.020644167746247555;  // std dev = 0.709, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
%   | | | else return 0.05768147898633632;  // std dev = 0.574, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | then return 0.24378856017926676;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.023358133206821525;  // std dev = 0.237, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.406', 'seconds']
Refined model CLL: -0.107565


******************************************
Best model found
******************************************
Results 

CLL : -0.105817 

AUC ROC : 0.994039 

AUC PR : 0.332714 

Precision : 0.33913 

Recall : 1.0 

F1 : 0.506494 

Total Learning Time : 10.112 

Total Inference Time : 15.242482423782349 

Total revision time: 36.75249499511719
Best scored revision CLL: -0.107565


Results 

CLL : -0.105817 

AUC ROC : 0.994039 

AUC PR : 0.332714 

Precision : 0.33913 

Recall : 1.0 

F1 : 0.506494 

Total Learning Time : 64.40566891860962 

Total Inference Time : 15.242482423782349 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.909
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.830111551921941;  // std dev = 1.708, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048824;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | | else return -0.07518439823382105;  // std dev = 0.249, 60.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 5.37e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else return 0.16895974591032248;  // std dev = 0.463, 74.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6833435491762164;  // std dev = 1.971, 89.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.048837758040773414;  // std dev = 0.245, 209.000 (wgt'ed) examples reached here.  /* #neg=190 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06774858873913611;  // std dev = 1.797, 57.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6413902219588423;  // std dev = 0.977, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.1319042773471447;  // std dev = 4.934, 135.000 (wgt'ed) examples reached here.  /* #neg=95 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5332429416644269;  // std dev = 1.769, 71.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.737631401161762;  // std dev = 0.218, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4286443429201133;  // std dev = 1.236, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6038034039519729;  // std dev = 0.179, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5711500573541936;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return 2.6936898484514605E-4;  // std dev = 4.549, 229.000 (wgt'ed) examples reached here.  /* #neg=195 #pos=34 */
%   | | | else return 0.05377049005817908;  // std dev = 4.107, 107.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5348185252405178;  // std dev = 2.945, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12181784420895536;  // std dev = 0.055, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | | else return -0.12729535818260423;  // std dev = 0.015, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1638133040803071;  // std dev = 0.241, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3116292671883938;  // std dev = 1.511, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.4798586357351513;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.304163840807944;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5133015906581485;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6342909215606276;  // std dev = 0.343, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10606795826522765;  // std dev = 1.813, 269.000 (wgt'ed) examples reached here.  /* #neg=264 #pos=5 */
%   | | else return 0.006199459890608813;  // std dev = 0.294, 77.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04033115173463137;  // std dev = 2.981, 233.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25466301802800156;  // std dev = 0.182, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4943018675095506;  // std dev = 1.596, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12899613236714383;  // std dev = 0.195, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | | else return -0.130340080248294;  // std dev = 0.220, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27045864279605253;  // std dev = 2.018, 125.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=121 */
%   | else return -0.09142777073390575;  // std dev = 1.792, 269.000 (wgt'ed) examples reached here.  /* #neg=262 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0019084931940340742;  // std dev = 2.450, 110.000 (wgt'ed) examples reached here.  /* #neg=82 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16109329964872857;  // std dev = 1.699, 86.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.26215504475580703;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0521410985909806;  // std dev = 0.142, 199.000 (wgt'ed) examples reached here.  /* #neg=180 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.007172041430730567;  // std dev = 2.209, 122.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=28 */
%   | | | else return 0.039034962078032365;  // std dev = 2.527, 84.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1888391593451069;  // std dev = 0.057, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2880305571225766;  // std dev = 0.868, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09188354655664119;  // std dev = 0.080, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3998481611791501;  // std dev = 0.830, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11594481751464412;  // std dev = 0.231, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1430891653125352;  // std dev = 1.981, 89.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=85 */
%   | | else return 0.11552561218917781;  // std dev = 1.071, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08555189281055475;  // std dev = 0.375, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09243123104039934;  // std dev = 0.011, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | | else return -0.025150907847342984;  // std dev = 0.959, 31.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.006155303705865333;  // std dev = 1.471, 78.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.21787778367697153;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02820011679425918;  // std dev = 1.989, 69.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.341', 'seconds']
Parameter learned model CLL:-0.109927 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.708, 3, 104], 'true,false,true': [0.0, 171, 0], 'true,false,false': [0.249, 56, 4], 'false,true,true,true': [0.977, 1, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [5.37e-08, 52, 0], 'false,false': [0.463, 51, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.971, 4, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.245, 190, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.797, 53, 4], 'false,false,false,true': [0.977, 1, 8], 'false,false,false,false': [4.934, 95, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.769, 4, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.218, 0, 3], 'true,false,false': [1.236, 2, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.179, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.549, 195, 34], 'false,false,false,false': [4.107, 84, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.945, 5, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.055, 169, 0], 'false,true,false,false': [0.015, 45, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.241, 93, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.511, 2, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.343, 0, 39], 'false,false,true,false': [1.813, 264, 5], 'false,false,false': [0.294, 64, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.981, 151, 82], 'false,true': [0.182, 0, 22], 'false,false,true': [1.596, 2, 52], 'false,false,false,true': [0.195, 88, 0], 'false,false,false,false': [0.22, 84, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.018, 4, 121], 'true,false': [1.792, 262, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.45, 82, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.699, 3, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.142, 180, 19], 'false,false,false,true': [2.209, 94, 28], 'false,false,false,false': [2.527, 60, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.057, 0, 78], 'false,true,true,true': [0.868, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.08, 239, 0], 'false,false,true': [0.83, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.231, 93, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.981, 4, 85], 'true,true,false': [1.071, 1, 19], 'true,false,true': [0.375, 136, 0], 'true,false,false,true': [0.011, 37, 0], 'true,false,false,false': [0.959, 27, 4], 'false,true': [1.471, 53, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.989, 48, 21]}]
{'': [0.21742936171702884, 0.21606648199446066], 'true': [0.02725128832212642, 0.017016172860328596], 'false': [0.21778435239973812, 0.21420745069393815], 'false,true': [0.03698224852071082, 5.551115123125783e-17], 'false,true,true': [0.04338842975206614, 0.0], 'true,false': [-1.7659687877078512e-16, 0.062222222222222096]}
{'': [0.043653314424454644, 0.11624007468272063], 'false': [0.06000385814997101, 0.16370868944064365], 'false,false': [0.05667014928498911, 0.19088086898517187], 'false,false,false': [0.10609367693466416, 0.18030985297040117], 'false,true': [nan, 0.06000385814997101], 'false,false,true': [nan, 0.05667014928498911]}
{'': [0.058796593706470425, 0.12344945060511364], 'false': [nan, 0.12344945060511525], 'false,false': [0.0017408017045464114, 0.11239956815442412], 'false,false,false': [0.0903659108620171, 0.1576048717723755], 'true': [0.04409271888616778, 0.1381654392489406], 'true,false': [0.01578778447182949, 0.1528465044141905], 'true,true': [0.04409271888616778, nan], 'false,false,true': [0.00533120522017357, -5.921189464667501e-17]}
{'': [0.053859104726769705, 0.0005548072690135623], 'false': [2.0071654015302982e-05, 0.0006224222631100988], 'false,false': [nan, 0.0006224222631100988], 'false,false,false': [nan, 0.0006224222631100988], 'false,true': [nan, 2.0071654015307133e-05], 'false,true,false': [1.7697820469188595e-05, 5.292634006217847e-06]}
{'': [0.028895693672533918, 0.07599262478536725], 'false': [0.0019920838057338806, 0.07464137901084428], 'false,false': [0.07166763415543853, 0.08626194605481642], 'false,false,true': [0.0030185945995982186, 0.012214236527676933], 'true': [0.028907697941349297, 0.0], 'false,true': [8.89759542979096e-06, 0.0]}
{'': [0.03813143929258612, 0.07974175432212909], 'false': [0.001508310830731037, 0.08244885233892345], 'false,false': [0.04716617130658773, 0.0005028428937323124], 'true': [nan, 0.03813143929258653], 'true,false': [nan, 0.03813143929258612], 'false,false,false': [0.00043401434020848284, 0.0005740248971924166]}
{'': [0.046851845802667484, 0.05457497640347054], 'false': [nan, 0.05457497640347061], 'false,false': [nan, 0.05457497640347054], 'false,false,false': [nan, 0.05457497640347054], 'true': [0.03256531938353231, 0.011941779361216633]}
{'': [0.03304665485868718, 0.0390718483041792], 'false': [nan, 0.0390718483041791], 'false,false': [0.020301700652962936, 0.05520345812450263], 'false,false,false': [0.0400116383697411, 0.07600329866571365], 'true': [0.03358086671936338, 9.419298743303106e-05], 'true,false': [9.419298743303106e-05, nan]}
{'': [0.003278881344906868, 0.03471772144753632], 'false': [0.019825263547003077, 0.06152359876174893], 'false,false': [0.01720436776628176, 0.0005728826602181392], 'false,true': [0.01981382475747088, 2.66505171230898e-05], 'false,true,true': [0.01981382475747088, nan], 'false,false,false': [nan, 0.0005728826602181392]}
{'': [0.03051118243718234, 0.04173541395521189], 'false': [0.02773232475831416, 0.05672642269762621], 'false,false': [0.0, 0.0573572128249423], 'false,false,false': [nan, 0.057357212824942265], 'true': [0.04664458798770529, 0.005695476798982686], 'true,true': [0.04409130218456374, 0.05738636392168735], 'true,false': [0.0010361583944878397, 0.014636722562174426], 'true,false,false': [3.4207327890518854e-06, 0.029639250624837573]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 38.242
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995112;  // std dev = 4.62e-07, 104.000 (wgt'ed) examples reached here.  /* #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 167.000 (wgt'ed) examples reached here.  /* #neg=167 */
%   | | else return -0.05674468192176434;  // std dev = 0.279, 47.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048766;  // std dev = 5.96e-08, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.2581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.24703782398840124;  // std dev = 2.068, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then if ( follows(E, A), follows(C, E) )
%   | | then return 0.7194734122109546;  // std dev = 0.000, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | else return 0.6824363751739175;  // std dev = 0.189, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | else return 0.7776508724547713;  // std dev = 0.159, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.7321206861770015;  // std dev = 0.197, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.12742172543118396;  // std dev = 0.054, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.7194734122109543;  // std dev = 7.30e-08, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.1254446385283915;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.08578487415644509;  // std dev = 1.463, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | | | else return 0.14732861376277337;  // std dev = 3.578, 72.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=23 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5656806398222358;  // std dev = 0.325, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.5878330338593402;  // std dev = 0.175, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.5571916302237946;  // std dev = 0.014, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.507941472779836;  // std dev = 1.003, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.11453642780920785;  // std dev = 0.054, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.08832940389442072;  // std dev = 3.196, 85.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=25 */
%   | | | else return 0.06770320255805501;  // std dev = 3.072, 57.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(D, E) )
%   | | | then return 0.41805650522226107;  // std dev = 0.038, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | | | else return 0.3401791962242977;  // std dev = 1.367, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | else return 0.5604398178142366;  // std dev = 0.202, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.35121449416359646;  // std dev = 0.860, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.6005825290162179;  // std dev = 0.342, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.6378503841138087;  // std dev = 0.172, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.7917415239618203;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(J, A) )
%   | then return -0.10297859154992797;  // std dev = 0.003, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   | else return -0.14819614694624744;  // std dev = 0.034, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.32902146326541476;  // std dev = 0.031, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else return 0.4782214487660894;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.3175766931653487;  // std dev = 0.008, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.25997458412653357;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0.4726967485553881;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.35551912259062823;  // std dev = 0.163, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09376398121990999;  // std dev = 0.045, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.07014176688347754;  // std dev = 2.608, 88.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=29 */
%   | | | else return 0.13979429327108908;  // std dev = 1.962, 28.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2385532374845535;  // std dev = 0.122, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else if ( tweets(A, E) )
%   | | then return -0.057053801130531205;  // std dev = 0.127, 183.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=18 */
%   | | else return -0.06924134129693296;  // std dev = 0.072, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G), follows(A, H) )
%   | | then return 0.29032678644959375;  // std dev = 0.122, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.19655934678908657;  // std dev = 0.958, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.2546266932149049;  // std dev = 0.038, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.20816458793679074;  // std dev = 0.977, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.4410190726689922;  // std dev = 1.266, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else return -0.12105033117630284;  // std dev = 0.034, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), tweets(C, D) )
%   | then return 0.2172054331622402;  // std dev = 0.017, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else return 0.16474167347136323;  // std dev = 0.211, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.08000113932252666;  // std dev = 0.070, 136.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=2 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.2328901764580669;  // std dev = 0.984, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.08048219771627688;  // std dev = 0.008, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2984822186051785;  // std dev = 1.031, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return -0.11823494257478853;  // std dev = 0.193, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.22000120944821777;  // std dev = 0.603, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.05019914902738032;  // std dev = 1.448, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.15654480144179572;  // std dev = 0.992, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return 0.17450127554668077;  // std dev = 0.015, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.18955106425604928;  // std dev = 0.041, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.2532752462773638;  // std dev = 0.002, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.04620733289161704;  // std dev = 0.107, 228.000 (wgt'ed) examples reached here.  /* #neg=205 #pos=23 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.1779665098086528;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.05606273314418538;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.007604241132742025;  // std dev = 1.652, 97.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=25 */
%   | | | else return 0.019167137879219896;  // std dev = 1.936, 43.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(F, E) )
%   | | | then return 0.11739476289656481;  // std dev = 1.389, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   | | | else return 0.25651528715323346;  // std dev = 0.101, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.010546386771909713;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.1762477434990014;  // std dev = 0.044, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.15364721233959988;  // std dev = 0.201, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | else return -0.071729858396001;  // std dev = 0.011, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.2485290248370888;  // std dev = 1.001, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.42478570885326444;  // std dev = 0.216, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.11871914336424387;  // std dev = 0.038, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.14559220126659345;  // std dev = 0.107, 88.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=87 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.14640567834564275;  // std dev = 0.007, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.1740384255060147;  // std dev = 0.781, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.06138308946347094;  // std dev = 0.040, 203.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H) )
%   | | then return 0.002764565747455426;  // std dev = 0.119, 63.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=21 */
%   | | else return -0.04392452588313609;  // std dev = 0.170, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return -0.07949144985761598;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.022770550650770053;  // std dev = 1.236, 43.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=14 */
%   | | | else return -0.004705693024188621;  // std dev = 1.203, 22.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.320', 'seconds']
Refined model CLL: -0.102248


******************************************
Best model found
******************************************
Results 

CLL : -0.100293 

AUC ROC : 0.993711 

AUC PR : 0.386532 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 38.242 

Total Inference Time : 13.029204845428467 

Total revision time: 63.92935392951965
Best scored revision CLL: -0.102248


Results 

CLL : -0.100293 

AUC ROC : 0.993711 

AUC PR : 0.386532 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 91.58252785301208 

Total Inference Time : 13.029204845428467 

Starting experiments for fasttext using borda_count 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.496
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8199809961682126;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048846;  // std dev = 0.000, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6963427563312394;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283919;  // std dev = 0.000, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5322793346749874;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360686;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4215006901144127;  // std dev = 1.402, 120.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=118 */
%   | else return -0.10159632948783653;  // std dev = 0.000, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4381673567810794;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783616;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3382373043513127;  // std dev = 0.010, 126.000 (wgt'ed) examples reached here.  /* #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926046;  // std dev = 1.03e-07, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
%   | | else return -0.09269127618926086;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2216530214166192;  // std dev = 2.393, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.67e-09, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21812552888637116;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 6.14e-08, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.15934502638008297;  // std dev = 1.970, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333673;  // std dev = 1.24e-07, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.073246225763337;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14354214958202868;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6.32e-08, 224.000 (wgt'ed) examples reached here.  /* #neg=224 */
%   | | else return -0.06842697784420267;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11022499042761086;  // std dev = 0.189, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202607;  // std dev = 5.43e-09, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.439', 'seconds']
Parameter learned model CLL:-0.092832 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 228, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.969, 4, 126], 'false,true': [0.0, 265, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 254, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.402, 2, 118], 'true,false': [0.0, 206, 0], 'false,true,true': [5.27e-09, 0, 8], 'false,true,false': [0.0, 18, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [0.01, 0, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.03e-07, 252, 0], 'false,false,false': [0.0, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.393, 6, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.67e-09, 223, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.996, 1, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.14e-08, 252, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.97, 4, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.24e-07, 239, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 22, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.32e-08, 224, 0], 'false,false,false': [0.0, 20, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.189, 5, 126], 'false,true': [0.0, 0, 0], 'false,false': [5.43e-09, 279, 0]}]
{'': [0.03671114736903867, -2.1814908554038162e-16], 'false': [-2.1814908554038162e-16, nan]}
{'': [0.02982248520709748, -8.379041695284201e-17], 'false': [-8.379041695284201e-17, nan]}
{'': [0.03671114736903362, -9.790943209292719e-17], 'false': [nan, -9.790943209292719e-17]}
{'': [0.06967969337870733, 0.062061622085952034], 'true': [0.016388888888888637, -9.054246026069237e-17], 'false': [0.062061622085952034, nan], 'false,true': [2.7755575615628914e-17, -3.0839528461809902e-18]}
{'': [8.236014947004923e-07, 5.5093774154331073e-17], 'true': [8.236014947004923e-07, nan], 'false': [nan, 5.5093774154331073e-17], 'false,false': [4.229421046191072e-17, -5.9476233462061954e-18], 'false,false,true': [nan, 4.229421046191072e-17]}
{'': [0.0433711169127748, 3.1862902948883416e-17], 'false': [nan, 3.1862902948883416e-17], 'false,false': [nan, 3.1862902948883416e-17]}
{'': [0.007809632777614296, 1.497919953859338e-17], 'false': [nan, 1.497919953859338e-17], 'false,false': [nan, 1.497919953859338e-17], 'false,false,false': [1.497919953859338e-17, nan]}
{'': [0.0298513256017081, 5.019399115163543e-17], 'true': [0.0298513256017081, nan], 'false': [6.41049277817036e-17, -1.8924256101565167e-18], 'false,false': [nan, -1.8924256101565167e-18]}
{'': [0.022708641456295045, 0.0], 'false': [nan, 0.0], 'false,false': [1.784287003861859e-17, -2.0816681711721684e-18], 'false,false,true': [nan, 1.784287003861859e-17]}
{'': [0.03559404944156215, 2.944677556353462e-17], 'false': [nan, 2.944677556353462e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 51.798
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.8414822684328459;  // std dev = 0.992, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.4581489350995122;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.14185106490048838;  // std dev = 0.000, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.7023773984163837;  // std dev = 0.990, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return 0.5888201930841982;  // std dev = 1.271, 14.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=12 */
%   | | else return 0.7318749019916229;  // std dev = 0.117, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.6425503352878773;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.46947341221095434;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( follows(H, A), follows(A, H) )
%   | | | then return 0.5528067455442878;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.7194734122109542;  // std dev = 7.30e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else return -0.12544463852839186;  // std dev = 0.000, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), tweets(E, D) )
%   | | then return 0.5710180354905947;  // std dev = 0.201, 87.000 (wgt'ed) examples reached here.  /* #pos=87 */
%   | | else if ( follows(A, F) )
%   | | | then return 0.24055492024626188;  // std dev = 0.844, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5564194060615608;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.5784390449436556;  // std dev = 0.040, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.3064179060997729;  // std dev = 1.191, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.56989721558123;  // std dev = 0.073, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.11231637819360683;  // std dev = 0.000, 246.000 (wgt'ed) examples reached here.  /* #neg=246 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.4321773162649318;  // std dev = 0.204, 74.000 (wgt'ed) examples reached here.  /* #pos=74 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.28592253097064385;  // std dev = 1.441, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return 0.4283542398241401;  // std dev = 0.181, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4182949865336231;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B), recursion_accounttype(E, B) )
%   | | | then return 0.3240311830185122;  // std dev = 0.037, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.2509845540307636;  // std dev = 1.884, 43.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=39 */
%   | | else return 0.3501922488596084;  // std dev = 0.238, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.32285823395743635;  // std dev = 0.014, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.002557844279066653;  // std dev = 1.102, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.34101575032087467;  // std dev = 0.141, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, H) )
%   | then return -0.09269127618926049;  // std dev = 7.60e-08, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   | else return -0.09269127618926087;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.25923998726625785;  // std dev = 0.054, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | | else return 0.2898976160475182;  // std dev = 0.086, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.16980478755728207;  // std dev = 0.942, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.2961756358357941;  // std dev = 0.081, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.14366690745082833;  // std dev = 1.199, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.16243373034505232;  // std dev = 1.573, 23.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=20 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.339802509725177;  // std dev = 0.054, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.26583157301384475;  // std dev = 0.130, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else return -0.08518475138839678;  // std dev = 5.82e-09, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), tweets(A, G) )
%   | | | then return 0.21335493741779374;  // std dev = 0.045, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.24826578590758352;  // std dev = 0.332, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | else return -0.020067646084543738;  // std dev = 0.608, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.10972122191136595;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.07427758811172043;  // std dev = 0.835, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.21878668721813668;  // std dev = 0.100, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, J) )
%   | then if ( follows(J, A) )
%   | | then return -0.07877675473109147;  // std dev = 6.52e-09, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | else return -0.0787767547310917;  // std dev = 0.000, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else return -0.07877675473109166;  // std dev = 6.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.14785178446624456;  // std dev = 1.395, 60.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=58 */
%   | | | else return 0.21695932186824485;  // std dev = 0.248, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return -0.08896394354629122;  // std dev = 0.785, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A), follows(A, G) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.1982834299280184;  // std dev = 0.048, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.23344049094382546;  // std dev = 0.077, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.16129403584652224;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1883188816133981;  // std dev = 0.090, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, J) )
%   | then return -0.07324622576333667;  // std dev = 8.33e-09, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | else return -0.07324622576333699;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), tweets(E, D) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.0872679673252073;  // std dev = 1.839, 51.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=47 */
%   | | | else return -0.1567664789591506;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(E, G), tweets(E, D) )
%   | | | then return 0.14363232430659456;  // std dev = 0.907, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0.20761695436639716;  // std dev = 0.088, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, A) )
%   | | | then return 0.16866584900747314;  // std dev = 0.043, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.2311629545247322;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(I, A) )
%   | | | then return 0.16770477307278736;  // std dev = 0.044, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.14256138663315437;  // std dev = 0.002, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else return -0.06842697784420261;  // std dev = 3.84e-09, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( follows(D, A), tweets(A, F) )
%   | | | then return 0.1456395036736284;  // std dev = 0.034, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | | else return 0.006795148410173713;  // std dev = 1.509, 19.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=16 */
%   | | else if ( follows(D, A), tweets(D, G) )
%   | | | then return 0.16231757006470712;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.1893375161982557;  // std dev = 0.066, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.19019781180561823;  // std dev = 0.135, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1416771520989258;  // std dev = 0.041, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.14651927294704453;  // std dev = 0.096, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.1252119208632174;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06419184008202625;  // std dev = 2.11e-08, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.963', 'seconds']
Refined model CLL: -0.090014


******************************************
Best model found
******************************************
Results 

CLL : -0.084816 

AUC ROC : 0.996516 

AUC PR : 0.520539 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 51.798 

Total Inference Time : 10.782837867736816 

Total revision time: 78.3525925579071
Best scored revision CLL: -0.090014


Results 

CLL : -0.084816 

AUC ROC : 0.996516 

AUC PR : 0.520539 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 105.99962052726745 

Total Inference Time : 10.782837867736816 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.408
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8392810105712079;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004877;  // std dev = 1.58e-07, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6982657356905919;  // std dev = 1.975, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839197;  // std dev = 0.000, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5463713354680019;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360678;  // std dev = 0.000, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.406592705666807;  // std dev = 1.712, 131.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=128 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.3628268023589187;  // std dev = 0.249, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   | | else return -0.10159632948783616;  // std dev = 3.23e-09, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.32299864360995595;  // std dev = 1.408, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926053;  // std dev = 9.88e-08, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | | else return -0.09269127618926103;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.26146472216094774;  // std dev = 0.999, 157.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.89e-09, 301.000 (wgt'ed) examples reached here.  /* #neg=301 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20708901226272133;  // std dev = 1.408, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 3.33e-08, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.16746883548625832;  // std dev = 1.714, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333685;  // std dev = 1.13e-07, 267.000 (wgt'ed) examples reached here.  /* #neg=267 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333704;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1433995479681764;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0684269778442028;  // std dev = 0.000, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
%   | | else return -0.06842697784420262;  // std dev = 2.46e-09, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11869946228637529;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202596;  // std dev = 6.84e-09, 303.000 (wgt'ed) examples reached here.  /* #neg=303 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.144', 'seconds']
Parameter learned model CLL:-0.087634 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.716, 3, 156], 'false,true': [1.58e-07, 319, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.975, 4, 156], 'false,true': [0.0, 284, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 309, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.712, 3, 128], 'true,false': [0.0, 242, 0], 'false,true,true': [0.249, 2, 28], 'false,true,false': [3.23e-09, 62, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.408, 2, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [9.88e-08, 220, 0], 'false,false,false': [0.0, 67, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.999, 1, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 301, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.408, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [3.33e-08, 296, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.714, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.13e-07, 267, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 52, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 260, 0], 'false,false,false': [2.46e-09, 68, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [6.84e-09, 303, 0]}]
{'': [0.018511925952302145, 7.795923433104547e-17], 'false': [7.795923433104547e-17, nan]}
{'': [0.024375000000001812, -7.81847200440251e-17], 'false': [-7.81847200440251e-17, nan]}
{'': [0.018511925952295713, -5.605009444709528e-17], 'false': [nan, -5.605009444709528e-17]}
{'': [0.06670506352954439, 0.0676883962389912], 'false': [0.0676883962389912, nan], 'false,true': [0.06222222222222205, 1.0744093786695063e-17], 'true': [0.022376318396363126, -7.156809580228281e-17]}
{'': [0.012555997316952146, 9.129360063119754e-17], 'true': [0.012555997316952146, nan], 'false': [nan, 9.129360063119754e-17], 'false,false': [4.4408920985006264e-17, -2.1541640776309008e-17], 'false,false,true': [nan, 4.4408920985006264e-17]}
{'': [0.006359415766068002, 3.540910643322758e-17], 'false': [nan, 3.540910643322758e-17], 'false,false': [nan, 3.540910643322758e-17]}
{'': [0.01254026890131545, 3.750753461571475e-18], 'false': [nan, 3.750753461571475e-18], 'false,false': [nan, 3.750753461571475e-18], 'false,false,false': [3.750753461571475e-18, nan]}
{'': [0.01848048232502449, 2.3666196136210234e-17], 'true': [0.01848048232502449, nan], 'false': [4.7402780826692076e-17, -1.2810265668751807e-17], 'false,false': [nan, -1.2810265668751807e-17]}
{'': [0.018483098806780684, -7.446617848095563e-17], 'false': [nan, -7.446617848095563e-17], 'false,false': [-8.540177112501205e-18, 6.530723674265627e-18], 'false,false,true': [nan, -8.540177112501205e-18]}
{'': [0.024360693863728355, 4.61676901329273e-17], 'false': [nan, 4.61676901329273e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 36.548
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.8581489350995107;  // std dev = 6.19e-07, 115.000 (wgt'ed) examples reached here.  /* #pos=115 */
%   | else if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.7331489350995123;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else return -0.14185106490048782;  // std dev = 1.15e-07, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.721493052386684;  // std dev = 0.062, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(A, E), follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.3861400788776214;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.6142102543162177;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.6394734122109544;  // std dev = 1.356, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return 0.7194734122109543;  // std dev = 8.43e-08, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.12544463852839205;  // std dev = 0.000, 326.000 (wgt'ed) examples reached here.  /* #neg=326 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), follows(A, E) )
%   | | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | | then return 0.5191549936417142;  // std dev = 1.394, 50.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=48 */
%   | | | else return 0.5686570382175975;  // std dev = 0.126, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | | then return 0.23497165448999355;  // std dev = 0.808, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5056464452433431;  // std dev = 1.371, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then return 0.42989883559905795;  // std dev = 0.331, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else return 0.5552951832381358;  // std dev = 0.000653, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.11231637819360668;  // std dev = 0.000, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.3981630153140499;  // std dev = 1.398, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | | | else return 0.4440558214653518;  // std dev = 0.086, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.37758822994480823;  // std dev = 0.954, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.36450119766018174;  // std dev = 0.964, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.3814599047181189;  // std dev = 0.241, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0.4198981573434555;  // std dev = 0.030, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.10159632948783626;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( recursion_accounttype(E, B), follows(D, E) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.31120185877306566;  // std dev = 0.924, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | | else return 0.3441530508592586;  // std dev = 0.152, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return -0.6696632778209248;  // std dev = 0.004, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.035693739762959864;  // std dev = 0.847, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.33433552036017355;  // std dev = 0.068, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(A, G) )
%   | then return -0.0926912761892605;  // std dev = 1.21e-07, 247.000 (wgt'ed) examples reached here.  /* #neg=247 */
%   | else return -0.09269127618926098;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.26911120939953487;  // std dev = 0.108, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | | else return 0.14192733467245527;  // std dev = 0.933, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return -0.04563109369046018;  // std dev = 1.195, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | else if ( tweets(A, G), follows(H, A) )
%   | | then if ( follows(A, I), tweets(H, G) )
%   | | | then return 0.2650460633698535;  // std dev = 0.065, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.2849732674615152;  // std dev = 0.053, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.26891320223072546;  // std dev = 0.033, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.25274450809611404;  // std dev = 0.007, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( tweets(A, K) )
%   | then return -0.08518475138839678;  // std dev = 5.51e-09, 217.000 (wgt'ed) examples reached here.  /* #neg=217 */
%   | else return -0.08518475138839678;  // std dev = 1.05e-08, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B), tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.1903960448831586;  // std dev = 0.986, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.21665858888126172;  // std dev = 0.052, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.23604657171917404;  // std dev = 0.071, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.2197806746413691;  // std dev = 0.032, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, H) )
%   | | | then return 0.01753845469379256;  // std dev = 1.218, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.30075075370814136;  // std dev = 0.141, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.22128882762012092;  // std dev = 0.077, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.1753642586284349;  // std dev = 0.988, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   else return -0.07877675473109143;  // std dev = 3.65e-08, 299.000 (wgt'ed) examples reached here.  /* #neg=299 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.18422827365336192;  // std dev = 0.071, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   | | | else return 0.19232517468246535;  // std dev = 0.037, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.225520850127274;  // std dev = 0.148, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.18559350719547407;  // std dev = 0.065, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(H, A), tweets(H, I) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.18839268100364598;  // std dev = 0.036, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.14394995450886125;  // std dev = 0.804, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.19439128444374926;  // std dev = 0.058, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.180160572988471;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else return -0.07324622576333706;  // std dev = 4.56e-09, 327.000 (wgt'ed) examples reached here.  /* #neg=327 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.15880930138347193;  // std dev = 0.064, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | | else return 0.16592086314727736;  // std dev = 0.030, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.16951214570394613;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1614928034320569;  // std dev = 0.056, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, H), follows(I, A) )
%   | | then if ( tweets(H, J), tweets(I, J) )
%   | | | then return 0.17610313285284582;  // std dev = 0.139, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.29498304826519295;  // std dev = 0.946, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.16407440842113838;  // std dev = 0.086, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.12708017952619685;  // std dev = 0.983, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   else return -0.0684269778442029;  // std dev = 0.000, 279.000 (wgt'ed) examples reached here.  /* #neg=279 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.1403747776297016;  // std dev = 0.041, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | | else return 0.13484489080680284;  // std dev = 0.048, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.1653276339372003;  // std dev = 0.117, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.14078914686298533;  // std dev = 0.119, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.14059242676736056;  // std dev = 0.026, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.1594482463916049;  // std dev = 0.044, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.27741282339848183;  // std dev = 0.924, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.10448944064779482;  // std dev = 0.987, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   else return -0.06419184008202594;  // std dev = 6.84e-09, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.502', 'seconds']
Refined model CLL: -0.085248


******************************************
Best model found
******************************************
Results 

CLL : -0.091236 

AUC ROC : 0.994972 

AUC PR : 0.450202 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 36.548 

Total Inference Time : 10.59520697593689 

Total revision time: 69.79674950218201
Best scored revision CLL: -0.085248


Results 

CLL : -0.091236 

AUC ROC : 0.994972 

AUC PR : 0.450202 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 97.44377747154236 

Total Inference Time : 10.59520697593689 

Run: 2
Starting experiments for fasttext using majority_vote 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.42
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8031030635398779;  // std dev = 2.381, 109.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048804;  // std dev = 0.000, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | | else return -0.0862955093449322;  // std dev = 0.229, 36.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0.23314893509951237;  // std dev = 0.484, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6745616573093867;  // std dev = 2.179, 87.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.041275577027018354;  // std dev = 0.256, 222.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09940936587382952;  // std dev = 0.984, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7464386189627429;  // std dev = 0.093, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.15465916468462987;  // std dev = 3.105, 52.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5697381569666428;  // std dev = 1.249, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.7384972374451555;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8249467914511082;  // std dev = 0.077, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5851046539752132;  // std dev = 0.126, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5798932719068289;  // std dev = 2.98e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5798932719068289;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03359094626862194;  // std dev = 3.642, 195.000 (wgt'ed) examples reached here.  /* #neg=174 #pos=21 */
%   | | | else return 0.043585212952989665;  // std dev = 2.750, 57.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.49083364298965365;  // std dev = 2.665, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11741114712317445;  // std dev = 0.001, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | | | else return -0.12568566311143728;  // std dev = 0.000391, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1672822020487913;  // std dev = 0.223, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3044068146266263;  // std dev = 1.673, 76.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=73 */
%   | else return 0.413974972488545;  // std dev = 0.142, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3211718562928777;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6344876420077931;  // std dev = 0.174, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08432639612439516;  // std dev = 2.275, 232.000 (wgt'ed) examples reached here.  /* #neg=223 #pos=9 */
%   | | else return -0.10557995613635514;  // std dev = 1.32e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.027373655612292404;  // std dev = 3.590, 274.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26454986414850806;  // std dev = 0.113, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5201082109279511;  // std dev = 0.761, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11710214660695795;  // std dev = 0.108, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.11691924738352963;  // std dev = 0.171, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.25726949144350186;  // std dev = 2.345, 112.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=107 */
%   | else return -0.07713791149470647;  // std dev = 1.990, 233.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.004375999074753772;  // std dev = 0.694, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18348818787586252;  // std dev = 1.396, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.23318209009667185;  // std dev = 0.040, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04422475882641105;  // std dev = 0.159, 199.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.003970304116703203;  // std dev = 1.369, 60.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=13 */
%   | | | else return 0.12133349012690972;  // std dev = 1.539, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.11907443871618055;  // std dev = 0.269, 84.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.23150511741354815;  // std dev = 1.551, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09126825433751945;  // std dev = 0.049, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.38655130213467703;  // std dev = 0.916, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12062289408090009;  // std dev = 0.212, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1755868398323636;  // std dev = 1.870, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | | else return 0.14878107083655548;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08457549564100526;  // std dev = 0.073, 153.000 (wgt'ed) examples reached here.  /* #neg=153 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0794335231268635;  // std dev = 8.33e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.019581929228296862;  // std dev = 0.488, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.04491980108998625;  // std dev = 0.955, 30.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20540008064151483;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04388085343884663;  // std dev = 1.318, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.599', 'seconds']
Parameter learned model CLL:-0.111787 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.381, 6, 103], 'true,false,true': [0.0, 148, 0], 'true,false,false': [0.229, 34, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 18, 0], 'false,false': [0.484, 15, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [2.179, 5, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.256, 200, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.984, 30, 1], 'false,false,false,true': [0.093, 0, 4], 'false,false,false,false': [3.105, 35, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.249, 2, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.077, 0, 2], 'true,false,false': [0.126, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [2.98e-08, 0, 9], 'false,false,true,false': [2.11e-08, 0, 8], 'false,false,false,true': [3.642, 174, 21], 'false,false,false,false': [2.75, 46, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.665, 5, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.001, 196, 0], 'false,true,false,false': [0.000391, 45, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.223, 50, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.673, 3, 73], 'true,false': [0.142, 0, 4], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.174, 0, 23], 'false,false,true,false': [2.275, 223, 9], 'false,false,false': [1.32e-09, 12, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.59, 183, 91], 'false,true': [0.113, 0, 13], 'false,false,true': [0.761, 0, 22], 'false,false,false,true': [0.108, 24, 0], 'false,false,false,false': [0.171, 36, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.345, 5, 107], 'true,false': [1.99, 222, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.694, 18, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.396, 2, 80], 'true,false,true': [0.04, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.159, 177, 22], 'false,false,false,true': [1.369, 47, 13], 'false,false,false,false': [1.539, 13, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.269, 7, 77], 'false,true,true,true': [1.551, 2, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.049, 209, 0], 'false,false,true': [0.916, 1, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.212, 48, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.87, 3, 94], 'true,true,false': [0.01, 0, 9], 'true,false,true': [0.073, 153, 0], 'true,false,false,true': [8.33e-09, 14, 0], 'true,false,false,false': [0.488, 10, 2], 'false,true': [0.955, 18, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.318, 16, 8]}]
{'': [0.22993861314634073, 0.2376543209876543], 'false': [0.23999999999999952, 0.23437500000000003], 'false,true': [-1.4802973661668753e-16, -3.0839528461809902e-18], 'true': [0.05201582358387565, 0.010751417769376017], 'true,false': [-1.0802169969325848e-16, 0.05246913580246913], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.05456650674705668, 0.09492421106689909], 'false': [0.06560438482562768, 0.15710560126940684], 'false,false': [0.031217481789802298, 0.19550273006141447], 'false,false,false': [0.002181367125499989, 0.1853591096687149], 'false,true': [nan, 0.06560438482562768], 'false,false,true': [nan, 0.031217481789802298]}
{'': [0.021948799867058045, 0.09944538037876427], 'false': [nan, 0.09944538037876428], 'false,false': [-1.0449157878825003e-16, 0.08370331535057551], 'false,false,false': [0.06803505937149157, 0.1326963107132527], 'true': [0.021746442169947994, 0.016418342287964755], 'true,true': [0.021658344208920828, 0.0], 'true,false': [0.0029529661316509692, 0.003976280063119619], 'false,false,true': [9.868649107779169e-17, 5.551115123125783e-17]}
{'': [0.05421385757868579, 0.0005116832615262303], 'false': [1.0406418954476837e-05, 0.0009937055689168562], 'false,false': [nan, 0.0009937055689168562], 'false,false,false': [nan, 0.0009937055689168562], 'false,true': [nan, 1.0406418954476837e-05], 'false,true,false': [1.0457087379685118e-08, 3.40298999596595e-09]}
{'': [0.035818288654731245, 0.06338197625403039], 'false': [-1.3061447348531253e-17, 0.060312065714800384], 'false,false': [0.06281719726000079, 2.3129646346357427e-18], 'false,false,true': [0.0013187649087005025, 0.02231028620295439], 'true': [0.03683739313595112, 0.005050381355162614], 'false,true': [-1.3061447348531253e-17, nan]}
{'': [0.04702907275586244, 0.08067875671617694], 'false': [0.0009858208067996875, 0.08724299240990963], 'false,false': [0.026314513777970963, 0.000684186476715957], 'true': [nan, 0.04702907275586239], 'true,false': [nan, 0.04702907275586244], 'false,false,false': [0.0004888107382832, 0.0008144235881540772]}
{'': [0.05193430438942225, 0.018514824060890767], 'true': [0.049099206781492745, 0.01699341447294722], 'false': [nan, 0.018514824060890767], 'false,false': [nan, 0.018514824060890767], 'false,false,false': [nan, 0.018514824060890767]}
{'': [0.023280843373682497, 0.034938776777047556], 'false': [nan, 0.03493877677704733], 'false,false': [0.025151716516730135, 0.054825626857401555], 'false,false,false': [0.031256344518021804, 0.10761692130602235], 'true': [0.02377075154467568, 0.0007839216811719174], 'true,false': [0.0007839216811719174, nan]}
{'': [0.07245865624338073, 0.032091325423928285], 'false': [0.022441228984157322, 0.0644198100397072], 'false,false': [0.046627240615948945, 0.0009395693990028366], 'false,true': [0.07071246053258469, 1.1496523444729874e-05], 'false,true,true': [0.07071246053258469, nan], 'false,false,false': [nan, 0.0009395693990028366]}
{'': [0.02827508762960094, 0.04863038583733099], 'false': [0.030427997214119713, 0.07045721792280568], 'false,false': [0.0, 0.07234939690601003], 'false,false,false': [nan, 0.07234939690601003], 'true': [0.03303709251945839, 0.0016243478976312189], 'true,true': [0.03604036025334016, 1.0999923762500869e-05], 'true,false': [3.510625082490377e-05, 0.010058768486269992], 'true,false,false': [4.956352788505163e-18, 0.019865114306503513]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 11.43
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.92e-07, 95.000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.13223568028510374;  // std dev = 0.098, 208.000 (wgt'ed) examples reached here.  /* #neg=206 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( recursion_accounttype(K, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.2867203636709409;  // std dev = 0.495, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.7051876979252397;  // std dev = 0.119, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | else return 0.7447797552301468;  // std dev = 0.139, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.7194734122109546;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.06158321591379539;  // std dev = 2.822, 154.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=12 */
%   | | | else return -0.06882309810169396;  // std dev = 1.414, 44.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=3 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return -0.001503330563595074;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return -0.12650333056359503;  // std dev = 1.67e-08, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7608941694169665;  // std dev = 0.068, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.11951834011937645;  // std dev = 3.130, 58.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5285881951079788;  // std dev = 1.393, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | | | else return 0.41250929388914176;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6728589535577806;  // std dev = 0.282, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5648484992809307;  // std dev = 0.011, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.732017023204285;  // std dev = 0.002, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11980945499553;  // std dev = 0.051, 209.000 (wgt'ed) examples reached here.  /* #neg=209 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06137685711343132;  // std dev = 2.219, 38.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=9 */
%   | | | else return 0.11036666311318542;  // std dev = 2.221, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(D, E) )
%   | | | then return 0.42753270271202487;  // std dev = 8.43e-08, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.38299663545484847;  // std dev = 1.002, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else if ( follows(F, D), follows(A, F) )
%   | | | then return 0.21868227383694167;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.42649713232054637;  // std dev = 0.045, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return 0.47852316204718254;  // std dev = 0.324, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5609211661198124;  // std dev = 0.958, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.6815612270204792;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7391677461058496;  // std dev = 0.240, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.11870807974897171;  // std dev = 0.028, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.28260972614287533;  // std dev = 1.376, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.3318095237271605;  // std dev = 0.023, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.20773630478971278;  // std dev = 0.329, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else return 0.40589678630723913;  // std dev = 0.372, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3362129297450152;  // std dev = 0.080, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.47504755057932024;  // std dev = 0.311, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08041453478077391;  // std dev = 2.068, 230.000 (wgt'ed) examples reached here.  /* #neg=221 #pos=9 */
%   | | else return -0.09135042773571546;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.2668608457472291;  // std dev = 0.043, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.2216915573928715;  // std dev = 0.973, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return 0.09954744710900297;  // std dev = 0.912, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then return -0.050068364050028846;  // std dev = 0.120, 151.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=15 */
%   | | else return -0.048010925340945594;  // std dev = 0.121, 47.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.27148683871741547;  // std dev = 0.047, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.32717192177682713;  // std dev = 0.987, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.5672089634082249;  // std dev = 0.367, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.11496420810576387;  // std dev = 0.032, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.22614857252640702;  // std dev = 0.236, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(A, D) )
%   | | | then return 0.10335475970346518;  // std dev = 0.922, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.27908866722717973;  // std dev = 0.998, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.08484792522283308;  // std dev = 0.050, 202.000 (wgt'ed) examples reached here.  /* #neg=202 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.16483501048008106;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.01945215749817863;  // std dev = 1.152, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | | else return 0.03748874855261039;  // std dev = 1.552, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.16678462128106658;  // std dev = 0.979, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.2080482217687761;  // std dev = 0.014, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.1953158332512263;  // std dev = 0.146, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.2677421063402612;  // std dev = 0.068, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.21494606069293398;  // std dev = 0.078, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.2704117991571141;  // std dev = 0.002, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.07902629180597996;  // std dev = 0.078, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.013390818039864196;  // std dev = 1.283, 35.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=9 */
%   | | | else return -0.04232726712785901;  // std dev = 1.643, 36.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.15835195482063688;  // std dev = 0.022, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.053961213706969074;  // std dev = 1.333, 18.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=16 */
%   | | else return 0.1758489588336764;  // std dev = 0.058, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(F, A) )
%   | | then return -0.0668444318944083;  // std dev = 0.966, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.11894984126588587;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.19219831776575044;  // std dev = 0.199, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.07317993387076559;  // std dev = 0.040, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.4135742863284313;  // std dev = 0.067, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.13720078687062526;  // std dev = 0.144, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.09428716720025793;  // std dev = 0.236, 100.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=94 */
%   | | else return -0.051984218336841644;  // std dev = 0.382, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | else return -0.06497198554855728;  // std dev = 0.038, 231.000 (wgt'ed) examples reached here.  /* #neg=229 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(H, G), recursion_accounttype(G, B) )
%   | | | then return -0.5567031420968841;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.008397053687004151;  // std dev = 0.776, 25.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=7 */
%   | | else return 0.019231409027070143;  // std dev = 0.184, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.10607477176506674;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.07469913929630999;  // std dev = 0.888, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   | | | else return -0.021546493209379982;  // std dev = 1.106, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.702', 'seconds']
Refined model CLL: -0.103266


******************************************
Best model found
******************************************
Results 

CLL : -0.102259 

AUC ROC : 0.99444 

AUC PR : 0.376203 

Precision : 0.334764 

Recall : 1.0 

F1 : 0.501608 

Total Learning Time : 11.43 

Total Inference Time : 12.655712842941284 

Total revision time: 34.6761992931366
Best scored revision CLL: -0.103266


Results 

CLL : -0.102259 

AUC ROC : 0.99444 

AUC PR : 0.376203 

Precision : 0.334764 

Recall : 1.0 

F1 : 0.501608 

Total Learning Time : 62.32596049308777 

Total Inference Time : 12.655712842941284 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.733
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.821111898062474;  // std dev = 1.963, 108.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048816;  // std dev = 0.000, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | | else return -0.07835900140842422;  // std dev = 0.244, 63.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 5.77e-08, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return 0.14928817560584082;  // std dev = 0.454, 79.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7301942413693343;  // std dev = 0.196, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0408756190602525;  // std dev = 0.258, 188.000 (wgt'ed) examples reached here.  /* #neg=169 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06616801105531883;  // std dev = 1.797, 56.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7493518672374928;  // std dev = 0.146, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.12056825862664092;  // std dev = 4.998, 140.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5479191850338978;  // std dev = 1.349, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7319597245286298;  // std dev = 0.224, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5887897776852999;  // std dev = 0.200, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.47537514763374444;  // std dev = 0.794, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.499354989390203;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.013084892181967801;  // std dev = 4.611, 254.000 (wgt'ed) examples reached here.  /* #neg=220 #pos=34 */
%   | | | else return 0.08419904392050767;  // std dev = 4.053, 92.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5381334168727276;  // std dev = 2.790, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12101185857656065;  // std dev = 0.041, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | | else return -0.13088067231064968;  // std dev = 0.008, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16363276061170165;  // std dev = 0.262, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3071286819819851;  // std dev = 1.156, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return 0.4695556121849501;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31372113577336946;  // std dev = 0.010, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.533613273753907;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5636637504847583;  // std dev = 1.660, 42.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=39 */
%   | | | else return -0.10355192445224133;  // std dev = 1.797, 253.000 (wgt'ed) examples reached here.  /* #neg=248 #pos=5 */
%   | | else return 0.015908618216138516;  // std dev = 0.312, 71.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.02509330890032998;  // std dev = 3.257, 242.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26006479709916613;  // std dev = 0.184, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5038296192461583;  // std dev = 1.700, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12553559121189609;  // std dev = 0.206, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
%   | | | else return -0.12975438996516775;  // std dev = 0.203, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26742894133606626;  // std dev = 2.200, 125.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=121 */
%   | else return -0.08715340733554056;  // std dev = 1.682, 234.000 (wgt'ed) examples reached here.  /* #neg=227 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03661790516529468;  // std dev = 2.286, 90.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18015630691029588;  // std dev = 0.991, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.26492313714609034;  // std dev = 0.026, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04905596972317998;  // std dev = 0.156, 186.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.005962895639813405;  // std dev = 2.137, 124.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=28 */
%   | | | else return 0.07018647099533662;  // std dev = 2.430, 70.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1682241639508346;  // std dev = 0.110, 79.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2500552495316904;  // std dev = 1.519, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09142602409797211;  // std dev = 0.088, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4034282709212443;  // std dev = 0.778, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11705228403887429;  // std dev = 0.292, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1642577318603869;  // std dev = 1.666, 87.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=85 */
%   | | else return 0.12980430503299303;  // std dev = 0.805, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08263879140036363;  // std dev = 0.030, 136.000 (wgt'ed) examples reached here.  /* #neg=136 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09376202702454875;  // std dev = 0.043, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | | | else return -0.013850637096890536;  // std dev = 0.964, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.03209470547495664;  // std dev = 1.296, 65.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.17619230025673194;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03897957812200118;  // std dev = 1.931, 62.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.723', 'seconds']
Parameter learned model CLL:-0.112507 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.963, 4, 104], 'true,false,true': [0.0, 161, 0], 'true,false,false': [0.244, 59, 4], 'false,true,true,true': [0.0, 0, 21], 'false,true,true,false': [0.894, 1, 4], 'false,true,false': [5.77e-08, 55, 0], 'false,false': [0.454, 56, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.196, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.258, 169, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.797, 52, 4], 'false,false,false,true': [0.146, 0, 8], 'false,false,false,false': [4.998, 100, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.349, 2, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.224, 0, 3], 'true,false,false': [0.2, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.794, 1, 6], 'false,false,true,false': [0.968, 1, 15], 'false,false,false,true': [4.611, 220, 34], 'false,false,false,false': [4.053, 69, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.79, 3, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.041, 160, 0], 'false,true,false,false': [0.008, 29, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.262, 98, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.156, 1, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.01, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.66, 3, 39], 'false,false,true,false': [1.797, 248, 5], 'false,false,false': [0.312, 58, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.257, 160, 82], 'false,true': [0.184, 0, 22], 'false,false,true': [1.7, 1, 52], 'false,false,false,true': [0.206, 88, 0], 'false,false,false,false': [0.203, 69, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.2, 4, 121], 'true,false': [1.682, 227, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.286, 62, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.991, 1, 83], 'true,false,true': [0.026, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.156, 167, 19], 'false,false,false,true': [2.137, 96, 28], 'false,false,false,false': [2.43, 46, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.11, 1, 78], 'false,true,true,true': [1.519, 2, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.088, 231, 0], 'false,false,true': [0.778, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.292, 98, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.666, 2, 85], 'true,true,false': [0.805, 1, 19], 'true,false,true': [0.03, 136, 0], 'true,false,false,true': [0.043, 35, 0], 'true,false,false,false': [0.964, 20, 4], 'false,true': [1.296, 40, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.931, 41, 21]}]
{'': [0.21948033096240602, 0.21000000000000085], 'true': [0.035665294924556515, 0.017538265306122344], 'false': [0.21338210638622274, 0.20637718314372794], 'false,true': [0.03698224852071082, 6.055761952500853e-17], 'false,true,true': [0.0, 0.15999999999999986], 'true,false': [-1.5170749404815803e-16, 0.05946082136558317]}
{'': [0.0004537735330547367, 0.1211322594362535], 'false': [0.06649991150283131, 0.16275971713142007], 'false,false': [0.05768550107046241, 0.1891435929504524], 'false,false,false': [0.002678166224318601, 0.17842747227531422], 'false,true': [nan, 0.06649991150283131], 'false,false,true': [nan, 0.05768550107046241]}
{'': [0.025194572112684145, 0.12153688190005299], 'false': [nan, 0.12153688190005142], 'false,false': [0.0683121092522848, 0.1107573625436931], 'false,false,false': [0.0836942339836306, 0.17852744927389094], 'false,false,true': [0.09012547900412675, 0.05859375000000003], 'true': [0.026379408879709288, 0.01225387029324988], 'true,true': [0.026379408879709288, nan], 'true,false': [0.016697854713913978, 0.004997112404831305]}
{'': [0.04895553393236409, 0.0006333621594242203], 'false': [2.2070834028840542e-05, 0.0006995151162755083], 'false,false': [nan, 0.0006995151162755083], 'false,false,false': [nan, 0.0006995151162755083], 'false,true': [nan, 2.2070834028840542e-05], 'false,true,false': [1.0711923439821192e-05, 2.291174851396822e-06]}
{'': [0.01724537208730092, 0.0805039810201883], 'false': [0.002197640465443277, 0.07915892175451468], 'false,false': [0.0746428082325975, 0.09744054487162569], 'false,false,true': [0.06559989073595572, 0.012762906432626498], 'true': [0.01713251080813744, 0.0], 'false,true': [5.0199960653474205e-06, 0.0]}
{'': [0.04384487285111403, 0.08547777803043782], 'false': [0.0015343007318551103, 0.08933599061736243], 'false,false': [0.054506991358805906, 0.0005354280033408696], 'true': [nan, 0.04384487285111402], 'true,false': [nan, 0.04384487285111403], 'false,false,false': [0.00048015493488632775, 0.000595945095680319]}
{'': [0.04989173244372578, 0.05805801606135512], 'false': [nan, 0.05805801606135518], 'false,false': [nan, 0.05805801606135512], 'false,false,false': [nan, 0.05805801606135512], 'true': [0.03871199279058625, 0.012086433283457905]}
{'': [0.011601784796074373, 0.04142568975777617], 'false': [nan, 0.041425689757776156], 'false,false': [0.024397264200647212, 0.05531429631853138], 'false,false,false': [0.03682756590210725, 0.08435581656002947], 'true': [0.011702569362620839, 0.00035052017913668465], 'true,false': [0.00035052017913668465, nan]}
{'': [0.012141165716278298, 0.037135136079522076], 'false': [0.02320991449809086, 0.060770391801740514], 'false,false': [0.015144057280242328, 0.000871644008160587], 'false,true': [0.0576544103712191, 3.37711796156378e-05], 'false,true,true': [0.0576544103712191, nan], 'false,false,false': [nan, 0.000871644008160587]}
{'': [0.02737617299514972, 0.04224818329505788], 'false': [0.025833198814967318, 0.05885675267023759], 'false,false': [0.0, 0.06016700349772066], 'false,false,false': [nan, 0.06016700349772076], 'true': [0.03217222644825408, 0.0053463641330079165], 'true,true': [0.031892428775824044, 0.0324241840807721], 'true,false': [6.687047412583982e-06, 0.01733587908109901], 'true,false,false': [5.230684225837136e-05, 0.038752884216313024]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 12.11
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8462441731947502;  // std dev = 0.108, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else return 0.7711924133603816;  // std dev = 0.282, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | else return -0.12164904469846806;  // std dev = 0.141, 198.000 (wgt'ed) examples reached here.  /* #neg=194 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(A, H) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.14185106490048766;  // std dev = 6.14e-08, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B), follows(J, I) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else return 0.13087620782678505;  // std dev = 0.445, 33.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.676415332035936;  // std dev = 0.208, 66.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=63 */
%   | else return 0.7355473623330667;  // std dev = 0.203, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.6674199895195512;  // std dev = 1.294, 23.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=21 */
%   | | | else return 0.23668465633364488;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return -0.12767778924107606;  // std dev = 0.000, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7256407597966984;  // std dev = 0.071, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.12544463852839152;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1127955810856943;  // std dev = 2.690, 49.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=14 */
%   | | | else return 0.14145896494019375;  // std dev = 2.510, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then if ( follows(A, E), tweets(E, F) )
%   | | then return 0.5686086512201437;  // std dev = 0.014, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else if ( follows(A, C), tweets(A, D) )
%   | | | then return 0.45778297945566554;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.5564163134139748;  // std dev = 0.023, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return 0.6448422243489602;  // std dev = 0.222, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.6028772018475246;  // std dev = 0.067, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.11085652114849177;  // std dev = 0.730, 155.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=1 */
%   | | | else return 0.01669332871993753;  // std dev = 2.645, 89.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=16 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.08222171704229574;  // std dev = 3.503, 106.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=29 */
%   | | | else return 0.2761749494623125;  // std dev = 2.170, 23.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(D, F) )
%   | | then return 0.4345008150035777;  // std dev = 0.239, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else if ( tweets(A, G), follows(D, H) )
%   | | | then return 0.26166279143732507;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.3505074689752621;  // std dev = 0.803, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(I, A), recursion_accounttype(I, B) )
%   | | then return 0.42591321543089283;  // std dev = 0.213, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.5659182934489473;  // std dev = 0.291, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.716233970556155;  // std dev = 0.281, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else if ( follows(K, A) )
%   | then if ( tweets(A, L) )
%   | | then return -0.10784401783198666;  // std dev = 0.081, 184.000 (wgt'ed) examples reached here.  /* #neg=184 */
%   | | else return -0.11154425823002703;  // std dev = 0.033, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else return -0.15225420803711515;  // std dev = 0.325, 84.000 (wgt'ed) examples reached here.  /* #neg=84 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A) )
%   | | then return 0.318213624010104;  // std dev = 0.123, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.34336603692949513;  // std dev = 1.05e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.08744099229604857;  // std dev = 0.763, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else return 0.5475439222409595;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3272676168025081;  // std dev = 0.045, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.33042414694874295;  // std dev = 1.488, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | | else return -0.0981558993567135;  // std dev = 0.082, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.031137022116178376;  // std dev = 1.864, 68.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=19 */
%   | | | else return 0.05622615753077637;  // std dev = 2.817, 70.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=21 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.26339665091945036;  // std dev = 0.008, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( tweets(A, E) )
%   | | then return -0.04961506659261848;  // std dev = 0.128, 158.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=14 */
%   | | else return -0.07615871383595291;  // std dev = 0.076, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.3221648917145789;  // std dev = 0.198, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.2513568708804077;  // std dev = 1.49e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return -0.0027109631632313003;  // std dev = 0.861, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( tweets(A, K) )
%   | | | then return 0.3748958593967141;  // std dev = 0.362, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0.5373838426525335;  // std dev = 0.355, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.115636082327733;  // std dev = 0.030, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then return 0.2135459683192687;  // std dev = 0.011, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return 0.16369176405436486;  // std dev = 0.213, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | else return 0.23075010179893457;  // std dev = 0.039, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, F), follows(A, E) )
%   | | | then return -0.06776092290795128;  // std dev = 1.210, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.38011667101593394;  // std dev = 0.140, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.08392376547578122;  // std dev = 0.005, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.11824543603267101;  // std dev = 0.327, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.02712114919275993;  // std dev = 1.284, 48.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=15 */
%   | | | else return 0.012266241007972;  // std dev = 2.380, 86.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=25 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.1677262040022354;  // std dev = 0.120, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | | else return 0.11872852108621451;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0.30232848674530505;  // std dev = 0.022, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.15845310010191935;  // std dev = 0.345, 26.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=23 */
%   | | else return -0.0776472516387216;  // std dev = 0.005, 195.000 (wgt'ed) examples reached here.  /* #neg=195 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.29102331709205953;  // std dev = 0.903, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return -0.1141680750931591;  // std dev = 0.144, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.03363982557701954;  // std dev = 0.973, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return -0.015586435104148078;  // std dev = 1.531, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1440561045556232;  // std dev = 0.124, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.08868349853469658;  // std dev = 0.466, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0.1792038134148112;  // std dev = 0.049, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.19833711868142317;  // std dev = 0.963, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.06860604936864668;  // std dev = 1.325, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else return -0.0723173543249661;  // std dev = 0.005, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.23937537336634748;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.3303734024674352;  // std dev = 0.965, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | else return -0.11037102491821191;  // std dev = 0.028, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1302359544654241;  // std dev = 0.172, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else return -0.06220412221725062;  // std dev = 0.043, 214.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( follows(A, F), follows(F, G) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return -4.408784083103067E-4;  // std dev = 0.543, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | | | else return -0.01846126088774724;  // std dev = 1.148, 35.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=11 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.10511701498134908;  // std dev = 0.229, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.09404310218039359;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.20790063616838728;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.001522870030761302;  // std dev = 1.143, 49.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=14 */
%   | | | else return -0.021892261683415896;  // std dev = 1.312, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.534', 'seconds']
Refined model CLL: -0.101403


******************************************
Best model found
******************************************
Results 

CLL : -0.100484 

AUC ROC : 0.993303 

AUC PR : 0.372484 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 12.11 

Total Inference Time : 12.52254033088684 

Total revision time: 37.054184024810795
Best scored revision CLL: -0.101403


Results 

CLL : -0.100484 

AUC ROC : 0.993303 

AUC PR : 0.372484 

Precision : 0.336 

Recall : 1.0 

F1 : 0.502994 

Total Learning Time : 64.70394522476197 

Total Inference Time : 12.52254033088684 

Starting experiments for fasttext using borda_count 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.463
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8502749193514789;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048843;  // std dev = 0.000, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.682891947228392;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283919;  // std dev = 0.000, 268.000 (wgt'ed) examples reached here.  /* #neg=268 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5066137867241891;  // std dev = 0.237, 134.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360676;  // std dev = 0.000, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.423673739319042;  // std dev = 1.402, 120.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=118 */
%   | else return -0.10159632948783655;  // std dev = 0.000, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4403404059857099;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783616;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.31644802688358453;  // std dev = 1.714, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926047;  // std dev = 8.43e-08, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
%   | | else return -0.09269127618926087;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.2200813939075609;  // std dev = 2.575, 133.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.89e-09, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.22341814924174355;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 5.58e-08, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.14851705370772536;  // std dev = 2.393, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333682;  // std dev = 1.14e-07, 260.000 (wgt'ed) examples reached here.  /* #neg=260 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333699;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1561704916894403;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6.50e-08, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | | else return -0.06842697784420268;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1434554507650314;  // std dev = 0.081, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 1.86e-09, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.922', 'seconds']
Parameter learned model CLL:-0.092958 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [0.996, 1, 126], 'false,true': [0.0, 232, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 268, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.237, 8, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 231, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.402, 2, 118], 'true,false': [0.0, 221, 0], 'false,true,true': [0.0, 0, 8], 'false,true,false': [0.0, 15, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.714, 3, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [8.43e-08, 239, 0], 'false,false,false': [0.0, 19, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.575, 7, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 274, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.996, 1, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [5.58e-08, 271, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [2.393, 6, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.14e-07, 260, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 16, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.5e-08, 219, 0], 'false,false,false': [0.0, 16, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.081, 1, 126], 'false,true': [0.0, 0, 0], 'false,false': [1.86e-09, 249, 0]}]
{'': [0.007812015624035403, -2.029028286383907e-16], 'false': [-2.029028286383907e-16, nan]}
{'': [0.03671114736903253, -8.616656310523603e-17], 'false': [-8.616656310523603e-17, nan]}
{'': [0.05613722432613196, -7.689856447620132e-17], 'false': [nan, -7.689856447620132e-17]}
{'': [0.06869334288166737, 0.06662278077634573], 'true': [0.016388888888889497, -8.238759096765868e-17], 'false': [0.06662278077634573, nan], 'false,true': [-2.7755575615628914e-17, -1.8503717077085942e-18]}
{'': [0.02276160675039333, 5.163828021512356e-17], 'true': [0.02276160675039333, nan], 'false': [nan, 5.163828021512356e-17], 'false,false': [2.972982157992051e-17, 1.460819769243627e-18], 'false,false,true': [nan, 2.972982157992051e-17]}
{'': [0.04984124912922074, 3.484641610137353e-17], 'false': [nan, 3.484641610137353e-17], 'false,false': [nan, 3.484641610137353e-17]}
{'': [0.007809601810267101, 1.1470938999817116e-17], 'false': [nan, 1.1470938999817116e-17], 'false,false': [nan, 1.1470938999817116e-17], 'false,false,false': [1.1470938999817116e-17, nan]}
{'': [0.04337452033329622, 4.1834490782976914e-17], 'true': [0.04337452033329622, nan], 'false': [5.0387044963757104e-17, 0.0], 'false,false': [nan, 0.0]}
{'': [0.015376576312965552, 1.1338447911065428e-17], 'false': [nan, 1.1338447911065428e-17], 'false,false': [1.9264143806281254e-17, -2.6020852139652106e-18], 'false,false,true': [nan, 1.9264143806281254e-17]}
{'': [0.0066083794928242096, 2.67523620391604e-18], 'false': [nan, 2.67523620391604e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 41.185
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( follows(D, F), follows(A, F) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.8402917922423695;  // std dev = 0.991, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.7528857772047755;  // std dev = 1.338, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | | then return 0.5854216623722396;  // std dev = 1.477, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return 0.8581489350995123;  // std dev = 0.000, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.1418510649004883;  // std dev = 0.000, 245.000 (wgt'ed) examples reached here.  /* #neg=245 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.7276778758237517;  // std dev = 0.133, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.6800543761389857;  // std dev = 0.968, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.5528067455442878;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.7204164555573975;  // std dev = 0.020, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else return -0.12544463852839183;  // std dev = 0.000, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.5349074336573506;  // std dev = 0.989, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | | else return 0.44780405492909986;  // std dev = 1.882, 34.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=30 */
%   | | else return 0.3643634354024611;  // std dev = 0.902, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.574964195911573;  // std dev = 0.171, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   else return -0.11231637819360685;  // std dev = 0.000, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4335872240832859;  // std dev = 0.215, 118.000 (wgt'ed) examples reached here.  /* #pos=118 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 255.000 (wgt'ed) examples reached here.  /* #neg=255 */
%   else if ( recursion_accounttype(E, B) )
%   | then return 0.4779982836504631;  // std dev = 2.58e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783617;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(D, E) )
%   | then if ( recursion_accounttype(D, B), follows(A, F) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.32554285176034004;  // std dev = 0.044, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.28799680218937007;  // std dev = 0.970, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return 0.35276804747556134;  // std dev = 0.111, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, I), follows(I, G) )
%   | | | then return 0.3385053538241617;  // std dev = 0.033, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.12085334565820646;  // std dev = 1.255, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0.31748273737033633;  // std dev = 0.045, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, J) )
%   | then return -0.09269127618926049;  // std dev = 7.15e-08, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
%   | else return -0.09269127618926087;  // std dev = 5.27e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.17564244402751264;  // std dev = 1.885, 45.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=41 */
%   | | | else return 0.2800416754178409;  // std dev = 0.038, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(D, A), tweets(D, G) )
%   | | | then return 0.2646581361122918;  // std dev = 0.048, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.29244275516176965;  // std dev = 0.068, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), tweets(H, J) )
%   | | | then return 0.2676132599198034;  // std dev = 0.076, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.24884188814150238;  // std dev = 0.006, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.28519633653311294;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( tweets(A, K) )
%   | then return -0.08518475138839678;  // std dev = 5.19e-09, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | else return -0.08518475138839678;  // std dev = 0.000, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.22656034644745957;  // std dev = 0.077, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | | else return 0.21231053522988041;  // std dev = 0.032, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( recursion_accounttype(D, B), follows(A, E) )
%   | | | then return -0.11077254161567984;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.22558677651701972;  // std dev = 0.105, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.05211402391318196;  // std dev = 1.266, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | | else return 0.20530830859616478;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.2235287398838592;  // std dev = 0.030, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.21007291833401276;  // std dev = 0.026, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07877675473109144;  // std dev = 4.84e-09, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.16712498223451167;  // std dev = 0.972, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return 0.19664262945026983;  // std dev = 0.054, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | | then return -0.08523686527029346;  // std dev = 1.440, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | | | else return 0.15517384054454714;  // std dev = 1.004, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.18245577444920325;  // std dev = 0.034, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.21777519870998674;  // std dev = 0.047, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.1930072785279039;  // std dev = 7.45e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.17921573348463676;  // std dev = 0.037, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.07324622576333668;  // std dev = 8.33e-09, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( tweets(D, F), tweets(A, F) )
%   | | | then return 0.16511447085012573;  // std dev = 0.052, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.1555224506356476;  // std dev = 0.031, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.18471998631752834;  // std dev = 0.090, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.1499540887836231;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(H, A) )
%   | | then if ( tweets(A, I), follows(A, H) )
%   | | | then return 0.17223319038825197;  // std dev = 0.113, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.07166577118378262;  // std dev = 1.212, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.19360312685640182;  // std dev = 0.075, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.15214483787960126;  // std dev = 0.016, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.06842697784420272;  // std dev = 0.000, 249.000 (wgt'ed) examples reached here.  /* #neg=249 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return 0.12373597722419002;  // std dev = 0.981, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | | else return -0.10434333440392898;  // std dev = 0.862, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else if ( follows(A, G), follows(H, D) )
%   | | | then return 0.13757963515821098;  // std dev = 0.060, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.15138389664132765;  // std dev = 0.069, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J), tweets(I, J) )
%   | | | then return 0.20059136675661926;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.16642845124902653;  // std dev = 0.044, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.14844276977508208;  // std dev = 0.086, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.13215970423842194;  // std dev = 0.005, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06419184008202625;  // std dev = 1.49e-08, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.516', 'seconds']
Refined model CLL: -0.09176


******************************************
Best model found
******************************************
Results 

CLL : -0.086555 

AUC ROC : 0.995197 

AUC PR : 0.400828 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 41.185 

Total Inference Time : 8.354164600372314 

Total revision time: 67.02423620033264
Best scored revision CLL: -0.09176


Results 

CLL : -0.086555 

AUC ROC : 0.995197 

AUC PR : 0.400828 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 94.67099189567566 

Total Inference Time : 8.354164600372314 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.376
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8093684472946316;  // std dev = 2.759, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004882;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6862678625080748;  // std dev = 2.588, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839205;  // std dev = 0.000, 318.000 (wgt'ed) examples reached here.  /* #neg=318 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5566409845183581;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360668;  // std dev = 0.000, 319.000 (wgt'ed) examples reached here.  /* #neg=319 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4069600286596107;  // std dev = 1.969, 132.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=128 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 252.000 (wgt'ed) examples reached here.  /* #neg=252 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.370596392295974;  // std dev = 0.249, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   | | else return -0.10159632948783619;  // std dev = 0.000, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.32349008700159576;  // std dev = 1.719, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926046;  // std dev = 1.15e-07, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
%   | | else return -0.092691276189261;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24260377691529736;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.89e-09, 283.000 (wgt'ed) examples reached here.  /* #neg=283 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.20312732481293297;  // std dev = 1.977, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109141;  // std dev = 2.98e-08, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1754809134432845;  // std dev = 1.718, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333671;  // std dev = 1.25e-07, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.14946730748719203;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420285;  // std dev = 0.000, 269.000 (wgt'ed) examples reached here.  /* #neg=269 */
%   | | else return -0.06842697784420262;  // std dev = 2.28e-09, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.11739689142295766;  // std dev = 0.173, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202601;  // std dev = 6.11e-09, 289.000 (wgt'ed) examples reached here.  /* #neg=289 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.258', 'seconds']
Parameter learned model CLL:-0.087236 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.759, 8, 156], 'false,true': [0.0, 254, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.588, 7, 156], 'false,true': [0.0, 318, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 319, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.969, 4, 128], 'true,false': [0.0, 252, 0], 'false,true,true': [0.249, 2, 28], 'false,true,false': [0.0, 51, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.719, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.15e-07, 261, 0], 'false,false,false': [0.0, 59, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.201, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.89e-09, 283, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.977, 4, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.98e-08, 321, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.718, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.25e-07, 235, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 53, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 269, 0], 'false,false,false': [2.28e-09, 60, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.173, 5, 156], 'false,true': [0.0, 0, 0], 'false,false': [6.11e-09, 289, 0]}]
{'': [0.04640095181440217, -1.1189649382048822e-16], 'false': [-1.1189649382048822e-16, nan]}
{'': [0.04110053069366251, -9.216945864812621e-17], 'false': [-9.216945864812621e-17, nan]}
{'': [0.01851192595229437, -5.011665064138638e-17], 'false': [nan, -5.011665064138638e-17]}
{'': [0.06844420398208083, 0.07504007449376207], 'false': [0.07504007449376207, nan], 'false,true': [0.06222222222222221, -1.0884539457109378e-17], 'true': [0.02938475665748304, -6.872809200060493e-17]}
{'': [0.018576328548417762, 1.0130785099704553e-16], 'true': [0.018576328548417762, nan], 'false': [nan, 1.0130785099704553e-16], 'false,false': [5.104473676437501e-17, -3.010774304068221e-17], 'false,false,true': [nan, 5.104473676437501e-17]}
{'': [0.03009025810155452, 3.6092055924210034e-17], 'false': [nan, 3.6092055924210034e-17], 'false,false': [nan, 3.6092055924210034e-17]}
{'': [0.02443738037896232, 2.766910964797898e-18], 'false': [nan, 2.766910964797898e-18], 'false,false': [nan, 2.766910964797898e-18], 'false,false,false': [2.766910964797898e-18, nan]}
{'': [0.018554805087914253, 3.623644594262664e-17], 'true': [0.018554805087914253, nan], 'false': [6.614094614788166e-17, -1.0473802119105251e-17], 'false,false': [nan, -1.0473802119105251e-17]}
{'': [0.018549838830969688, -7.963909842295956e-17], 'false': [nan, -7.963909842295956e-17], 'false,false': [-2.7239672723145106e-17, 5.551115123125783e-18], 'false,false,true': [nan, -2.7239672723145106e-17]}
{'': [0.030088882207193263, 3.6879380748794125e-17], 'false': [nan, 3.6879380748794125e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 36.398
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.8581489350995111;  // std dev = 5.20e-07, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, E) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.8581489350995118;  // std dev = 1.79e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else return -0.14185106490048785;  // std dev = 8.94e-08, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | | then return 0.7194734122109546;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | | else return 0.6681913609289036;  // std dev = 1.377, 39.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=37 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.05280674554428797;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | | else return 0.7194734122109546;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then if ( follows(G, I), recursion_accounttype(I, B) )
%   | | | then return 0.7246530394913161;  // std dev = 0.084, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.5528067455442879;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.7194734122109546;  // std dev = 0.000, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   else return -0.12544463852839202;  // std dev = 0.000, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), follows(A, F) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.5428068094972356;  // std dev = 0.998, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | | else return 0.2440116294285913;  // std dev = 0.828, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, G), follows(G, E) )
%   | | | then return 0.38479690225090935;  // std dev = 1.441, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.5170902851411053;  // std dev = 0.984, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then return 0.5610936628613369;  // std dev = 0.112, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.2884118707783006;  // std dev = 0.754, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5553664367462846;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else return -0.11231637819360675;  // std dev = 0.000, 309.000 (wgt'ed) examples reached here.  /* #neg=309 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( recursion_accounttype(E, B), follows(F, A) )
%   | | | then return 0.40102626428592797;  // std dev = 1.224, 56.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=54 */
%   | | | else return 0.4307319419072852;  // std dev = 0.257, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | else return 0.48158798298933325;  // std dev = 0.123, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   else if ( recursion_accounttype(G, B) )
%   | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.42560560394824537;  // std dev = 0.012, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.1344669972758711;  // std dev = 1.192, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.41751358415830997;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.1015963294878362;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.3377771572523582;  // std dev = 0.311, 108.000 (wgt'ed) examples reached here.  /* #pos=108 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.2216196142086969;  // std dev = 0.964, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return -0.6584567685320046;  // std dev = 0.061, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.3277972698112479;  // std dev = 0.173, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   else if ( follows(A, G) )
%   | then return -0.0926912761892605;  // std dev = 1.17e-07, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
%   | else return -0.09269127618926101;  // std dev = 0.000, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(D, F), follows(A, F) )
%   | | | then return 0.2611428885344173;  // std dev = 0.036, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | | else return 0.2773941362085089;  // std dev = 0.056, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.05388638155510132;  // std dev = 1.284, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.2875366092531288;  // std dev = 0.086, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.2633235806773078;  // std dev = 0.186, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.2812610945200133;  // std dev = 0.141, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.24897647539443515;  // std dev = 0.011, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.25295786473715925;  // std dev = 0.004, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else return -0.08518475138839678;  // std dev = 6.04e-09, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(E, D), follows(A, E) )
%   | | | then return 0.19526437522768936;  // std dev = 0.994, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | | | else return 0.21360491472927726;  // std dev = 0.090, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.3031025565147294;  // std dev = 0.137, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.22940253129706575;  // std dev = 0.158, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return -0.07763084017755212;  // std dev = 1.352, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | | else return 0.1727824485140107;  // std dev = 0.950, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return -0.026905669851936653;  // std dev = 0.599, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.20661474805804395;  // std dev = 0.012, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.07877675473109143;  // std dev = 3.65e-08, 293.000 (wgt'ed) examples reached here.  /* #neg=293 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.18246102337343836;  // std dev = 0.024, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0.11345106422904178;  // std dev = 1.269, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | else if ( recursion_accounttype(D, B), tweets(A, F) )
%   | | | then return -0.4404607499472342;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.17725172162520517;  // std dev = 0.018, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(H, B) )
%   | | | then return 0.23816638436167248;  // std dev = 0.106, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.185177123285481;  // std dev = 0.100, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.1766301777051769;  // std dev = 0.043, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.12543589438632044;  // std dev = 1.199, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   else return -0.07324622576333698;  // std dev = 5.51e-09, 302.000 (wgt'ed) examples reached here.  /* #neg=302 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.14873110996178354;  // std dev = 0.855, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.17004628769032545;  // std dev = 0.177, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.209813946242569;  // std dev = 0.066, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1677870100943605;  // std dev = 0.105, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, H), follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.03239261728241266;  // std dev = 0.934, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.15417891547887086;  // std dev = 0.004, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.14890639220465637;  // std dev = 0.000927, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.16125773269556787;  // std dev = 0.060, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   else return -0.06842697784420307;  // std dev = 0.000, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(F, A), recursion_accounttype(E, B) )
%   | | | then return 0.12487398767435527;  // std dev = 1.008, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return 0.08563818781784292;  // std dev = 1.685, 49.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=46 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.13814857607103456;  // std dev = 0.055, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return 0.17747509442870876;  // std dev = 0.005, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, A), follows(H, I) )
%   | | | then return 0.06404298345651771;  // std dev = 0.951, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return 0.1397543494389862;  // std dev = 0.056, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(J, A) )
%   | | | then return 0.13112655439444162;  // std dev = 0.000716, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.08333531696891784;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   else return -0.06419184008202586;  // std dev = 7.62e-09, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.634', 'seconds']
Refined model CLL: -0.084671


******************************************
Best model found
******************************************
Results 

CLL : -0.090121 

AUC ROC : 0.994849 

AUC PR : 0.464348 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 36.398 

Total Inference Time : 10.173233032226562 

Total revision time: 69.72811109924316
Best scored revision CLL: -0.084671


Results 

CLL : -0.090121 

AUC ROC : 0.994849 

AUC PR : 0.464348 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 97.37486679458618 

Total Inference Time : 10.173233032226562 

