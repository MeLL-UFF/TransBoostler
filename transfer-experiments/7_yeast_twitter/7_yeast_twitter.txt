Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Run: 1
Starting experiments for fasttext using majority_vote 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.319
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8391013160518921;  // std dev = 1.401, 105.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048824;  // std dev = 0.000, 172.000 (wgt'ed) examples reached here.  /* #neg=172 */
%   | | else return -0.06492798797741088;  // std dev = 0.266, 26.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=2 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 6.97e-09, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6896848606719044;  // std dev = 1.710, 85.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.037666601568445875;  // std dev = 0.260, 211.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09841540244419045;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.11785912101294424;  // std dev = 2.940, 59.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5671135934066078;  // std dev = 1.077, 71.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=70 */
%   | | else return 0.7307764031481236;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8204928781939116;  // std dev = 0.080, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5673908725073912;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5673908725073912;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.03218728578368075;  // std dev = 0.262, 291.000 (wgt'ed) examples reached here.  /* #neg=259 #pos=32 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.49433108450447416;  // std dev = 2.074, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1190159439978608;  // std dev = 0.004, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1351490157300894;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2654747555469019;  // std dev = 2.264, 78.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=73 */
%   | else return 0.3792977255469837;  // std dev = 0.151, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31205957366558484;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6165476321414314;  // std dev = 0.095, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08427456361383201;  // std dev = 2.064, 249.000 (wgt'ed) examples reached here.  /* #neg=240 #pos=9 */
%   | | else return -0.10769098556048862;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01850434279628096;  // std dev = 3.609, 294.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.18667733606124495;  // std dev = 0.980, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4247166149534858;  // std dev = 1.379, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10911314199602268;  // std dev = 0.035, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.10451998929030526;  // std dev = 0.045, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26575691850665684;  // std dev = 2.109, 111.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=107 */
%   | else return -0.07900475785365021;  // std dev = 1.975, 252.000 (wgt'ed) examples reached here.  /* #neg=241 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.0014131700572833144;  // std dev = 0.723, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18261422275117065;  // std dev = 1.398, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.23726669204337886;  // std dev = 0.053, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.040182134518146256;  // std dev = 0.151, 200.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=22 */
%   | | else return 0.009431561533521444;  // std dev = 0.215, 93.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18621865062938256;  // std dev = 0.110, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.22490294609287134;  // std dev = 1.673, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08986158903079641;  // std dev = 0.027, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.40754354683609;  // std dev = 0.504, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09518780116429308;  // std dev = 0.001, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.16680784242774646;  // std dev = 1.881, 97.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=94 */
%   | | else return 0.1559049049020792;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08275124864219535;  // std dev = 8.02e-08, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08273342415140328;  // std dev = 7.45e-09, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return 0.008947029976597042;  // std dev = 0.473, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.0755181811370292;  // std dev = 0.898, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.015840780946966268;  // std dev = 1.515, 67.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.017', 'seconds']
Parameter learned model CLL:-0.107362 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [1.401, 2, 103], 'true,false,true': [0.0, 172, 0], 'true,false,false': [0.266, 24, 2], 'false,true,true': [0.0, 0, 21], 'false,true,false': [0.0, 0, 0], 'false,false': [6.97e-09, 41, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.71, 3, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.26, 189, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.982, 27, 1], 'false,false,false,true': [0.0, 0, 4], 'false,false,false,false': [2.94, 42, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.077, 1, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.08, 0, 2], 'true,false,false': [0.0, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false': [0.262, 259, 32]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.074, 3, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.004, 215, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 33, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.264, 5, 73], 'true,false': [0.151, 0, 4], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.095, 0, 23], 'false,false,true,false': [2.064, 240, 9], 'false,false,false': [0.0, 13, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.609, 203, 91], 'false,true': [0.98, 1, 13], 'false,false,true': [1.379, 1, 22], 'false,false,false,true': [0.035, 36, 0], 'false,false,false,false': [0.045, 43, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.109, 4, 107], 'true,false': [1.975, 241, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.723, 19, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [1.398, 2, 80], 'true,false,true': [0.053, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.151, 178, 22], 'false,false,false': [0.215, 71, 22]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.11, 1, 77], 'false,true,true,true': [1.673, 2, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.027, 204, 0], 'false,false,true': [0.504, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.001, 40, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.881, 3, 94], 'true,true,false': [0.01, 0, 9], 'true,false,true': [8.02e-08, 158, 0], 'true,false,false,true': [7.45e-09, 20, 0], 'true,false,false,false': [0.473, 6, 2], 'false,true': [0.898, 1, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.515, 50, 17]}]
{'': [0.226448387413001, 0.2239854318418315], 'true': [0.01868480725623786, 0.009998979695949234], 'false': [0.0, 4.603363760640893e-17], 'true,false': [-1.8073398075293246e-16, 0.07100591715976336], 'false,true': [0.0, nan]}
{'': [0.03440315288828122, 0.09043464975325975], 'false': [0.06751314574266917, 0.13427402069480618], 'false,false': [0.03443877551020406, 0.1587202779486648], 'false,false,false': [0.0, 0.14650067283025592], 'false,true': [nan, 0.06751314574266917], 'false,false,true': [nan, 0.03443877551020406]}
{'': [0.01688823682091522, 0.08342716712435534], 'false': [nan, 0.08342716712435544], 'false,false': [-1.0449157878825003e-16, 0.06845871962874155], 'true': [0.01648023646167518, 0.016680825640376096], 'true,false': [0.0031811236180068203, 0.0], 'true,true': [0.016340331422448423, 0.0], 'false,false,true': [-1.4802973661668753e-16, -1.6653345369377348e-16]}
{'': [0.03335299130168516, 4.641491448963635e-05], 'false': [1.8905563687482805e-05, -3.3643121958338078e-18], 'false,true': [nan, 1.8905563687482805e-05], 'false,false': [nan, -3.3643121958338078e-18], 'false,false,false': [nan, -3.3643121958338078e-18]}
{'': [0.0634032504764776, 0.05483671457874446], 'true': [0.06573061599928225, 0.0056959381113997065], 'false': [-6.530723674265627e-17, 0.051568019013517104], 'false,false': [0.05372087194520534, 0.0], 'false,false,true': [0.00039052668695181643, 0.017115753933799216], 'false,true': [-6.530723674265627e-17, nan]}
{'': [0.04429478357988881, 0.07124284019558645], 'false': [0.06860782104760364, 0.06797228451165067], 'false,false': [0.08263255391714353, 4.568890804214512e-05], 'true': [nan, 0.04429478357988943], 'true,false': [nan, 0.04429478357988881], 'false,false,false': [3.3260624084902046e-05, 4.648013660322476e-05]}
{'': [0.04822783576449893, 0.019384922792008805], 'true': [0.040072279165625335, 0.015474356836545161], 'false': [nan, 0.019384922792008805], 'false,false': [nan, 0.019384922792008805], 'false,false,false': [nan, 0.019384922792008805]}
{'': [0.02336113660290004, 0.03083506202201004], 'false': [nan, 0.03083506202201016], 'false,false': [0.022842310642878814, 0.04634355702987149], 'true': [0.02382577496102799, 0.0013951880056253113], 'true,false': [0.0013951880056253113, nan]}
{'': [0.012110673158913276, 0.03190867055010687], 'false': [0.023897385169295318, 0.05734870868354346], 'false,false': [0.014926187752269726, 3.901865408689753e-08], 'false,true': [0.08233793285074592, 3.4778073938240076e-06], 'false,true,true': [0.08233793285074592, nan], 'false,false,false': [nan, 3.901865408689753e-08]}
{'': [0.026948282338133626, 0.04362989773977767], 'false': [0.16138119324387276, 0.03426287235301337], 'false,false': [nan, 0.03426287235301337], 'true': [0.03338143019644914, 0.001547743973712743], 'true,true': [0.036467512241472363, 1.1542743946626713e-05], 'true,false': [4.0755022422948786e-17, 0.00969779221477861], 'true,false,false': [2.7755575615628915e-18, 0.02793848298807061]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 13.963
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 81.000 (wgt'ed) examples reached here.  /* #pos=81 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6359267128772901;  // std dev = 1.247, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048835;  // std dev = 0.000, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | | else if ( follows(G, A), follows(H, G) )
%   | | | then return -0.11060106490048774;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=1 */
%   | | | else return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   else if ( recursion_accounttype(I, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.14185106490048768;  // std dev = 4.47e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6970178417231037;  // std dev = 0.153, 84.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.7620720642963899;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.42873873096305654;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.059176556117462094;  // std dev = 2.810, 153.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=12 */
%   | | | else return -0.05503480096677923;  // std dev = 1.401, 36.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=3 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.0377533259740788;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.1289133406925878;  // std dev = 1.29e-08, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.12437215536369121;  // std dev = 2.930, 57.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5306013448657706;  // std dev = 1.393, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | | | else return 0.46728358466232195;  // std dev = 0.940, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.6759748108341579;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6335933627276088;  // std dev = 0.119, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.560904375168801;  // std dev = 1.49e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.668556895482745;  // std dev = 0.969, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.1192865058527469;  // std dev = 0.044, 210.000 (wgt'ed) examples reached here.  /* #neg=210 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.08251336232089813;  // std dev = 2.019, 30.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=8 */
%   | | | else return 0.16030086974753782;  // std dev = 2.000, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.41325934332587777;  // std dev = 0.992, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | | | else return 0.0632083641738794;  // std dev = 1.367, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.42595409862353756;  // std dev = 0.013, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.5630306072781983;  // std dev = 0.289, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.4327031033612611;  // std dev = 0.152, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.6667522088625585;  // std dev = 0.036, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(G, A) )
%   | then return -0.10806657224986335;  // std dev = 0.093, 194.000 (wgt'ed) examples reached here.  /* #neg=194 */
%   | else return -0.15397497089766313;  // std dev = 0.031, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(D, F), follows(A, D) )
%   | | | then return 0.3185928379909333;  // std dev = 1.003, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | | else return 0.4844972374671184;  // std dev = 0.238, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(D, G), follows(G, A) )
%   | | | then return 0.14561724202957177;  // std dev = 1.183, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.3402408622125517;  // std dev = 0.043, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.03262325426341047;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.32452394905431003;  // std dev = 0.005, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.44426914388007943;  // std dev = 0.973, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.08393705255342657;  // std dev = 1.881, 222.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=9 */
%   | | else return -0.09390440783373344;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.26955476006426904;  // std dev = 0.113, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | | else return 0.2183887483552722;  // std dev = 0.955, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.09092617166089917;  // std dev = 0.907, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.3454188833406142;  // std dev = 0.245, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.0901079351117667;  // std dev = 0.000, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | | else return -0.05011626974390862;  // std dev = 0.120, 49.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=5 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.2644254431621848;  // std dev = 0.023, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.44100504751851943;  // std dev = 0.081, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.11249339819825274;  // std dev = 0.017, 67.000 (wgt'ed) examples reached here.  /* #neg=67 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, C) )
%   | then return 0.2168897157007127;  // std dev = 0.011, 66.000 (wgt'ed) examples reached here.  /* #pos=66 */
%   | else return 0.2490273578282073;  // std dev = 0.021, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G), follows(A, F) )
%   | | | then return 0.01115332641425476;  // std dev = 1.093, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.25232730304026174;  // std dev = 1.041, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.08378743379340971;  // std dev = 0.055, 170.000 (wgt'ed) examples reached here.  /* #neg=170 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.19502599238815554;  // std dev = 1.024, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.11052683765423187;  // std dev = 0.000, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.11615172756595836;  // std dev = 0.787, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
%   | | | else return 0.12988427774264158;  // std dev = 0.877, 12.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1733225413191549;  // std dev = 0.112, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else return 0.23001156331519873;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.0733599667964228;  // std dev = 0.070, 170.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=3 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.1951949128562652;  // std dev = 0.997, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.0797808965499543;  // std dev = 0.048, 68.000 (wgt'ed) examples reached here.  /* #neg=68 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.28587239277661325;  // std dev = 0.257, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.10837596275284113;  // std dev = 0.053, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.008446691971752055;  // std dev = 0.550, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   | | | else return 0.011764883406943816;  // std dev = 1.000, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.15796609468795372;  // std dev = 0.025, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | | else return 0.01413739354725326;  // std dev = 0.941, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.1965552172558376;  // std dev = 0.053, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.18461567201494855;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.17499991983591992;  // std dev = 1.160, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.20571650719405613;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(I, A) )
%   | then return -0.04026835377312868;  // std dev = 0.106, 236.000 (wgt'ed) examples reached here.  /* #neg=204 #pos=32 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.2954272891087025;  // std dev = 0.064, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.11062355018346069;  // std dev = 0.019, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.11096353750525949;  // std dev = 1.588, 74.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=71 */
%   | | | else return 0.21088430593931023;  // std dev = 0.288, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.1584736639228825;  // std dev = 0.002, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06670556188521129;  // std dev = 0.031, 211.000 (wgt'ed) examples reached here.  /* #neg=209 #pos=2 */
%   else if ( follows(A, G), follows(G, H) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then return 0.16980356653439402;  // std dev = 0.032, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.08400551883070259;  // std dev = 0.015, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.25652794498401044;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.10808708570220944;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.014108134011681523;  // std dev = 0.194, 18.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.824', 'seconds']
Refined model CLL: -0.099909


******************************************
Best model found
******************************************
Results 

CLL : -0.09667 

AUC ROC : 0.994858 

AUC PR : 0.36541 

Precision : 0.336933 

Recall : 1.0 

F1 : 0.504039 

Total Learning Time : 13.963 

Total Inference Time : 15.528016328811646 

Total revision time: 39.743715221405026
Best scored revision CLL: -0.099909


Results 

CLL : -0.09667 

AUC ROC : 0.994858 

AUC PR : 0.36541 

Precision : 0.336933 

Recall : 1.0 

F1 : 0.504039 

Total Learning Time : 67.39354317855835 

Total Inference Time : 15.528016328811646 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.573
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8392810105712092;  // std dev = 1.401, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004882;  // std dev = 0.000, 169.000 (wgt'ed) examples reached here.  /* #neg=169 */
%   | | else return -0.06492798797741081;  // std dev = 0.266, 52.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=4 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8318331456258272;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.93e-09, 88.000 (wgt'ed) examples reached here.  /* #neg=88 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7266211374823776;  // std dev = 0.199, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03620325593409127;  // std dev = 0.262, 179.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07516475406802957;  // std dev = 1.803, 63.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6136428511256345;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.08652484760786736;  // std dev = 4.650, 160.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5711089756604085;  // std dev = 0.370, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7299965400021692;  // std dev = 0.226, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.587714206327369;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5914436474223616;  // std dev = 0.182, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.49575864908588396;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -1.5777527416766115E-4;  // std dev = 0.302, 378.000 (wgt'ed) examples reached here.  /* #neg=321 #pos=57 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5164996084460349;  // std dev = 2.553, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1226175496390033;  // std dev = 0.003, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1352302982711327;  // std dev = 6.83e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3169651583782858;  // std dev = 0.524, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   | else return 0.4729790269082539;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3096510680783757;  // std dev = 0.039, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5075903155093462;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5522982914868462;  // std dev = 1.357, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | | else return -0.09914620262147279;  // std dev = 1.667, 278.000 (wgt'ed) examples reached here.  /* #neg=273 #pos=5 */
%   | | else return -0.0014233284135287344;  // std dev = 0.267, 78.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01776645742306106;  // std dev = 3.306, 254.000 (wgt'ed) examples reached here.  /* #neg=172 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2576814249403247;  // std dev = 0.176, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.46263196199586687;  // std dev = 1.253, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11022019323044359;  // std dev = 0.023, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | | else return -0.11346769387369324;  // std dev = 0.045, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2553868438507885;  // std dev = 2.197, 125.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=121 */
%   | else return -0.0880952286093817;  // std dev = 1.748, 274.000 (wgt'ed) examples reached here.  /* #neg=267 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03884577398125307;  // std dev = 2.024, 85.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17906988687383313;  // std dev = 0.989, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2608375777963557;  // std dev = 0.014, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.051614723606454097;  // std dev = 0.147, 207.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=19 */
%   | | else return 0.020855199419401588;  // std dev = 0.244, 173.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=52 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1677539260666457;  // std dev = 0.110, 79.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2972333110969834;  // std dev = 0.937, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09234714045843506;  // std dev = 0.102, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3335332685729903;  // std dev = 1.018, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09813006788537755;  // std dev = 0.076, 82.000 (wgt'ed) examples reached here.  /* #neg=82 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17620964072056086;  // std dev = 1.176, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.16377620242370564;  // std dev = 0.393, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08209125510542503;  // std dev = 3.65e-08, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09611143163041334;  // std dev = 0.034, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.021106358351994443;  // std dev = 0.965, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.12203670780145714;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.005224023303904102;  // std dev = 2.114, 157.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.497', 'seconds']
Parameter learned model CLL:-0.106393 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [1.401, 2, 104], 'true,false,true': [0.0, 169, 0], 'true,false,false': [0.266, 48, 4], 'false,true,true': [0.987, 1, 37], 'false,true,false': [0.0, 0, 11], 'false,false': [8.93e-09, 88, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.199, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.262, 160, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.803, 59, 4], 'false,false,false,true': [0.943, 1, 8], 'false,false,false,false': [4.65, 120, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [0.37, 0, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.226, 0, 3], 'true,false,false': [0.0, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.182, 0, 6], 'false,false,true,false': [0.968, 1, 15], 'false,false,false': [0.302, 321, 57]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.553, 4, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.003, 201, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [6.83e-08, 98, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.524, 0, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.039, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.357, 2, 39], 'false,false,true,false': [1.667, 273, 5], 'false,false,false': [0.267, 65, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.306, 172, 82], 'false,true': [0.176, 0, 22], 'false,false,true': [1.253, 1, 52], 'false,false,false,true': [0.023, 66, 0], 'false,false,false,false': [0.045, 85, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.197, 4, 121], 'true,false': [1.748, 267, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.024, 57, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [0.989, 1, 83], 'true,false,true': [0.014, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.147, 188, 19], 'false,false,false': [0.244, 121, 52]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.11, 1, 78], 'false,true,true,true': [0.937, 0, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.102, 223, 0], 'false,false,true': [1.018, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.076, 82, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.176, 1, 85], 'true,true,false': [0.393, 0, 19], 'true,false,true': [3.65e-08, 151, 0], 'true,false,false,true': [0.034, 27, 0], 'true,false,false,false': [0.965, 23, 4], 'false,true': [0.0, 0, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.114, 117, 40]}]
{'': [0.22119350223045423, 0.22760935585273656], 'false': [0.019991670137443407, 7.569702440626067e-17], 'true': [0.01851192595229848, 0.01777195389119786], 'false,true': [0.025623268698062793, -1.6148698540002277e-16], 'true,false': [-1.708035422500241e-16, 0.07100591715976316]}
{'': [0.00046723692915089245, 0.10478209122540115], 'false': [0.06862125629020234, 0.12839020724076716], 'false,false': [0.05160653060603701, 0.1472353401861483], 'false,false,false': [0.09876543209876543, 0.13516484644095633], 'false,true': [nan, 0.06862125629020234], 'false,false,true': [nan, 0.05160653060603701]}
{'': [0.0033519774377905646, 0.10290412908535006], 'false': [nan, 0.10290412908534828], 'false,false': [0.045931323410473616, 0.09123267849524119], 'false,false,true': [0.005506220572960056, 0.058593750000000056], 'true': [0.002047623074092287, 0.008659446979924984], 'true,false': [0.017028205610551145, 0.0], 'true,true': [0.002047623074092287, nan]}
{'': [0.04074855804165667, 4.0185507765792895e-05], 'false': [7.638040731001739e-06, 4.7580986769649563e-17], 'false,true': [nan, 7.638040730999528e-06], 'false,false': [nan, 4.7580986769649563e-17], 'false,false,false': [nan, 4.7580986769649563e-17]}
{'': [0.0038250771622382073, 0.0660052672364731], 'false': [0.001850178459985564, 0.06386978368189876], 'false,false': [0.0620181575523108, 0.07128508334905467], 'false,false,true': [0.044942093906766775, 0.009992441023271813], 'true': [0.0035626980124347746, 0.0], 'false,true': [7.697568424489543e-05, 0.0]}
{'': [0.043036148732353306, 0.06869074360372318], 'false': [0.0014029866469392346, 0.07121751910612235], 'false,false': [0.029609377398248694, 1.9545718964528226e-05], 'true': [nan, 0.04303614873235328], 'true,false': [nan, 0.043036148732353306], 'false,false,false': [7.84406839689685e-06, 2.4022082700951984e-05]}
{'': [0.045139659552505804, 0.0481934869775096], 'false': [nan, 0.04819348697750957], 'false,false': [nan, 0.0481934869775096], 'false,false,false': [nan, 0.0481934869775096], 'true': [0.03862302750472871, 0.01115144339537349]}
{'': [0.011524722886718027, 0.04015851357446774], 'false': [nan, 0.040158513574468264], 'false,false': [0.02173731419870404, 0.05933916643874558], 'true': [0.011641245027674078, 0.00010032501982859543], 'true,false': [0.00010032501982859543, nan]}
{'': [0.01204850810790743, 0.032562800371140135], 'false': [0.022284228063062655, 0.04987158145112888], 'false,false': [0.025252978653182958, 6.980416931149288e-05], 'false,true': [0.023110005435956527, 4.630469415819754e-05], 'false,true,true': [0.023110005435956527, nan], 'false,false,false': [nan, 6.980416931149288e-05]}
{'': [0.022269635702768666, 0.027720050822774133], 'false': [0.0, 0.028470951876319754], 'false,false': [nan, 0.028470951876319726], 'true': [0.014658787122336519, 0.0050213029289319245], 'true,true': [0.016071711737684125, 0.008136827237430314], 'true,false': [8.822964434107205e-18, 0.01865618489843395], 'true,false,false': [4.2183265335391685e-05, 0.03445730602278198]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
0;false,true;follows(E, F), follows(A, F).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 11.878
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.8581489350995127;  // std dev = 0.000, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | | else return 0.8081489350995122;  // std dev = 0.975, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.8581489350995121;  // std dev = 4.21e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | | else if ( tweets(A, H), follows(A, I) )
%   | | | then return 0.14386322081379804;  // std dev = 1.690, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return -0.14185106490048774;  // std dev = 2.36e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   else if ( recursion_accounttype(J, B) )
%   | then return 0.8581489350995121;  // std dev = 2.79e-08, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | else return -0.14185106490048763;  // std dev = 8.43e-08, 108.000 (wgt'ed) examples reached here.  /* #neg=108 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.725543921192935;  // std dev = 0.170, 70.000 (wgt'ed) examples reached here.  /* #pos=70 */
%   | else return 0.6569734122109542;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( tweets(A, F) )
%   | | then return 0.7336521782683958;  // std dev = 0.112, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), follows(H, A) )
%   | | | then return -0.1190083699849567;  // std dev = 0.853, 122.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=1 */
%   | | | else return 0.011810060068060027;  // std dev = 3.174, 96.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=16 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.11015751023546438;  // std dev = 3.864, 104.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=29 */
%   | | | else return 0.1561947117180569;  // std dev = 2.288, 33.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5289409059005693;  // std dev = 0.169, 69.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=67 */
%   | else if ( follows(E, A) )
%   | | then return 0.6622035188715992;  // std dev = 0.133, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.36858192707788995;  // std dev = 0.410, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(G, A), follows(G, F) )
%   | | then return -0.1005037870905241;  // std dev = 0.098, 123.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=2 */
%   | | else return -0.0048759495423451975;  // std dev = 0.299, 91.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=13 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.4446869676805948;  // std dev = 1.321, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.586713263328528;  // std dev = 0.144, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.07436488431719383;  // std dev = 1.517, 46.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=3 */
%   | | | else return 0.12919892956047546;  // std dev = 4.340, 124.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=40 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.4277816259452909;  // std dev = 0.155, 64.000 (wgt'ed) examples reached here.  /* #pos=64 */
%   | | else if ( follows(D, F), follows(F, D) )
%   | | | then return 0.15381991674390633;  // std dev = 1.846, 16.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=11 */
%   | | | else return 0.49489510694547095;  // std dev = 0.085, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(H, G), follows(A, H) )
%   | | | then return 0.18851220116288228;  // std dev = 0.757, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.40686213548182193;  // std dev = 0.983, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return 0.687433211810811;  // std dev = 0.279, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   else if ( follows(I, A) )
%   | then return -0.11448411661719522;  // std dev = 0.217, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else return -0.15563758256680063;  // std dev = 0.028, 114.000 (wgt'ed) examples reached here.  /* #neg=114 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(A, F), follows(E, F) )
%   | | | then return 0.3037412524521082;  // std dev = 1.306, 67.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=65 */
%   | | | else return -0.005149873473699181;  // std dev = 0.823, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.41247155815471787;  // std dev = 0.066, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return -0.11117014128325214;  // std dev = 0.808, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3677176236368278;  // std dev = 0.049, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.08808986918018752;  // std dev = 0.720, 124.000 (wgt'ed) examples reached here.  /* #neg=123 #pos=1 */
%   | | | else return 0.0022509139538776915;  // std dev = 2.560, 95.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=16 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.04249192336860764;  // std dev = 2.102, 54.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=15 */
%   | | | else return 0.049702932775582145;  // std dev = 2.672, 85.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=25 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.20479320837989198;  // std dev = 1.374, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | | else return 0.26565639291633497;  // std dev = 0.061, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.2876573982214287;  // std dev = 0.026, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.5027618989641529;  // std dev = 0.974, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return -0.0939182979577851;  // std dev = 0.146, 132.000 (wgt'ed) examples reached here.  /* #neg=132 */
%   | | else return -0.07461428431007117;  // std dev = 0.125, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.2867280698042564;  // std dev = 0.054, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.46982255738113;  // std dev = 0.077, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else return -0.12743219539313186;  // std dev = 0.022, 155.000 (wgt'ed) examples reached here.  /* #neg=155 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(D, C) )
%   then if ( recursion_accounttype(D, B), follows(C, D) )
%   | then return 0.24756500784762883;  // std dev = 0.133, 106.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=104 */
%   | else return -0.08809563258050944;  // std dev = 0.073, 214.000 (wgt'ed) examples reached here.  /* #neg=212 #pos=2 */
%   else if ( follows(A, E), tweets(A, F) )
%   | then if ( follows(E, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(G, F), tweets(E, F) )
%   | | | then return 0.27019379517379627;  // std dev = 0.964, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.044273487210655604;  // std dev = 1.276, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return -0.11792267842938266;  // std dev = 0.135, 50.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=2 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3655141200554247;  // std dev = 0.101, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.12610322217883155;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.010739099333159436;  // std dev = 0.840, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
%   | | | else return -0.0053975280711329975;  // std dev = 1.411, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1823181740463723;  // std dev = 0.014, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else return -0.05047346216847245;  // std dev = 0.958, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), follows(F, E) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.2203675778341012;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.196875796865301;  // std dev = 0.056, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return -0.1019685692476459;  // std dev = 0.750, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.4183029351888514;  // std dev = 0.283, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.08272239937475954;  // std dev = 0.192, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.0027450275073972494;  // std dev = 1.819, 92.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=25 */
%   | | | else return 0.04235254253939771;  // std dev = 1.577, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1572644471085487;  // std dev = 0.070, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | else return -0.11852936299213135;  // std dev = 0.773, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.19530581601466948;  // std dev = 0.081, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.1656669729166563;  // std dev = 0.148, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.32306344115093805;  // std dev = 0.274, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07842792997672128;  // std dev = 0.014, 242.000 (wgt'ed) examples reached here.  /* #neg=242 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.33721250611796727;  // std dev = 0.118, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.2900043192801495;  // std dev = 0.968, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | else return -0.12044419010019813;  // std dev = 0.010, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.13785325841001092;  // std dev = 0.143, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | | else return 0.07530603252156033;  // std dev = 0.966, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0.22481865471091447;  // std dev = 0.043, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.06473911170116674;  // std dev = 0.057, 219.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.02891257610757382;  // std dev = 0.316, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2574030011120821;  // std dev = 0.144, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return -0.1028015001228852;  // std dev = 0.034, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.026823802472839595;  // std dev = 0.661, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
%   | | | else return 0.039642342353175625;  // std dev = 0.860, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.818', 'seconds']
Refined model CLL: -0.10199


******************************************
Best model found
******************************************
Results 

CLL : -0.101438 

AUC ROC : 0.993252 

AUC PR : 0.380934 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 11.878 

Total Inference Time : 17.50186014175415 

Total revision time: 40.92512467002869
Best scored revision CLL: -0.10199


Results 

CLL : -0.101438 

AUC ROC : 0.993252 

AUC PR : 0.380934 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 68.574952627182 

Total Inference Time : 17.50186014175415 

Starting experiments for fasttext using borda_count 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.301
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.834893121146022;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048804;  // std dev = 0.000, 271.000 (wgt'ed) examples reached here.  /* #neg=271 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7008873074338162;  // std dev = 1.712, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283919;  // std dev = 0.000, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5424174576053903;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360685;  // std dev = 0.000, 248.000 (wgt'ed) examples reached here.  /* #neg=248 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.39810875828540604;  // std dev = 1.967, 122.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=118 */
%   | else return -0.10370222150126383;  // std dev = 0.466, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43089564353130705;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783616;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3133784012432539;  // std dev = 1.711, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09251432335227251;  // std dev = 0.000, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | | else return -0.09269127618926087;  // std dev = 1.32e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.24727000452611259;  // std dev = 1.715, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0850438715477766;  // std dev = 3.62e-05, 274.000 (wgt'ed) examples reached here.  /* #neg=274 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21673558082919422;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07865681315054698;  // std dev = 0.000572, 259.000 (wgt'ed) examples reached here.  /* #neg=259 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1436776663264815;  // std dev = 2.392, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07313307247868137;  // std dev = 0.000, 244.000 (wgt'ed) examples reached here.  /* #neg=244 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07326393260939723;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1299045225732701;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06832792355261577;  // std dev = 8.82e-08, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
%   | | else return -0.06844247674240667;  // std dev = 9.31e-10, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.12739112850802864;  // std dev = 0.151, 129.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06411286032854208;  // std dev = 2.79e-05, 264.000 (wgt'ed) examples reached here.  /* #neg=264 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.934', 'seconds']
Parameter learned model CLL:-0.0927 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 271, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.712, 3, 126], 'false,true': [0.0, 264, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 248, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.967, 4, 118], 'true,false': [0.466, 222, 0], 'false,true,true': [1.05e-08, 0, 8], 'false,true,false': [0.0, 17, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.711, 3, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 225, 0], 'false,false,false': [1.32e-09, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.715, 3, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.62e-05, 274, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [0.996, 1, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.000572, 259, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [2.392, 6, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 244, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 16, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [8.82e-08, 253, 0], 'false,false,false': [9.31e-10, 14, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.151, 3, 126], 'false,true': [0.0, 0, 0], 'false,false': [2.79e-05, 264, 0]}]
{'': [0.022714981070853308, -5.243857828487824e-17], 'false': [-5.243857828487824e-17, nan]}
{'': [0.022714981070850387, -7.065055611250996e-17], 'false': [-7.065055611250996e-17, nan]}
{'': [0.022714981070848954, -8.953411488912552e-17], 'false': [nan, -8.953411488912552e-17]}
{'': [0.06951282707609004, 0.061699979809368824], 'true': [0.03171190540177361, 0.0009800866390598333], 'false': [0.061699979809368824, nan], 'false,true': [1.1102230246251565e-16, -1.6326809185664067e-18]}
{'': [0.022697051067246503, 1.5051581303408465e-09], 'true': [0.022697051067246503, nan], 'false': [nan, 1.5051581303408465e-09], 'false,false': [-1.3816108750890837e-17, 2.3129646346357427e-18], 'false,false,true': [nan, -1.3816108750890837e-17]}
{'': [0.02279646424057788, 1.3128451659127904e-09], 'false': [nan, 1.3128451659127904e-09], 'false,false': [nan, 1.3128451659127904e-09]}
{'': [0.007808290142792308, 1.265465752778659e-09], 'false': [nan, 1.265465752778659e-09], 'false,false': [nan, 1.265465752778659e-09], 'false,false,false': [1.265465752778659e-09, nan]}
{'': [0.04336238786855632, 9.889579070195746e-10], 'true': [0.04336238786855632, nan], 'false': [-3.640075490574284e-18, 0.0], 'false,false': [nan, 0.0]}
{'': [0.03669116226792177, 6.519892424535314e-10], 'false': [nan, 6.519892424535314e-10], 'false,false': [3.0717633092395637e-17, 9.912705577010326e-19], 'false,false,true': [nan, 3.0717633092395637e-17]}
{'': [0.022767022891099012, 7.804376261406014e-10], 'false': [nan, 7.804376261406014e-10]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 55.803
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | then if ( tweets(D, F) )
%   | | | then return 0.8373156017661788;  // std dev = 0.990, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | | | else return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.858148935099512;  // std dev = 1.46e-07, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else if ( tweets(A, G) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.7152917922423694;  // std dev = 0.350, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.14185106490048824;  // std dev = 0.000, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | then if ( tweets(E, D) )
%   | | | then return 0.6998494205226731;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.7327521664381148;  // std dev = 0.010, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.5043058444242288;  // std dev = 1.252, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.6824363751739172;  // std dev = 0.981, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | else return 0.7237620510359355;  // std dev = 0.063, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   else return -0.12544463852839183;  // std dev = 0.000, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D), follows(A, E) )
%   | | | then return 0.5415235401641372;  // std dev = 0.988, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.5678674653009322;  // std dev = 0.043, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.5715820900168338;  // std dev = 0.132, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.5543071737200566;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.47097384038672324;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.30430717372005656;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.44641230975223944;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.1123163781936068;  // std dev = 0.000, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(A, E) )
%   | | | then return 0.381444070292145;  // std dev = 1.684, 63.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=60 */
%   | | | else return 0.4295711800939247;  // std dev = 0.044, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.2916174207153387;  // std dev = 1.855, 27.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=23 */
%   | | | else return 0.39756568149639543;  // std dev = 0.952, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 233.000 (wgt'ed) examples reached here.  /* #neg=233 */
%   else if ( recursion_accounttype(H, B) )
%   | then return 0.42349244365544003;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, F) )
%   | | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | | then return 0.338488141472021;  // std dev = 0.031, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.3022575589272222;  // std dev = 0.979, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | else return 0.2245016864034942;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.35919259903704825;  // std dev = 0.189, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   else if ( follows(A, G) )
%   | then return -0.09269127618926049;  // std dev = 7.15e-08, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | else return -0.09269127618926087;  // std dev = 5.27e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), follows(A, E) )
%   | | | then return 0.24161254022307554;  // std dev = 0.986, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.2805648483342927;  // std dev = 0.098, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( follows(D, F), follows(A, F) )
%   | | | then return 0.06544686481763401;  // std dev = 1.230, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.2780059358079093;  // std dev = 0.047, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.27206893020997097;  // std dev = 0.029, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.24782403087430438;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.2745828079468564;  // std dev = 0.021, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.2975393395966119;  // std dev = 0.019, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else return -0.08518475138839678;  // std dev = 5.82e-09, 258.000 (wgt'ed) examples reached here.  /* #neg=258 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(F, A), follows(A, F) )
%   | | | then return 0.1941822195614845;  // std dev = 1.373, 59.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=57 */
%   | | | else return 0.08266882757635523;  // std dev = 0.905, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.215941473487608;  // std dev = 0.049, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.2312538601818732;  // std dev = 0.084, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.11489014147615612;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, H) )
%   | then if ( follows(H, A) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.07877675473109148;  // std dev = 8.02e-08, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | | | else return -0.0787767547310917;  // std dev = 0.000, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.07877675473109172;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else return -0.07877675473109164;  // std dev = 1.29e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(E, F), follows(E, D) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.1809226823368129;  // std dev = 1.009, 77.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=76 */
%   | | | else return 0.12835892288001194;  // std dev = 1.350, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | else return -0.12932776157649753;  // std dev = 0.790, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), tweets(A, H) )
%   | | then return 0.1752994244933896;  // std dev = 0.016, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.20653822612546952;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2029842059020747;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, J) )
%   | then if ( follows(K, A) )
%   | | then return -0.0732462257633367;  // std dev = 7.85e-09, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | | else return -0.07324622576333702;  // std dev = 0.000, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else return -0.07324622576333698;  // std dev = 3.73e-09, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), follows(E, A) )
%   | | | then return 0.13777004998944806;  // std dev = 0.985, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0.1682232999907829;  // std dev = 0.087, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | else return -0.3170416129075462;  // std dev = 1.006, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then if ( follows(G, A), follows(A, G) )
%   | | | then return 0.0765108019001859;  // std dev = 1.292, 19.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=17 */
%   | | | else return 0.16912586966619964;  // std dev = 0.117, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return -0.2065587742560723;  // std dev = 1.078, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.0888416373340366;  // std dev = 0.976, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(A, I) )
%   | then return -0.06842697784420261;  // std dev = 4.06e-09, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | else return -0.06842697784420265;  // std dev = 0.000, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.07899775394445215;  // std dev = 1.676, 44.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | | else return 0.14210564354659638;  // std dev = 0.012, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.14106343565979268;  // std dev = 0.040, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.17075971357170006;  // std dev = 0.122, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.20595302153586487;  // std dev = 0.068, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.15631120690206396;  // std dev = 0.013, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.13993692807082905;  // std dev = 0.060, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.16796690427165267;  // std dev = 0.043, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else return -0.06419184008202605;  // std dev = 5.67e-09, 284.000 (wgt'ed) examples reached here.  /* #neg=284 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.516', 'seconds']
Refined model CLL: -0.09189


******************************************
Best model found
******************************************
Results 

CLL : -0.086162 

AUC ROC : 0.99508 

AUC PR : 0.397742 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 55.803 

Total Inference Time : 10.927563428878784 

Total revision time: 83.11421361351013
Best scored revision CLL: -0.09189


Results 

CLL : -0.086162 

AUC ROC : 0.99508 

AUC PR : 0.397742 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 110.76125040435791 

Total Inference Time : 10.927563428878784 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.345
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8270930344783917;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048782;  // std dev = 1.15e-07, 304.000 (wgt'ed) examples reached here.  /* #neg=304 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6886615013026047;  // std dev = 2.404, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.12544463852839202;  // std dev = 0.000, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5455867472700895;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.1123163781936067;  // std dev = 0.000, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4047309894428101;  // std dev = 1.969, 132.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=128 */
%   | else return -0.1015963294878366;  // std dev = 0.000, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.4350340197458392;  // std dev = 9.13e-09, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.10159632948783619;  // std dev = 0.000, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3255205866641188;  // std dev = 1.404, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926049;  // std dev = 1.25e-07, 251.000 (wgt'ed) examples reached here.  /* #neg=251 */
%   | | else return -0.09269127618926101;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.23253398953621765;  // std dev = 2.401, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.11e-09, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.21358426850369425;  // std dev = 1.408, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109143;  // std dev = 2.98e-08, 326.000 (wgt'ed) examples reached here.  /* #neg=326 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.1722123013386402;  // std dev = 1.714, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333684;  // std dev = 1.14e-07, 261.000 (wgt'ed) examples reached here.  /* #neg=261 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.15320291809490547;  // std dev = 0.112, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420267;  // std dev = 3.33e-08, 241.000 (wgt'ed) examples reached here.  /* #neg=241 */
%   | | else return -0.06842697784420262;  // std dev = 2.28e-09, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1207435946739607;  // std dev = 0.156, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202593;  // std dev = 7.03e-09, 308.000 (wgt'ed) examples reached here.  /* #neg=308 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.392', 'seconds']
Parameter learned model CLL:-0.087488 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.201, 5, 156], 'false,true': [1.15e-07, 304, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.404, 6, 156], 'false,true': [0.0, 305, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 316, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.969, 4, 128], 'true,false': [0.0, 276, 0], 'false,true,true': [9.13e-09, 0, 28], 'false,true,false': [0.0, 53, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.404, 2, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.25e-07, 251, 0], 'false,false,false': [0.0, 60, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [2.401, 6, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.11e-09, 321, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.408, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [2.98e-08, 326, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [1.714, 3, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.14e-07, 261, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 50, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.112, 2, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [3.33e-08, 241, 0], 'false,false,false': [2.28e-09, 62, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.156, 4, 156], 'false,true': [0.0, 0, 0], 'false,false': [7.03e-09, 308, 0]}]
{'': [0.030091431657735174, 4.382459307730881e-17], 'false': [4.382459307730881e-17, nan]}
{'': [0.03566529492455221, -8.736181177378281e-17], 'false': [-8.736181177378281e-17, nan]}
{'': [0.024375000000001635, -5.1997787229279483e-17], 'false': [nan, -5.1997787229279483e-17]}
{'': [0.06561491308430724, 0.06513498604945699], 'true': [0.02938475665748307, -5.953369842192869e-17], 'false': [0.06513498604945699, nan], 'false,true': [9.516197353929913e-17, -2.09476042382105e-18]}
{'': [0.01247433049399915, 1.056675290318477e-16], 'true': [0.01247433049399915, nan], 'false': [nan, 1.056675290318477e-16], 'false,false': [6.192479021813622e-17, -2.960594732333751e-17], 'false,false,true': [nan, 6.192479021813622e-17]}
{'': [0.03559429762428051, 3.735329802477162e-17], 'false': [nan, 3.735329802477162e-17], 'false,false': [nan, 3.735329802477162e-17]}
{'': [0.012544444779265067, 2.724473680061734e-18], 'false': [nan, 2.724473680061734e-18], 'false,false': [nan, 2.724473680061734e-18], 'false,false,false': [2.724473680061734e-18, nan]}
{'': [0.01848413385179069, 2.784482183947338e-17], 'true': [0.01848413385179069, nan], 'false': [5.019399115163543e-17, -1.1102230246251566e-17], 'false,false': [nan, -1.1102230246251566e-17]}
{'': [0.012481840425215655, -6.009127922063554e-17], 'false': [nan, -6.009127922063554e-17], 'false,false': [4.6067345420130975e-18, 5.3720468933475315e-18], 'false,false,true': [nan, 4.6067345420130975e-18]}
{'': [0.024344245124702825, 4.9743758895542726e-17], 'false': [nan, 4.9743758895542726e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 46.493
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 0.000, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   | else if ( follows(E, A), follows(A, E) )
%   | | then if ( follows(A, F), follows(F, E) )
%   | | | then return 0.643863220813798;  // std dev = 1.535, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.8331489350995117;  // std dev = 0.987, 40.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=39 */
%   | | | else return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   else return -0.14185106490048774;  // std dev = 1.46e-07, 314.000 (wgt'ed) examples reached here.  /* #neg=314 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), tweets(A, E) )
%   | then if ( recursion_accounttype(D, B), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B), follows(D, F) )
%   | | | then return 0.7194734122109547;  // std dev = 0.000, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.6778067455442877;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5015953800860252;  // std dev = 1.240, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.6630501607070994;  // std dev = 1.354, 30.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=28 */
%   | else if ( tweets(A, H) )
%   | | then return 0.7259586171250543;  // std dev = 0.017, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.6886490745228947;  // std dev = 0.981, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.7297684617178803;  // std dev = 0.020, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.12544463852839205;  // std dev = 0.000, 322.000 (wgt'ed) examples reached here.  /* #neg=322 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(D, A), tweets(A, F) )
%   | | | then return 0.45906139652372163;  // std dev = 2.116, 50.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=45 */
%   | | | else return 0.5788118829796132;  // std dev = 0.195, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( tweets(A, G), tweets(D, G) )
%   | | | then return 0.3252217730601655;  // std dev = 0.878, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.08653674038228047;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then return 0.5727808472700485;  // std dev = 0.131, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(I, A), follows(A, J) )
%   | | | then return 0.24690596075923257;  // std dev = 0.774, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.5274624215924885;  // std dev = 0.977, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   else return -0.11231637819360688;  // std dev = 0.000, 298.000 (wgt'ed) examples reached here.  /* #neg=298 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E), tweets(A, F) )
%   | | | then return 0.4454090842030131;  // std dev = 0.051, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | | else return 0.35458153962665256;  // std dev = 1.386, 26.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=24 */
%   | | else return 0.4424369498819855;  // std dev = 0.257, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.10159632948783659;  // std dev = 0.000, 254.000 (wgt'ed) examples reached here.  /* #neg=254 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4310910015704571;  // std dev = 0.034, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.10159632948783626;  // std dev = 0.000, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then return 0.34823775015679453;  // std dev = 0.266, 91.000 (wgt'ed) examples reached here.  /* #pos=91 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then return 0.2617295588203007;  // std dev = 0.246, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.29322741473651714;  // std dev = 0.975, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return 0.32972140910634645;  // std dev = 0.033, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   else if ( follows(A, J) )
%   | then return -0.09269127618926047;  // std dev = 1.50e-07, 276.000 (wgt'ed) examples reached here.  /* #neg=276 */
%   | else return -0.092691276189261;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, E), follows(F, A) )
%   | | then if ( follows(E, A), recursion_accounttype(F, B) )
%   | | | then return 0.26496824476840797;  // std dev = 0.028, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | | else return 0.2938501437589467;  // std dev = 0.199, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.25550619613410147;  // std dev = 0.015, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.2687735454770229;  // std dev = 0.022, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(H, A), recursion_accounttype(H, B) )
%   | | then return 0.2692355380518737;  // std dev = 0.006, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.018355493813967998;  // std dev = 1.186, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.2680058609540614;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(J, A) )
%   | then return -0.08518475138839678;  // std dev = 7.45e-08, 197.000 (wgt'ed) examples reached here.  /* #neg=197 */
%   | else return -0.08518475138839678;  // std dev = 2.58e-08, 87.000 (wgt'ed) examples reached here.  /* #neg=87 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.2078983811430013;  // std dev = 1.014, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | | else return -0.12135221933189873;  // std dev = 0.815, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.03426477151208;  // std dev = 0.910, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, F), follows(A, G) )
%   | | then if ( follows(G, H), follows(H, A) )
%   | | | then return 0.23296174884279808;  // std dev = 0.024, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.20804986774172735;  // std dev = 0.025, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.2347310007291078;  // std dev = 0.092, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.22195375844630405;  // std dev = 0.066, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   else return -0.07877675473109143;  // std dev = 3.33e-08, 296.000 (wgt'ed) examples reached here.  /* #neg=296 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(E, F), recursion_accounttype(E, B) )
%   | | | then return 0.18177142868626087;  // std dev = 0.004, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.18806199694005485;  // std dev = 0.065, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else if ( follows(G, A), recursion_accounttype(E, B) )
%   | | | then return -0.014899315564205554;  // std dev = 1.231, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.1816078350772566;  // std dev = 0.077, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A), recursion_accounttype(I, B) )
%   | | | then return 0.18380662648844698;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.22518249972796686;  // std dev = 0.021, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.1920755207560356;  // std dev = 0.128, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.18001008633196947;  // std dev = 0.016, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else return -0.07324622576333704;  // std dev = 4.75e-09, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.1406232199076573;  // std dev = 0.966, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   | | | else return -0.01138176469375174;  // std dev = 0.914, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(G, A), follows(G, D) )
%   | | | then return 0.15653842320305772;  // std dev = 0.010, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.1720386821840869;  // std dev = 0.100, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tweets(A, H), follows(I, A) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.23864792253023395;  // std dev = 0.041, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.16031841814496836;  // std dev = 0.065, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, K), follows(A, L) )
%   | | | then return 0.15554195236593982;  // std dev = 0.051, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.16356871634169406;  // std dev = 0.068, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   else return -0.06842697784420315;  // std dev = 0.000, 338.000 (wgt'ed) examples reached here.  /* #neg=338 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, F) )
%   | | then if ( follows(E, A), follows(F, A) )
%   | | | then return 0.06138321519437809;  // std dev = 1.847, 48.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=44 */
%   | | | else return 0.12617137612361945;  // std dev = 1.014, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | else return -0.05219430209198304;  // std dev = 0.853, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.13810584467135967;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.16470938648339767;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.14288164964138747;  // std dev = 0.102, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | | else return 0.13471161259543127;  // std dev = 0.013, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   else if ( follows(K, A) )
%   | then return -0.06419184008202625;  // std dev = 0.000, 215.000 (wgt'ed) examples reached here.  /* #neg=215 */
%   | else return -0.06419184008202622;  // std dev = 0.000, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.794', 'seconds']
Refined model CLL: -0.085597


******************************************
Best model found
******************************************
Results 

CLL : -0.09151 

AUC ROC : 0.994328 

AUC PR : 0.414567 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 46.493 

Total Inference Time : 12.380172967910767 

Total revision time: 81.38096112060546
Best scored revision CLL: -0.085597


Results 

CLL : -0.09151 

AUC ROC : 0.994328 

AUC PR : 0.414567 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 109.02799791145324 

Total Inference Time : 12.380172967910767 

Run: 2
Starting experiments for fasttext using majority_vote 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.395
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8298470483070582;  // std dev = 1.707, 106.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048816;  // std dev = 0.000, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | else return -0.06777699082641374;  // std dev = 0.262, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.14185106490048768;  // std dev = 6.97e-09, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7148011984848227;  // std dev = 1.005, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.036054973854382805;  // std dev = 0.264, 206.000 (wgt'ed) examples reached here.  /* #neg=184 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09533761435969726;  // std dev = 0.981, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5285554015677009;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.1117385778337414;  // std dev = 2.995, 61.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5408943024411791;  // std dev = 1.586, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.7322773787189879;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8184618333943683;  // std dev = 0.083, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.4127176490803974;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.563493308437756;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.563493308437756;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.027422557827678197;  // std dev = 0.271, 275.000 (wgt'ed) examples reached here.  /* #neg=243 #pos=32 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.48906042710836745;  // std dev = 2.453, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.11917576297528212;  // std dev = 0.003, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1349906213272216;  // std dev = 0.000, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2966070270284473;  // std dev = 1.815, 76.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=73 */
%   | else return 0.2259378570696827;  // std dev = 0.881, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3106243599057556;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.541770599510894;  // std dev = 1.365, 25.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=23 */
%   | | | else return -0.08346364079786281;  // std dev = 2.096, 250.000 (wgt'ed) examples reached here.  /* #neg=241 #pos=9 */
%   | | else return -0.10815635439224408;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.024459232228812786;  // std dev = 3.579, 284.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26040971232995236;  // std dev = 0.152, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.36891817475205146;  // std dev = 1.998, 25.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10775665749755871;  // std dev = 0.029, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | | else return -0.10417161890309706;  // std dev = 0.046, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28850521787347394;  // std dev = 1.680, 109.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else return -0.07531219982992805;  // std dev = 1.925, 242.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 5.995903656407264E-4;  // std dev = 0.688, 26.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17455087353176424;  // std dev = 1.401, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.23879212534048644;  // std dev = 0.063, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05218815532851812;  // std dev = 0.156, 229.000 (wgt'ed) examples reached here.  /* #neg=207 #pos=22 */
%   | | else return 0.028348660642023186;  // std dev = 0.244, 84.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=22 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15053336394252698;  // std dev = 0.211, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2351206510980553;  // std dev = 1.564, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09049052748486426;  // std dev = 0.027, 180.000 (wgt'ed) examples reached here.  /* #neg=180 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4323938046785049;  // std dev = 0.487, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09718007823863037;  // std dev = 0.001, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19098766152205052;  // std dev = 1.197, 95.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=94 */
%   | | else return 0.1455585697711657;  // std dev = 0.009, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08305841208593799;  // std dev = 0.000, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0844331584181035;  // std dev = 3.73e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.008204852021447316;  // std dev = 0.498, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.19160915648863402;  // std dev = 0.059, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.005773016290554237;  // std dev = 1.765, 69.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.136', 'seconds']
Parameter learned model CLL:-0.107623 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [1.707, 3, 103], 'true,false,true': [0.0, 160, 0], 'true,false,false': [0.262, 25, 2], 'false,true,true': [0.977, 1, 21], 'false,true,false': [0.0, 0, 0], 'false,false': [6.97e-09, 41, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.005, 1, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.264, 184, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.981, 25, 1], 'false,false,false,true': [0.894, 1, 4], 'false,false,false,false': [2.995, 44, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [1.586, 3, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.083, 0, 2], 'true,false,false': [0.894, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false': [0.271, 243, 32]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.453, 4, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.003, 204, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 39, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.815, 3, 73], 'true,false': [0.881, 1, 4], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.365, 2, 23], 'false,false,true,false': [2.096, 241, 9], 'false,false,false': [0.0, 15, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.579, 193, 91], 'false,true': [0.152, 0, 13], 'false,false,true': [1.998, 3, 22], 'false,false,false,true': [0.029, 30, 0], 'false,false,false,false': [0.046, 49, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.68, 2, 107], 'true,false': [1.925, 231, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.688, 18, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [1.401, 2, 80], 'true,false,true': [0.063, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.156, 207, 22], 'false,false,false': [0.244, 62, 22]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.211, 4, 77], 'false,true,true,true': [1.564, 2, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.027, 180, 0], 'false,false,true': [0.487, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.001, 43, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.197, 1, 94], 'true,true,false': [0.009, 0, 9], 'true,false,true': [0.0, 196, 0], 'true,false,false,true': [3.73e-09, 17, 0], 'true,false,false,false': [0.498, 8, 2], 'false,true': [0.059, 0, 4], 'false,false,true': [0.0, 0, 0], 'false,false,false': [1.765, 52, 17]}]
{'': [0.22993861314634073, 0.22222222222222235], 'true': [0.027500889996442155, 0.010580800137264267], 'false': [0.04338842975206614, 4.603363760640893e-17], 'false,true': [0.04338842975206614, nan], 'true,false': [-1.4432899320127036e-16, 0.0685871056241427]}
{'': [0.012180798391248285, 0.09297519497375285], 'false': [0.06949439351693555, 0.13689200936568446], 'false,false': [0.03698224852071005, 0.16015431958723403], 'false,false,false': [0.16000000000000006, 0.14700513051042055], 'false,true': [nan, 0.06949439351693555], 'false,false,true': [nan, 0.03698224852071005]}
{'': [0.04438311629006483, 0.08823286478703281], 'false': [nan, 0.0882328647870328], 'false,false': [-3.134747363647501e-16, 0.07335819658165274], 'true': [0.03448133153481586, 0.14885804121100188], 'true,false': [0.0034114705923569133, 0.16], 'true,true': [0.03445871257071562, 0.0], 'false,false,true': [-9.868649107779169e-17, 0.0]}
{'': [0.0462872485649057, 4.153064450554148e-05], 'false': [9.329256407571833e-06, -8.540177112501205e-18], 'false,true': [nan, 9.329256407569656e-06], 'false,false': [nan, -8.540177112501205e-18], 'false,false,false': [nan, -8.540177112501205e-18]}
{'': [0.050533554451445, 0.05572373734401934], 'false': [-2.6122894697062506e-17, 0.05253368859027124], 'false,false': [0.05505532640972539, -3.7007434154171884e-18], 'false,false,true': [0.07451014273289261, 0.01757185793609344], 'true': [0.04333123678062723, 0.15532293119253912], 'false,true': [-2.6122894697062506e-17, nan]}
{'': [0.04510065031086618, 0.0771303657539635], 'false': [0.001766622474412462, 0.0795008821092494], 'false,false': [0.15960405394929908, 4.025261071643956e-05], 'true': [nan, 0.04510065031086676], 'true,false': [nan, 0.04510065031086618], 'false,false,false': [2.7318955798285213e-05, 4.329047809489896e-05]}
{'': [0.04693512892991863, 0.01818998837881241], 'true': [0.025894390157297484, 0.015307941187619712], 'false': [nan, 0.01818998837881241], 'false,false': [nan, 0.01818998837881241], 'false,false,false': [nan, 0.01818998837881241]}
{'': [0.023503809514879393, 0.034999097102583004], 'false': [nan, 0.034999097102582886], 'false,false': [0.02433483205587426, 0.05932643590399273], 'true': [0.023931045423287875, 0.001958459275083542], 'true,false': [0.001958459275083542, nan]}
{'': [0.04432262274468309, 0.034769519264449045], 'false': [0.025605187875419492, 0.060899022560260745], 'false,false': [0.013949574299947547, 2.4721679805340085e-08], 'false,true': [0.07196226325951172, 4.132969973468113e-06], 'false,true,true': [0.07196226325951172, nan], 'false,false,false': [nan, 2.4721679805340085e-08]}
{'': [0.02080544372611037, 0.044513468013215686], 'false': [0.0008657894525134074, 0.04515143556189512], 'false,false': [nan, 0.04515143556189512], 'true': [0.013950065617834108, 0.001352903595179967], 'true,true': [0.01509218315700785, 9.17638745272077e-06], 'true,false': [-4.304946422015913e-17, 0.010539969884924581], 'true,false,false': [8.163404592832033e-19, 0.024799295362120707]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 9.795
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.8436561814763244;  // std dev = 0.993, 69.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=68 */
%   | | | else return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.8025933795439567;  // std dev = 0.972, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.5724346493852266;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004883;  // std dev = 0.000, 181.000 (wgt'ed) examples reached here.  /* #neg=181 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.011995088945666036;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return -0.14185106490048774;  // std dev = 1.49e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   else if ( recursion_accounttype(K, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.14185106490048768;  // std dev = 5.05e-08, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), follows(D, A) )
%   | then return 0.722389179840164;  // std dev = 2.38e-07, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | else return 0.6163503017684981;  // std dev = 0.335, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then if ( tweets(A, F), tweets(E, F) )
%   | | then if ( follows(A, G), follows(G, A) )
%   | | | then return 0.48054838382993637;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.7652097743290925;  // std dev = 0.112, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7411379885574799;  // std dev = 0.057, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return -0.07720520001003484;  // std dev = 2.659, 177.000 (wgt'ed) examples reached here.  /* #neg=167 #pos=10 */
%   | | | else return 0.01864899139138365;  // std dev = 1.765, 30.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.06231492830257421;  // std dev = 2.108, 36.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=8 */
%   | | | else return 0.11985415039593456;  // std dev = 2.135, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5252700621100805;  // std dev = 0.201, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.6192644497464082;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6145122255030193;  // std dev = 0.235, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5802935232938482;  // std dev = 0.059, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.44711222044030613;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), follows(I, A) )
%   | | | then return -0.10237036182983297;  // std dev = 1.483, 157.000 (wgt'ed) examples reached here.  /* #neg=154 #pos=3 */
%   | | | else return 0.005406213822686034;  // std dev = 2.786, 82.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09911153726401209;  // std dev = 2.131, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | | | else return 0.1978453377081723;  // std dev = 1.831, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D) )
%   | | then if ( follows(E, A), follows(E, D) )
%   | | | then return 0.3925941408783763;  // std dev = 1.389, 57.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=55 */
%   | | | else return 0.28247906564693964;  // std dev = 1.274, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | | else return 0.4521999813356966;  // std dev = 0.199, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A) )
%   | | | then return 0.48972522359741566;  // std dev = 0.139, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.3951249534366638;  // std dev = 0.006, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( follows(H, A), follows(A, H) )
%   | | | then return 0.7506130634100998;  // std dev = 0.078, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.6241810684814542;  // std dev = 0.783, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   else if ( follows(I, A) )
%   | then return -0.11322140188502208;  // std dev = 0.126, 201.000 (wgt'ed) examples reached here.  /* #neg=201 */
%   | else return -0.15354407601849218;  // std dev = 0.050, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.3359983715914955;  // std dev = 0.025, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.2728892876782982;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return 0.4128817867722294;  // std dev = 0.040, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( tweets(A, F), follows(G, A) )
%   | | then return 0.1259236359761451;  // std dev = 0.434, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.3237189090493892;  // std dev = 0.065, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.33464114651780175;  // std dev = 0.014, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, A) )
%   | | | then return -0.05177632893688732;  // std dev = 2.574, 207.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=15 */
%   | | | else return 0.039292720543604116;  // std dev = 2.313, 64.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=17 */
%   | | else return -0.10538304937541264;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.27369375556466213;  // std dev = 0.017, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else if ( follows(F, A), follows(F, D) )
%   | | | then return 0.048642190275448194;  // std dev = 0.859, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.31375448135959616;  // std dev = 0.039, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.24982769077209338;  // std dev = 0.028, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.03913567206401949;  // std dev = 2.276, 148.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=12 */
%   | | | else return -0.0368416489071161;  // std dev = 1.222, 36.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=3 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.28265457788563414;  // std dev = 0.041, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.4583705674531959;  // std dev = 0.104, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return -0.11938183093724902;  // std dev = 0.019, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(C, E), tweets(D, E) )
%   | | then return 0.2083395443097334;  // std dev = 0.118, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | | else return 0.1333108450141522;  // std dev = 0.303, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.7627764352796867;  // std dev = 0.014, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( follows(G, A) )
%   | | then return 0.27407492045026904;  // std dev = 0.032, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.032773199021893754;  // std dev = 0.896, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.0774097671583649;  // std dev = 1.296, 138.000 (wgt'ed) examples reached here.  /* #neg=135 #pos=3 */
%   | | | else return -0.011201914682784963;  // std dev = 2.316, 90.000 (wgt'ed) examples reached here.  /* #neg=78 #pos=12 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.016747114182334124;  // std dev = 1.425, 46.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=9 */
%   | | | else return 0.07328616802975965;  // std dev = 1.132, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.17879595431589773;  // std dev = 0.109, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( tweets(E, F), tweets(D, G) )
%   | | | then return -0.07178276034494566;  // std dev = 1.426, 137.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=3 */
%   | | | else return -0.16801264071632044;  // std dev = 0.637, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(D, H), recursion_accounttype(H, B) )
%   | | | then return 0.4537231830700703;  // std dev = 0.850, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return -0.10003956011473458;  // std dev = 0.037, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.3529080856187341;  // std dev = 0.363, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.11671602534679892;  // std dev = 0.008, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.05488878155521775;  // std dev = 0.700, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return -0.0016762695463832938;  // std dev = 0.985, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.1601232657755616;  // std dev = 0.041, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | | else return 0.20505768932278634;  // std dev = 0.028, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(F, A), tweets(A, G) )
%   | | then return -0.06880408623378785;  // std dev = 0.394, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.14038178467891343;  // std dev = 0.043, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then if ( follows(J, A), recursion_accounttype(J, B) )
%   | | | then return 0.15810175403878268;  // std dev = 0.036, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.466172045532778;  // std dev = 1.010, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.08189484383978418;  // std dev = 0.107, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.34542074564150144;  // std dev = 0.016, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12301432948562853;  // std dev = 0.019, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.11522302656365509;  // std dev = 1.400, 74.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=72 */
%   | | | else return 0.3311366356260692;  // std dev = 0.645, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.1399327159691048;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.07235031170170617;  // std dev = 0.030, 199.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.12293604883589265;  // std dev = 0.037, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2595367383639806;  // std dev = 0.016, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09573423851108075;  // std dev = 0.011, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.004403778844332751;  // std dev = 0.602, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return -0.019833490080671565;  // std dev = 0.797, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.475', 'seconds']
Refined model CLL: -0.106083


******************************************
Best model found
******************************************
Results 

CLL : -0.105414 

AUC ROC : 0.994465 

AUC PR : 0.348349 

Precision : 0.34141 

Recall : 0.99359 

F1 : 0.508197 

Total Learning Time : 9.795 

Total Inference Time : 13.084186315536499 

Total revision time: 33.720109405517576
Best scored revision CLL: -0.106083


Results 

CLL : -0.105414 

AUC ROC : 0.994465 

AUC PR : 0.348349 

Precision : 0.34141 

Recall : 0.99359 

F1 : 0.508197 

Total Learning Time : 61.3664497756958 

Total Inference Time : 13.084186315536499 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.547
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.830111551921941;  // std dev = 1.708, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048824;  // std dev = 0.000, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | | else return -0.07042249347191629;  // std dev = 0.258, 56.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=4 */
%   else if ( recursion_accounttype(E, B) )
%   | then if ( follows(E, F), follows(A, F) )
%   | | then return 0.8318331456258272;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | else return 0.7748156017661789;  // std dev = 0.957, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | else return -0.14185106490048763;  // std dev = 8.33e-09, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7284245541753446;  // std dev = 0.198, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03732586117834834;  // std dev = 0.262, 180.000 (wgt'ed) examples reached here.  /* #neg=161 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04498855329409808;  // std dev = 1.774, 42.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5247539622367456;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.16103605818579475;  // std dev = 4.400, 119.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5729400623560081;  // std dev = 0.371, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.3434281123201281;  // std dev = 1.082, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.49796084236854476;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.593069688456625;  // std dev = 0.181, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5600743713105018;  // std dev = 5.96e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.014507961577804707;  // std dev = 0.316, 332.000 (wgt'ed) examples reached here.  /* #neg=275 #pos=57 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4987038069054098;  // std dev = 2.990, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1250379285109714;  // std dev = 0.005, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14600218534296325;  // std dev = 0.000, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30215991524580044;  // std dev = 1.546, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | else return 0.0994335002840944;  // std dev = 0.672, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.304592523898498;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5125534722555609;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5429430387309478;  // std dev = 1.345, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | | else return -0.10461418851265085;  // std dev = 1.652, 283.000 (wgt'ed) examples reached here.  /* #neg=278 #pos=5 */
%   | | else return -0.007547372903658442;  // std dev = 0.261, 82.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.024528834748350378;  // std dev = 3.236, 248.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2667313614352935;  // std dev = 0.323, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.46030927180954667;  // std dev = 1.326, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11712549266326919;  // std dev = 0.037, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | | else return -0.11928806387063048;  // std dev = 0.062, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28387023330608113;  // std dev = 1.414, 122.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=121 */
%   | else return -0.08875053545818237;  // std dev = 1.751, 238.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.04294332829723225;  // std dev = 2.066, 79.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19046828738958516;  // std dev = 0.067, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.33987406817896737;  // std dev = 0.104, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05037048728155717;  // std dev = 0.160, 185.000 (wgt'ed) examples reached here.  /* #neg=166 #pos=19 */
%   | | else return 0.005802288912647285;  // std dev = 0.219, 197.000 (wgt'ed) examples reached here.  /* #neg=145 #pos=52 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.17070299429779623;  // std dev = 0.132, 79.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.224124659002207;  // std dev = 1.834, 41.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09367047902565971;  // std dev = 0.105, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.34590763143580977;  // std dev = 0.631, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10290698125567069;  // std dev = 0.092, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15262555137400843;  // std dev = 1.967, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   | | else return 0.1678340666382315;  // std dev = 0.414, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.0829758848224445;  // std dev = 6.14e-08, 161.000 (wgt'ed) examples reached here.  /* #neg=161 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09620107500030944;  // std dev = 0.038, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | | else return 0.03576176116589166;  // std dev = 1.005, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.14478581167937166;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A), follows(H, H) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.009991183795806442;  // std dev = 2.339, 125.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=40 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.296', 'seconds']
Parameter learned model CLL:-0.108024 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'recursion_accounttype(E, B)', 'false,true': 'follows(E, F), follows(A, F)'}, {'true,true': [1.708, 3, 104], 'true,false,true': [0.0, 171, 0], 'true,false,false': [0.258, 52, 4], 'false,true,true': [0.987, 1, 37], 'false,true,false': [0.957, 1, 11], 'false,false': [8.33e-09, 105, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.198, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.262, 161, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.774, 38, 4], 'false,false,false,true': [1.265, 2, 8], 'false,false,false,false': [4.4, 79, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)'}, {'true,true,true': [0.371, 0, 67], 'true,true,false': [0.0, 0, 0], 'true,false,true': [1.082, 2, 3], 'true,false,false': [0.943, 1, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.181, 0, 6], 'false,false,true,false': [5.96e-08, 0, 15], 'false,false,false': [0.316, 275, 57]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.99, 7, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.005, 223, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.0, 86, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.546, 2, 77], 'true,false': [0.672, 1, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.345, 2, 39], 'false,false,true,false': [1.652, 278, 5], 'false,false,false': [0.261, 69, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.236, 166, 82], 'false,true': [0.323, 0, 22], 'false,false,true': [1.326, 1, 52], 'false,false,false,true': [0.037, 94, 0], 'false,false,false,false': [0.062, 75, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.414, 1, 121], 'true,false': [1.751, 231, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.066, 51, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)'}, {'true,true': [0.067, 0, 83], 'true,false,true': [0.104, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.16, 166, 19], 'false,false,false': [0.219, 145, 52]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.132, 1, 78], 'false,true,true,true': [1.834, 3, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.105, 216, 0], 'false,false,true': [0.631, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.092, 103, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'follows(A, G), recursion_accounttype(G, B)', 'false,false': 'follows(H, A), follows(H, H)'}, {'true,true,true': [1.967, 3, 85], 'true,true,false': [0.414, 0, 19], 'true,false,true': [6.14e-08, 161, 0], 'true,false,false,true': [0.038, 25, 0], 'true,false,false,false': [1.005, 13, 4], 'false,true': [0.0, 0, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false': [2.339, 85, 40]}]
{'': [0.21879594105202982, 0.21377731529656693], 'true': [0.02725128832212642, 0.01731064061014176], 'false': [0.0384000000000006, 7.190015778524824e-17], 'false,true': [0.025623268698062793, 0.07638888888888877], 'true,false': [-1.7659687877078512e-16, 0.06632653061224474]}
{'': [0.00045944108199285987, 0.11954439001656739], 'false': [0.06884443903124082, 0.1582609901099806], 'false,false': [0.07488970342763437, 0.17193101080555973], 'false,false,false': [0.15999999999999998, 0.16267852266822497], 'false,false,true': [nan, 0.07488970342763437], 'false,true': [nan, 0.06884443903124082]}
{'': [0.030508183399400503, 0.11144223829918348], 'false': [nan, 0.11144223829918572], 'false,false': [0.001777454618078497, 0.10005485251715661], 'true': [0.002052522475372481, 0.1526733614717947], 'true,false': [0.23435597134996508, 0.09876543209876537], 'true,true': [0.002052522475372481, nan], 'false,false,true': [0.00544345476786634, 2.3684757858670006e-16]}
{'': [0.05484259300668366, 0.00010356686253995524], 'false': [2.1187039993828865e-05, -2.840105411831796e-17], 'false,true': [nan, 2.1187039993824884e-05], 'false,false': [nan, -2.840105411831796e-17], 'false,false,false': [nan, -2.840105411831796e-17]}
{'': [0.036068795765213955, 0.06418041344091131], 'false': [0.001970015046058395, 0.0619081756873204], 'false,false': [0.06035433253394642, 0.06786524135042754], 'false,false,true': [0.04409032692749245, 0.009647191820968301], 'true': [0.030255709962301106, 0.22560245107243465], 'false,true': [9.098844000854367e-06, 0.0]}
{'': [0.04223505581317119, 0.06796405288469695], 'false': [0.004755267751096703, 0.06873913204726131], 'false,false': [0.033152542151291015, 3.1722739226331005e-05], 'true': [nan, 0.042235055813171746], 'true,false': [nan, 0.04223505581317119], 'false,false,false': [1.4603860002827375e-05, 5.057715185321499e-05]}
{'': [0.045177441575842865, 0.05402074140516268], 'false': [nan, 0.054020741405162664], 'false,false': [nan, 0.05402074140516268], 'false,false,false': [nan, 0.05402074140516268], 'true': [0.016380887940987375, 0.012885253071873288]}
{'': [0.0006931242158363695, 0.03795181582906152], 'false': [nan, 0.037951815829060986], 'false,false': [0.025540552931488037, 0.04807893327463138], 'true': [5.4541335610510254e-05, 0.005397451996237465], 'true,false': [0.005397451996237465, nan]}
{'': [0.017524095347743417, 0.033655334081982693], 'false': [0.026678636418832054, 0.04342835790130839], 'false,false': [0.009957640178163186, 8.136437336548648e-05], 'false,true': [0.08207949271246819, 5.088979488021047e-05], 'false,true,true': [0.08207949271246819, nan], 'false,false,false': [nan, 8.136437336548648e-05]}
{'': [0.02900136512800633, 0.04215401064718803], 'false': [0.0, 0.04375895955680225], 'false,false': [nan, 0.04375895955680242], 'true': [0.03778085797755211, 0.0061167530521297805], 'true,true': [0.04394523563924935, 0.009039829013243248], 'true,false': [2.3445703625624425e-17, 0.028283363000083654], 'true,false,false': [5.643095635402218e-05, 0.0594279678195225]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;recursion_accounttype(E, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;follows(A, G), recursion_accounttype(G, B).;true;true


Refining candidate
***************************
Model training time 12.537
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return 0.8164822684328454;  // std dev = 1.384, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.7993254056877476;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else return -0.12511466322684828;  // std dev = 0.128, 239.000 (wgt'ed) examples reached here.  /* #neg=235 #pos=4 */
%   else if ( recursion_accounttype(H, B) )
%   | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else return -0.14185106490048763;  // std dev = 7.88e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7275881376796617;  // std dev = 0.211, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.7495883531256451;  // std dev = 0.187, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.4450300275938788;  // std dev = 0.701, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.12729229971121564;  // std dev = 2.40e-07, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7247221882716758;  // std dev = 0.047, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return -0.12544463852839158;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.20737692766988125;  // std dev = 2.503, 36.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=14 */
%   | | | else return 0.1960336415175656;  // std dev = 2.057, 23.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=9 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.5391301687807674;  // std dev = 0.987, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return 0.5602108695634035;  // std dev = 0.021, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return 0.31324726707954353;  // std dev = 0.436, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | else return 0.6338959640055767;  // std dev = 0.078, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5635866329732441;  // std dev = 0.046, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5828967435820571;  // std dev = 0.210, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.11380939690865768;  // std dev = 1.23e-07, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.05211661404256286;  // std dev = 2.521, 77.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=19 */
%   | | | else return 0.09779095516859455;  // std dev = 3.216, 71.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D) )
%   | | then return 0.43132401697972395;  // std dev = 0.373, 106.000 (wgt'ed) examples reached here.  /* #pos=106 */
%   | | else return 0.3076220149445428;  // std dev = 0.827, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.3416310079749011;  // std dev = 0.329, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.5411597130240101;  // std dev = 2.98e-08, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.665297876950913;  // std dev = 0.006, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else if ( follows(H, A) )
%   | then return -0.10282555940166917;  // std dev = 7.30e-08, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | else return -0.13633556107133288;  // std dev = 0.220, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.3045461002186556;  // std dev = 0.987, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | | else return 0.18275913898903964;  // std dev = 0.856, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.33890241197660886;  // std dev = 0.035, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.3988330052977009;  // std dev = 0.086, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3268794888798198;  // std dev = 0.057, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.33920071050738415;  // std dev = 0.227, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09371955630773982;  // std dev = 3.94e-08, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.03802828197424095;  // std dev = 2.463, 90.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=25 */
%   | | | else return 0.08742565798262375;  // std dev = 1.858, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.26736373846664097;  // std dev = 0.021, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.24923328283059742;  // std dev = 0.000935, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.08605675329610013;  // std dev = 0.000, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | else return -0.07080452196497665;  // std dev = 0.076, 26.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.32199117982110875;  // std dev = 0.279, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.24833218011540226;  // std dev = 2.98e-08, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.4070317343087881;  // std dev = 0.476, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | | else return 0.3278834093701175;  // std dev = 1.374, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | else return -0.11482198125483414;  // std dev = 0.028, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then if ( follows(E, A), follows(A, C) )
%   | | then if ( tweets(A, D), tweets(E, D) )
%   | | | then return 0.14749141462461934;  // std dev = 1.365, 29.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=27 */
%   | | | else return 0.21395546486822975;  // std dev = 0.027, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.20588581141410772;  // std dev = 0.057, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | else return 0.2891764645422299;  // std dev = 0.211, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then return -0.054062113971336465;  // std dev = 0.124, 220.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=23 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.31535792886920694;  // std dev = 0.417, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.13120880205141092;  // std dev = 0.924, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else if ( follows(A, I), tweets(A, J) )
%   | | | then return 0.10509783587378141;  // std dev = 0.414, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.033697729005675206;  // std dev = 1.504, 41.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=13 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | | then return 0.16599110957197283;  // std dev = 0.985, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return 0.17403893379564514;  // std dev = 0.046, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.17253207454868372;  // std dev = 0.024, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | else return 0.33580844839757257;  // std dev = 0.022, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( follows(H, A), follows(A, H) )
%   | | then return 0.12010522092913889;  // std dev = 0.919, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.18491913984005096;  // std dev = 0.065, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(I, A) )
%   | | then return -0.05567720640174256;  // std dev = 0.095, 231.000 (wgt'ed) examples reached here.  /* #neg=214 #pos=17 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.0014560704609715355;  // std dev = 1.670, 93.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=25 */
%   | | | else return 0.037823935241871345;  // std dev = 1.637, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | then if ( follows(E, A), follows(D, E) )
%   | | | then return 0.16390527521313275;  // std dev = 0.042, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.10549278202398969;  // std dev = 0.943, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | else return 0.26793474774469156;  // std dev = 0.019, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.062225514779131054;  // std dev = 0.408, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.15438565596260606;  // std dev = 0.130, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.2436921958182521;  // std dev = 0.208, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.07147171441796375;  // std dev = 0.013, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.3067260224983809;  // std dev = 0.054, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return -0.1108525223045051;  // std dev = 0.024, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.1516028374309167;  // std dev = 0.024, 86.000 (wgt'ed) examples reached here.  /* #pos=86 */
%   | | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.13176545988584815;  // std dev = 0.018, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.07234818684127504;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return -0.06049510034407296;  // std dev = 0.047, 201.000 (wgt'ed) examples reached here.  /* #neg=197 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.05471468516446605;  // std dev = 0.408, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.19565896568839375;  // std dev = 0.043, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.08104391922718689;  // std dev = 0.056, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.01683370314615951;  // std dev = 1.037, 35.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=12 */
%   | | | else return 0.014783462393049552;  // std dev = 1.238, 39.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=13 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.994', 'seconds']
Refined model CLL: -0.098716


******************************************
Best model found
******************************************
Results 

CLL : -0.100024 

AUC ROC : 0.993571 

AUC PR : 0.400061 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 12.537 

Total Inference Time : 18.033695459365845 

Total revision time: 42.76607120895386
Best scored revision CLL: -0.098716


Results 

CLL : -0.100024 

AUC ROC : 0.993571 

AUC PR : 0.400061 

Precision : 0.336898 

Recall : 1.0 

F1 : 0.504 

Total Learning Time : 70.41241157913208 

Total Inference Time : 18.033695459365845 

Starting experiments for fasttext using borda_count 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 4.177
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8199809961682126;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.14185106490048835;  // std dev = 0.000, 238.000 (wgt'ed) examples reached here.  /* #neg=238 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.6889440481691725;  // std dev = 2.193, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( follows(D, E) )
%   | then return -0.1254446385283919;  // std dev = 0.000, 266.000 (wgt'ed) examples reached here.  /* #neg=266 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5340913405533523;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360686;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.42287647785644183;  // std dev = 1.402, 120.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=118 */
%   | else return -0.10159632948783656;  // std dev = 0.000, 232.000 (wgt'ed) examples reached here.  /* #neg=232 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43954314452310905;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.10159632948783616;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.3084185328317814;  // std dev = 1.969, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0926912761892605;  // std dev = 6.83e-08, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   | | else return -0.09269127618926086;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.26593990238997706;  // std dev = 0.996, 127.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 5.82e-09, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.19342312296275072;  // std dev = 1.970, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109144;  // std dev = 6.83e-08, 225.000 (wgt'ed) examples reached here.  /* #neg=225 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.14689651234333234;  // std dev = 2.394, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333661;  // std dev = 1.30e-07, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333698;  // std dev = 3.73e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13238548434127828;  // std dev = 0.192, 131.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420261;  // std dev = 6.83e-08, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | | else return -0.06842697784420268;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.13702159476416909;  // std dev = 0.124, 128.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=126 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202625;  // std dev = 1.32e-09, 231.000 (wgt'ed) examples reached here.  /* #neg=231 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '17.082', 'seconds']
Parameter learned model CLL:-0.092693 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 238, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.193, 5, 126], 'false,true': [0.0, 266, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 253, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.402, 2, 118], 'true,false': [0.0, 232, 0], 'false,true,true': [0.0, 0, 8], 'false,true,false': [0.0, 15, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.969, 4, 126], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.83e-08, 220, 0], 'false,false,false': [0.0, 17, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [0.996, 1, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [5.82e-09, 250, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [1.97, 4, 126], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [6.83e-08, 225, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [2.394, 6, 126], 'true,false': [0.0, 0, 0], 'false,true': [1.3e-07, 216, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [3.73e-09, 13, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.192, 5, 126], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [6.83e-08, 214, 0], 'false,false,false': [0.0, 12, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.124, 2, 126], 'false,true': [0.0, 0, 0], 'false,false': [1.32e-09, 231, 0]}]
{'': [0.03671114736903867, -1.7539657868027682e-16], 'false': [-1.7539657868027682e-16, nan]}
{'': [0.036711147369031395, -7.34583655391081e-17], 'false': [-7.34583655391081e-17, nan]}
{'': [0.03671114736903503, -9.47858392565351e-17], 'false': [nan, -9.47858392565351e-17]}
{'': [0.06739300998017936, 0.06642690291104175], 'true': [0.016388888888888817, -7.656710514656253e-17], 'false': [0.06642690291104175, nan], 'false,true': [0.0, -1.8503717077085942e-18]}
{'': [0.029809173910587187, 2.810691201582675e-17], 'true': [0.029809173910587187, nan], 'false': [nan, 2.810691201582675e-17], 'false,false': [2.119516683375299e-17, -4.89804275569922e-18], 'false,false,true': [nan, 2.119516683375299e-17]}
{'': [0.007809382953906147, 3.286260152890463e-17], 'false': [nan, 3.286260152890463e-17], 'false,false': [nan, 3.286260152890463e-17]}
{'': [0.0298551419651392, 2.0724163126336256e-17], 'false': [nan, 2.0724163126336256e-17], 'false,false': [nan, 2.0724163126336256e-17], 'false,false,false': [2.0724163126336256e-17, nan]}
{'': [0.043411930801983835, 7.078277798920212e-17], 'true': [0.043411930801983835, nan], 'false': [7.812680543658509e-17, 1.0675221390626506e-18], 'false,false': [nan, 1.0675221390626506e-18]}
{'': [0.03673501887978414, 1.6702470281971383e-17], 'false': [nan, 1.6702470281971383e-17], 'false,false': [2.1789423847783445e-17, -2.3129646346357427e-18], 'false,false,true': [nan, 2.1789423847783445e-17]}
{'': [0.01537693976819048, 1.922464111905033e-18], 'false': [nan, 1.922464111905033e-18]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 58.935
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(D, B) )
%   | | then if ( follows(D, A), follows(D, E) )
%   | | | then return 0.8581489350995124;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return 0.7581489350995123;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | else return 0.8581489350995122;  // std dev = 8.43e-08, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else return -0.1418510649004885;  // std dev = 0.000, 221.000 (wgt'ed) examples reached here.  /* #neg=221 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, A) )
%   | then if ( tweets(D, F), follows(D, G) )
%   | | then if ( follows(G, A), follows(G, E) )
%   | | | then return 0.7036626638262858;  // std dev = 0.992, 62.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=61 */
%   | | | else return 0.7293402122862327;  // std dev = 0.058, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else return 0.3861400788776212;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.5804083623374575;  // std dev = 1.591, 20.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=17 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5766162693538116;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else return -0.12544463852839188;  // std dev = 0.000, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D), follows(D, A) )
%   | | | then return 0.5592671610123684;  // std dev = 1.40e-07, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | | else return 0.45905697448069943;  // std dev = 1.639, 28.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=25 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.5774980131614303;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.17682436349323916;  // std dev = 1.718, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | else if ( tweets(A, G), follows(A, H) )
%   | | then return 0.5695475760053741;  // std dev = 0.108, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.563615635598353;  // std dev = 0.076, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.4723823004071898;  // std dev = 1.321, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   else return -0.11231637819360679;  // std dev = 0.000, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.4148411937541884;  // std dev = 0.969, 60.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=59 */
%   | | | else return 0.2750077049537125;  // std dev = 1.566, 18.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=15 */
%   | | else return 0.451901424507642;  // std dev = 0.322, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 236.000 (wgt'ed) examples reached here.  /* #neg=236 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.5000428783166325;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return -0.10159632948783616;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.3451777842764004;  // std dev = 0.229, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   | else if ( tweets(A, E), follows(A, F) )
%   | | then return 0.3439678667240194;  // std dev = 0.262, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.017590136942763724;  // std dev = 1.133, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | | else return 0.25492017103319187;  // std dev = 0.921, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(A, H) )
%   | then return -0.09269127618926049;  // std dev = 7.15e-08, 229.000 (wgt'ed) examples reached here.  /* #neg=229 */
%   | else return -0.09269127618926085;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then if ( recursion_accounttype(D, B), follows(A, E) )
%   | | | then return 0.2449290143601734;  // std dev = 0.957, 57.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=56 */
%   | | | else return 0.04297018375147968;  // std dev = 1.679, 16.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=12 */
%   | | else if ( tweets(E, F), recursion_accounttype(E, B) )
%   | | | then return 0.27260593079911616;  // std dev = 0.189, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return 0.36125959797177654;  // std dev = 0.081, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.3717870324279684;  // std dev = 0.108, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.26494969030135074;  // std dev = 0.012, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2897633149055509;  // std dev = 0.058, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( tweets(A, J) )
%   | then return -0.08518475138839678;  // std dev = 5.27e-09, 174.000 (wgt'ed) examples reached here.  /* #neg=174 */
%   | else return -0.08518475138839678;  // std dev = 0.000, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A), tweets(F, D) )
%   | | then if ( follows(F, E), follows(G, F) )
%   | | | then return 0.1855323837371554;  // std dev = 1.394, 67.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=65 */
%   | | | else return 0.020891102959224906;  // std dev = 1.257, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else if ( recursion_accounttype(E, B), tweets(E, H) )
%   | | | then return 0.2735670061968787;  // std dev = 0.074, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.21852438585071918;  // std dev = 0.035, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.2544226010850049;  // std dev = 0.103, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.2253525212960259;  // std dev = 0.076, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.291518736606113;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.2659189193119182;  // std dev = 0.092, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else return -0.07877675473109143;  // std dev = 4.17e-09, 243.000 (wgt'ed) examples reached here.  /* #neg=243 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then if ( tweets(A, F) )
%   | | then if ( follows(E, A), follows(A, E) )
%   | | | then return 0.1698882115711611;  // std dev = 0.963, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | | else return 0.20107304784735625;  // std dev = 0.117, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.15679481492661104;  // std dev = 0.972, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return -0.049489051358617;  // std dev = 0.784, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(H, A) )
%   | | then return 0.23744321929478607;  // std dev = 0.007, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.18060382669609953;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2176353066369594;  // std dev = 0.082, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, J) )
%   | then return -0.07324622576333671;  // std dev = 8.07e-09, 235.000 (wgt'ed) examples reached here.  /* #neg=235 */
%   | else return -0.07324622576333699;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( tweets(D, E), follows(G, F) )
%   | | | then return 0.1494384994847964;  // std dev = 1.008, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   | | | else return -0.14248264817886355;  // std dev = 0.778, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.19171308502641848;  // std dev = 0.108, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.16583803442022776;  // std dev = 0.072, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return -0.0034080849566821446;  // std dev = 0.397, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, A) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.06842697784420261;  // std dev = 4.71e-08, 159.000 (wgt'ed) examples reached here.  /* #neg=159 */
%   | | | else return -0.06842697784420268;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.06842697784420262;  // std dev = 1.39e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | else return -0.06842697784420265;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), tweets(A, E) )
%   | then if ( follows(D, A), recursion_accounttype(D, B) )
%   | | then if ( tweets(D, E) )
%   | | | then return 0.09635153291767153;  // std dev = 1.383, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.14924344107047033;  // std dev = 0.050, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( recursion_accounttype(D, B), tweets(D, E) )
%   | | | then return 0.17121851482294723;  // std dev = 0.063, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.13980443934848835;  // std dev = 0.080, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else if ( tweets(A, F) )
%   | | then return 0.195671079953177;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.1612655511672407;  // std dev = 0.093, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.14999371681970322;  // std dev = 0.054, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else return -0.06419184008202625;  // std dev = 2.58e-08, 239.000 (wgt'ed) examples reached here.  /* #neg=239 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.111', 'seconds']
Refined model CLL: -0.091547


******************************************
Best model found
******************************************
Results 

CLL : -0.085787 

AUC ROC : 0.99577 

AUC PR : 0.440613 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 58.935 

Total Inference Time : 8.266005754470825 

Total revision time: 84.40809537124633
Best scored revision CLL: -0.091547


Results 

CLL : -0.085787 

AUC ROC : 0.99577 

AUC PR : 0.440613 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 112.05451036643981 

Total Inference Time : 8.266005754470825 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 5.235
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.8093684472946316;  // std dev = 2.759, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.1418510649004879;  // std dev = 4.21e-08, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.7103447232558464;  // std dev = 1.716, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, E) )
%   | then return -0.125444638528392;  // std dev = 0.000, 290.000 (wgt'ed) examples reached here.  /* #neg=290 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.532579505559905;  // std dev = 0.189, 162.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.11231637819360696;  // std dev = 0.000, 286.000 (wgt'ed) examples reached here.  /* #neg=286 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.4143585107017355;  // std dev = 1.712, 131.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=128 */
%   | else return -0.1015963294878366;  // std dev = 0.000, 273.000 (wgt'ed) examples reached here.  /* #neg=273 */
%   else if ( follows(E, F) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then return 0.43725927406051385;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else return -0.10159632948783616;  // std dev = 0.000, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, E) )
%   | then return 0.32568253288440235;  // std dev = 1.404, 158.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( recursion_accounttype(F, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09269127618926046;  // std dev = 1.01e-07, 250.000 (wgt'ed) examples reached here.  /* #neg=250 */
%   | | else return -0.09269127618926101;  // std dev = 0.000, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.25079193270026656;  // std dev = 1.714, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.08518475138839678;  // std dev = 6.11e-09, 320.000 (wgt'ed) examples reached here.  /* #neg=320 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1921242475692598;  // std dev = 2.201, 161.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(F, G) )
%   | | | then return -0.07877675473109141;  // std dev = 4.71e-08, 291.000 (wgt'ed) examples reached here.  /* #neg=291 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( recursion_accounttype(D, B) )
%   | then return 0.14285548221149308;  // std dev = 2.759, 164.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=156 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, E) )
%   | then return -0.07324622576333685;  // std dev = 1.13e-07, 265.000 (wgt'ed) examples reached here.  /* #neg=265 */
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07324622576333703;  // std dev = 0.000, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1275655553159253;  // std dev = 0.203, 163.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, E) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06842697784420289;  // std dev = 0.000, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
%   | | else return -0.06842697784420262;  // std dev = 2.63e-09, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.1343190454259832;  // std dev = 0.136, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( recursion_accounttype(D, B) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return -0.06419184008202589;  // std dev = 7.39e-09, 316.000 (wgt'ed) examples reached here.  /* #neg=316 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.133', 'seconds']
Parameter learned model CLL:-0.087033 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [2.759, 8, 156], 'false,true': [4.21e-08, 290, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, E)'}, {'true': [1.716, 3, 156], 'false,true': [0.0, 290, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.189, 6, 156], 'false,true': [0.0, 0, 0], 'false,false': [0.0, 286, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(E, F)', 'false,true': 'recursion_accounttype(G, B)'}, {'true,true': [1.712, 3, 128], 'true,false': [0.0, 273, 0], 'false,true,true': [0.0, 0, 28], 'false,true,false': [0.0, 55, 0], 'false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'follows(D, E)', 'false': 'recursion_accounttype(F, B)', 'false,false': 'follows(A, G)', 'false,false,true': 'recursion_accounttype(H, B)'}, {'true,true': [1.404, 2, 156], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.01e-07, 250, 0], 'false,false,false': [0.0, 60, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)'}, {'true': [1.714, 3, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [6.11e-09, 320, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(F, G)'}, {'true': [2.201, 5, 156], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [4.71e-08, 291, 0], 'false,false,false,false': [0.0, 0, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'true': 'recursion_accounttype(D, B)', 'false': 'follows(A, E)', 'false,false': 'follows(A, F)'}, {'true,true': [2.759, 8, 156], 'true,false': [0.0, 0, 0], 'false,true': [1.13e-07, 265, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false': [0.0, 59, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)', 'false,false': 'follows(A, E)', 'false,false,true': 'recursion_accounttype(F, B)'}, {'true': [0.203, 7, 156], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 277, 0], 'false,false,false': [2.63e-09, 45, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'recursion_accounttype(D, B)'}, {'true': [0.136, 3, 156], 'false,true': [0.0, 0, 0], 'false,false': [7.39e-09, 316, 0]}]
{'': [0.04640095181440217, 6.1253684117250015e-18], 'false': [6.1253684117250015e-18, nan]}
{'': [0.01851192595229339, -8.269247355828753e-17], 'false': [-8.269247355828753e-17, nan]}
{'': [0.03566529492455287, -1.1024592272501555e-16], 'false': [nan, -1.1024592272501555e-16]}
{'': [0.06558603901476898, 0.06490966129658933], 'true': [0.022376318396363507, -6.181461529048491e-17], 'false': [0.06490966129658933, nan], 'false,true': [-6.344131569286608e-17, -4.037174635000569e-18]}
{'': [0.012478865677248853, 9.168293364646454e-17], 'true': [0.012478865677248853, nan], 'false': [nan, 9.168293364646454e-17], 'false,false': [4.085620730620576e-17, -2.960594732333751e-17], 'false,false,true': [nan, 4.085620730620576e-17]}
{'': [0.018484988610416066, 3.608224830031759e-17], 'false': [nan, 3.608224830031759e-17], 'false,false': [nan, 3.608224830031759e-17]}
{'': [0.030098622188873204, 7.630398794674616e-18], 'false': [nan, 7.630398794674616e-18], 'false,false': [nan, 7.630398794674616e-18], 'false,false,false': [7.630398794674616e-18, nan]}
{'': [0.04642592629373517, 2.1930331350620375e-17], 'true': [0.04642592629373517, nan], 'false': [4.8598441832648363e-17, -1.034953667023451e-17], 'false,false': [nan, -1.034953667023451e-17]}
{'': [0.04105445721498302, -7.378500846887687e-17], 'false': [nan, -7.378500846887687e-17], 'false,false': [-3.6072228236918445e-17, 6.784696261598179e-18], 'false,false,true': [nan, -3.6072228236918445e-17]}
{'': [0.01853006427275101, 5.551115123125783e-17], 'false': [nan, 5.551115123125783e-17]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
1;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;;accounttype(A, B) :- follows(A, C).;true;true
3;true;follows(D, C), recursion_accounttype(D, B).;true;true
3;false;recursion_accounttype(G, B).;true;true
4;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
4;false;follows(A, G).;true;true
5;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
6;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
7;false;follows(A, E).;true;true
8;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
8;false;follows(A, E).;true;true
9;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true


Refining candidate
***************************
Model training time 40.469
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, F) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.8581489350995126;  // std dev = 0.000, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | | else return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.858148935099512;  // std dev = 2.38e-07, 78.000 (wgt'ed) examples reached here.  /* #pos=78 */
%   else return -0.1418510649004877;  // std dev = 1.63e-07, 321.000 (wgt'ed) examples reached here.  /* #neg=321 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.7044885796656116;  // std dev = 0.994, 62.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=61 */
%   | | | else return 0.6022428531314972;  // std dev = 0.877, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.723437006648133;  // std dev = 0.092, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | else if ( tweets(A, G) )
%   | | then return 0.7194734122109543;  // std dev = 5.96e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5944734122109545;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else return -0.12544463852839194;  // std dev = 0.000, 277.000 (wgt'ed) examples reached here.  /* #neg=277 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(E, A) )
%   | | then return 0.5629290922028652;  // std dev = 0.070, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | else if ( follows(F, A), recursion_accounttype(E, B) )
%   | | | then return 0.3488567221531971;  // std dev = 0.899, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.5584421203431207;  // std dev = 0.038, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.5543874747554317;  // std dev = 3.65e-08, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.4551706443481141;  // std dev = 1.342, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.500784155964319;  // std dev = 0.974, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return 0.5718514828758336;  // std dev = 0.055, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else return -0.11231637819360699;  // std dev = 0.000, 282.000 (wgt'ed) examples reached here.  /* #neg=282 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.39759121996049895;  // std dev = 0.989, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | | else return 0.42969664702187343;  // std dev = 0.138, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return 0.4298547707265838;  // std dev = 0.144, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | else return -0.10159632948783658;  // std dev = 0.000, 240.000 (wgt'ed) examples reached here.  /* #neg=240 */
%   else if ( recursion_accounttype(G, B) )
%   | then return 0.4364578424431366;  // std dev = 0.064, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.1015963294878362;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then if ( follows(D, F), recursion_accounttype(F, B) )
%   | | | then return 0.2946624333047688;  // std dev = 1.393, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   | | | else return 0.1852109423661331;  // std dev = 0.907, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.32523414596286637;  // std dev = 0.073, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | else if ( follows(G, A) )
%   | | then if ( tweets(A, H), recursion_accounttype(G, B) )
%   | | | then return 0.2672360404375443;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.32585374844696935;  // std dev = 0.026, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.3130428850278233;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.21553035528022685;  // std dev = 0.935, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(A, J) )
%   | then return -0.09269127618926049;  // std dev = 1.28e-07, 253.000 (wgt'ed) examples reached here.  /* #neg=253 */
%   | else return -0.092691276189261;  // std dev = 0.000, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F) )
%   | | | then return 0.2633970104657266;  // std dev = 0.061, 68.000 (wgt'ed) examples reached here.  /* #pos=68 */
%   | | | else return 0.2800497879231101;  // std dev = 0.015, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.026993582840754555;  // std dev = 0.867, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( follows(G, H), follows(H, G) )
%   | | | then return 0.05821001968636911;  // std dev = 1.536, 14.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=11 */
%   | | | else return 0.3203688159845777;  // std dev = 0.097, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, I), follows(I, A) )
%   | | | then return 0.19519606849275137;  // std dev = 0.976, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.23908090000228474;  // std dev = 0.961, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   else if ( tweets(A, J) )
%   | then return -0.08518475138839678;  // std dev = 5.67e-09, 227.000 (wgt'ed) examples reached here.  /* #neg=227 */
%   | else return -0.08518475138839678;  // std dev = 1.83e-08, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.1883867547322292;  // std dev = 1.368, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   | | | else return 0.05036397403027748;  // std dev = 0.919, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return 0.21841167895537245;  // std dev = 0.010, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.23620382568046336;  // std dev = 1.05e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A) )
%   | | | then return 0.3252993983607187;  // std dev = 0.112, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.250868584235783;  // std dev = 0.050, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.21388049532266326;  // std dev = 0.052, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.22780383301430157;  // std dev = 0.073, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   else return -0.07877675473109143;  // std dev = 2.58e-08, 312.000 (wgt'ed) examples reached here.  /* #neg=312 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( tweets(A, F), follows(E, D) )
%   | | | then return 0.18782468212396541;  // std dev = 0.025, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.18211997694707785;  // std dev = 0.009, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else if ( tweets(A, G), follows(A, D) )
%   | | | then return 0.07826608269622803;  // std dev = 0.951, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.19953806020408194;  // std dev = 0.146, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.0828877685188159;  // std dev = 1.301, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return -0.43518456265085387;  // std dev = 0.849, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, J), follows(J, A) )
%   | | | then return 0.12224556400425737;  // std dev = 0.972, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.18283171943653398;  // std dev = 0.075, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   else return -0.07324622576333699;  // std dev = 5.51e-09, 305.000 (wgt'ed) examples reached here.  /* #neg=305 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.12670959420679623;  // std dev = 1.584, 71.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=68 */
%   | | | else return 0.16330140091944362;  // std dev = 0.055, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | | else return 0.24297375878189814;  // std dev = 0.158, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(G, I) )
%   | | | then return 0.18985238286796755;  // std dev = 0.037, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.2667951473619957;  // std dev = 0.946, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.11576959800456955;  // std dev = 0.977, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.16397657368499063;  // std dev = 0.054, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, L) )
%   | then return -0.06842697784420276;  // std dev = 0.000, 257.000 (wgt'ed) examples reached here.  /* #neg=257 */
%   | else return -0.06842697784420262;  // std dev = 1.67e-08, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(D, F) )
%   | | | then return 0.1447340600951926;  // std dev = 0.051, 61.000 (wgt'ed) examples reached here.  /* #pos=61 */
%   | | | else return 0.1970192526909693;  // std dev = 0.055, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(G, A) )
%   | | | then return 0.20964750115677896;  // std dev = 0.095, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.1846405694574953;  // std dev = 0.114, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A), follows(A, H) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.14358512155795072;  // std dev = 0.013, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.15507268594318213;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1363720565770619;  // std dev = 0.039, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | | else return 0.14475206815885014;  // std dev = 0.039, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else return -0.06419184008202593;  // std dev = 7.03e-09, 307.000 (wgt'ed) examples reached here.  /* #neg=307 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '6.947', 'seconds']
Refined model CLL: -0.085515


******************************************
Best model found
******************************************
Results 

CLL : -0.091304 

AUC ROC : 0.994965 

AUC PR : 0.464113 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 40.469 

Total Inference Time : 8.795287132263184 

Total revision time: 71.59640097999574
Best scored revision CLL: -0.085515


Results 

CLL : -0.091304 

AUC ROC : 0.994965 

AUC PR : 0.464113 

Precision : 0.333333 

Recall : 1.0 

F1 : 0.5 

Total Learning Time : 99.24281597518922 

Total Inference Time : 8.795287132263184 

