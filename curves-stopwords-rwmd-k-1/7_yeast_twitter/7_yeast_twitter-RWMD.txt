Starting experiment 7_yeast_twitter 

Loading pre-trained trees.
Run: 1
Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.189
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7217852987358758;  // std dev = 1.610, 22.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.16e-08, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else return 0.10814893509951223;  // std dev = 0.433, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7461559834740239;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.058244571284887026;  // std dev = 0.240, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.016494560778089473;  // std dev = 0.815, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.2359604850586335;  // std dev = 2.165, 24.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5968242729569625;  // std dev = 0.167, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.5822602101163818;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5822602101163818;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5822602101163818;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.007544459276852595;  // std dev = 2.383, 61.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=10 */
%   | | | else return -0.0441094292672399;  // std dev = 1.587, 25.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5606633464851091;  // std dev = 0.820, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12240668642408051;  // std dev = 0.035, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | | else return -0.1155004700228404;  // std dev = 0.005, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16459001175628912;  // std dev = 0.050, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3155933326947356;  // std dev = 0.186, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.30770623441519507;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5834396224717218;  // std dev = 0.191, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.11668393271303043;  // std dev = 0.122, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | else return 0.06199382912918985;  // std dev = 0.341, 19.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.010048443807477688;  // std dev = 1.284, 51.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=14 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2459111544704168;  // std dev = 0.001, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4664629551234318;  // std dev = 0.546, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12761444478531103;  // std dev = 0.051, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | | else return -0.1426303933220116;  // std dev = 0.061, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.23645161462567355;  // std dev = 1.113, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | else return -0.10265112263912676;  // std dev = 0.088, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.09933902266500422;  // std dev = 1.170, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.13422401336802614;  // std dev = 0.925, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.04472943246991278;  // std dev = 0.142, 34.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=3 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.015158305969432288;  // std dev = 1.026, 32.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
%   | | | else return 0.024775863423331275;  // std dev = 0.994, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.0647789569721259;  // std dev = 0.327, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.218266795833392;  // std dev = 0.684, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09173635052759499;  // std dev = 0.079, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.349298155504649;  // std dev = 0.407, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10929341456729914;  // std dev = 0.081, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.20456657989315055;  // std dev = 0.342, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.2322822410997625;  // std dev = 0.226, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.07806214732864197;  // std dev = 0.007, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.1058134207936369;  // std dev = 0.003, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | | else return -0.08496757332699524;  // std dev = 0.034, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( tweets(A, G) )
%   | then return 0.011402644602875621;  // std dev = 0.716, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06187801685855332;  // std dev = 0.797, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.264', 'seconds']
Parameter learned model CLL:-0.111507 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.61, 3, 19], 'true,false,true': [3.16e-08, 33, 0], 'true,false,false': [0.0, 8, 0], 'false,true,true,true': [0.0, 0, 7], 'false,true,true,false': [0.0, 0, 2], 'false,true,false': [0.0, 8, 0], 'false,false': [0.433, 9, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [4.21e-08, 0, 15], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.24, 34, 3], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.815, 7, 1], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [2.165, 14, 10]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.167, 0, 12], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [2.383, 51, 10], 'false,false,false,false': [1.587, 22, 3]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.82, 0, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.035, 31, 0], 'false,true,false,false': [0.005, 10, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.05, 14, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.186, 0, 15], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.191, 0, 8], 'false,false,true,false': [0.122, 53, 0], 'false,false,false': [0.341, 14, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.284, 37, 14], 'false,true': [0.001, 0, 4], 'false,false,true': [0.546, 0, 13], 'false,false,false,true': [0.051, 15, 0], 'false,false,false,false': [0.061, 10, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.113, 1, 24], 'true,false': [0.088, 51, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.17, 10, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.925, 1, 15], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.142, 31, 3], 'false,false,false,true': [1.026, 22, 10], 'false,false,false,false': [0.994, 10, 3]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.327, 2, 15], 'false,true,true,true': [0.684, 1, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.079, 40, 0], 'false,false,true': [0.407, 0, 10], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.081, 22, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.342, 0, 16], 'true,true,false': [0.226, 0, 3], 'true,false,true': [0.007, 32, 0], 'true,false,false,true': [0.003, 11, 0], 'true,false,false,false': [0.034, 6, 0], 'false,true': [0.716, 15, 9], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.797, 6, 3]}]
{'': [0.21063240110859105, 0.24256837098691986], 'false': [0.24913494809688577, 0.1874999999999999], 'false,true': [-2.9605947323337506e-16, -6.938893903907228e-18], 'true': [0.11776859504132219, 4.603363760640893e-17], 'true,false': [3.027880976250427e-17, -6.938893903907228e-18], 'false,true,true': [-2.5376526277146434e-16, 0.0]}
{'': [1.1842378929335003e-16, 0.13598706280994843], 'false': [0.057526024829905216, 0.18525790663001618], 'false,false': [0.08309083609257785, 0.19695365410892746], 'false,false,false': [0.0, 0.19538301625466603], 'false,false,true': [nan, 0.08309083609257785], 'false,true': [nan, 0.057526024829905216]}
{'': [0.002067660266346986, 0.10394037479684999], 'false': [nan, 0.10394037479685016], 'false,false': [0.0, 0.09584317452739556], 'false,false,false': [0.09307142082561945, 0.10071374685850554], 'true': [0.0023332311906683056, 0.0001607277880182334], 'true,true': [0.0023332311906683056, nan], 'true,false': [0.0, 0.0], 'false,false,true': [0.0, 0.0]}
{'': [0.021672333101627035, 0.0004391044519013136], 'false': [3.88548897254533e-05, 0.00017672524534769116], 'false,false': [nan, 0.00017672524534769116], 'false,false,false': [nan, 0.00017672524534769116], 'false,true': [nan, 3.88548897254533e-05], 'false,true,false': [3.8798538369568744e-05, 2.966881992022552e-06]}
{'': [0.0023171328327127316, 0.07297982241673963], 'false': [0.0, 0.07219941948549917], 'false,false': [0.05669439120579551, 0.11622614579769658], 'false,false,true': [0.0045550761374846815, 0.0002794938729566207], 'true': [0.0023171328327127316, nan], 'false,true': [0.0, nan]}
{'': [0.03232148534067422, 0.08322372052641544], 'false': [4.0028078614889884e-07, 0.0890926763919021], 'false,false': [0.022925310780814005, 0.00030741575461332713], 'true': [nan, 0.03232148534067425], 'true,false': [nan, 0.03232148534067422], 'false,false,false': [0.0001759377567809824, 0.0003693455250877081]}
{'': [0.04179245234123481, 0.08052969305092599], 'false': [nan, 0.080529693050926], 'false,false': [nan, 0.08052969305092599], 'false,false,false': [nan, 0.08052969305092599], 'true': [0.049572457830301044, 0.00015284704831994018]}
{'': [0.053500735374762645, 0.03546214960814053], 'true': [0.053500735374762645, nan], 'false': [nan, 0.035462149608140585], 'false,false': [0.020072266715323545, 0.04539994023836091], 'false,false,false': [0.03291434770633207, 0.07606793053406663]}
{'': [0.10703700123029058, 0.03526015337835177], 'false': [0.022280964820920162, 0.050555415667388165], 'false,false': [0.016536888660651727, 0.00029768619455252965], 'false,true': [0.06692622801117776, 0.00015498726739143347], 'false,true,true': [0.06692622801117776, nan], 'false,false,false': [nan, 0.00029768619455252965]}
{'': [0.020024104398518462, 0.035292794268735245], 'false': [0.02137162141729791, 0.07056300317849588], 'false,false': [nan, 0.0705630031784959], 'false,false,false': [nan, 0.07056300317849588], 'true': [0.008950936672335293, 0.0001533477669486518], 'true,true': [0.007305924974456805, 0.017077462603937377], 'true,false': [1.5428917760750699e-06, 0.00016748225678749306], 'true,false,false': [8.925768749213813e-07, 0.00019171767451186747]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(C, D), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 5.026
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995123;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(A, I), follows(H, I) )
%   | | | then return 0.0010060779566550668;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.19148226843284552;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.7194734122109543;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.7194734122109544;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.12544463852839136;  // std dev = 1.05e-08, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | | else return -0.12544463852839138;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.048633906642996313;  // std dev = 0.243, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.10811107079932378;  // std dev = 2.406, 37.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=10 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(E, A) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.11449270538961086;  // std dev = 0.019, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | | | else return 0.021765432206257138;  // std dev = 1.146, 16.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=3 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.0571102724044219;  // std dev = 1.861, 26.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=6 */
%   | | | else return 0.2402564097345017;  // std dev = 1.393, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(F, A) )
%   | | then if ( tweets(F, E), follows(F, D) )
%   | | | then return 0.16751358415830991;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.41751358415830997;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.41751358415830997;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.6537929778113396;  // std dev = 0.178, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.7982632440647636;  // std dev = 0.047, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(I, A) )
%   | then return -0.10922556921608811;  // std dev = 0.009, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | else if ( follows(A, J) )
%   | | then return -0.14615013401906;  // std dev = 0.005, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return -0.20793460765718463;  // std dev = 0.045, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return 0.37742261766766405;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.32071184716014967;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.32071184716014967;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5160101621896533;  // std dev = 0.258, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.11019312090109078;  // std dev = 0.123, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.003654713064301108;  // std dev = 0.628, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.15019102515525612;  // std dev = 1.079, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.2822075825739957;  // std dev = 0.015, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.08674305536717049;  // std dev = 0.005, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.08747552734712853;  // std dev = 0.012, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.25517224256948945;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I), follows(A, J) )
%   | | | then return 0.36073035418978827;  // std dev = 0.177, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.5346526202112452;  // std dev = 0.151, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.11675926982806283;  // std dev = 0.034, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | | else return -0.120956263267339;  // std dev = 0.151, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.22162106217361596;  // std dev = 0.064, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.2818163032704817;  // std dev = 0.140, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.25708980754215177;  // std dev = 0.212, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A) )
%   | | then return -0.08139073493410481;  // std dev = 0.006, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | else return -0.10664542902881606;  // std dev = 0.005, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.324926438369092;  // std dev = 0.167, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1109170629374328;  // std dev = 0.043, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(J, A) )
%   | | then return 0.003571780828338487;  // std dev = 0.253, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.06276215001183794;  // std dev = 0.697, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( tweets(A, C) )
%   then if ( tweets(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(F, A) )
%   | | then if ( follows(D, A), follows(D, F) )
%   | | | then return 0.20072750665182792;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.17337624884234337;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.23301978752576655;  // std dev = 0.121, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.25991575746456275;  // std dev = 0.147, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.08104603540599781;  // std dev = 0.012, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   else if ( follows(H, A) )
%   | then if ( recursion_accounttype(H, B) )
%   | | then return 0.17807623168015443;  // std dev = 0.035, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.07744995031680811;  // std dev = 0.004, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(A, I) )
%   | | then return -0.021480826620934767;  // std dev = 0.445, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | else return -0.061484621434805126;  // std dev = 0.262, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.16489496097014306;  // std dev = 0.010, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.14659600710087273;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.13832052924534133;  // std dev = 0.016, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.17853739066520222;  // std dev = 0.149, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.06992510356667839;  // std dev = 0.004, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.21652650314922386;  // std dev = 0.012, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.4258432843562241;  // std dev = 0.045, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.09092113128794219;  // std dev = 0.023, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.12301899826350556;  // std dev = 3.73e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.1373433596465783;  // std dev = 0.013, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.03658409225962642;  // std dev = 0.916, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return -0.0664064935766423;  // std dev = 0.004, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, G) )
%   | | | then return 0.17102915805180025;  // std dev = 0.061, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.16310608774475951;  // std dev = 0.054, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.09169623938631205;  // std dev = 0.014, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(A, J), follows(I, J) )
%   | | | then return 0.032996101940571156;  // std dev = 0.320, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.08552994931633373;  // std dev = 0.000299, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.03305176714318217;  // std dev = 0.566, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.557', 'seconds']
Refined model CLL: -0.098863


******************************************
Best model found
******************************************
Results 

CLL : -0.09376 

AUC ROC : 0.993187 

AUC PR : 0.36749 

Precision : 0.337079 

Recall : 0.952381 

F1 : 0.497925 

Total Learning Time : 5.026 

Total Inference Time : 5.492084741592407 

Total revision time: 14.54223593711853
Best scored revision CLL: -0.098863


Results 

CLL : -0.09376 

AUC ROC : 0.993187 

AUC PR : 0.36749 

Precision : 0.337079 

Recall : 0.952381 

F1 : 0.497925 

Total Learning Time : 42.19246109962464 

Total Inference Time : 5.492084741592407 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.656
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8318331456258272;  // std dev = 0.987, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.32e-08, 62.000 (wgt'ed) examples reached here.  /* #neg=62 */
%   | | else return -0.0793510649004878;  // std dev = 0.242, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return 0.1914822684328457;  // std dev = 0.471, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6622539622367458;  // std dev = 1.369, 32.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=30 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.07023693718000594;  // std dev = 0.209, 77.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=5 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0038808206097019847;  // std dev = 1.469, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.16684121448423953;  // std dev = 3.353, 61.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=21 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5423935149428397;  // std dev = 0.999, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.4372837151861366;  // std dev = 0.727, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.3053664367462845;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5758873322660357;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5758873322660357;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 4.5918598813778007E-4;  // std dev = 3.216, 116.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=18 */
%   | | | else return 0.14013532833394457;  // std dev = 2.361, 29.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5356899181729305;  // std dev = 1.761, 65.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1216707057621757;  // std dev = 0.050, 65.000 (wgt'ed) examples reached here.  /* #neg=65 */
%   | | | else return -0.13777425716019234;  // std dev = 0.026, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.18562742144979483;  // std dev = 0.212, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3058923347125565;  // std dev = 1.090, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3088151633869072;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5402120958521425;  // std dev = 0.964, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.11239464769863275;  // std dev = 0.834, 104.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=1 */
%   | | else return 0.08739655605253678;  // std dev = 0.343, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0033731783730078205;  // std dev = 2.079, 95.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=28 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2509303639561447;  // std dev = 0.025, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4965040888972922;  // std dev = 0.604, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12439849300792788;  // std dev = 0.132, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.13940285963225996;  // std dev = 0.168, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2757742608147019;  // std dev = 0.996, 48.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=47 */
%   | else return -0.08992131797806607;  // std dev = 0.942, 104.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.028860288647485376;  // std dev = 1.611, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.20033186531092712;  // std dev = 0.060, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(E, A), follows(A, E) )
%   | | then return -0.05290190719196299;  // std dev = 0.130, 66.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=5 */
%   | | else if ( tweets(A, F) )
%   | | | then return -0.012784834716730323;  // std dev = 1.969, 65.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=19 */
%   | | | else return 0.08715626964323042;  // std dev = 1.399, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13745266759333602;  // std dev = 0.217, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.20617705585727508;  // std dev = 1.178, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09194214460157757;  // std dev = 0.127, 93.000 (wgt'ed) examples reached here.  /* #neg=93 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3523134429834854;  // std dev = 0.494, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13977357533506737;  // std dev = 0.251, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15388103897543712;  // std dev = 1.109, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | else return 0.22126549208844723;  // std dev = 0.278, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.08135798752895543;  // std dev = 0.036, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.1059952885708872;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.020982885347529158;  // std dev = 0.579, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.09068842772578072;  // std dev = 1.175, 25.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=17 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 8.399526921400793E-4;  // std dev = 1.197, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.380', 'seconds']
Parameter learned model CLL:-0.113722 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.987, 1, 37], 'true,false,true': [6.32e-08, 62, 0], 'true,false,false': [0.242, 15, 1], 'false,true,true,true': [0.0, 0, 13], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [0.0, 18, 0], 'false,false': [0.471, 14, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.369, 2, 30], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.209, 72, 5], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.469, 17, 3], 'false,false,false,true': [2.11e-08, 0, 3], 'false,false,false,false': [3.353, 40, 21]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.999, 1, 24], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.727, 1, 2], 'true,false,false': [0.866, 1, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 0, 4], 'false,false,false,true': [3.216, 98, 18], 'false,false,false,false': [2.361, 20, 9]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.761, 3, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.05, 65, 0], 'false,true,false,false': [0.026, 14, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.212, 39, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.09, 1, 29], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 6], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.964, 1, 17], 'false,false,true,false': [0.834, 103, 1], 'false,false,false': [0.343, 21, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.079, 67, 28], 'false,true': [0.025, 0, 7], 'false,false,true': [0.604, 0, 27], 'false,false,false,true': [0.132, 33, 0], 'false,false,false,false': [0.168, 34, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.996, 1, 47], 'true,false': [0.942, 102, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.611, 30, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'false': 'follows(A, A)', 'false,false': 'follows(E, A), follows(A, E)', 'false,false,false': 'tweets(A, F)'}, {'true,true': [0.06, 0, 30], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.13, 61, 5], 'false,false,false,true': [1.969, 46, 19], 'false,false,false,false': [1.399, 13, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.217, 2, 29], 'false,true,true,true': [1.178, 1, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.127, 93, 0], 'false,false,true': [0.494, 0, 21], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.251, 37, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.109, 1, 31], 'true,true,false': [0.278, 0, 6], 'true,false,true': [0.036, 60, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.579, 7, 1], 'false,true': [1.175, 8, 17], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.197, 17, 7]}]
{'': [0.22027348394768273, 0.24489795918367477], 'false': [0.24979591836734646, 0.22222222222222232], 'false,true': [-2.0898315757650005e-16, -3.0839528461809902e-18], 'true': [0.025623268698062793, 0.012656147271531925], 'true,false': [6.446456272017038e-17, 0.05859375000000004], 'false,true,true': [-2.7328566760003855e-16, 0.0]}
{'': [0.05859374999999972, 0.12499263662426606], 'false': [0.04388962014968454, 0.17698883041056876], 'false,false': [0.10796802203695148, 0.18935258371671845], 'false,false,false': [1.4802973661668753e-16, 0.18434927089964653], 'false,false,true': [nan, 0.10796802203695148], 'false,true': [nan, 0.04388962014968454]}
{'': [0.07766296941390666, 0.11983625150150193], 'false': [nan, 0.1198362515015018], 'false,false': [-7.401486830834377e-17, 0.1128844567157625], 'false,false,false': [0.08915763817854615, 0.19218419107214219], 'true': [0.03993642452671946, 0.18694981894330326], 'true,false': [0.1762721480004823, 0.1875], 'true,true': [0.03993642452671946, nan], 'false,false,true': [0.0, 0.0]}
{'': [0.047699830994790804, 0.0012583729079056094], 'false': [7.813637841169167e-05, 0.0011495169432983426], 'false,false': [nan, 0.0011495169432983426], 'false,false,false': [nan, 0.0011495169432983426], 'false,true': [nan, 7.813637841169167e-05], 'false,true,false': [3.830677194840768e-05, 4.9691400696335754e-05]}
{'': [0.03962972907908582, 0.07893309101852165], 'false': [-1.850371707708594e-17, 0.07852796535225796], 'false,false': [0.06687504530823342, 0.11731769215365902], 'false,false,true': [0.05160202827664752, 0.006681402011153207], 'true': [0.03962972907908582, nan], 'false,true': [-1.850371707708594e-17, nan]}
{'': [0.04548587549223559, 0.08202296264239708], 'false': [9.096321030789754e-05, 0.08528474493629754], 'false,false': [0.013520827921874253, 0.0007375235384879627], 'true': [nan, 0.04548587549223571], 'true,false': [nan, 0.04548587549223559], 'false,false,false': [0.0005303253116616324, 0.000827742273143061]}
{'': [0.04126216115403978, 0.06033599199963487], 'false': [nan, 0.06033599199963496], 'false,false': [nan, 0.06033599199963487], 'false,false,false': [nan, 0.06033599199963487], 'true': [0.020676720905725792, 0.008531578939945706]}
{'': [0.0001219671778221502, 0.04778538549750054], 'false': [nan, 0.047785385497500575], 'false,false': [0.01689777945030965, 0.06968220997300081], 'false,false,false': [0.059631920601508875, 0.09324100917654467], 'true': [0.0001219671778221502, nan]}
{'': [0.04711427842215137, 0.03839776013561596], 'false': [0.022799651859575693, 0.061220734354158736], 'false,false': [0.011619933462657819, 0.001697672928473313], 'false,true': [0.10669692764621018, 0.0001723044491685483], 'false,true,true': [0.10669692764621018, nan], 'false,false,false': [nan, 0.001697672928473313]}
{'': [0.028514834307522503, 0.05941993888469446], 'false': [0.055211334381767466, 0.05968515269129584], 'false,false': [nan, 0.059685152691295824], 'false,false,false': [nan, 0.05968515269129584], 'true': [0.03503039587499271, 0.0050883956804308635], 'true,true': [0.03846131662071458, 0.012908434406155031], 'true,false': [2.10520853216258e-05, 0.02956977197220143], 'true,false,false': [0.0, 0.0419456217243652]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 8.052
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.8181489350995119;  // std dev = 0.196, 25.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=24 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return -0.13109837672844465;  // std dev = 0.103, 93.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(A, I) )
%   | | | then return 0.7867203636709409;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(K, J), recursion_accounttype(K, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return 0.088918165868743;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7248080398247613;  // std dev = 0.021, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.7274753536316645;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.12662905626929233;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | | else return -0.0737476519892768;  // std dev = 0.205, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.20670427706404113;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.02086624770926139;  // std dev = 1.119, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.7336614886487065;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.18224689956106715;  // std dev = 3.216, 59.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=21 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, D), tweets(A, E) )
%   | | then return 0.4972425967779706;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.5579929534392427;  // std dev = 0.015, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(F, A) )
%   | | then return 0.38202052445519225;  // std dev = 0.819, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.31945260527071384;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.5639092634446371;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.35404874676897985;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( follows(I, A) )
%   | | then return -0.06928928072592896;  // std dev = 0.190, 92.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=6 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.17945348290062152;  // std dev = 2.454, 36.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=14 */
%   | | | else return 0.08269329485100153;  // std dev = 2.048, 26.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | | then return 0.431859508905978;  // std dev = 0.052, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return 0.562112446654153;  // std dev = 0.284, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.24004270224099664;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.4518279765954983;  // std dev = 0.048, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.6453348406758288;  // std dev = 0.151, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return 0.7294588790443334;  // std dev = 0.193, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.11093435461423139;  // std dev = 0.086, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else return -0.11440361000083461;  // std dev = 0.030, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else return -0.16869060149986012;  // std dev = 0.058, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( tweets(D, E), recursion_accounttype(D, B) )
%   | | then if ( tweets(A, E), follows(A, D) )
%   | | | then return 0.3380359316386157;  // std dev = 1.49e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.31974171989013417;  // std dev = 0.037, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.4481339944491228;  // std dev = 0.291, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.1804838922219274;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.34424494632716046;  // std dev = 0.044, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(G, A), tweets(A, H) )
%   | | then if ( follows(G, I), follows(I, A) )
%   | | | then return -0.10438419550294246;  // std dev = 0.304, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | | | else return -0.028492387661478193;  // std dev = 1.068, 31.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1252962178273651;  // std dev = 1.830, 33.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=14 */
%   | | | else return 0.027196631821741455;  // std dev = 1.876, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.2602724423621349;  // std dev = 0.010, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.17722615057073762;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.08969401493392223;  // std dev = 0.022, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | else return -0.06048824285297936;  // std dev = 0.166, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.26601853332038333;  // std dev = 0.019, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.4662167299203569;  // std dev = 0.228, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.5607826896120115;  // std dev = 0.243, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.14858135608430345;  // std dev = 0.095, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | | else return -0.12994045685716296;  // std dev = 0.161, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(A, D) )
%   | | then if ( follows(C, E) )
%   | | | then return 0.21420252852698055;  // std dev = 0.036, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.0022003303855592238;  // std dev = 0.899, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( follows(C, A) )
%   | | | then return 0.4373842147306386;  // std dev = 0.183, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.33403421800550465;  // std dev = 0.256, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.10513611977128759;  // std dev = 0.025, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.30715095419205635;  // std dev = 0.265, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.08899619082578676;  // std dev = 0.005, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( tweets(A, H) )
%   | | then return 0.24366393838519498;  // std dev = 0.437, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return 0.034447763059074384;  // std dev = 0.305, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.18338711868645288;  // std dev = 0.011, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return 0.17235529299512573;  // std dev = 0.032, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, E), tweets(A, G) )
%   | | | then return 0.2650291352668902;  // std dev = 0.078, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.41008348950001317;  // std dev = 0.098, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07843641125277141;  // std dev = 0.007, 89.000 (wgt'ed) examples reached here.  /* #neg=89 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.2711467301194391;  // std dev = 0.098, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.1233070369795133;  // std dev = 0.051, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.13232912692730503;  // std dev = 0.543, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.09840388704398217;  // std dev = 0.931, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.15734391624675534;  // std dev = 0.010, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | else return 0.1979972104866673;  // std dev = 0.108, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.14916173058985302;  // std dev = 0.028, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.2802648342162331;  // std dev = 0.137, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07477196957796757;  // std dev = 0.008, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.23039723713005741;  // std dev = 0.016, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.3638772013906312;  // std dev = 0.310, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.11410852249243261;  // std dev = 0.043, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.18055562783091542;  // std dev = 0.026, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.13628649574327867;  // std dev = 0.009, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | else if ( tweets(A, F), follows(A, G) )
%   | | | then return 0.17692223809355476;  // std dev = 0.044, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.2665917619372011;  // std dev = 0.076, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.06695748912072547;  // std dev = 0.039, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | | else return -0.05920570260666139;  // std dev = 0.069, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   else if ( follows(A, H) )
%   | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | then return 0.18477710037467396;  // std dev = 0.016, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.10226455662405162;  // std dev = 0.008, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( tweets(A, J) )
%   | | then return 0.0742652842514997;  // std dev = 0.430, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.02041427241001661;  // std dev = 0.254, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '20.340', 'seconds']
Refined model CLL: -0.105127


******************************************
Best model found
******************************************
Results 

CLL : -0.101531 

AUC ROC : 0.991786 

AUC PR : 0.306229 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 8.052 

Total Inference Time : 10.645242929458618 

Total revision time: 24.706299598693846
Best scored revision CLL: -0.105127


Results 

CLL : -0.101531 

AUC ROC : 0.991786 

AUC PR : 0.306229 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 52.35652476119995 

Total Inference Time : 10.645242929458618 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.969
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8417554924765617;  // std dev = 0.992, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else return -0.05613677918620208;  // std dev = 0.280, 35.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | else return 0.25814893509951237;  // std dev = 0.490, 30.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=12 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7087339468371463;  // std dev = 1.015, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.05424495392187067;  // std dev = 0.238, 117.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=10 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.026520044280869272;  // std dev = 1.475, 25.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7455384727792422;  // std dev = 0.090, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.08864023783648468;  // std dev = 4.015, 100.000 (wgt'ed) examples reached here.  /* #neg=74 #pos=26 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5746012267417434;  // std dev = 0.286, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7296694134169485;  // std dev = 0.219, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5839871412278577;  // std dev = 0.121, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6277160910140415;  // std dev = 0.161, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5620560295255287;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.007802575130630705;  // std dev = 3.647, 154.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=22 */
%   | | | else return 0.052918705386719625;  // std dev = 3.046, 60.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=13 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5195196304313738;  // std dev = 2.296, 97.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12225397426057974;  // std dev = 0.069, 109.000 (wgt'ed) examples reached here.  /* #neg=109 */
%   | | | else return -0.1291139936890693;  // std dev = 0.024, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17088261775139943;  // std dev = 0.214, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3206185419728892;  // std dev = 0.467, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | else return 0.47457539416257954;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3001662837910229;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.5000417777258129;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5804897944798421;  // std dev = 1.005, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return -0.11034747401854672;  // std dev = 0.850, 159.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=1 */
%   | | else return 0.08801757356355451;  // std dev = 0.358, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01721235947926763;  // std dev = 2.550, 144.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=48 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25983808952039816;  // std dev = 0.172, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5128096839992995;  // std dev = 0.759, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12714189965275446;  // std dev = 0.161, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | | | else return -0.14296407662329869;  // std dev = 0.182, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2739818240888384;  // std dev = 1.309, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | else return -0.09391650013943607;  // std dev = 0.916, 154.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.08151920873521849;  // std dev = 1.852, 43.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=18 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18590589885197709;  // std dev = 0.074, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | else if ( follows(A, E) )
%   | | then return 0.25510275460715764;  // std dev = 0.010, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04071771753105423;  // std dev = 0.146, 95.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=10 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.021367268598248064;  // std dev = 1.818, 88.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=20 */
%   | | | else return 0.028469733674895362;  // std dev = 1.870, 46.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=13 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13829446068453116;  // std dev = 0.204, 50.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=48 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28330840702068205;  // std dev = 0.576, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09295405626293599;  // std dev = 0.155, 148.000 (wgt'ed) examples reached here.  /* #neg=148 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.37872182526956605;  // std dev = 0.583, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12443802715567058;  // std dev = 0.287, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17965899122517817;  // std dev = 0.566, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | | else return 0.18002481684917424;  // std dev = 0.307, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08036805335918497;  // std dev = 0.015, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10905192612386318;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return 3.171060443866077E-5;  // std dev = 0.577, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return 0.03377504317451684;  // std dev = 1.021, 47.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=18 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.17060176711748953;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.015349378532934662;  // std dev = 1.488, 38.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.617', 'seconds']
Parameter learned model CLL:-0.112934 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.992, 1, 60], 'true,false,true': [8.69e-08, 98, 0], 'true,false,false': [0.28, 32, 3], 'false,true,true,true': [0.0, 0, 14], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [2.79e-08, 31, 0], 'false,false': [0.49, 18, 12]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.015, 1, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.238, 107, 10], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.475, 22, 3], 'false,false,false,true': [0.09, 0, 4], 'false,false,false,false': [4.015, 74, 26]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.286, 0, 41], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.219, 0, 3], 'true,false,false': [0.121, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.161, 0, 3], 'false,false,true,false': [0.0, 0, 7], 'false,false,false,true': [3.647, 132, 22], 'false,false,false,false': [3.046, 47, 13]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.296, 4, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.069, 109, 0], 'false,true,false,false': [0.024, 17, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.214, 47, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.467, 0, 47], 'true,false': [0.0, 0, 1], 'false,true,true': [0.017, 0, 9], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.005, 1, 23], 'false,false,true,false': [0.85, 158, 1], 'false,false,false': [0.358, 27, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.55, 96, 48], 'false,true': [0.172, 0, 12], 'false,false,true': [0.759, 0, 33], 'false,false,false,true': [0.161, 41, 0], 'false,false,false,false': [0.182, 42, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.309, 1, 73], 'true,false': [0.916, 152, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.852, 25, 18]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.074, 0, 48], 'true,false,true': [0.01, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.146, 85, 10], 'false,false,false,true': [1.818, 68, 20], 'false,false,false,false': [1.87, 33, 13]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.204, 2, 48], 'false,true,true,true': [0.576, 0, 19], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.155, 148, 0], 'false,false,true': [0.583, 0, 26], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.287, 64, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.566, 0, 51], 'true,true,false': [0.307, 0, 9], 'true,false,true': [0.015, 98, 0], 'true,false,false,true': [0.0, 14, 0], 'true,false,false,false': [0.577, 9, 3], 'false,true': [1.021, 29, 18], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.488, 27, 11]}]
{'': [0.21928472738867064, 0.2355391764140376], 'false': [0.23240316534777128, 0.23999999999999952], 'false,true': [-2.9605947323337506e-16, 2.5069552168955147e-17], 'true': [0.016124697661918288, 0.02204760020351625], 'true,false': [7.703588334133739e-17, 0.07836734693877535], 'false,true,true': [-2.5376526277146434e-16, 0.0]}
{'': [0.020202416956617536, 0.11466054063045172], 'false': [0.05662054225502723, 0.1578544208209741], 'false,false': [0.08708137853614634, 0.17104559214322806], 'false,false,false': [0.0020381621472855826, 0.1612091473787998], 'false,false,true': [nan, 0.08708137853614634], 'false,true': [nan, 0.05662054225502723]}
{'': [0.004412146635707215, 0.11566461345646381], 'false': [nan, 0.11566461345646377], 'false,false': [0.0034921073764868638, 0.10627270993008303], 'false,false,false': [0.08638182030816259, 0.15467267842487878], 'true': [0.0019935049937868125, 0.014172444536022193], 'true,false': [0.01602292441146654, 0.003688874159363198], 'false,false,true': [0.00862248734935056, -6.344131569286608e-17], 'true,true': [0.0019935049937868125, nan]}
{'': [0.0543343139161066, 0.0007505819726435382], 'false': [4.82975579885844e-05, 0.0009759398817572359], 'false,false': [nan, 0.0009759398817572359], 'false,false,false': [nan, 0.0009759398817572359], 'false,true': [nan, 4.829755798858088e-05], 'false,true,false': [4.403365632205369e-05, 3.492617271947973e-05]}
{'': [0.005032628482381433, 0.07768816416195587], 'false': [0.003624674458389676, 0.07656850826744088], 'false,false': [0.06384576148501252, 0.12822241792826036], 'false,false,true': [0.0420454197879343, 0.004545411028018193], 'true': [0.0046458991771309854, 0.0], 'false,true': [3.2394757309786274e-05, 0.0]}
{'': [0.04514325815304016, 0.08645452636469603], 'false': [0.002469462139676295, 0.0909824892048506], 'false,false': [0.017459288816008275, 0.0007746462029806423], 'true': [nan, 0.04514325815304015], 'true,false': [nan, 0.04514325815304016], 'false,false,false': [0.0006312210536984564, 0.0007909939057372118]}
{'': [0.04086622633092768, 0.07974577228508745], 'false': [nan, 0.07974577228508736], 'false,false': [nan, 0.07974577228508745], 'false,false,false': [nan, 0.07974577228508745], 'true': [0.023144650716075785, 0.0054526697982315376]}
{'': [0.0002949112329657, 0.03923111331046682], 'false': [nan, 0.03923111331046677], 'false,false': [0.02137838411472635, 0.05133646961719306], 'false,false,false': [0.037577259173090405, 0.07602733325904582], 'true': [0.00011347140408641636, 5.2790473521552306e-05], 'true,false': [5.2790473521552306e-05, nan]}
{'': [0.041503056708715035, 0.031668450891640214], 'false': [0.01640708296584481, 0.0567050957803697], 'false,false': [0.013088326338830015, 0.0012864554281370021], 'false,true': [0.017484771909963535, 0.00016157301728845038], 'false,true,true': [0.017484771909963535, nan], 'false,false,false': [nan, 0.0012864554281370021]}
{'': [0.018886998576234958, 0.03819739113812671], 'false': [0.022192160411680324, 0.057371714697539836], 'false,false': [0.0, 0.05826346322323352], 'false,false,false': [nan, 0.05826346322323355], 'true': [0.006920467182126277, 0.003383585605634758], 'true,true': [0.006288164728550009, 0.010503400664929299], 'true,false': [2.339701916369427e-06, 0.01575741454412302], 'true,false,false': [-1.982541115402065e-18, 0.027733781875361047]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 11.44
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then return 0.8348931211460235;  // std dev = 0.151, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.7956489350995123;  // std dev = 0.968, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.11685106490048766;  // std dev = 0.156, 120.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=3 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(A, J) )
%   | | then if ( follows(K, J), recursion_accounttype(K, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | else return 0.41370449065506787;  // std dev = 0.497, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7323798919233486;  // std dev = 0.203, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return -0.053722407675957096;  // std dev = 0.244, 101.000 (wgt'ed) examples reached here.  /* #neg=92 #pos=9 */
%   | | else return -0.0834488707858285;  // std dev = 0.195, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
%   | else if ( follows(F, A), follows(G, F) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.03845354151123027;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.06852745266262585;  // std dev = 1.223, 30.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=2 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.5194734122109544;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.09427137832251771;  // std dev = 3.832, 97.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=26 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.5222062729811856;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=27 */
%   | | | else return 0.5649432512152192;  // std dev = 0.014, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return 0.7347444959525875;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.6581866481608222;  // std dev = 0.105, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.58546292237605;  // std dev = 0.060, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.7498109062613665;  // std dev = 0.064, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.12255520780799803;  // std dev = 0.037, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.0825454569304865;  // std dev = 2.963, 65.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=17 */
%   | | | else return 0.28336130074788485;  // std dev = 1.974, 18.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A) )
%   | | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.39581311732314944;  // std dev = 0.983, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0.16202940496950985;  // std dev = 1.114, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.42156968999747363;  // std dev = 0.033, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return 0.59716643469779;  // std dev = 0.202, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.47877875600433145;  // std dev = 0.168, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.6837226166774238;  // std dev = 0.149, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.11004630647446699;  // std dev = 0.021, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | | else return -0.10697479367954604;  // std dev = 0.001, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else return -0.15590175634761108;  // std dev = 0.235, 58.000 (wgt'ed) examples reached here.  /* #neg=58 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), follows(F, A) )
%   | | | then return 0.34272932462057293;  // std dev = 0.112, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | | else return 0.21474222567167367;  // std dev = 0.939, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.4040428057068438;  // std dev = 0.103, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.5118742091459636;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3412530722923586;  // std dev = 0.046, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4389959703823846;  // std dev = 0.086, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.09944636162642796;  // std dev = 0.024, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | else if ( follows(A, J), tweets(A, K) )
%   | | | then return 0.016431862670661965;  // std dev = 1.941, 47.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=11 */
%   | | | else return 0.06198370098361119;  // std dev = 2.230, 45.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.27674387413954304;  // std dev = 0.022, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( tweets(A, E) )
%   | | then return -0.07144325102926101;  // std dev = 0.123, 92.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=6 */
%   | | else return -0.08748216444570094;  // std dev = 0.122, 27.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.30633656161906025;  // std dev = 0.154, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.13288950532714788;  // std dev = 0.332, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), recursion_accounttype(I, B) )
%   | | | then return 0.13097659559786984;  // std dev = 1.008, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5034378850603743;  // std dev = 0.255, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.12854237015751022;  // std dev = 0.068, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | | else return -0.1311322962978248;  // std dev = 0.310, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.22566796070275788;  // std dev = 0.024, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), follows(F, D) )
%   | | | then return 0.19709195476500735;  // std dev = 0.819, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return 0.31756579177858985;  // std dev = 0.112, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(G, D) )
%   | | | then return -0.07889654389195656;  // std dev = 0.604, 118.000 (wgt'ed) examples reached here.  /* #neg=117 #pos=1 */
%   | | | else return -0.18766587634991644;  // std dev = 0.425, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.30520289815083923;  // std dev = 1.147, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.1180040649127991;  // std dev = 0.015, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09600019885815408;  // std dev = 0.676, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | | | else return 0.07705868000086878;  // std dev = 1.099, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.14446056868283125;  // std dev = 0.983, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | | | else return 0.17926237535307385;  // std dev = 0.029, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.20131941651540586;  // std dev = 0.009, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.27346978168010283;  // std dev = 0.005, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(H, A) )
%   | then return -0.058303655398351806;  // std dev = 0.141, 144.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=13 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.29121298731298945;  // std dev = 0.260, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return -0.10610413289416634;  // std dev = 0.015, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.032440249741062153;  // std dev = 0.727, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.06097478157605545;  // std dev = 1.091, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, D) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.11180946245869207;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.16551685493511936;  // std dev = 0.014, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.1718047755055399;  // std dev = 0.019, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(G, A) )
%   | | then return 0.3217707460149383;  // std dev = 0.271, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.13634051441643258;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then return 0.18027759966815018;  // std dev = 0.190, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | else return -0.07383089731185123;  // std dev = 0.002, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.29480344328767294;  // std dev = 0.057, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return -0.15387775376139384;  // std dev = 0.071, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.14264953187501464;  // std dev = 0.008, 48.000 (wgt'ed) examples reached here.  /* #pos=48 */
%   | | else return 0.1652809540000953;  // std dev = 0.236, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return -0.06437377089596731;  // std dev = 0.070, 131.000 (wgt'ed) examples reached here.  /* #neg=128 #pos=3 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.19031137691793165;  // std dev = 0.135, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.0823169512510344;  // std dev = 0.000322, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return 0.05407097481714157;  // std dev = 0.194, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.12106710723764802;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.028322468814028535;  // std dev = 0.575, 25.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=5 */
%   | | | else return 0.07060432112754002;  // std dev = 0.897, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.950', 'seconds']
Refined model CLL: -0.104309


******************************************
Best model found
******************************************
Results 

CLL : -0.097356 

AUC ROC : 0.993236 

AUC PR : 0.356358 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 11.44 

Total Inference Time : 8.118049144744873 

Total revision time: 27.697673877716063
Best scored revision CLL: -0.104309


Results 

CLL : -0.097356 

AUC ROC : 0.993236 

AUC PR : 0.356358 

Precision : 0.343324 

Recall : 1.0 

F1 : 0.511156 

Total Learning Time : 55.34789904022217 

Total Inference Time : 8.118049144744873 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.296
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8236661764788223;  // std dev = 1.702, 87.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=84 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004879;  // std dev = 0.000, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | | else return -0.06492798797741085;  // std dev = 0.266, 39.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.08e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else return 0.12044401706672549;  // std dev = 0.440, 61.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=16 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.689609624940471;  // std dev = 1.714, 74.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=71 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.044614548022772;  // std dev = 0.250, 137.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=13 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08144541165395058;  // std dev = 1.538, 49.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=3 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7688223381202123;  // std dev = 0.135, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.15473434485171048;  // std dev = 4.260, 100.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=32 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5652604095935475;  // std dev = 0.882, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7367832074564307;  // std dev = 0.217, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6111498548723868;  // std dev = 0.186, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6194217278043663;  // std dev = 0.167, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5711939740392767;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01910922089220221;  // std dev = 4.107, 217.000 (wgt'ed) examples reached here.  /* #neg=189 #pos=28 */
%   | | | else return 0.054507906000815974;  // std dev = 3.420, 75.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=16 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5089614314577892;  // std dev = 2.841, 130.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12149870467785426;  // std dev = 0.093, 146.000 (wgt'ed) examples reached here.  /* #neg=146 */
%   | | | else return -0.12759237068887228;  // std dev = 0.011, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16290442577558795;  // std dev = 0.182, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2977441254459631;  // std dev = 1.498, 66.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=64 */
%   | else return 0.48240070460003315;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.24271635228787722;  // std dev = 0.964, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.5117316473725425;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.601551705345709;  // std dev = 0.952, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   | | | else return -0.10898077159458096;  // std dev = 1.108, 188.000 (wgt'ed) examples reached here.  /* #neg=186 #pos=2 */
%   | | else return -0.0035033869883343907;  // std dev = 0.287, 69.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.039405543895369786;  // std dev = 2.770, 188.000 (wgt'ed) examples reached here.  /* #neg=120 #pos=68 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2724237916980408;  // std dev = 0.161, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4687050512834518;  // std dev = 1.721, 42.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=40 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12430036158078528;  // std dev = 0.142, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | | else return -0.12424735419089283;  // std dev = 0.135, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28983834862001945;  // std dev = 1.227, 100.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=99 */
%   | else return -0.09857362246212818;  // std dev = 1.352, 211.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.040863241949216415;  // std dev = 2.073, 71.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=22 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1672320315060735;  // std dev = 1.396, 71.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=69 */
%   | else if ( follows(A, E) )
%   | | then return 0.2552890466410114;  // std dev = 0.012, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04934999024724486;  // std dev = 0.150, 132.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=13 */
%   | | else if ( tweets(A, G) )
%   | | | then return -9.068312935582111E-4;  // std dev = 1.778, 98.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=23 */
%   | | | else return 0.0358466418131499;  // std dev = 2.144, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14334007649878103;  // std dev = 0.192, 68.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=65 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2876550374717607;  // std dev = 0.660, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09070044021578318;  // std dev = 0.086, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3656646693403265;  // std dev = 1.076, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11348607499337958;  // std dev = 0.210, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1689196135657756;  // std dev = 1.199, 72.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=71 */
%   | | else return 0.18581232577677248;  // std dev = 0.377, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, C) )
%   | | then return -0.08144335478738945;  // std dev = 0.023, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09486526911359153;  // std dev = 0.012, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.032164583840443337;  // std dev = 0.628, 20.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return 0.011496491958333901;  // std dev = 1.507, 59.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=21 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1907951305878094;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.02539881329975626;  // std dev = 1.707, 50.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=14 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.162', 'seconds']
Parameter learned model CLL:-0.11106 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.702, 3, 84], 'true,false,true': [0.0, 133, 0], 'true,false,false': [0.266, 36, 3], 'false,true,true,true': [0.0, 0, 17], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [4.08e-08, 40, 0], 'false,false': [0.44, 45, 16]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.714, 3, 71], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.25, 124, 13], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.538, 46, 3], 'false,false,false,true': [0.135, 0, 5], 'false,false,false,false': [4.26, 68, 32]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.882, 1, 57], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.217, 0, 3], 'true,false,false': [0.186, 0, 5], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.167, 0, 4], 'false,false,true,false': [0.0, 0, 11], 'false,false,false,true': [4.107, 189, 28], 'false,false,false,false': [3.42, 59, 16]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.841, 6, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.093, 146, 0], 'false,true,false,false': [0.011, 34, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.182, 63, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.498, 2, 64], 'true,false': [0.0, 0, 1], 'false,true,true': [0.964, 1, 14], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.952, 1, 31], 'false,false,true,false': [1.108, 186, 2], 'false,false,false': [0.287, 58, 11]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.77, 120, 68], 'false,true': [0.161, 0, 16], 'false,false,true': [1.721, 2, 40], 'false,false,false,true': [0.142, 57, 0], 'false,false,false,false': [0.135, 41, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.227, 1, 99], 'true,false': [1.352, 208, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.073, 49, 22]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.396, 2, 69], 'true,false,true': [0.012, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.15, 119, 13], 'false,false,false,true': [1.778, 75, 23], 'false,false,false,false': [2.144, 45, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.192, 3, 65], 'false,true,true,true': [0.66, 0, 27], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.086, 171, 0], 'false,false,true': [1.076, 1, 32], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.21, 81, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.199, 1, 71], 'true,true,false': [0.377, 0, 13], 'true,false,true': [0.023, 134, 0], 'true,false,false,true': [0.012, 22, 0], 'true,false,false,false': [0.628, 17, 3], 'false,true': [1.507, 38, 21], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.707, 36, 14]}]
{'': [0.223073597590973, 0.2113007256113962], 'true': [0.03329369797859672, 0.01713764196863153], 'false': [0.22574576726686382, 0.19349637194302552], 'false,true': [0.0, 4.163336342344337e-17], 'true,false': [-5.0085249231210067e-17, 0.07100591715976316], 'false,true,true': [-2.0898315757650005e-16, 0.0]}
{'': [0.03971434662209711, 0.11933170826624716], 'false': [0.06231957214324418, 0.1602691711454921], 'false,false': [0.048253181386609854, 0.19012775323225908], 'false,false,false': [0.0036529747325961814, 0.18149415580121545], 'false,true': [nan, 0.06231957214324418], 'false,false,true': [nan, 0.048253181386609854]}
{'': [0.01439293673118193, 0.110014927025761], 'false': [nan, 0.11001492702576166], 'false,false': [0.0023155788277450166, 0.09886887421161514], 'false,false,false': [0.0777413050547361, 0.1559704830119545], 'true': [0.01340633150768609, 0.013944869089889511], 'true,false': [0.01576138739863368, 0.006936055874077862], 'true,true': [0.01340633150768609, nan], 'false,false,true': [0.006977748699678321, -8.074349270001139e-17]}
{'': [0.06210568449516234, 0.00048696062899470196], 'false': [5.41548729986389e-05, 0.0005232222119016677], 'false,false': [nan, 0.0005232222119016677], 'false,false,false': [nan, 0.0005232222119016677], 'false,true': [nan, 5.415487299863643e-05], 'false,true,false': [5.8904611236065984e-05, 3.6401395683936226e-06]}
{'': [0.0339879795197419, 0.07771518983171107], 'false': [0.06233329529331032, 0.07489250288490955], 'false,false': [0.07246121234983229, 0.08264099908016419], 'false,false,true': [0.028350771329556157, 0.006535714227219384], 'false,true': [0.06196577150102125, 0.0], 'true': [0.03399402275379453, 0.0]}
{'': [0.04080727966963349, 0.0900655881068759], 'false': [0.0016289773903255256, 0.0952622184804563], 'false,false': [0.07048542817922607, 0.0003921073342988005], 'true': [nan, 0.04080727966963348], 'true,false': [nan, 0.04080727966963349], 'false,false,false': [0.000352419251260135, 0.0004472818154810918]}
{'': [0.0436269842092744, 0.06054901124355802], 'false': [nan, 0.060549011243558014], 'false,false': [nan, 0.06054901124355802], 'false,false,false': [nan, 0.06054901124355802], 'true': [0.015059643843446402, 0.008656728568107064]}
{'': [0.026918033642223966, 0.037948047975722855], 'false': [nan, 0.03794804797572278], 'false,false': [0.02260986478471433, 0.048825733473193175], 'false,false,false': [0.032275050709577646, 0.07415911420599211], 'true': [0.02746187730489477, 6.998509785313689e-05], 'true,false': [6.998509785313689e-05, nan]}
{'': [0.036772998850212624, 0.034184334422987676], 'false': [0.019096766408699947, 0.05776345373053144], 'false,false': [0.035087951280236486, 0.0005426794546506429], 'false,true': [0.016135290827027648, 4.352224867302551e-05], 'false,true,true': [0.016135290827027648, nan], 'false,false,false': [nan, 0.0005426794546506429]}
{'': [0.021380799829011893, 0.04730260922117174], 'false': [0.03850769109323515, 0.057063202075679546], 'false,false': [0.0, 0.058293578552073996], 'false,false,false': [nan, 0.05829357855207402], 'true': [0.018605456177624817, 0.0025253043686463846], 'true,true': [0.019950741673257968, 0.010912924339919262], 'true,false': [3.888979202746235e-06, 0.010364154907244896], 'true,false,false': [7.096482634039422e-06, 0.019697627018557512]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 16.96
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8463842292171592;  // std dev = 0.108, 85.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=84 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004879;  // std dev = 0.000, 133.000 (wgt'ed) examples reached here.  /* #neg=133 */
%   | | else return -0.08062657510456937;  // std dev = 0.240, 49.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.14185106490048768;  // std dev = 4.08e-08, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.15226658215833588;  // std dev = 1.879, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(C, E), follows(C, D) )
%   | | then return 0.7218417570428316;  // std dev = 2.38e-07, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return 0.3885084237094986;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.4857359720737812;  // std dev = 0.936, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.1296624751617684;  // std dev = 0.214, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else if ( follows(F, H), recursion_accounttype(H, B) )
%   | | | then return 0.7309568397019832;  // std dev = 0.141, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.127233314634757;  // std dev = 0.026, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.16702699441984395;  // std dev = 2.899, 52.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=18 */
%   | | | else return 0.09651154457158266;  // std dev = 2.942, 54.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=14 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.5593170904225576;  // std dev = 0.079, 49.000 (wgt'ed) examples reached here.  /* #pos=49 */
%   | | | else return 0.4523465705382098;  // std dev = 0.765, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.2510014850728978;  // std dev = 0.751, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.6119175154031712;  // std dev = 0.098, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.5739312563309843;  // std dev = 0.061, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), follows(H, A) )
%   | | | then return -0.11336249923752545;  // std dev = 0.029, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | | | else return -0.024903563532784896;  // std dev = 2.165, 89.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=12 */
%   | | else if ( follows(A, I) )
%   | | | then return 0.08013706583209648;  // std dev = 3.455, 86.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=23 */
%   | | | else return 0.1685991636069885;  // std dev = 2.238, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(E, A) )
%   | | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.4234803822411413;  // std dev = 0.139, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.24418789620347456;  // std dev = 0.995, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.4264446798367323;  // std dev = 0.104, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.5436684060490938;  // std dev = 0.205, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.4509101499747674;  // std dev = 0.258, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, H) )
%   | | | then return 0.664256805283269;  // std dev = 0.047, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.7340534128636163;  // std dev = 0.224, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(I, A) )
%   | then return -0.10621224128180544;  // std dev = 0.005, 156.000 (wgt'ed) examples reached here.  /* #neg=156 */
%   | else return -0.16410940621239578;  // std dev = 0.176, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.3132450710630459;  // std dev = 0.136, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.3357288175525177;  // std dev = 0.177, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.052131363492819015;  // std dev = 0.611, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.5822612365269896;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.33474331363923066;  // std dev = 0.056, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.42650970033531094;  // std dev = 3.65e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.09684478316238178;  // std dev = 0.058, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.05124881379435858;  // std dev = 2.637, 81.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=23 */
%   | | | else return 0.10507560852704852;  // std dev = 1.802, 25.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.22788696403418027;  // std dev = 0.966, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0.14971295522182268;  // std dev = 0.864, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return 0.2836421794582924;  // std dev = 0.028, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( tweets(A, G) )
%   | | then return -0.051178837564111054;  // std dev = 0.113, 134.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=12 */
%   | | else return -0.12295692363202117;  // std dev = 0.197, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.27615735473302006;  // std dev = 0.065, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.4479973466865498;  // std dev = 0.482, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | | else return 0.5248915700022825;  // std dev = 0.421, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return -0.13285659879943462;  // std dev = 0.033, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.22705425403780274;  // std dev = 0.033, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | else return 0.1207258197654882;  // std dev = 0.277, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   else if ( follows(E, A) )
%   | then if ( follows(F, E), follows(F, A) )
%   | | then return -0.08218655557734207;  // std dev = 0.026, 111.000 (wgt'ed) examples reached here.  /* #neg=111 */
%   | | else if ( follows(A, G), follows(E, G) )
%   | | | then return -0.035158088102346434;  // std dev = 1.116, 70.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=9 */
%   | | | else return 0.02784329325128813;  // std dev = 0.883, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
%   | else if ( follows(A, H), tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.27939077953995417;  // std dev = 1.198, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.1256034580850556;  // std dev = 1.67e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.024854544276852478;  // std dev = 1.389, 37.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=11 */
%   | | | else return 0.010402731674505642;  // std dev = 1.514, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18517030393188622;  // std dev = 0.123, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | else return 0.3280302974501765;  // std dev = 0.011, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, E) )
%   | | | then return 0.18280123242134313;  // std dev = 0.835, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.3058655786135224;  // std dev = 0.146, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.0779679512433381;  // std dev = 0.077, 179.000 (wgt'ed) examples reached here.  /* #neg=179 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.2221811845957643;  // std dev = 1.163, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.11244486268359563;  // std dev = 1.29e-08, 39.000 (wgt'ed) examples reached here.  /* #neg=39 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.046854626311246685;  // std dev = 0.737, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
%   | | | else return 0.027599813768139487;  // std dev = 1.866, 52.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=16 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(G, E) )
%   | | | then return 0.134066856604332;  // std dev = 0.945, 42.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=41 */
%   | | | else return 0.21922579339573067;  // std dev = 0.043, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(H, A), follows(A, H) )
%   | | | then return 0.04796583613596005;  // std dev = 0.632, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.144275134819309;  // std dev = 0.130, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.16737029575712;  // std dev = 0.018, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(I, A) )
%   | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | then return 0.2102268052460166;  // std dev = 0.065, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return -0.0716308789009998;  // std dev = 0.070, 176.000 (wgt'ed) examples reached here.  /* #neg=176 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.3473504127006283;  // std dev = 0.085, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | else return -0.12841693675370294;  // std dev = 0.027, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.1251322083970311;  // std dev = 0.115, 70.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=69 */
%   | | else return 0.18691921105388187;  // std dev = 0.164, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | else return -0.06262818349839466;  // std dev = 0.037, 190.000 (wgt'ed) examples reached here.  /* #neg=187 #pos=3 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.093636236830004;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H) )
%   | | | then return 0.01474388697638657;  // std dev = 0.908, 40.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=14 */
%   | | | else return -0.005374528037801178;  // std dev = 0.628, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.1735887727128137;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.005641480345964257;  // std dev = 0.971, 28.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=8 */
%   | | | else return 0.045273487832218906;  // std dev = 1.131, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.708', 'seconds']
Refined model CLL: -0.103915


******************************************
Best model found
******************************************
Results 

CLL : -0.099226 

AUC ROC : 0.993543 

AUC PR : 0.362325 

Precision : 0.348442 

Recall : 0.97619 

F1 : 0.51357 

Total Learning Time : 16.96 

Total Inference Time : 10.054576635360718 

Total revision time: 37.678314167022705
Best scored revision CLL: -0.103915


Results 

CLL : -0.099226 

AUC ROC : 0.993543 

AUC PR : 0.362325 

Precision : 0.348442 

Recall : 0.97619 

F1 : 0.51357 

Total Learning Time : 65.32853932952881 

Total Inference Time : 10.054576635360718 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.693
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.830111551921941;  // std dev = 1.708, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048802;  // std dev = 0.000, 144.000 (wgt'ed) examples reached here.  /* #neg=144 */
%   | | else return -0.07042249347191629;  // std dev = 0.258, 56.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 5.37e-08, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | else return 0.2232283001788766;  // std dev = 0.481, 63.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7167579577612965;  // std dev = 1.017, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.05133766840839629;  // std dev = 0.246, 210.000 (wgt'ed) examples reached here.  /* #neg=191 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06472803024171882;  // std dev = 1.802, 52.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7536032576569628;  // std dev = 0.123, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.09671529583727664;  // std dev = 5.079, 152.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5609074951284075;  // std dev = 1.071, 68.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=67 */
%   | | else return -0.26478863672418473;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7323149677277546;  // std dev = 0.222, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.5923479603375876;  // std dev = 0.167, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5958189960075138;  // std dev = 0.180, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5629468706722649;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.00623470367135235;  // std dev = 4.621, 244.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=34 */
%   | | | else return 0.06520444139850408;  // std dev = 4.075, 99.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5395928148623816;  // std dev = 2.577, 159.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12101924295477177;  // std dev = 0.056, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | | else return -0.1280118729930037;  // std dev = 0.015, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16213132109148354;  // std dev = 0.289, 95.000 (wgt'ed) examples reached here.  /* #neg=95 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.27455023570105486;  // std dev = 1.819, 81.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=77 */
%   | else return -0.3483212319711667;  // std dev = 0.952, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2978439193451087;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.504563054524534;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6352912989520624;  // std dev = 0.304, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.10387761824588257;  // std dev = 1.809, 256.000 (wgt'ed) examples reached here.  /* #neg=251 #pos=5 */
%   | | else return 0.0194916928819542;  // std dev = 0.308, 71.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01841042129738732;  // std dev = 3.197, 264.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25946848342790135;  // std dev = 0.336, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4859243369396791;  // std dev = 1.740, 54.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12785921709026793;  // std dev = 0.201, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | | else return -0.12691641810212828;  // std dev = 0.183, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2833532889730837;  // std dev = 1.670, 123.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=121 */
%   | else return -0.08630302406210912;  // std dev = 1.690, 258.000 (wgt'ed) examples reached here.  /* #neg=251 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.05179554982954301;  // std dev = 2.281, 78.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19091717332231692;  // std dev = 0.092, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.3428487760288039;  // std dev = 0.113, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03903383438870402;  // std dev = 0.161, 156.000 (wgt'ed) examples reached here.  /* #neg=137 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.002929284394180411;  // std dev = 2.082, 116.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=28 */
%   | | | else return 0.03877997656988065;  // std dev = 2.516, 77.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.14584852245728336;  // std dev = 0.192, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.21090192446915754;  // std dev = 1.807, 41.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09242041798782324;  // std dev = 0.120, 228.000 (wgt'ed) examples reached here.  /* #neg=228 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3707078053160536;  // std dev = 1.381, 41.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1150537791509542;  // std dev = 0.288, 102.000 (wgt'ed) examples reached here.  /* #neg=102 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.178450358867589;  // std dev = 1.139, 86.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=85 */
%   | | else return 0.16388776220622417;  // std dev = 0.384, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.0819067210852335;  // std dev = 0.020, 171.000 (wgt'ed) examples reached here.  /* #neg=171 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.0956959093668371;  // std dev = 0.053, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | | | else return 0.011006247476672636;  // std dev = 0.989, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.024108123087941705;  // std dev = 1.354, 72.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.17693850236636632;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.023789142742185455;  // std dev = 1.979, 68.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.583', 'seconds']
Parameter learned model CLL:-0.112022 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.708, 3, 104], 'true,false,true': [0.0, 144, 0], 'true,false,false': [0.258, 52, 4], 'false,true,true,true': [0.977, 1, 21], 'false,true,true,false': [0.894, 1, 4], 'false,true,false': [5.37e-08, 50, 0], 'false,false': [0.481, 40, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.017, 1, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.246, 191, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.802, 48, 4], 'false,false,false,true': [0.123, 0, 8], 'false,false,false,false': [5.079, 112, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.071, 1, 67], 'true,true,false': [0.0, 1, 0], 'true,false,true': [0.222, 0, 3], 'true,false,false': [0.167, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.18, 0, 6], 'false,false,true,false': [0.0, 0, 15], 'false,false,false,true': [4.621, 210, 34], 'false,false,false,false': [4.075, 76, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.577, 3, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.056, 160, 0], 'false,true,false,false': [0.015, 38, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.289, 95, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.819, 4, 77], 'true,false': [0.952, 3, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.304, 0, 39], 'false,false,true,false': [1.809, 251, 5], 'false,false,false': [0.308, 58, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.197, 182, 82], 'false,true': [0.336, 0, 22], 'false,false,true': [1.74, 2, 52], 'false,false,false,true': [0.201, 70, 0], 'false,false,false,false': [0.183, 56, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.67, 2, 121], 'true,false': [1.69, 251, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.281, 50, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.092, 0, 83], 'true,false,true': [0.113, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.161, 137, 19], 'false,false,false,true': [2.082, 88, 28], 'false,false,false,false': [2.516, 53, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.192, 3, 78], 'false,true,true,true': [1.807, 3, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.12, 228, 0], 'false,false,true': [1.381, 1, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.288, 102, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.139, 1, 85], 'true,true,false': [0.384, 0, 19], 'true,false,true': [0.02, 171, 0], 'true,false,false,true': [0.053, 38, 0], 'true,false,false,false': [0.989, 15, 4], 'false,true': [1.354, 47, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.979, 47, 21]}]
{'': [0.2280342497002646, 0.22530612244898032], 'true': [0.02725128832212642, 0.019599999999999892], 'false': [0.2192612582222983, 0.2317964222726138], 'false,true': [0.06858710562414343, 5.773159728050814e-17], 'false,true,true': [0.04338842975206614, 0.15999999999999986], 'true,false': [-9.251858538542972e-17, 0.06632653061224474]}
{'': [0.012023403854333802, 0.11463551536230442], 'false': [0.060386061161441414, 0.15953855225691935], 'false,false': [0.06247045230806233, 0.1818268100814122], 'false,false,false': [0.001882185284005189, 0.16972249008841023], 'false,false,true': [nan, 0.06247045230806233], 'false,true': [nan, 0.060386061161441414]}
{'': [0.025042577654086573, 0.12230630668503076], 'false': [nan, 0.1223063066850292], 'false,false': [0.0017642067331530868, 0.1117260795738669], 'false,false,false': [0.08752427717887357, 0.16774445155184992], 'true': [0.026376605500717874, 0.010934406286549797], 'true,true': [0.016883712668859175, 0.0], 'true,false': [0.016495071807339112, 0.0035062213095921058], 'false,false,true': [0.00540288312028155, -2.3684757858670006e-16]}
{'': [0.0417815755700989, 0.000648722525694907], 'false': [2.4557507194785857e-05, 0.0008807804101195556], 'false,false': [nan, 0.0008807804101195556], 'false,false,false': [nan, 0.0008807804101195556], 'false,true': [nan, 2.455750719478137e-05], 'false,true,false': [1.964086046419844e-05, 5.7465514966051495e-06]}
{'': [0.06698912475390191, 0.07894874470326739], 'false': [0.001946378315097834, 0.07819016228818208], 'false,false': [0.07409163795532049, 0.0946890043383402], 'false,false,true': [0.002374617357659895, 0.012785220734328848], 'true': [0.04085627975185348, 0.22646772916947827], 'false,true': [8.801952313219896e-06, 0.0]}
{'': [0.038711185584632095, 0.09031597108991586], 'false': [0.005129923745188553, 0.0962439409753222], 'false,false': [0.056090373705579205, 0.0005877978329382432], 'true': [nan, 0.038711185584632095], 'true,false': [nan, 0.038711185584632095], 'false,false,false': [0.0005775518500219861, 0.0006001114949547026]}
{'': [0.04468737472714803, 0.06668833388551922], 'false': [nan, 0.06668833388551904], 'false,false': [nan, 0.06668833388551922], 'false,false,false': [nan, 0.06668833388551922], 'true': [0.02267150384176036, 0.011069318050950946]}
{'': [0.0007788744997553215, 0.04304051365034613], 'false': [nan, 0.043040513650346425], 'false,false': [0.025773947432546754, 0.055581783396766164], 'false,false,false': [0.037386217790577464, 0.08222078966356314], 'true': [0.00010184350554672, 0.00633558325612002], 'true,false': [0.00633558325612002, nan]}
{'': [0.03668573372474342, 0.03842635680424496], 'false': [0.024080696488962643, 0.06217542241677888], 'false,false': [0.04652116348557118, 0.0008137157565766165], 'false,true': [0.07965988695497558, 6.321085557608337e-05], 'false,true,true': [0.07965988695497558, nan], 'false,false,false': [nan, 0.0008137157565766165]}
{'': [0.021529168015715895, 0.04079962742871751], 'false': [0.025456902285244137, 0.05657237178285618], 'false,false': [0.0, 0.05756613003192156], 'false,false,false': [nan, 0.057566130031921625], 'true': [0.013788586196379096, 0.005026018429093716], 'true,true': [0.015078232296531248, 0.007777545899466519], 'true,false': [2.3076976802413527e-06, 0.019741433214030994], 'true,false,false': [7.450227154323495e-05, 0.051485061582301955]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 15.646
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8486251255757016;  // std dev = 0.097, 105.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048813;  // std dev = 0.000, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | | else if ( tweets(A, E), follows(A, F) )
%   | | | then return 0.06867525088898598;  // std dev = 1.777, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   | | | else return -0.14185106490048774;  // std dev = 2.98e-08, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.858148935099512;  // std dev = 1.33e-07, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048766;  // std dev = 5.77e-08, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | | else return -0.1418510649004877;  // std dev = 2.98e-08, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | else return 0.16249676118646889;  // std dev = 0.460, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, E) )
%   | then return 0.7251072502562378;  // std dev = 0.179, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | else return 0.6625680628890952;  // std dev = 0.235, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7213915923008598;  // std dev = 8.43e-08, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | | else return -0.12544463852839122;  // std dev = 5.96e-08, 143.000 (wgt'ed) examples reached here.  /* #neg=143 */
%   | | else return -0.10528187112769488;  // std dev = 0.129, 42.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then if ( tweets(A, K) )
%   | | | then return -0.05795257758552996;  // std dev = 1.568, 37.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=3 */
%   | | | else return 0.08626441917892147;  // std dev = 0.733, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.6083623010998434;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.1369408476406559;  // std dev = 4.595, 130.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5404537812121967;  // std dev = 0.992, 63.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=62 */
%   | | | else return 0.27152944420096065;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A) )
%   | | then return 0.7151482348091345;  // std dev = 0.214, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.47149689278296475;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.5764214463396294;  // std dev = 0.035, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(I, A) )
%   | | then return -0.06808062944573821;  // std dev = 0.191, 236.000 (wgt'ed) examples reached here.  /* #neg=219 #pos=17 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.06681516239757691;  // std dev = 3.142, 76.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=19 */
%   | | | else return 0.1793422434987679;  // std dev = 3.224, 56.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, D) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.4237007935173253;  // std dev = 0.021, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return 0.375105734410061;  // std dev = 1.376, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | else return 0.4871229048700453;  // std dev = 0.188, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(H, A), follows(H, G) )
%   | | | then return 0.4447172455533265;  // std dev = 0.923, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.5933258232694169;  // std dev = 1.074, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.708808351676621;  // std dev = 0.179, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7546382359808245;  // std dev = 0.176, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(J, A) )
%   | then return -0.11097740937087568;  // std dev = 0.012, 237.000 (wgt'ed) examples reached here.  /* #neg=237 */
%   | else return -0.16545614991601118;  // std dev = 0.202, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | then return 0.3282203313439026;  // std dev = 0.059, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else return 0.42470736535631104;  // std dev = 0.083, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( tweets(A, F) )
%   | | then return 0.07490206906409062;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return -0.18368244503974443;  // std dev = 1.017, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.33709204825573585;  // std dev = 0.034, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.49812694237288907;  // std dev = 0.290, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | | else return -0.0981661300876628;  // std dev = 1.498, 270.000 (wgt'ed) examples reached here.  /* #neg=265 #pos=5 */
%   | | else if ( follows(J, A), tweets(A, K) )
%   | | | then return -0.07931692552543547;  // std dev = 0.682, 31.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=1 */
%   | | | else return 0.0514825286445894;  // std dev = 2.200, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(E, D) )
%   | | | then return 0.25867602109896615;  // std dev = 0.025, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.2254150177613972;  // std dev = 0.979, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | else return 0.1521573806801719;  // std dev = 0.737, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( tweets(A, F) )
%   | | then return -0.046894542347517706;  // std dev = 0.122, 140.000 (wgt'ed) examples reached here.  /* #neg=126 #pos=14 */
%   | | else return -0.08084284381979655;  // std dev = 0.132, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.26975666135026805;  // std dev = 0.036, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.355471014532221;  // std dev = 1.048, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.5737001073931933;  // std dev = 0.325, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.12444862806322324;  // std dev = 0.024, 142.000 (wgt'ed) examples reached here.  /* #neg=142 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then return 0.21605368726284432;  // std dev = 0.073, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else return 0.24636779437859246;  // std dev = 0.131, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), follows(G, A) )
%   | | then if ( follows(F, H), follows(H, A) )
%   | | | then return -0.08201709411285375;  // std dev = 0.443, 141.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=1 */
%   | | | else return -0.04599175405392323;  // std dev = 0.321, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | | else if ( follows(F, I), recursion_accounttype(I, B) )
%   | | | then return 0.24873828320607147;  // std dev = 1.515, 24.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=21 */
%   | | | else return -0.08783073169670969;  // std dev = 0.088, 91.000 (wgt'ed) examples reached here.  /* #neg=91 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.25087024495082283;  // std dev = 0.022, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.010364661969600446;  // std dev = 2.003, 104.000 (wgt'ed) examples reached here.  /* #neg=75 #pos=29 */
%   | | | else return -0.005539564118475707;  // std dev = 1.810, 40.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=11 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18106396037361105;  // std dev = 0.072, 83.000 (wgt'ed) examples reached here.  /* #pos=83 */
%   | else return 0.2648906576870969;  // std dev = 0.031, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, E), follows(A, F) )
%   | | | then return 0.0831501415801959;  // std dev = 0.767, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.2892770115276137;  // std dev = 0.812, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | else return -0.0796205067140557;  // std dev = 0.086, 213.000 (wgt'ed) examples reached here.  /* #neg=213 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.2572973901728682;  // std dev = 1.113, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | | else return -0.12071418686707047;  // std dev = 0.646, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.016901899856206045;  // std dev = 1.202, 24.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=6 */
%   | | | else return 0.040210210002171384;  // std dev = 1.594, 26.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( recursion_accounttype(D, B), follows(E, D) )
%   | | then if ( follows(E, A), tweets(A, F) )
%   | | | then return 0.12745671137831646;  // std dev = 0.978, 38.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=37 */
%   | | | else return 0.15970168885806688;  // std dev = 0.030, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.22053395604903908;  // std dev = 0.038, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.054819181080814156;  // std dev = 0.320, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.18282603064383857;  // std dev = 0.171, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | else return -0.0738058171248561;  // std dev = 0.085, 222.000 (wgt'ed) examples reached here.  /* #neg=222 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.2631316635149679;  // std dev = 0.054, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.3576637317834812;  // std dev = 0.937, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else return -0.11428818638880588;  // std dev = 0.025, 92.000 (wgt'ed) examples reached here.  /* #neg=92 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.10220460837287122;  // std dev = 0.183, 86.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=83 */
%   | | else return 0.16110267021478197;  // std dev = 0.222, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | else return -0.06264983577588296;  // std dev = 0.050, 217.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.15126755332547415;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.02358586130866057;  // std dev = 1.234, 53.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=13 */
%   | | | else return 0.020868555326445628;  // std dev = 1.049, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
%   | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | then return 0.1875346958398838;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return -0.019404960566573357;  // std dev = 1.164, 38.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=12 */
%   | | | else return 0.05663445565821167;  // std dev = 1.203, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '12.849', 'seconds']
Refined model CLL: -0.101733


******************************************
Best model found
******************************************
Results 

CLL : -0.099665 

AUC ROC : 0.994195 

AUC PR : 0.460593 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 15.646 

Total Inference Time : 15.157308340072632 

Total revision time: 43.17314912223816
Best scored revision CLL: -0.101733


Results 

CLL : -0.099665 

AUC ROC : 0.994195 

AUC PR : 0.460593 

Precision : 0.337802 

Recall : 1.0 

F1 : 0.50501 

Total Learning Time : 70.82337428474426 

Total Inference Time : 15.157308340072632 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.205
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 3.65e-08, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | else return 0.22178529873587596;  // std dev = 0.481, 11.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6528067455442876;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.015237936258041918;  // std dev = 0.285, 46.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=6 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.22268545478477955;  // std dev = 1.670, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.44848058012988684;  // std dev = 1.340, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.5717621504054302;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.5717621504054302;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.04718434259687149;  // std dev = 1.594, 42.000 (wgt'ed) examples reached here.  /* #neg=38 #pos=4 */
%   | | | else return 0.2703978714696818;  // std dev = 1.676, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5682199208282149;  // std dev = 0.650, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11599057923329703;  // std dev = 0.033, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
%   | | | else return -0.15621148455608017;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.18473841544758998;  // std dev = 0.170, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3379702161826646;  // std dev = 0.153, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2992361796749786;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5845910692325988;  // std dev = 0.097, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.07750747420511275;  // std dev = 1.451, 55.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=4 */
%   | | else return -0.09704739265176299;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04630430117872968;  // std dev = 1.586, 49.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=19 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24045731517649593;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.3408019376567017;  // std dev = 1.084, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10923166703716637;  // std dev = 0.041, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.11782817134728715;  // std dev = 0.102, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3047953687809419;  // std dev = 0.368, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else return -0.05575820256673742;  // std dev = 1.271, 44.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.010007904848598294;  // std dev = 0.242, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19561638915989363;  // std dev = 0.006, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(A, E) )
%   | | then return 0.18223564748315246;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.022852931438403886;  // std dev = 0.177, 32.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=6 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.05597234499818201;  // std dev = 0.614, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   | | | else return 0.2831942483937184;  // std dev = 0.830, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.028297112210148023;  // std dev = 0.326, 16.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=13 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2999227032812083;  // std dev = 0.241, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.10033062343153747;  // std dev = 0.109, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.46018196198377226;  // std dev = 0.213, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12415393935018049;  // std dev = 0.163, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.201901372408082;  // std dev = 0.287, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.13283028641363015;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then return -0.09511541789586916;  // std dev = 0.061, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.068391949288952;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.09257482507340305;  // std dev = 0.036, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
%   else if ( tweets(A, G) )
%   | then return -0.01616440670819744;  // std dev = 0.447, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.10770169170040962;  // std dev = 0.738, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.590', 'seconds']
Parameter learned model CLL:-0.120453 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 20], 'true,false,true': [3.65e-08, 36, 0], 'true,false,false': [0.0, 3, 0], 'false,true,true,true': [0.0, 0, 1], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 6, 0], 'false,false': [0.481, 7, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.966, 1, 14], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.285, 40, 6], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 4, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.67, 8, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), recursion_accounttype(F, B)', 'false,false,true': 'follows(A, G)', 'false,false,false': 'tweets(A, H)'}, {'true,true,true': [1.34, 2, 13], 'true,true,false': [0.0, 0, 0], 'true,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 1], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [1.594, 38, 4], 'false,false,false,false': [1.676, 7, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.65, 0, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.033, 48, 0], 'false,true,false,false': [0.0, 8, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.17, 11, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.153, 0, 13], 'true,false': [0.0, 0, 0], 'false,true,true': [0.0, 0, 2], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.097, 0, 6], 'false,false,true,false': [1.451, 51, 4], 'false,false,false': [0.0, 7, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.586, 30, 19], 'false,true': [0.0, 0, 1], 'false,false,true': [1.084, 2, 5], 'false,false,false,true': [0.041, 9, 0], 'false,false,false,false': [0.102, 5, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.368, 0, 20], 'true,false': [1.271, 40, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.242, 3, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.006, 0, 13], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.177, 26, 6], 'false,false,false,true': [0.614, 11, 1], 'false,false,false,false': [0.83, 2, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.326, 3, 13], 'false,true,true,true': [0.241, 0, 7], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.109, 53, 0], 'false,false,true': [0.213, 0, 5], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.163, 9, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.287, 0, 19], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.061, 31, 0], 'true,false,false,true': [0.0, 5, 0], 'true,false,false,false': [0.036, 2, 0], 'false,true': [0.447, 6, 1], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.738, 3, 4]}]
{'': [0.22407354208560717, 0.20061728395061712], 'true': [-8.881784197001253e-17, 4.2700885562506023e-17], 'false': [0.12244897959183677, 0.2314049586776858], 'false,true': [0.0, -6.938893903907228e-18], 'true,false': [3.700743415417188e-17, 0.0], 'false,true,true': [0.0, nan]}
{'': [0.06222222222222236, 0.11405616474408016], 'false': [0.0809701148353698, 0.18581160480676706], 'false,false': [0.0, 0.21446803878689294], 'false,false,false': [nan, 0.21446803878689294], 'false,true': [nan, 0.0809701148353698], 'false,false,true': [nan, 0.0]}
{'': [0.11965055687227907, 0.12143678503829948], 'false': [nan, 0.12143678503829947], 'false,false': [0.0, 0.11547346808183408], 'true': [0.11965055687227907, nan], 'true,true': [0.11965055687227907, nan], 'false,false,false': [0.06048890937114072, 0.2160966988401411], 'false,false,true': [0.0, 0.0]}
{'': [0.016890659090659028, 0.0011579001475192044], 'false': [0.00021773891394821776, 0.0026265925335748593], 'false,false': [nan, 0.0026265925335748593], 'false,false,false': [nan, 0.0026265925335748593], 'false,true': [nan, 0.00021773891394821776], 'false,true,false': [2.292570079896981e-05, -3.469446951953614e-18]}
{'': [0.0018039687881627165, 0.06759743872463893], 'false': [0.0, 0.06665376177101351], 'false,false': [0.07356466611551644, 1.982541115402065e-18], 'false,false,true': [0.001558567194726838, 0.03830107547516988], 'true': [0.0018039687881627165, nan], 'false,true': [0.0, nan]}
{'': [0.05133038858269172, 0.09927686267770591], 'false': [0.0, 0.1021546595522753], 'false,false': [0.16784683386023214, 0.0008742257968714065], 'true': [nan, 0.05133038858269164], 'true,false': [nan, 0.05133038858269172], 'false,false,false': [0.00018400903521367497, 0.0020691088980563737]}
{'': [0.05528964755615137, 0.014604243273754508], 'true': [0.00676286346088123, 0.03672262737425063], 'false': [nan, 0.014604243273754508], 'false,false': [nan, 0.014604243273754508], 'false,false,false': [nan, 0.014604243273754508]}
{'': [1.4042881892059203e-05, 0.05214441770754937], 'false': [nan, 0.052144417707549344], 'false,false': [0.031476616208671655, 0.08479771487670336], 'false,false,false': [0.03138569489411459, 0.1149324361265031], 'true': [2.33422873179973e-06, 0.0], 'true,false': [0.0, nan]}
{'': [0.10654676073481939, 0.03306233785836604], 'false': [0.017675492968347698, 0.08352639520950292], 'false,false': [0.009080853440535063, 0.0029391561013951593], 'false,true': [0.008290855446450474, 0.00022465541556242853], 'false,true,true': [0.008290855446450474, nan], 'false,false,false': [nan, 0.0029391561013951593]}
{'': [0.020627208244470542, 0.05700259898501538], 'false': [0.028594964369599952, 0.07773882843294548], 'false,false': [nan, 0.07773882843294548], 'false,false,false': [nan, 0.07773882843294548], 'true': [0.004346885975158965, 0.00021314137434885603], 'true,true': [0.004337128701513102, 0.0], 'true,false': [0.00012071446802612528, 0.00030218355047319137], 'true,false,false': [0.0, 0.000639919940080308]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(F, A), recursion_accounttype(F, B).;true;true
2;false,true;follows(A, G).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 4.054
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.79e-08, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then return 0.6194734122109544;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else return -0.01278889842981193;  // std dev = 0.287, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.06628734804673159;  // std dev = 0.804, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.4182616808867046;  // std dev = 1.144, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.5774498789847653;  // std dev = 0.007, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.5553664367462845;  // std dev = 1.05e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.05536643674628447;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.6220388036784819;  // std dev = 0.183, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.11475123452011463;  // std dev = 0.035, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.0373539295555536;  // std dev = 0.721, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.3641491358628806;  // std dev = 1.137, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( tweets(A, E) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.4365754476254496;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.4040835565966279;  // std dev = 0.009, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.47247310414796617;  // std dev = 0.190, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.6026258728758601;  // std dev = 0.100, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then return -0.10137430464291032;  // std dev = 1.49e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return -0.11091503306014985;  // std dev = 0.003, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else return -0.2641514692562411;  // std dev = 0.132, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.24140872596507074;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.308858381969478;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then return 0.35082239266941506;  // std dev = 0.059, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, F) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.3975038984226023;  // std dev = 0.222, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.06863626334984836;  // std dev = 1.153, 50.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=4 */
%   | | else return -0.09250534559517946;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.2809575886256471;  // std dev = 0.013, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.2312531709102308;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.08690236980137335;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.24513552725025656;  // std dev = 0.007, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.011033638364059153;  // std dev = 0.179, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.31293421547704536;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.46089516124785546;  // std dev = 0.057, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.10758114909755842;  // std dev = 0.162, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.14202219154375245;  // std dev = 0.216, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), follows(C, A) )
%   then if ( tweets(A, D) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then if ( recursion_accounttype(C, B) )
%   | | | then return 0.22899159263334617;  // std dev = 1.49e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.19885469333437622;  // std dev = 0.021, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.08024964986345046;  // std dev = 1.49e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else if ( follows(C, F), recursion_accounttype(F, B) )
%   | | then return 0.2588863375298111;  // std dev = 0.195, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.09449241110885619;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( follows(G, A) )
%   | then if ( follows(A, H) )
%   | | then return -0.0778924453285608;  // std dev = 0.000702, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.033546277113588784;  // std dev = 0.265, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return 0.04909880575577249;  // std dev = 0.333, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return 0.011725355624138949;  // std dev = 0.315, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18920362528030088;  // std dev = 0.019, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.15972090481291068;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.1690760958463994;  // std dev = 0.019, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.07452244494331042;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, H), follows(E, H) )
%   | | | then return 0.01326509508517677;  // std dev = 0.346, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.04659054130254303;  // std dev = 0.327, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(I, A) )
%   | | then return -0.07452096116636053;  // std dev = 0.002, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.023545228138201577;  // std dev = 0.454, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
%   | | | else return -0.04341926244956555;  // std dev = 0.980, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.16329344285005998;  // std dev = 0.000704, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else return 0.1409350044905051;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), follows(A, H) )
%   | | | then return 0.14179841707178853;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.24087615969502693;  // std dev = 0.141, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07435215039888039;  // std dev = 0.008, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( tweets(A, K) )
%   | | | then return -0.0888520265710574;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.0542443738258119;  // std dev = 0.458, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( tweets(A, L) )
%   | | | then return 0.05580450521230417;  // std dev = 0.417, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.09365206688904149;  // std dev = 0.712, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.13605440693767587;  // std dev = 0.036, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0.1721129831787002;  // std dev = 0.150, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return 0.1732169707117942;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, C) )
%   | | then if ( tweets(A, G) )
%   | | | then return -0.06488311444504301;  // std dev = 0.000, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.08199416963418941;  // std dev = 1.86e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.06648616622180216;  // std dev = 0.001, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( follows(A, H), follows(H, I) )
%   | then if ( follows(A, I) )
%   | | then return -0.11929085611027597;  // std dev = 0.129, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return -0.01591656019569538;  // std dev = 0.419, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | else return 0.01449661940402873;  // std dev = 0.331, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '34.259', 'seconds']
Refined model CLL: -0.113992


******************************************
Best model found
******************************************
Results 

CLL : -0.124119 

AUC ROC : 0.993437 

AUC PR : 0.369643 

Precision : 0.342984 

Recall : 0.987179 

F1 : 0.509091 

Total Learning Time : 4.054 

Total Inference Time : 6.529317855834961 

Total revision time: 14.073757347106934
Best scored revision CLL: -0.113992


Results 

CLL : -0.124119 

AUC ROC : 0.993437 

AUC PR : 0.369643 

Precision : 0.342984 

Recall : 0.987179 

F1 : 0.509091 

Total Learning Time : 41.72398250961304 

Total Inference Time : 6.529317855834961 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.424
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.60e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else return 0.3581489350995123;  // std dev = 0.500, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6882234122109547;  // std dev = 0.984, 32.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=31 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.030510026085768388;  // std dev = 0.267, 89.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=10 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.12719873841388388;  // std dev = 2.048, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5010336820096175;  // std dev = 1.396, 27.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=25 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5630691875243455;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5630691875243455;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04035221072474782;  // std dev = 2.247, 81.000 (wgt'ed) examples reached here.  /* #neg=73 #pos=8 */
%   | | | else return 0.12437111629272944;  // std dev = 2.009, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4989300716435533;  // std dev = 1.466, 52.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11620607625416508;  // std dev = 0.041, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
%   | | | else return -0.13414867738080846;  // std dev = 0.014, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17812736942371177;  // std dev = 0.194, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30295565593349966;  // std dev = 0.858, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | else return 0.30323949116577165;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3082376049963878;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6141990698040206;  // std dev = 0.080, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.07819816866454425;  // std dev = 1.664, 93.000 (wgt'ed) examples reached here.  /* #neg=88 #pos=5 */
%   | | else return -0.09762875093635284;  // std dev = 1.32e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.031393276610922345;  // std dev = 2.223, 107.000 (wgt'ed) examples reached here.  /* #neg=71 #pos=36 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24664078153998403;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5228481558916882;  // std dev = 0.505, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1340330334045122;  // std dev = 0.153, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.1235167503459873;  // std dev = 0.199, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.3002619867215388;  // std dev = 0.566, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | else return -0.07178670037644776;  // std dev = 1.394, 88.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07770477983895122;  // std dev = 0.423, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16639006616061197;  // std dev = 0.982, 31.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=30 */
%   | else if ( follows(A, E) )
%   | | then return 0.19026880873975494;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05140851991730492;  // std dev = 0.160, 89.000 (wgt'ed) examples reached here.  /* #neg=79 #pos=10 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.006642116407738506;  // std dev = 0.854, 24.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=5 */
%   | | | else return 0.37955768756550096;  // std dev = 0.644, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18475452265637374;  // std dev = 0.049, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.21334936433874835;  // std dev = 1.170, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0925908618541793;  // std dev = 0.067, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.42123697410405553;  // std dev = 0.287, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16196030346751095;  // std dev = 0.194, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.12522088690687186;  // std dev = 1.719, 39.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=36 */
%   | | else return 0.13935059491404;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.0866603722218394;  // std dev = 0.044, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.078238281443775;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.06885149424057019;  // std dev = 0.000585, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( tweets(A, G) )
%   | then return 0.02735066550986419;  // std dev = 0.644, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03220329625122513;  // std dev = 0.889, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '10.267', 'seconds']
Parameter learned model CLL:-0.116087 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.46e-07, 0, 41], 'true,false,true': [7.6e-08, 80, 0], 'true,false,false': [0.0, 15, 0], 'false,true,true,true': [0.0, 0, 5], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 12, 0], 'false,false': [0.5, 4, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.984, 1, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.267, 79, 10], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 17, 0], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [2.048, 16, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.396, 2, 25], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [0.0, 0, 5], 'false,false,false,true': [2.247, 73, 8], 'false,false,false,false': [2.009, 17, 7]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.466, 2, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.041, 59, 0], 'false,true,false,false': [0.014, 11, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.194, 16, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.858, 1, 26], 'true,false': [0.0, 0, 1], 'false,true,true': [1.49e-08, 0, 8], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.08, 0, 10], 'false,false,true,false': [1.664, 88, 5], 'false,false,false': [1.32e-09, 8, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.223, 71, 36], 'false,true': [0.0, 0, 5], 'false,false,true': [0.505, 0, 9], 'false,false,false,true': [0.153, 16, 0], 'false,false,false,false': [0.199, 20, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.566, 0, 40], 'true,false': [1.394, 83, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.423, 4, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.982, 1, 30], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.16, 79, 10], 'false,false,false,true': [0.854, 19, 5], 'false,false,false,false': [0.644, 1, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.049, 0, 27], 'false,true,true,true': [1.17, 1, 16], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.067, 98, 0], 'false,false,true': [0.287, 0, 7], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.194, 9, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.719, 3, 36], 'true,true,false': [0.0, 0, 5], 'true,false,true': [0.044, 76, 0], 'true,false,false,true': [0.0, 7, 0], 'true,false,false,false': [0.000585, 4, 0], 'false,true': [0.644, 10, 5], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.889, 9, 4]}]
{'': [0.21058607266436108, 0.23040000000000005], 'false': [0.20761245674740467, 0.24999999999999986], 'true': [1.4730764034050857e-15, 7.946859544685331e-17], 'false,true': [0.0, -1.1564823173178714e-17], 'true,false': [7.216449660063518e-17, -1.4802973661668754e-17], 'false,true,true': [0.0, nan]}
{'': [0.0302734374999995, 0.09379749561116607], 'false': [0.07119938705308546, 0.13692984098757957], 'false,false': [0.0, 0.19360740453639722], 'false,false,false': [0.0, 0.18237968788010897], 'false,true': [nan, 0.07119938705308546], 'false,false,true': [nan, 0.0]}
{'': [0.06739365347827364, 0.10592118149683762], 'false': [nan, 0.10592118149683769], 'false,false': [-5.551115123125783e-17, 0.09132969657423033], 'false,false,false': [0.06234740491932276, 0.16821316203754108], 'true': [0.0721821864245406, 0.0], 'true,true': [0.0721821864245406, nan], 'true,false': [nan, 0.0], 'false,false,true': [-3.700743415417188e-17, 0.0]}
{'': [0.041326794079418756, 0.0010247894312574355], 'false': [6.97952529636606e-05, 0.002359736520452148], 'false,false': [nan, 0.002359736520452148], 'false,false,false': [nan, 0.002359736520452148], 'false,true': [nan, 6.97952529636606e-05], 'false,true,false': [2.8993509494012648e-05, 1.7294122562933056e-05]}
{'': [0.026292451929132352, 0.06680855629650603], 'false': [2.7755575615628914e-17, 0.06450271746744018], 'false,false': [0.0689714589633067, 1.734723475976807e-18], 'false,false,true': [0.0006373451578892908, 0.02977417082147644], 'true': [0.027266243567796136, 0.0], 'false,true': [2.7755575615628914e-17, nan]}
{'': [0.046181393738937766, 0.0728042047893269], 'false': [0.0, 0.07490948671318592], 'false,false': [0.02838128762435706, 0.0017712301072220831], 'true': [nan, 0.046181393738937586], 'true,false': [nan, 0.046181393738937766], 'false,false,false': [0.0014573228540980011, 0.00197320381666935]}
{'': [0.04743047931766511, 0.019847463731292387], 'true': [0.007999590672846469, 0.022097290028812853], 'false': [nan, 0.019847463731292387], 'false,false': [nan, 0.019847463731292387], 'false,false,false': [nan, 0.019847463731292387]}
{'': [0.030137407889467737, 0.0365134055194345], 'false': [nan, 0.03651340551943443], 'false,false': [0.025574477919489812, 0.060732510066363474], 'false,false,false': [0.030394879219307475, 0.08291841654136174], 'true': [0.031091763764166294, 0.0], 'true,false': [0.0, nan]}
{'': [0.0024121629297342295, 0.0340949695333211], 'false': [0.02373450749612657, 0.09121838300012716], 'false,false': [0.011795987814887665, 0.004189266285078323], 'false,true': [0.08053144028866072, 4.5542042145326236e-05], 'false,true,true': [0.08053144028866072, nan], 'false,false,false': [nan, 0.004189266285078323]}
{'': [0.032616744370851415, 0.043913408878521076], 'false': [0.02761944625892192, 0.06081413085585784], 'false,false': [nan, 0.06081413085585784], 'false,false,false': [nan, 0.06081413085585784], 'true': [0.06718279758775676, 4.0724886601984325e-05], 'true,true': [0.07577328941926888, 0.0], 'true,false': [2.5952610325012888e-05, 2.0420634512854037e-05], 'true,false,false': [0.0, 8.561600237273759e-08]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 5.631
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995116;  // std dev = 2.06e-07, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.6081489350995123;  // std dev = 1.225, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.60e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | else return 0.3581489350995123;  // std dev = 0.500, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.7194734122109545;  // std dev = 0.000, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | else return 0.5528067455442879;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.6242148193795789;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return -0.12544463852839158;  // std dev = 0.000, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return 0.09986684166876753;  // std dev = 0.374, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.12544463852839138;  // std dev = 5.27e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.09464521780658196;  // std dev = 2.085, 27.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=7 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.488699770079618;  // std dev = 0.966, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.34532782528316014;  // std dev = 0.793, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5807952997074386;  // std dev = 0.020, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10103249965443663;  // std dev = 0.747, 60.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=1 */
%   | | | else return 0.06315798523640889;  // std dev = 1.819, 30.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=7 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.10607433955525401;  // std dev = 1.076, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.24393326013323022;  // std dev = 1.556, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.4255766726826555;  // std dev = 0.009, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.45220859985078404;  // std dev = 1.49e-08, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.5030124400719738;  // std dev = 0.177, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.6406627766341405;  // std dev = 0.055, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.7263800756129973;  // std dev = 0.096, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.10641642064531055;  // std dev = 0.007, 81.000 (wgt'ed) examples reached here.  /* #neg=81 */
%   | | else return -0.13472900947014285;  // std dev = 0.010, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( tweets(A, J) )
%   | | then return -0.15100481441825603;  // std dev = 0.006, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return -0.24166077632241403;  // std dev = 0.011, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.3339520694559453;  // std dev = 0.024, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.2017368296097549;  // std dev = 0.366, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.3023776401966124;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.3134596578606743;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.34435202017170297;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5061367947555186;  // std dev = 0.146, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.08677513947468021;  // std dev = 1.553, 106.000 (wgt'ed) examples reached here.  /* #neg=101 #pos=5 */
%   | | else return -0.09323631119227938;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(D, A) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.2035663762113896;  // std dev = 0.969, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.11015100952797206;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.3253626329740782;  // std dev = 0.164, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.20558870792160788;  // std dev = 0.889, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.09067780968489589;  // std dev = 0.047, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | | else return 0.011304146873014271;  // std dev = 0.209, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.2712456971522844;  // std dev = 7.45e-09, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.471991733329843;  // std dev = 0.140, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.12238241456853875;  // std dev = 0.033, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, C) )
%   | then if ( tweets(C, D) )
%   | | then return 0.159616772714884;  // std dev = 0.249, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | else return 0.20490947518207442;  // std dev = 0.020, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.2351726346661643;  // std dev = 0.018, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return -0.05704127988803076;  // std dev = 0.907, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.3275458418401063;  // std dev = 0.117, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.08752364751991866;  // std dev = 0.014, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.21383539791505557;  // std dev = 0.925, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return -0.12485912254860972;  // std dev = 0.050, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.07765949817607025;  // std dev = 0.326, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19412721923553575;  // std dev = 0.013, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | else return 0.20686438982514743;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(A, G), follows(G, E) )
%   | | | then return 0.2982700752162622;  // std dev = 0.092, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.06217308332870717;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else return -0.07956652027960272;  // std dev = 0.011, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.2280355574035728;  // std dev = 0.134, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.10857078932303862;  // std dev = 0.035, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.10341624490687457;  // std dev = 0.435, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.14627515054375229;  // std dev = 0.814, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.16838820264386853;  // std dev = 0.011, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.22578957749196005;  // std dev = 0.056, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.1917662666415398;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.15689735067262922;  // std dev = 0.020, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.24290104068074025;  // std dev = 0.116, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.07364844737538931;  // std dev = 0.010, 73.000 (wgt'ed) examples reached here.  /* #neg=73 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.26332121808365;  // std dev = 0.087, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.10473232910298709;  // std dev = 0.052, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else return 0.19938183220186853;  // std dev = 0.720, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.10851292515147239;  // std dev = 0.980, 27.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=26 */
%   | | | else return 0.20268010970949982;  // std dev = 0.103, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.13637213811301618;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else return -0.07045562286666031;  // std dev = 0.010, 85.000 (wgt'ed) examples reached here.  /* #neg=85 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.14122065294635958;  // std dev = 0.756, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.0830111298203661;  // std dev = 2.63e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.02106366221643824;  // std dev = 0.386, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.03034179520455705;  // std dev = 0.395, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.029304443708128104;  // std dev = 0.835, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '23.771', 'seconds']
Refined model CLL: -0.109949


******************************************
Best model found
******************************************
Results 

CLL : -0.112141 

AUC ROC : 0.99538 

AUC PR : 0.460404 

Precision : 0.33698 

Recall : 0.987179 

F1 : 0.502447 

Total Learning Time : 5.631 

Total Inference Time : 8.9555082321167 

Total revision time: 19.95371907234192
Best scored revision CLL: -0.109949


Results 

CLL : -0.112141 

AUC ROC : 0.99538 

AUC PR : 0.460404 

Precision : 0.33698 

Recall : 0.987179 

F1 : 0.502447 

Total Learning Time : 47.60394423484802 

Total Inference Time : 8.9555082321167 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.665
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.842019902841448;  // std dev = 0.992, 62.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=61 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 7.88e-08, 112.000 (wgt'ed) examples reached here.  /* #neg=112 */
%   | | else return -0.06492798797741087;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return 0.3126943896449669;  // std dev = 0.498, 11.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6525927157529552;  // std dev = 1.937, 55.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=51 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.039850324072709394;  // std dev = 0.255, 109.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=11 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.13412968815847617;  // std dev = 1.29e-08, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.07376951220009514;  // std dev = 2.650, 44.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5829623629848569;  // std dev = 0.214, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return -0.1211375856663259;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.770711887716567;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.28577549858168516;  // std dev = 0.660, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5757589758242536;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5757589758242536;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04591265450929483;  // std dev = 2.778, 131.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=12 */
%   | | | else return 0.0323212156740617;  // std dev = 2.358, 41.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5231829995199814;  // std dev = 1.202, 75.000 (wgt'ed) examples reached here.  /* #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11605989454465124;  // std dev = 0.006, 97.000 (wgt'ed) examples reached here.  /* #neg=97 */
%   | | | else return -0.12454258035837769;  // std dev = 0.002, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16226399954026308;  // std dev = 0.140, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2755434311350752;  // std dev = 1.381, 46.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=44 */
%   | else return 0.41852057130284737;  // std dev = 0.086, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3114059392211858;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6274317395043901;  // std dev = 0.123, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.07934855649413106;  // std dev = 1.842, 138.000 (wgt'ed) examples reached here.  /* #neg=132 #pos=6 */
%   | | else return -0.1033049795361471;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04264541566069128;  // std dev = 2.475, 149.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=55 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2671987700329252;  // std dev = 0.119, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4565735795683224;  // std dev = 1.228, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11172110152813154;  // std dev = 0.102, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | | | else return -0.10913208058231195;  // std dev = 0.107, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27442532932852076;  // std dev = 1.225, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   | else return -0.07855256983532777;  // std dev = 1.667, 148.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.010611431649463965;  // std dev = 0.525, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15996391499349202;  // std dev = 1.387, 51.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=49 */
%   | else if ( follows(A, E) )
%   | | then return 0.2275823127427612;  // std dev = 0.047, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0538197478058633;  // std dev = 0.150, 113.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=11 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.007893140240201808;  // std dev = 1.188, 41.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=8 */
%   | | | else return 0.1961238126963491;  // std dev = 1.102, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16087113163857283;  // std dev = 0.150, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2411792165683279;  // std dev = 1.000, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09068606861541458;  // std dev = 0.035, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.44003619355978557;  // std dev = 0.438, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1263580007033917;  // std dev = 0.177, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1714336682747888;  // std dev = 1.125, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | else return 0.002582192531031091;  // std dev = 0.928, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.08364525797261375;  // std dev = 0.020, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07860633647788438;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return -0.04506559679406267;  // std dev = 0.256, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.06687449124297591;  // std dev = 0.810, 19.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07367787815169648;  // std dev = 0.950, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.970', 'seconds']
Parameter learned model CLL:-0.112778 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.992, 1, 61], 'true,false,true': [7.88e-08, 112, 0], 'true,false,false': [0.266, 12, 1], 'false,true,true,true': [0.0, 0, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 14, 0], 'false,false': [0.498, 6, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.937, 4, 51], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.255, 98, 11], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.29e-08, 17, 0], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [2.65, 33, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.214, 0, 43], 'true,true,false': [0.0, 1, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.66, 1, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 4], 'false,false,true,false': [0.0, 0, 5], 'false,false,false,true': [2.778, 119, 12], 'false,false,false,false': [2.358, 33, 8]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.202, 0, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.006, 97, 0], 'false,true,false,false': [0.002, 24, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.14, 15, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.381, 2, 44], 'true,false': [0.086, 0, 2], 'false,true,true': [0.0, 0, 9], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.123, 0, 14], 'false,false,true,false': [1.842, 132, 6], 'false,false,false': [0.0, 5, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.475, 94, 55], 'false,true': [0.119, 0, 7], 'false,false,true': [1.228, 1, 13], 'false,false,false,true': [0.102, 21, 0], 'false,false,false,false': [0.107, 18, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.225, 1, 63], 'true,false': [1.667, 141, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.525, 10, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.387, 2, 49], 'true,false,true': [0.047, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.15, 102, 11], 'false,false,false,true': [1.188, 33, 8], 'false,false,false,false': [1.102, 5, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.15, 1, 46], 'false,true,true,true': [1.0, 1, 18], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.035, 123, 0], 'false,false,true': [0.438, 0, 11], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.177, 20, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.125, 1, 55], 'true,true,false': [0.928, 1, 6], 'true,false,true': [0.02, 119, 0], 'true,false,false,true': [0.0, 10, 0], 'true,false,false,false': [0.256, 7, 1], 'false,true': [0.81, 11, 8], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.95, 7, 5]}]
{'': [0.22162486773999848, 0.23875114784205645], 'false': [0.23140495867768604, 0.24793388429752045], 'false,true': [-2.220446049250313e-16, -1.1895246692412391e-17], 'true': [0.01586888657648215, 0.007936], 'true,false': [5.551115123125783e-17, 0.07100591715976336], 'false,true,true': [-2.220446049250313e-16, nan]}
{'': [0.0681824253584614, 0.09227355772051192], 'false': [0.06527144485268588, 0.13513410299958037], 'false,false': [9.79608551139844e-18, 0.17004929041084144], 'false,false,false': [0.0, 0.1596512589813675], 'false,true': [nan, 0.06527144485268588], 'false,false,true': [nan, 9.79608551139844e-18]}
{'': [0.02576012947285511, 0.09160257097217703], 'false': [nan, 0.09160257097217718], 'false,false': [-1.4802973661668753e-16, 0.07831435242535824], 'false,false,false': [0.0589227276016406, 0.1356113856848591], 'true': [0.012050670556405933, 0.15311202994329903], 'true,false': [0.0, 0.1453585478809377], 'true,true': [0.001063720125003277, 0.0], 'false,false,true': [0.0, 0.0]}
{'': [0.019273636162122472, 0.000348425982432082], 'false': [1.179862491973071e-05, 0.0013003366943440916], 'false,false': [nan, 0.0013003366943440916], 'false,false,false': [nan, 0.0013003366943440916], 'false,true': [nan, 1.179862491973071e-05], 'false,true,false': [4.1065613013870973e-07, 1.4129641735804999e-07]}
{'': [0.04073062340423228, 0.0645458449536352], 'false': [-1.2335811384723961e-17, 0.06239553020570062], 'false,false': [0.06419544394806771, -2.7755575615628915e-18], 'false,false,true': [0.0010792738708880836, 0.02458841909127546], 'true': [0.04148743296257661, 0.0037333102271976115], 'false,true': [-1.2335811384723961e-17, nan]}
{'': [0.0411109356345404, 0.08630201964839583], 'false': [0.0020285294059230108, 0.09137166968624048], 'false,false': [0.10768500805338019, 0.0005640948968200634], 'true': [nan, 0.041110935634540366], 'true,false': [nan, 0.0411109356345404], 'false,false,false': [0.0004968850387136168, 0.000638897074389972]}
{'': [0.04644426966186236, 0.01836673388636812], 'true': [0.023461661559603525, 0.01876959371603205], 'false': [nan, 0.01836673388636812], 'false,false': [nan, 0.01836673388636812], 'false,false,false': [nan, 0.01836673388636812]}
{'': [0.036493109530009366, 0.03515109062306324], 'true': [0.03770834757732509, 0.0011048292588720227], 'false': [nan, 0.03515109062306342], 'false,false': [0.022520281055308074, 0.058049278196721586], 'false,false,false': [0.0344448899190041, 0.12136570934112564], 'true,false': [0.0011048292588720227, nan]}
{'': [0.022358995428011647, 0.03286090627554544], 'false': [0.019811207690928513, 0.08063890679574628], 'false,false': [0.017441701281216512, 0.0015642660788869889], 'false,true': [0.05259832870100649, 1.0215090661408781e-05], 'false,true,true': [0.05259832870100649, nan], 'false,false,false': [nan, 0.0015642660788869889]}
{'': [0.023689087258372456, 0.05028206652744353], 'false': [0.03453660409539981, 0.0751840131611311], 'false,false': [nan, 0.0751840131611311], 'false,false,false': [nan, 0.0751840131611311], 'true': [0.036571445899330556, 0.0005615793528142545], 'true,true': [0.022609105073984958, 0.12292722062578883], 'true,false': [3.4697351028330553e-06, 0.0039057353428436376], 'true,false,false': [-2.0816681711721684e-18, 0.008162914955543804]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 6.804
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8385410919622573;  // std dev = 0.139, 51.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=50 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.3581489350995122;  // std dev = 1.000, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.7581489350995123;  // std dev = 0.949, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.1346568202961714;  // std dev = 0.085, 139.000 (wgt'ed) examples reached here.  /* #neg=138 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.19148226843284552;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.0581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return 0.35814893509951223;  // std dev = 1.225, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then if ( follows(E, A), follows(A, E) )
%   | | then return 0.670782228768919;  // std dev = 0.223, 38.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=36 */
%   | | else return 0.7448924014913565;  // std dev = 0.053, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.5234138077162874;  // std dev = 0.400, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.7491404585649573;  // std dev = 0.064, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.12623603585822882;  // std dev = 0.000, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else return 0.004553086967811297;  // std dev = 0.314, 27.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=4 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.1262360358582288;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.08006915924165703;  // std dev = 2.639, 44.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.520659296764319;  // std dev = 1.382, 37.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=35 */
%   | | | else return 0.6328234638608924;  // std dev = 0.187, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else return 0.6258106005213716;  // std dev = 0.100, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5639669699981602;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.09984212769543112;  // std dev = 0.962, 93.000 (wgt'ed) examples reached here.  /* #neg=91 #pos=2 */
%   | | | else return 0.016692630390198547;  // std dev = 1.850, 39.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=7 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.10863941437647077;  // std dev = 1.747, 20.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=6 */
%   | | | else return 0.05622123554739315;  // std dev = 1.948, 20.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.4444732320612132;  // std dev = 0.210, 51.000 (wgt'ed) examples reached here.  /* #pos=51 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.4479608903897864;  // std dev = 0.116, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.6289376038335361;  // std dev = 0.179, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.7570653541995579;  // std dev = 0.121, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5367693471987165;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.10631379034862706;  // std dev = 0.059, 110.000 (wgt'ed) examples reached here.  /* #neg=110 */
%   | | else return -0.12114347793783385;  // std dev = 0.029, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return -0.16897970406818474;  // std dev = 0.163, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(A, D) )
%   | | then return 0.3389580157548517;  // std dev = 0.019, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | | else return 0.38558353117238436;  // std dev = 0.167, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.3853970127773717;  // std dev = 0.182, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G), follows(G, A) )
%   | | then return 0.33897232769214414;  // std dev = 0.027, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3117664923165763;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5138856019931631;  // std dev = 0.346, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.0817559112601412;  // std dev = 1.761, 149.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=6 */
%   | | else return -0.09388898361852548;  // std dev = 3.73e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(D, F) )
%   | | then return 0.2731288887542781;  // std dev = 0.026, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else return 0.03505939737385519;  // std dev = 0.770, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( tweets(A, G) )
%   | | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.29263377616219444;  // std dev = 0.064, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08892033043577488;  // std dev = 0.036, 94.000 (wgt'ed) examples reached here.  /* #neg=94 */
%   | | else return -0.03345491163772138;  // std dev = 0.175, 29.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=4 */
%   else if ( follows(I, A), recursion_accounttype(I, B) )
%   | then return 0.2754592559585169;  // std dev = 0.065, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.14901272739531635;  // std dev = 1.447, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | | else return 0.6259954380029648;  // std dev = 0.183, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.11541762254748769;  // std dev = 0.027, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.21972713110111744;  // std dev = 0.025, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else if ( follows(C, E), follows(E, A) )
%   | | then return -0.11086480928233262;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | else return 0.2403577733208714;  // std dev = 0.062, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.16738988076565656;  // std dev = 0.353, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else return -0.08680128601110869;  // std dev = 0.009, 100.000 (wgt'ed) examples reached here.  /* #neg=100 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.33689464716126627;  // std dev = 0.226, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.10723547593202538;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.20372990579325811;  // std dev = 0.652, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.14784664464778333;  // std dev = 0.935, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( tweets(A, F), tweets(E, F) )
%   | | | then return 0.15524186564665154;  // std dev = 0.988, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | | else return 0.21645197608472722;  // std dev = 0.077, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.0014790144436154968;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else return 0.2825350825957292;  // std dev = 0.051, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A) )
%   | then return -0.05068744101974421;  // std dev = 0.102, 133.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=11 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.3061427213605644;  // std dev = 0.329, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.1061931616186156;  // std dev = 0.062, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.08119533854177266;  // std dev = 0.546, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.011487151415801032;  // std dev = 1.031, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then return 0.1671506939137178;  // std dev = 0.023, 36.000 (wgt'ed) examples reached here.  /* #pos=36 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return 0.004740416303784145;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.15340405059345663;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.18602976384547346;  // std dev = 0.171, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(H, A) )
%   | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.06856941809798942;  // std dev = 1.276, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | | else return 0.3625263987582345;  // std dev = 0.190, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.07453782702082218;  // std dev = 0.006, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   | else if ( recursion_accounttype(K, B) )
%   | | then return 0.36055423498890415;  // std dev = 0.111, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.1159068715758729;  // std dev = 0.033, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F), follows(A, E) )
%   | | | then return 0.11168812953371134;  // std dev = 0.988, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.1614681754452013;  // std dev = 0.104, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.25385612440442684;  // std dev = 0.053, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.06754547604272648;  // std dev = 0.028, 120.000 (wgt'ed) examples reached here.  /* #neg=119 #pos=1 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.1450912131224787;  // std dev = 0.085, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.01828967666316994;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.08250777966209745;  // std dev = 0.006, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | else if ( follows(A, K), follows(K, L) )
%   | | then return -0.06650935381708252;  // std dev = 0.818, 6.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=2 */
%   | | else return -0.1082868760419952;  // std dev = 0.372, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '21.352', 'seconds']
Refined model CLL: -0.102983


******************************************
Best model found
******************************************
Results 

CLL : -0.101594 

AUC ROC : 0.994656 

AUC PR : 0.36319 

Precision : 0.339207 

Recall : 0.987179 

F1 : 0.504918 

Total Learning Time : 6.804 

Total Inference Time : 11.879668712615967 

Total revision time: 26.18532504463196
Best scored revision CLL: -0.102983


Results 

CLL : -0.101594 

AUC ROC : 0.994656 

AUC PR : 0.36319 

Precision : 0.339207 

Recall : 0.987179 

F1 : 0.504918 

Total Learning Time : 53.83555020713806 

Total Inference Time : 11.879668712615967 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.938
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7794972497062534;  // std dev = 2.540, 89.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=82 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 162.000 (wgt'ed) examples reached here.  /* #neg=162 */
%   | | else return -0.10851773156715441;  // std dev = 0.180, 30.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=1 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0.16249676118646889;  // std dev = 0.460, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7072463685083563;  // std dev = 1.402, 67.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=65 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.03461749080250268;  // std dev = 0.266, 169.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=18 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12914746888526635;  // std dev = 7.45e-09, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.1367930735783099;  // std dev = 2.978, 49.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5637215309574901;  // std dev = 1.233, 61.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=59 */
%   | | else return 0.7417569132152035;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7687508747029287;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.3776799073314904;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.5776799073314905;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.034134843919306275;  // std dev = 3.281, 161.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=17 */
%   | | | else return 0.06069856968997073;  // std dev = 2.624, 47.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5057495459603104;  // std dev = 2.203, 103.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11719744937527561;  // std dev = 0.036, 134.000 (wgt'ed) examples reached here.  /* #neg=134 */
%   | | | else return -0.12794039654673486;  // std dev = 0.009, 34.000 (wgt'ed) examples reached here.  /* #neg=34 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1598121035112393;  // std dev = 0.161, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30404920988351813;  // std dev = 1.349, 62.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=60 */
%   | else return 0.4118509103855275;  // std dev = 0.136, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.33434375735167404;  // std dev = 0.069, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.587012111393478;  // std dev = 1.009, 20.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=19 */
%   | | | else return -0.0778532002395839;  // std dev = 2.128, 172.000 (wgt'ed) examples reached here.  /* #neg=164 #pos=8 */
%   | | else return -0.1007428780207278;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.016042905307470146;  // std dev = 3.207, 254.000 (wgt'ed) examples reached here.  /* #neg=179 #pos=75 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.27031795746327403;  // std dev = 0.124, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5476100179515846;  // std dev = 0.634, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1112168524179252;  // std dev = 0.095, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | | else return -0.10942345633803795;  // std dev = 0.159, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2740377080278382;  // std dev = 1.857, 88.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=85 */
%   | else return -0.07383971241053755;  // std dev = 1.830, 174.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=9 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.017378690038547563;  // std dev = 0.562, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.2067097695845908;  // std dev = 0.060, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | else if ( follows(A, E) )
%   | | then return 0.2478156142318254;  // std dev = 0.022, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03642441791795059;  // std dev = 0.171, 140.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=18 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.01471679815672135;  // std dev = 1.435, 46.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=10 */
%   | | | else return 0.14001590096978994;  // std dev = 1.369, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.13367751033361105;  // std dev = 0.230, 67.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=63 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2682134463790625;  // std dev = 1.242, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09192531546801465;  // std dev = 0.060, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.37660610358485364;  // std dev = 0.954, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11873022280698628;  // std dev = 0.164, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.18880678940575676;  // std dev = 1.271, 76.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=75 */
%   | | else return 0.1392306574103334;  // std dev = 0.035, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( follows(A, C) )
%   | | then return -0.08536185574993946;  // std dev = 0.033, 137.000 (wgt'ed) examples reached here.  /* #neg=137 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07667346540646726;  // std dev = 6.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.04934692345997047;  // std dev = 0.258, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   else if ( tweets(A, G) )
%   | then return 0.052301608503158584;  // std dev = 0.912, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07370490815883692;  // std dev = 1.162, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.705', 'seconds']
Parameter learned model CLL:-0.111843 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.54, 7, 82], 'true,false,true': [0.0, 162, 0], 'true,false,false': [0.18, 29, 1], 'false,true,true,true': [0.0, 0, 10], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.05e-08, 22, 0], 'false,false': [0.46, 16, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.402, 2, 65], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.266, 151, 18], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.45e-09, 17, 0], 'false,false,false,true': [0.0, 0, 2], 'false,false,false,false': [2.978, 34, 15]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.233, 2, 59], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 2], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.894, 1, 4], 'false,false,true,false': [0.0, 0, 6], 'false,false,false,true': [3.281, 144, 17], 'false,false,false,false': [2.624, 37, 10]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.203, 3, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.036, 134, 0], 'false,true,false,false': [0.009, 34, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.161, 36, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.349, 2, 60], 'true,false': [0.136, 0, 3], 'false,true,true': [0.069, 0, 10], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [1.009, 1, 19], 'false,false,true,false': [2.128, 164, 8], 'false,false,false': [0.0, 7, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.207, 179, 75], 'false,true': [0.124, 0, 8], 'false,false,true': [0.634, 0, 17], 'false,false,false,true': [0.095, 26, 0], 'false,false,false,false': [0.159, 37, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.857, 3, 85], 'true,false': [1.83, 165, 9], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.562, 11, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.06, 0, 63], 'true,false,true': [0.022, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.171, 122, 18], 'false,false,false,true': [1.435, 36, 10], 'false,false,false,false': [1.369, 10, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.23, 4, 63], 'false,true,true,true': [1.242, 1, 22], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.06, 163, 0], 'false,false,true': [0.954, 1, 15], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.164, 32, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.271, 1, 75], 'true,true,false': [0.035, 0, 7], 'true,false,true': [0.033, 137, 0], 'true,false,false,true': [6.45e-09, 13, 0], 'true,false,false,false': [0.258, 10, 1], 'false,true': [0.912, 15, 10], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.162, 11, 7]}]
{'': [0.20812806322108443, 0.21355371900826395], 'false': [0.21484375000000008, 0.21172022684310027], 'false,true': [-8.881784197001253e-17, 5.046468293750712e-18], 'true': [0.07246559777805851, 0.005181206597222013], 'true,false': [-1.507710280355151e-16, 0.03222222222222228], 'false,true,true': [-8.881784197001253e-17, nan]}
{'': [0.02935173844904193, 0.09815455240923383], 'false': [0.07073392054435196, 0.15567842302123086], 'false,false': [3.2653618371328133e-18, 0.18672120611053603], 'false,false,false': [0.0, 0.18102811210270386], 'false,true': [nan, 0.07073392054435196], 'false,false,true': [nan, 3.2653618371328133e-18]}
{'': [0.024493295371886766, 0.09815686269234287], 'false': [nan, 0.0981568626923428], 'false,false': [0.08264462809917344, 0.08644640148691082], 'false,false,false': [0.06687439327654843, 0.1465297210663022], 'false,false,true': [0.15999999999999998, -1.4802973661668753e-16], 'true': [0.025023244723344544, 0.010118426302682929], 'true,true': [0.024922226409059334, 0.0], 'true,false': [0.0, 0.0]}
{'': [0.047111611416291437, 0.00038679472824585434], 'false': [2.6958468931787788e-05, 0.0007192034873551085], 'false,false': [nan, 0.0007192034873551085], 'false,false,false': [nan, 0.0007192034873551085], 'false,true': [nan, 2.6958468931795716e-05], 'false,true,false': [9.812728371666883e-06, 2.4789149457157983e-06]}
{'': [0.028790750895911994, 0.07017784942497367], 'false': [0.0004807271719453832, 0.067946168454117], 'false,false': [0.07012469503584152, 0.0], 'false,false,true': [0.05086636552217701, 0.02631758957145214], 'true': [0.029347388902136513, 0.0062020555191219335], 'false,true': [0.0004807271719453832, nan]}
{'': [0.04049720819717401, 0.07574452841462988], 'false': [0.0019166396045560002, 0.07786015997080546], 'false,false': [0.023661099508370403, 0.000543753459331389], 'true': [nan, 0.04049720819717402], 'true,false': [nan, 0.04049720819717401], 'false,false,false': [0.0003445251208098679, 0.0006824244019482627]}
{'': [0.05292981542500197, 0.018559589848891757], 'true': [0.03916747335721835, 0.019242578206016162], 'false': [nan, 0.018559589848891757], 'false,false': [nan, 0.018559589848891757], 'false,false,false': [nan, 0.018559589848891757]}
{'': [0.0001123496932440669, 0.04188679094256102], 'false': [nan, 0.041886790942561224], 'false,false': [0.02928255596928931, 0.0671187645613369], 'false,false,false': [0.04474403172369547, 0.1101805469773277], 'true': [5.641856050605327e-05, 0.00023648038614933198], 'true,false': [0.00023648038614933198, nan]}
{'': [0.052897231450222966, 0.03440197229462202], 'false': [0.022362250230607738, 0.07406615289199457], 'false,false': [0.05693859373124807, 0.0008439070579132988], 'false,true': [0.06702684835722829, 2.1720510616580497e-05], 'false,true,true': [0.06702684835722829, nan], 'false,false,false': [nan, 0.0008439070579132988]}
{'': [0.023002895036237005, 0.05086044280094302], 'false': [0.03327163819763029, 0.07502300015532729], 'false,false': [nan, 0.07502300015532729], 'false,false,false': [nan, 0.07502300015532729], 'true': [0.01966530082476064, 0.0005052892347052558], 'true,true': [0.02125343403095456, 0.00017220260079995172], 'true,false': [8.003406326032167e-06, 0.0029610485946542585], 'true,false,false': [3.2025664171879517e-18, 0.006055985551405616]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 18.8
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8427643197148973;  // std dev = 0.123, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | else return 0.8055173561521439;  // std dev = 0.223, 19.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=18 */
%   | else return -0.13610393846370664;  // std dev = 0.076, 174.000 (wgt'ed) examples reached here.  /* #neg=173 #pos=1 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.124815601766179;  // std dev = 0.442, 15.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7248965471124639;  // std dev = 0.150, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.7299724186538793;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.396639085320546;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.0629253542621782;  // std dev = 2.472, 122.000 (wgt'ed) examples reached here.  /* #neg=113 #pos=9 */
%   | | | else return -0.05054277581996995;  // std dev = 1.416, 34.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=3 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then return -0.12607650431743925;  // std dev = 1.83e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.7816289395752953;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.2087899845818574;  // std dev = 2.692, 39.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=15 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5598421322496441;  // std dev = 0.087, 59.000 (wgt'ed) examples reached here.  /* #pos=59 */
%   | | else return 0.6451627915800191;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.7705125133107611;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0.6209436491414324;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5578248942764432;  // std dev = 7.45e-09, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7416007990614931;  // std dev = 0.004, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.11851335982512982;  // std dev = 0.032, 160.000 (wgt'ed) examples reached here.  /* #neg=160 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.05725702753660016;  // std dev = 2.037, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | | else return 0.20667274559762752;  // std dev = 1.897, 17.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(D, F), recursion_accounttype(D, B) )
%   | | | then return 0.4188483056918916;  // std dev = 0.000, 42.000 (wgt'ed) examples reached here.  /* #pos=42 */
%   | | | else return 0.33294974635919716;  // std dev = 1.301, 20.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=18 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return 0.4193394106963332;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.5775464418718214;  // std dev = 0.005, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.5149388311167195;  // std dev = 0.114, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.6481610453561544;  // std dev = 0.045, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.7208898768755294;  // std dev = 0.164, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(J, A) )
%   | then return -0.10722046403347654;  // std dev = 0.004, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | else return -0.1728000734550503;  // std dev = 0.023, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(A, E), follows(D, E) )
%   | | | then return 0.3246602226216564;  // std dev = 0.049, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   | | | else return 0.3406379159009951;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.3707426622067955;  // std dev = 0.080, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return 0.3902963127098242;  // std dev = 0.112, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.32194991393585964;  // std dev = 2.11e-08, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return -0.05458508798544884;  // std dev = 1.766, 148.000 (wgt'ed) examples reached here.  /* #neg=136 #pos=12 */
%   | | | else return 0.07829427567235502;  // std dev = 2.163, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
%   | | else return -0.09212885467759942;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then return 0.26061465759592845;  // std dev = 0.012, 58.000 (wgt'ed) examples reached here.  /* #pos=58 */
%   | | else return -0.046129119036824116;  // std dev = 0.836, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.41341786723364055;  // std dev = 0.246, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.09284783739964254;  // std dev = 4.94e-08, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | | else return -0.011912446308197192;  // std dev = 0.186, 24.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=4 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.15933823992263943;  // std dev = 0.322, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.4249954989038409;  // std dev = 0.265, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5411678630890279;  // std dev = 0.204, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.13444460286961576;  // std dev = 0.042, 59.000 (wgt'ed) examples reached here.  /* #neg=59 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then if ( recursion_accounttype(D, B), follows(D, A) )
%   | | then return 0.20889050236982712;  // std dev = 2.58e-08, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | else if ( recursion_accounttype(D, B) )
%   | | | then return -0.0411094976301728;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2128095106281605;  // std dev = 0.049, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.2340188082237601;  // std dev = 0.032, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, E), recursion_accounttype(E, B) )
%   | then return 0.2416850109161099;  // std dev = 0.047, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), follows(G, A) )
%   | | | then return -0.07691098190629413;  // std dev = 0.611, 109.000 (wgt'ed) examples reached here.  /* #neg=107 #pos=2 */
%   | | | else return -0.002644016320642633;  // std dev = 1.343, 55.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=10 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return -0.024527936547129234;  // std dev = 1.178, 32.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=7 */
%   | | | else return 0.06435169608218272;  // std dev = 1.280, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then if ( tweets(A, F), recursion_accounttype(E, B) )
%   | | | then return 0.18130172321237922;  // std dev = 0.069, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | | else return 0.17508661677374857;  // std dev = 0.033, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0.1884471165129414;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return 0.25691052087220867;  // std dev = 0.058, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then if ( tweets(A, H), follows(G, I) )
%   | | then return 0.18673627941991167;  // std dev = 0.056, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.22378340895771232;  // std dev = 0.090, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(J, A) )
%   | | then if ( follows(J, K), follows(K, A) )
%   | | | then return -0.07218017314954138;  // std dev = 0.629, 126.000 (wgt'ed) examples reached here.  /* #neg=124 #pos=2 */
%   | | | else return -0.009551947367506742;  // std dev = 1.357, 60.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=10 */
%   | | else return 0.04955941863207325;  // std dev = 0.283, 38.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then return 0.1569031443621692;  // std dev = 0.011, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else return 0.09269379261180807;  // std dev = 0.259, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return -0.0667589531998877;  // std dev = 0.821, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.06419011390034524;  // std dev = 0.977, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.3824527655513315;  // std dev = 0.143, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.07746306516676663;  // std dev = 0.007, 175.000 (wgt'ed) examples reached here.  /* #neg=175 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.36263289296935064;  // std dev = 0.045, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.2795772853239926;  // std dev = 0.899, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.16394461652308062;  // std dev = 0.030, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.11426567078770912;  // std dev = 0.230, 79.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=75 */
%   | | else return 0.15280486141388971;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else return -0.0702382619877898;  // std dev = 0.027, 159.000 (wgt'ed) examples reached here.  /* #neg=158 #pos=1 */
%   else if ( follows(A, F), follows(F, G) )
%   | then if ( recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H) )
%   | | | then return 0.24354063545653762;  // std dev = 0.184, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.01644653902066251;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.12053621334769236;  // std dev = 0.008, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.25768488709362125;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return -0.12403221822168854;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return 0.01006493489034673;  // std dev = 0.264, 12.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '18.424', 'seconds']
Refined model CLL: -0.107932


******************************************
Best model found
******************************************
Results 

CLL : -0.108298 

AUC ROC : 0.994012 

AUC PR : 0.329694 

Precision : 0.338395 

Recall : 1.0 

F1 : 0.505673 

Total Learning Time : 18.8 

Total Inference Time : 12.421676874160767 

Total revision time: 39.75624927330017
Best scored revision CLL: -0.107932


Results 

CLL : -0.108298 

AUC ROC : 0.994012 

AUC PR : 0.329694 

Precision : 0.338395 

Recall : 1.0 

F1 : 0.505673 

Total Learning Time : 67.40647443580627 

Total Inference Time : 12.421676874160767 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.379
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8485335504841266;  // std dev = 0.995, 104.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else return -0.07288554765910848;  // std dev = 0.253, 29.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0.15814893509951236;  // std dev = 0.458, 30.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7111133925093546;  // std dev = 1.006, 83.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0258146813818338;  // std dev = 0.273, 187.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09872543492514742;  // std dev = 0.983, 29.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.572599739574001;  // std dev = 0.796, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.07512677653069577;  // std dev = 3.314, 72.000 (wgt'ed) examples reached here.  /* #neg=55 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5324117005217492;  // std dev = 1.764, 73.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=70 */
%   | | else return 0.7265684002902681;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.81971930943019;  // std dev = 0.082, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.4219133503929983;  // std dev = 0.938, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5598006527812859;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5598006527812859;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.04375677706055816;  // std dev = 3.666, 220.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=21 */
%   | | | else return 0.05614762238448877;  // std dev = 2.786, 52.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.47879437538950365;  // std dev = 2.929, 132.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11806369704888664;  // std dev = 0.019, 157.000 (wgt'ed) examples reached here.  /* #neg=157 */
%   | | | else return -0.12879776402893056;  // std dev = 0.000436, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1507024583816778;  // std dev = 0.143, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3369112793600687;  // std dev = 0.528, 73.000 (wgt'ed) examples reached here.  /* #pos=73 */
%   | else return 0.45532674766029074;  // std dev = 0.123, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.31040170382870713;  // std dev = 2.98e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.637288018755535;  // std dev = 0.194, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08166094084621554;  // std dev = 2.345, 231.000 (wgt'ed) examples reached here.  /* #neg=222 #pos=9 */
%   | | else return -0.1058896718464313;  // std dev = 2.28e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.023841961454668926;  // std dev = 3.445, 276.000 (wgt'ed) examples reached here.  /* #neg=185 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25643434364870266;  // std dev = 0.104, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5534999868071878;  // std dev = 0.713, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11227453271395116;  // std dev = 0.117, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | | else return -0.11714082008951159;  // std dev = 0.118, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2760982297560383;  // std dev = 1.648, 109.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else return -0.07776890839046761;  // std dev = 2.062, 269.000 (wgt'ed) examples reached here.  /* #neg=258 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01889003138301767;  // std dev = 0.654, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19592751756474666;  // std dev = 0.063, 80.000 (wgt'ed) examples reached here.  /* #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.22080819225686155;  // std dev = 0.034, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04674177432834631;  // std dev = 0.164, 190.000 (wgt'ed) examples reached here.  /* #neg=168 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.00744040732491895;  // std dev = 1.570, 47.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=13 */
%   | | | else return 0.15043434478150206;  // std dev = 1.660, 20.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.18714289970268796;  // std dev = 0.056, 77.000 (wgt'ed) examples reached here.  /* #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.26564073791044746;  // std dev = 0.820, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09094881960365193;  // std dev = 0.048, 206.000 (wgt'ed) examples reached here.  /* #neg=206 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4413929966780163;  // std dev = 0.600, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11131860302567231;  // std dev = 0.178, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.14459116874831254;  // std dev = 2.121, 98.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=94 */
%   | | else return 0.13770795073807798;  // std dev = 0.011, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08505247465995734;  // std dev = 0.045, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08157927614913832;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | | | else return -0.01895607029525145;  // std dev = 0.444, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.062720106941032;  // std dev = 0.919, 27.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.27101665061763264;  // std dev = 0.736, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.06046700456223017;  // std dev = 1.299, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.590', 'seconds']
Parameter learned model CLL:-0.111941 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.995, 1, 103], 'true,false,true': [0.0, 164, 0], 'true,false,false': [0.253, 27, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.05e-08, 21, 0], 'false,false': [0.458, 21, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.006, 1, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.273, 165, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.983, 28, 1], 'false,false,false,true': [0.796, 1, 4], 'false,false,false,false': [3.314, 55, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.764, 3, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.082, 0, 2], 'true,false,false': [0.938, 1, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.666, 199, 21], 'false,false,false,false': [2.786, 41, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.929, 6, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.019, 157, 0], 'false,true,false,false': [0.000436, 35, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.143, 31, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.528, 0, 73], 'true,false': [0.123, 0, 4], 'false,true,true': [2.98e-08, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.194, 0, 23], 'false,false,true,false': [2.345, 222, 9], 'false,false,false': [2.28e-09, 10, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.445, 185, 91], 'false,true': [0.104, 0, 13], 'false,false,true': [0.713, 0, 22], 'false,false,false,true': [0.117, 44, 0], 'false,false,false,false': [0.118, 27, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.648, 2, 107], 'true,false': [2.062, 258, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.654, 14, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.063, 0, 80], 'true,false,true': [0.034, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.164, 168, 22], 'false,false,false,true': [1.57, 34, 13], 'false,false,false,false': [1.66, 11, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.056, 0, 77], 'false,true,true,true': [0.82, 1, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.048, 206, 0], 'false,false,true': [0.6, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.178, 44, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.121, 4, 94], 'true,true,false': [0.011, 0, 9], 'true,false,true': [0.045, 192, 0], 'true,false,false,true': [0.0, 14, 0], 'true,false,false,false': [0.444, 9, 2], 'false,true': [0.919, 15, 12], 'false,false,true': [0.736, 1, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.299, 15, 8]}]
{'': [0.22854810733598852, 0.22222222222222235], 'true': [0.009522928994084868, 0.010255308867351978], 'false': [0.23140495867768548, 0.21000000000000008], 'false,true': [-1.4802973661668753e-16, 5.28677630773884e-18], 'true,false': [-1.5705594006892458e-16, 0.06420927467300835], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.012196821744223646, 0.09881995016863429], 'false': [0.07444596270768573, 0.13805064016777063], 'false,false': [0.03329369797859696, 0.16587715330764308], 'false,false,false': [0.12664091311891043, 0.15253180461489252], 'false,true': [nan, 0.07444596270768573], 'false,false,true': [nan, 0.03329369797859696]}
{'': [0.05261915684469525, 0.09373195418274233], 'false': [nan, 0.09373195418274237], 'false,false': [-1.5673736818237505e-16, 0.07949659995737011], 'false,false,false': [0.06109135810235624, 0.14929215299175017], 'true': [0.0425580405898664, 0.15897926547246685], 'true,false': [0.003371513323442099, 0.17600820031907677], 'true,true': [0.042631610905842894, 0.0], 'false,false,true': [-1.9737298215558337e-16, -1.6653345369377348e-16]}
{'': [0.06497122334732398, 0.00022034391734396814], 'false': [1.90485552874764e-05, 0.0006565549502400418], 'false,false': [nan, 0.0006565549502400418], 'false,false,false': [nan, 0.0006565549502400418], 'false,true': [nan, 1.9048555287478713e-05], 'false,true,false': [2.2901580796604525e-06, 5.424302223262195e-09]}
{'': [0.0045045550074885475, 0.06465433894535431], 'false': [5.224578939412501e-17, 0.06221565985364037], 'false,false': [0.0643628255130381, 2.7755575615628915e-18], 'false,false,true': [0.0016312602980859511, 0.02380404224592055], 'true': [0.0038171095117720513, 0.0037566393472817927], 'false,true': [5.224578939412501e-17, nan]}
{'': [0.04299648908451533, 0.08065706267595735], 'false': [0.0008287744627684967, 0.08627122316036306], 'false,false': [0.02313189096170174, 0.00039561543559586394], 'true': [nan, 0.04299648908451561], 'true,false': [nan, 0.04299648908451533], 'false,false,false': [0.00031180425465676676, 0.0005175212232337732]}
{'': [0.04413510906176799, 0.019457096118446426], 'true': [0.024930411295414987, 0.01580796284720365], 'false': [nan, 0.019457096118446426], 'false,false': [nan, 0.019457096118446426], 'false,false,false': [nan, 0.019457096118446426]}
{'': [7.790757075210854e-05, 0.04310268594661009], 'false': [nan, 0.04310268594661015], 'false,false': [0.026874943561155048, 0.08218465790473864], 'false,false,false': [0.052416494207012485, 0.1377962379821732], 'true': [4.993264059340308e-05, 0.0005929555350176127], 'true,false': [0.0005929555350176127, nan]}
{'': [0.0031370797811994134, 0.029255070982250088], 'false': [0.01795735788002221, 0.0678411205205873], 'false,false': [0.021202482342320784, 0.0007240056474495836], 'false,true': [0.02038476397829197, 1.1381423445844359e-05], 'false,true,true': [0.02038476397829197, nan], 'false,false,false': [nan, 0.0007240056474495836]}
{'': [0.02588798313998401, 0.06323985601597878], 'false': [0.031304569434561606, 0.09730013789425959], 'false,false': [0.27116952948340567, 0.07339054727265645], 'false,false,false': [nan, 0.07339054727265645], 'true': [0.042045842871410145, 0.0011290806863995658], 'true,true': [0.04590194963991844, 1.3731158727301215e-05], 'true,false': [1.0349041689414426e-05, 0.00886914975460505], 'true,false,false': [-9.912705577010326e-19, 0.01796102562279905]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 14.622
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.8581489350995115;  // std dev = 2.92e-07, 95.000 (wgt'ed) examples reached here.  /* #pos=95 */
%   | | else return 0.7470378239884012;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.13307913507592703;  // std dev = 0.093, 228.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.7470378239884012;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( recursion_accounttype(K, B) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else return 0.0803711573217346;  // std dev = 0.416, 27.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(A, D) )
%   | then if ( tweets(E, D), follows(E, A) )
%   | | then return 0.6994734122109547;  // std dev = 0.140, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | | else return 0.4694734122109545;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.7304425999391911;  // std dev = 0.155, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.726174126551087;  // std dev = 0.151, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return -0.12641015796599317;  // std dev = 2.02e-07, 218.000 (wgt'ed) examples reached here.  /* #neg=218 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.5340533457129586;  // std dev = 1.550, 15.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=12 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.19139963049886333;  // std dev = 1.157, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.20102219923018835;  // std dev = 1.970, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.516646072930372;  // std dev = 1.698, 67.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=64 */
%   | | | else return 0.4108540480633321;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.553711190920475;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.706625881873807;  // std dev = 0.200, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.5526561463756386;  // std dev = 4.21e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.46882705800968577;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(I, A) )
%   | | then return -0.0661387203640768;  // std dev = 0.171, 213.000 (wgt'ed) examples reached here.  /* #neg=198 #pos=15 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.08122020610179337;  // std dev = 1.938, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
%   | | | else return 0.14263379963829195;  // std dev = 2.174, 24.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.41393843457094753;  // std dev = 0.993, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.17262517097398672;  // std dev = 1.465, 11.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=8 */
%   | | else if ( follows(A, F), tweets(D, G) )
%   | | | then return 0.49916332648249584;  // std dev = 0.429, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0.3230634617398944;  // std dev = 1.053, 11.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.36410526817794825;  // std dev = 0.962, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.5958051439918406;  // std dev = 0.040, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.7417557069818441;  // std dev = 0.207, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(J, A) )
%   | then return -0.10663075420797602;  // std dev = 0.000, 219.000 (wgt'ed) examples reached here.  /* #neg=219 */
%   | else return -0.1446604648449705;  // std dev = 0.250, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then return 0.3420339937406443;  // std dev = 0.024, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   | | else if ( tweets(A, F), recursion_accounttype(D, B) )
%   | | | then return 0.3492681664273793;  // std dev = 0.076, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.01857384775657937;  // std dev = 0.794, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.45661112035652957;  // std dev = 0.237, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.30144822804559684;  // std dev = 1.83e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.3847651436066872;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.451765269783167;  // std dev = 0.040, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.0799249987067127;  // std dev = 1.999, 240.000 (wgt'ed) examples reached here.  /* #neg=231 #pos=9 */
%   | | else return -0.09689081203824211;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(E, D) )
%   | | then return 0.25501934342982835;  // std dev = 0.125, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | | else if ( follows(A, F), follows(D, F) )
%   | | | then return -0.23318008417174532;  // std dev = 0.975, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return 0.3105868217528773;  // std dev = 0.027, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return -0.05382875634052969;  // std dev = 0.116, 223.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=20 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H) )
%   | | then return 0.27748920410876526;  // std dev = 0.159, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.18745482811539516;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return -0.022537798152413274;  // std dev = 1.343, 8.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=5 */
%   | | | else return 0.4706549581284393;  // std dev = 0.558, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.11403713403202889;  // std dev = 0.031, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, C), tweets(C, D) )
%   | then if ( follows(A, E), follows(C, E) )
%   | | then if ( recursion_accounttype(E, B) )
%   | | | then return 0.21695486775646056;  // std dev = 0.067, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | | else return 0.13866724377203074;  // std dev = 0.966, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | else return 0.03465777487204482;  // std dev = 0.942, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else return 0.2457918946583818;  // std dev = 0.035, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(F, A) )
%   | then return -0.044978413094886774;  // std dev = 0.123, 239.000 (wgt'ed) examples reached here.  /* #neg=216 #pos=23 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.17732786628730876;  // std dev = 0.946, 12.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=11 */
%   | | | else return -0.09874833662015974;  // std dev = 0.081, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.04316263913718067;  // std dev = 0.715, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return -0.003424560392758936;  // std dev = 1.585, 26.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=6 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.17496664160489042;  // std dev = 0.119, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | else return 0.21629612679978644;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else return 0.25419156902182394;  // std dev = 0.065, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, G), follows(G, F) )
%   | | | then return -7.313703787616024E-4;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.3557819325757964;  // std dev = 0.113, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | | else return -0.08152538967804261;  // std dev = 0.026, 189.000 (wgt'ed) examples reached here.  /* #neg=189 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.3046381819144493;  // std dev = 0.231, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.014651528380702161;  // std dev = 0.919, 32.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=9 */
%   | | | else return 0.004359126695306774;  // std dev = 1.490, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.14197775889881564;  // std dev = 0.984, 56.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=55 */
%   | | | else return 0.19059959906572407;  // std dev = 0.095, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.051803734478486914;  // std dev = 0.405, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else return 0.26032590708046477;  // std dev = 0.220, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then return 0.19505505597286052;  // std dev = 0.171, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   | | else return -0.07575885808905138;  // std dev = 0.024, 216.000 (wgt'ed) examples reached here.  /* #neg=216 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.22105792667925483;  // std dev = 0.008, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.457027600246376;  // std dev = 0.347, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.11009875045955393;  // std dev = 0.027, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.13011842768262982;  // std dev = 1.005, 73.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=72 */
%   | | | else return 0.2495540172945036;  // std dev = 0.083, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.1502895294274219;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.06766295949132071;  // std dev = 0.030, 212.000 (wgt'ed) examples reached here.  /* #neg=210 #pos=2 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.20471204420029748;  // std dev = 0.187, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.18534287460099444;  // std dev = 0.007, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.08487476734481088;  // std dev = 0.068, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.09844569655296108;  // std dev = 0.420, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
%   | | | else return 0.056206376701753796;  // std dev = 1.069, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.040', 'seconds']
Refined model CLL: -0.10175


******************************************
Best model found
******************************************
Results 

CLL : -0.098492 

AUC ROC : 0.994715 

AUC PR : 0.382322 

Precision : 0.338395 

Recall : 1.0 

F1 : 0.505673 

Total Learning Time : 14.622 

Total Inference Time : 11.92979621887207 

Total revision time: 37.002240015029905
Best scored revision CLL: -0.10175


Results 

CLL : -0.098492 

AUC ROC : 0.994715 

AUC PR : 0.382322 

Precision : 0.338395 

Recall : 1.0 

F1 : 0.505673 

Total Learning Time : 64.65246517753602 

Total Inference Time : 11.92979621887207 

Run: 2
Starting experiments for fasttext using relax-wmd 


 Starting fold 1 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1562
Target train pos examples: 156
Target train neg examples: 24648

Target test facts examples: 1580
Target test pos examples: 126
Target test neg examples: 16128

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.168
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 3.80e-08, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else return 0.13087620782678497;  // std dev = 0.445, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return 0.274815601766179;  // std dev = 0.493, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7338246537085119;  // std dev = 0.162, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.004742059851341974;  // std dev = 0.296, 28.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=4 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.050127236859167194;  // std dev = 1.174, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.12741269510477513;  // std dev = 2.268, 27.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5647898351885084;  // std dev = 0.162, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7181491280375797;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6349844950778797;  // std dev = 0.118, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5518198621181797;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.013111821580806727;  // std dev = 2.166, 50.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=7 */
%   | | | else return 0.01937003321654294;  // std dev = 2.109, 30.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=6 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5745750679068486;  // std dev = 0.943, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1366904092025912;  // std dev = 0.112, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | | | else return -0.13730215044387326;  // std dev = 0.035, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16805293730846305;  // std dev = 0.129, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.23541074269199666;  // std dev = 0.829, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else return 0.41158302951446;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.2797403216964855;  // std dev = 0.014, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.43186146749438337;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6359927922869595;  // std dev = 0.105, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.10920494121659678;  // std dev = 0.880, 44.000 (wgt'ed) examples reached here.  /* #neg=43 #pos=1 */
%   | | else return 0.08653680479511676;  // std dev = 0.360, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.018585437739412604;  // std dev = 1.322, 52.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=16 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26562143965054513;  // std dev = 0.107, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4975870136019496;  // std dev = 1.041, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1331015870870375;  // std dev = 0.113, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.16493769232789643;  // std dev = 0.099, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.30021395093146364;  // std dev = 0.390, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else return -0.0895359935015372;  // std dev = 0.815, 60.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=2 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11552752257700268;  // std dev = 1.149, 15.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.18305082569113518;  // std dev = 0.019, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else if ( follows(A, E) )
%   | | then return 0.21364085374740294;  // std dev = 0.007, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.0492727990821681;  // std dev = 0.192, 28.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.04999439896684796;  // std dev = 1.169, 26.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=4 */
%   | | | else return 0.012921847245131969;  // std dev = 1.252, 23.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1722112574748706;  // std dev = 0.045, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.31643006259943607;  // std dev = 0.506, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09646690560676326;  // std dev = 0.118, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.41010187051196223;  // std dev = 0.258, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10781667749019061;  // std dev = 0.136, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1778344549723579;  // std dev = 0.283, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return 0.16777415661749503;  // std dev = 0.182, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( follows(A, C) )
%   | | then return -0.08202586053399097;  // std dev = 0.006, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.13260341582187088;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return 0.14456465613753605;  // std dev = 0.585, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return -0.019904111250482706;  // std dev = 0.532, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03149239560862491;  // std dev = 0.908, 15.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.796', 'seconds']
Parameter learned model CLL:-0.113783 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.0, 0, 20], 'true,false,true': [3.8e-08, 37, 0], 'true,false,false': [0.445, 8, 3], 'false,true,true,true': [0.816, 1, 2], 'false,true,true,false': [0.0, 0, 1], 'false,true,false': [0.0, 7, 0], 'false,false': [0.493, 7, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.162, 0, 17], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.296, 24, 4], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.174, 7, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.268, 19, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.162, 0, 13], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.118, 0, 2], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [2.166, 43, 7], 'false,false,false,false': [2.109, 24, 6]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.943, 0, 31], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.112, 32, 0], 'false,true,false,false': [0.035, 4, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.129, 17, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.829, 1, 13], 'true,false': [0.0, 0, 1], 'false,true,true': [0.014, 0, 3], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.105, 0, 7], 'false,false,true,false': [0.88, 43, 1], 'false,false,false': [0.36, 12, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.322, 36, 16], 'false,true': [0.107, 0, 5], 'false,false,true': [1.041, 1, 10], 'false,false,false,true': [0.113, 20, 0], 'false,false,false,false': [0.099, 13, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [0.39, 0, 22], 'true,false': [0.815, 58, 2], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.149, 8, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.019, 0, 15], 'true,false,true': [0.007, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.192, 24, 4], 'false,false,false,true': [1.169, 22, 4], 'false,false,false,false': [1.252, 17, 6]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.045, 0, 14], 'false,true,true,true': [0.506, 0, 9], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.118, 45, 0], 'false,false,true': [0.258, 0, 8], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.136, 15, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.283, 0, 16], 'true,true,false': [0.182, 0, 4], 'true,false,true': [0.006, 36, 0], 'true,false,false,true': [0.0, 4, 0], 'true,false,false,false': [0.585, 2, 3], 'false,true': [0.532, 14, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.908, 10, 5]}]
{'': [0.22383217993079688, 0.226843100189036], 'false': [0.1983471074380164, 0.24305555555555536], 'true': [-8.881784197001253e-17, 0.058593750000000056], 'false,true': [0.18750000000000006, -7.93016446160826e-18], 'false,true,true': [0.22222222222222224, 0.0], 'true,false': [3.900783600034334e-17, 0.1983471074380164]}
{'': [0.0015446859939092488, 0.14393314977407617], 'false': [0.08741467499573595, 0.18232198737082783], 'false,false': [0.15322526002948042, 0.19052763597055175], 'false,false,false': [nan, 0.1905276359705518], 'false,false,true': [nan, 0.15322526002948042], 'false,true': [nan, 0.08741467499573595]}
{'': [0.003434392168863162, 0.12528600368668313], 'false': [nan, 0.12528600368668305], 'false,false': [0.005187267131491202, 0.11447036541957538], 'false,false,false': [0.09380313683705424, 0.14825632708352135], 'false,false,true': [0.0069163561753216585, 0.0], 'true': [0.00201864241734063, 0.0], 'true,true': [0.00201864241734063, nan], 'true,false': [0.0, nan]}
{'': [0.02870638917340114, 0.0007863619073474776], 'false': [0.00038054076314695016, 0.000980529474881942], 'false,false': [nan, 0.000980529474881942], 'false,false,false': [nan, 0.000980529474881942], 'false,true': [nan, 0.0003805407631469347], 'false,true,false': [0.00038871529791751486, 0.0003148118384523023]}
{'': [0.04776288537934756, 0.09467363625295971], 'false': [0.004385113722563061, 0.09494034170187944], 'false,false': [0.08114687863544849, 0.12976969367515667], 'false,false,true': [0.0015864877818653994, 0.01758386777668168], 'true': [0.04910540840635054, 0.0], 'false,true': [6.160754703440907e-05, 0.0]}
{'': [0.03359375131914883, 0.09838651149882413], 'false': [0.0022859687678113082, 0.10290613913337476], 'false,false': [0.09854271172908315, 0.0009243756118962079], 'true': [nan, 0.03359375131914884], 'true,false': [nan, 0.03359375131914883], 'false,false,false': [0.0006334358122670663, 0.0007577100933866415]}
{'': [0.03978515817946895, 0.08807246745642461], 'false': [nan, 0.08807246745642461], 'false,false': [nan, 0.08807246745642461], 'false,false,false': [nan, 0.08807246745642461], 'true': [0.00692082841682568, 0.011080407278434852]}
{'': [0.00012145333857493945, 0.05238019477657262], 'false': [nan, 0.05238019477657258], 'false,false': [0.03697318462327114, 0.06088236573700818], 'false,false,false': [0.05256429470325342, 0.06818499837466079], 'true': [2.3839631679511974e-05, 2.789453751141091e-05], 'true,false': [2.789453751141091e-05, nan]}
{'': [0.0019902926420512107, 0.04148417783444318], 'false': [0.028673404513520625, 0.06455151280123156], 'false,false': [0.008320451106625826, 0.0012406741578937471], 'false,true': [0.028435115747228654, 0.0003070778744671506], 'false,true,true': [0.028435115747228654, nan], 'false,false,false': [nan, 0.0012406741578937471]}
{'': [0.02280357781904926, 0.03527548079713577], 'false': [0.016637425590410104, 0.054995259544099465], 'false,false': [nan, 0.05499525954409946], 'false,false,false': [nan, 0.054995259544099465], 'true': [0.005680386528565751, 0.013106705045461981], 'true,false': [1.0100949485817672e-06, 0.05697545811830499], 'true,false,false': [0.0, 0.06841265122908455], 'true,true': [0.005015535481439723, 0.008258823034678748]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 7.143
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.6914822684328455;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048774;  // std dev = 1.49e-08, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | else if ( follows(F, A), follows(G, F) )
%   | | | then return -0.07042249347191636;  // std dev = 0.964, 14.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=1 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995121;  // std dev = 1.83e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | else if ( follows(A, J) )
%   | | then return 0.1438632208137979;  // std dev = 0.452, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( recursion_accounttype(E, B), follows(E, A) )
%   | | then return 0.7194734122109543;  // std dev = 2.98e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.34433562315669086;  // std dev = 1.142, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return 0.7410595824184533;  // std dev = 0.037, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(A, F) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(F, G) )
%   | | | then return 0.7194734122109545;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.848648205127544;  // std dev = 0.022, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.13154044002111234;  // std dev = 0.090, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | else if ( tweets(A, I), follows(J, A) )
%   | | then return -0.13349284408716358;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | else return 0.3156477572655789;  // std dev = 0.491, 9.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5662828054904291;  // std dev = 0.059, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else return 0.717247451823388;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.681167562392297;  // std dev = 0.051, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5500298946068407;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.594282905279154;  // std dev = 0.163, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.11917237799664142;  // std dev = 0.123, 60.000 (wgt'ed) examples reached here.  /* #neg=60 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.0671894239290449;  // std dev = 1.026, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   | | | else return 0.23760824494557428;  // std dev = 1.320, 8.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.4224887849845342;  // std dev = 0.065, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( tweets(A, E) )
%   | | then if ( follows(F, A), follows(A, G) )
%   | | | then return 0.5791079263429606;  // std dev = 0.177, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.4559040050829414;  // std dev = 0.202, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.6174772906086661;  // std dev = 0.113, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.10581966508064257;  // std dev = 0.068, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return -0.12505799109851531;  // std dev = 0.046, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | else if ( follows(A, J) )
%   | | then if ( tweets(A, K) )
%   | | | then return -0.10193133139701276;  // std dev = 0.017, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.13949988826441387;  // std dev = 0.057, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | else return -0.2596761951164813;  // std dev = 0.172, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( tweets(A, E) )
%   | | then return 0.3172596856680874;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.3494827886724692;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.4096272292386841;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.31932434734299486;  // std dev = 0.025, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4183801190907832;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.3346382591463749;  // std dev = 0.110, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.0792121811872416;  // std dev = 0.684, 42.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=1 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.029199364043921833;  // std dev = 0.555, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
%   | | | else return 0.060478660582393595;  // std dev = 1.175, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( tweets(A, D) )
%   | then return 0.02107973411387213;  // std dev = 0.156, 38.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=12 */
%   | else if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.2747218251327831;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.08341443441941698;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.27990294630943124;  // std dev = 0.074, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return 0.2807327059229431;  // std dev = 0.085, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.5141065948900292;  // std dev = 0.108, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.09236365463148534;  // std dev = 0.030, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.189800497400139;  // std dev = 0.254, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.24227524155919397;  // std dev = 0.012, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(A, D), follows(D, E) )
%   | then if ( follows(F, A), follows(F, D) )
%   | | then if ( tweets(A, G), tweets(E, G) )
%   | | | then return -0.06350501700169414;  // std dev = 0.467, 27.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=2 */
%   | | | else return -0.19427340993769757;  // std dev = 0.641, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.018112442718683192;  // std dev = 0.529, 19.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=4 */
%   | | | else return 0.04714743132176122;  // std dev = 0.398, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( follows(I, A) )
%   | | then if ( follows(I, J), recursion_accounttype(J, B) )
%   | | | then return 0.2933122824387772;  // std dev = 0.257, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.0932074512049503;  // std dev = 0.005, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.04490883346156808;  // std dev = 0.416, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.010330466485693813;  // std dev = 0.832, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19145001515523455;  // std dev = 0.018, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.2453274344487758;  // std dev = 0.043, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(A, E), follows(E, F) )
%   | then if ( follows(G, A), follows(G, E) )
%   | | then if ( follows(E, A) )
%   | | | then return -0.07951304547714214;  // std dev = 0.028, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | | | else return -0.04607107470872056;  // std dev = 0.426, 15.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=2 */
%   | | else if ( recursion_accounttype(F, B) )
%   | | | then return 0.23122487687067342;  // std dev = 0.066, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.084060817347535;  // std dev = 0.031, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(I, A), tweets(I, H) )
%   | | | then return -0.08668872804099799;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.08878899485463787;  // std dev = 0.558, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else return 0.188970446142158;  // std dev = 0.564, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.08918130058059068;  // std dev = 0.289, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | else return 0.1571956928697087;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.16023210114596406;  // std dev = 0.082, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.26461171886724244;  // std dev = 0.153, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.07733806595929896;  // std dev = 0.016, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( tweets(A, I) )
%   | | | then return 0.006710665674736882;  // std dev = 0.771, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.2806391763536286;  // std dev = 0.121, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.08940908850147328;  // std dev = 0.070, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.2597687680286399;  // std dev = 0.138, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.14804513225402596;  // std dev = 0.019, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.19122327212791423;  // std dev = 0.051, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, C) )
%   | | then return -0.06718109227108054;  // std dev = 0.041, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07346915287323663;  // std dev = 0.003, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | | else return 0.11041205970236283;  // std dev = 0.356, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return 0.025679145384339228;  // std dev = 0.150, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I) )
%   | | | then return -0.0013539894601025577;  // std dev = 0.211, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return -0.035822023911076174;  // std dev = 0.231, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | | else return -0.04084072994938401;  // std dev = 0.241, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.794', 'seconds']
Refined model CLL: -0.103277


******************************************
Best model found
******************************************
Results 

CLL : -0.101274 

AUC ROC : 0.992327 

AUC PR : 0.32672 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 7.143 

Total Inference Time : 3.4944140911102295 

Total revision time: 14.50896085357666
Best scored revision CLL: -0.103277


Results 

CLL : -0.101274 

AUC ROC : 0.992327 

AUC PR : 0.32672 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 42.159727226257324 

Total Inference Time : 3.4944140911102295 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.615
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995117;  // std dev = 2.46e-07, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 4.71e-08, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
%   | | else return 0.034619523334806335;  // std dev = 0.381, 17.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=3 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.5248156017661789;  // std dev = 1.155, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.3581489350995122;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else return -0.1418510649004877;  // std dev = 2.11e-08, 26.000 (wgt'ed) examples reached here.  /* #neg=26 */
%   | else return 0.20950028645086372;  // std dev = 0.477, 37.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=13 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7267387546353268;  // std dev = 0.185, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.05730608604941188;  // std dev = 0.230, 62.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=5 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.04792874424610682;  // std dev = 1.251, 19.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=2 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.8306863976454834;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.11626052476184809;  // std dev = 3.400, 62.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5062156431062185;  // std dev = 1.292, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.6460797494917606;  // std dev = 0.131, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6813132012790366;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6460797494917606;  // std dev = 0.131, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5535716585626059;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03324538717983159;  // std dev = 2.538, 85.000 (wgt'ed) examples reached here.  /* #neg=76 #pos=9 */
%   | | | else return 0.14194952208406283;  // std dev = 2.893, 42.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=13 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5276144963542431;  // std dev = 2.064, 64.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=62 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12123623371665067;  // std dev = 0.082, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | | else return -0.13668700924858695;  // std dev = 0.022, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1686408891292934;  // std dev = 0.218, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3197538069225736;  // std dev = 0.266, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   | else return 0.46628809328285425;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29337052307896855;  // std dev = 0.018, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | else return 0.46628809328285425;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6677641759606381;  // std dev = 0.099, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.1052933493431735;  // std dev = 1.235, 114.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=2 */
%   | | else return 0.017385205793008743;  // std dev = 0.323, 31.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03752949258341887;  // std dev = 1.785, 85.000 (wgt'ed) examples reached here.  /* #neg=53 #pos=32 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.2580879641914981;  // std dev = 0.153, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5794393737024963;  // std dev = 0.488, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13258486715197976;  // std dev = 0.151, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.1321992669746725;  // std dev = 0.110, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2478242240736679;  // std dev = 1.558, 49.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=47 */
%   | else return -0.09138937946370654;  // std dev = 1.107, 93.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.03217763618289387;  // std dev = 1.534, 36.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=12 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1919605624768094;  // std dev = 0.050, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | else if ( follows(A, E) )
%   | | then return -0.08223828703056524;  // std dev = 0.810, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.057803186118721345;  // std dev = 0.120, 69.000 (wgt'ed) examples reached here.  /* #neg=64 #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.005390844398222887;  // std dev = 1.194, 29.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=6 */
%   | | | else return 0.08682475528114186;  // std dev = 1.649, 33.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=14 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1497750232913257;  // std dev = 0.174, 33.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=32 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2872582830972263;  // std dev = 0.590, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09523399672341464;  // std dev = 0.129, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.39029195330343336;  // std dev = 0.450, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12516760577583166;  // std dev = 0.259, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.1143784856447502;  // std dev = 1.463, 35.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=33 */
%   | | else return 0.15339825876538185;  // std dev = 0.195, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, C) )
%   | | then return -0.07965884571624744;  // std dev = 0.033, 72.000 (wgt'ed) examples reached here.  /* #neg=72 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.10836483608153846;  // std dev = 0.023, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.00847648948909364;  // std dev = 0.795, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   else if ( tweets(A, G) )
%   | then return -0.037675712873552356;  // std dev = 1.100, 23.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=5 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.13791318750355175;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.1244542847911125;  // std dev = 1.095, 21.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=12 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '7.900', 'seconds']
Parameter learned model CLL:-0.117941 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.46e-07, 0, 41], 'true,false,true': [4.71e-08, 45, 0], 'true,false,false': [0.381, 14, 3], 'false,true,true,true': [1.155, 2, 4], 'false,true,true,false': [0.707, 1, 1], 'false,true,false': [2.11e-08, 26, 0], 'false,false': [0.477, 24, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.185, 0, 37], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.23, 57, 5], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.251, 17, 2], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [3.4, 45, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.292, 2, 29], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.131, 0, 2], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.131, 0, 2], 'false,false,true,false': [0.0, 0, 6], 'false,false,false,true': [2.538, 76, 9], 'false,false,false,false': [2.893, 29, 13]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.064, 2, 62], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.082, 72, 0], 'false,true,false,false': [0.022, 14, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.218, 35, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.266, 0, 31], 'true,false': [0.0, 0, 1], 'false,true,true': [0.018, 0, 7], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [0.099, 0, 14], 'false,false,true,false': [1.235, 112, 2], 'false,false,false': [0.323, 25, 6]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.785, 53, 32], 'false,true': [0.153, 0, 10], 'false,false,true': [0.488, 0, 20], 'false,false,false,true': [0.151, 27, 0], 'false,false,false,false': [0.11, 29, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.558, 2, 47], 'true,false': [1.107, 90, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.534, 24, 12]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.05, 0, 35], 'true,false,true': [0.81, 1, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.12, 64, 5], 'false,false,false,true': [1.194, 23, 6], 'false,false,false,false': [1.649, 19, 14]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.174, 1, 32], 'false,true,true,true': [0.59, 0, 13], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.129, 80, 0], 'false,false,true': [0.45, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.259, 38, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.463, 2, 33], 'true,true,false': [0.195, 0, 8], 'true,false,true': [0.033, 72, 0], 'true,false,false,true': [0.023, 8, 0], 'true,false,false,false': [0.795, 10, 3], 'false,true': [1.1, 18, 5], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.095, 9, 12]}]
{'': [0.2446978980111234, 0.1892481650466172], 'true': [1.4730764034050857e-15, 0.046045785639958446], 'false': [0.12543252595155713, 0.2279035792549301], 'false,true': [0.23437499999999983, 1.708035422500241e-17], 'false,true,true': [0.22222222222222213, 0.25], 'true,false': [4.9343245538895844e-17, 0.14532871972318326]}
{'': [0.0009237410095082055, 0.1256337366958336], 'false': [0.05292863060680948, 0.17164869321001328], 'false,false': [0.08242460621334505, 0.19141851334293622], 'false,false,false': [0.0, 0.18640425272188701], 'false,false,true': [nan, 0.08242460621334505], 'false,true': [nan, 0.05292863060680948]}
{'': [0.051499410802311435, 0.13331070936525985], 'false': [nan, 0.13331070936525888], 'false,false': [0.0037440142632184648, 0.12341549160374077], 'false,false,false': [0.07576623605339665, 0.1993057782399953], 'true': [0.05387631259378559, 0.005981030397092635], 'true,true': [0.05387631259378559, nan], 'true,false': [0.008557746887356832, 0.0], 'false,false,true': [0.008557746887356832, -7.401486830834377e-17]}
{'': [0.06658615328437273, 0.0008892106682106579], 'false': [0.00011603780809848384, 0.0013568158680159577], 'false,false': [nan, 0.0013568158680159577], 'false,false,false': [nan, 0.0013568158680159577], 'false,true': [nan, 0.00011603780809848125], 'false,true,false': [9.278822672483133e-05, 3.574306691144938e-05]}
{'': [0.002857790288253559, 0.07844412695328312], 'false': [0.0033086774794780505, 0.07706161742785506], 'false,false': [0.0702092293401455, 0.10418519926485721], 'false,false,true': [0.000703595681197441, 0.013380547006015991], 'false,true': [4.3784930180090775e-05, 0.0], 'true': [0.002278967788023185, 0.0]}
{'': [0.03748198647818728, 0.09450800942583744], 'false': [0.0023548686376176796, 0.10183455224350846], 'false,false': [0.011883669984250477, 0.000619289133518826], 'true': [nan, 0.03748198647818737], 'true,false': [nan, 0.03748198647818728], 'false,false,false': [0.0008395111307059138, 0.00041418317166119767]}
{'': [0.051734695467960945, 0.06537701796099236], 'false': [nan, 0.06537701796099239], 'false,false': [nan, 0.06537701796099236], 'false,false,false': [nan, 0.06537701796099236], 'true': [0.04954477701801414, 0.013182695493711838]}
{'': [0.022791670223667862, 0.04286534155654827], 'false': [nan, 0.04286534155654807], 'false,false': [0.014480070293131263, 0.06847698804434803], 'false,false,false': [0.049160335831295726, 0.08235040571618259], 'true': [7.060562160664371e-05, 0.21862140678742936], 'true,false': [0.21862140678742936, nan]}
{'': [0.030210675883394968, 0.037769258526373285], 'false': [0.021509985692766596, 0.06163999159699971], 'false,false': [0.011916972627845008, 0.0017594915416509103], 'false,true': [0.02674087305167747, 0.0002093807594049951], 'false,true,true': [0.02674087305167747, nan], 'false,false,false': [nan, 0.0017594915416509103]}
{'': [0.029393269932640853, 0.06016558318565425], 'false': [0.052638239112478495, 0.054498361595664874], 'false,false': [0.0, 0.057085287941547914], 'false,false,false': [nan, 0.057085287941547866], 'true': [0.05086413378120287, 0.00787749715073486], 'true,true': [0.06112240999545234, 0.004744896406570966], 'true,false': [1.5019052167621678e-05, 0.033361209357234585], 'true,false,false': [6.818072974676403e-05, 0.04864850493182545]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,false;follows(F, A).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 7.865
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8303711573217337;  // std dev = 0.164, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.10570648658723465;  // std dev = 0.187, 83.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=3 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else return 0.2581489350995123;  // std dev = 0.490, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7329098641379517;  // std dev = 0.200, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E) )
%   | | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | | then return 0.7443356231566909;  // std dev = 0.068, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.12946397487782227;  // std dev = 0.000, 49.000 (wgt'ed) examples reached here.  /* #neg=49 */
%   | | else return -0.12946397487782219;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else if ( follows(G, A), follows(H, G) )
%   | | then if ( tweets(A, I) )
%   | | | then return -0.07064044546605744;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=1 */
%   | | | else return 0.15351515415177008;  // std dev = 0.693, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.14372129726668198;  // std dev = 3.014, 53.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.5589049353866516;  // std dev = 4.21e-08, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.3812675618602899;  // std dev = 0.608, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(F, A) )
%   | | then return 0.6612775408518754;  // std dev = 0.145, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5844980867529576;  // std dev = 0.068, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.11716161385333701;  // std dev = 0.037, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | | else return -0.03568177765934647;  // std dev = 1.636, 45.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=5 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.046933201736106704;  // std dev = 1.635, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
%   | | | else return 0.25257442894952203;  // std dev = 2.249, 26.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=12 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(E, D) )
%   | | then return 0.4181925113949303;  // std dev = 0.027, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return 0.22942675889717798;  // std dev = 0.991, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, F), follows(F, G) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.4973883505427737;  // std dev = 0.098, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.6302566828139345;  // std dev = 0.159, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.7405598114513952;  // std dev = 0.070, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(H, A) )
%   | then if ( tweets(A, I) )
%   | | then return -0.10774611780263332;  // std dev = 0.037, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return -0.11483185248568706;  // std dev = 0.052, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return -0.166754593522425;  // std dev = 0.194, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.321922947990258;  // std dev = 0.021, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | | else return 0.18006424586490793;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return 0.1363270472721209;  // std dev = 0.839, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.07685601049332358;  // std dev = 0.915, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3512781851509152;  // std dev = 0.090, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4770507865399856;  // std dev = 0.168, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.09721917082335726;  // std dev = 1.066, 124.000 (wgt'ed) examples reached here.  /* #neg=122 #pos=2 */
%   | | else if ( follows(J, A) )
%   | | | then return -0.025847190477444677;  // std dev = 0.585, 8.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=1 */
%   | | | else return 0.05065080433943314;  // std dev = 1.420, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.2630916301155255;  // std dev = 0.012, 27.000 (wgt'ed) examples reached here.  /* #pos=27 */
%   | | else return 0.11958496667771817;  // std dev = 0.641, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( tweets(A, F) )
%   | | then return -0.07019390061900367;  // std dev = 0.081, 64.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=3 */
%   | | else return -0.08923906742549646;  // std dev = 0.009, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.4428344162913369;  // std dev = 0.258, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.24652177279356824;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.3720948561873507;  // std dev = 0.127, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.45896878225190235;  // std dev = 1.061, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return -0.12564716378100294;  // std dev = 0.031, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(C, D) )
%   then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | then if ( follows(E, C), recursion_accounttype(C, B) )
%   | | then return 0.21163444980662593;  // std dev = 0.013, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | else return 0.4036527513627298;  // std dev = 0.122, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return -0.08434800314348025;  // std dev = 0.005, 69.000 (wgt'ed) examples reached here.  /* #neg=69 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( tweets(H, F), follows(G, H) )
%   | | | then return -0.04365227344857637;  // std dev = 0.798, 28.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=4 */
%   | | | else return -0.10519241644639048;  // std dev = 2.63e-09, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.02040035515563788;  // std dev = 0.445, 5.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=1 */
%   | else if ( follows(A, I) )
%   | | then if ( follows(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.2830023038871732;  // std dev = 0.111, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.12292165266813236;  // std dev = 0.025, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | else return 0.0370148389367285;  // std dev = 0.369, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( tweets(F, E), follows(F, A) )
%   | | | then return 0.1293487573024213;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.16265054707362034;  // std dev = 0.029, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.1850154775585413;  // std dev = 0.014, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | else return 0.3411206936711777;  // std dev = 0.056, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(H, A), tweets(H, G) )
%   | | then return -0.05638534685607064;  // std dev = 0.081, 74.000 (wgt'ed) examples reached here.  /* #neg=69 #pos=5 */
%   | | else return -0.029238046566372262;  // std dev = 0.242, 31.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=6 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then return -0.007170895301273788;  // std dev = 0.142, 29.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=8 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.025037574396017243;  // std dev = 0.339, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | | else return 0.048656240565467954;  // std dev = 1.115, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, D), recursion_accounttype(D, B) )
%   | | then return 0.16147592505107905;  // std dev = 0.005, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return 0.20935215622856415;  // std dev = 0.141, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return -0.10338875798989851;  // std dev = 0.834, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.15812936592098004;  // std dev = 0.082, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.33222839228368983;  // std dev = 0.339, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.07478967546234846;  // std dev = 0.006, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J) )
%   | | | then return 0.2726512759727329;  // std dev = 0.180, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.4399587370465989;  // std dev = 0.056, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return -0.11178856189934223;  // std dev = 0.029, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.10919937379800689;  // std dev = 0.164, 36.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=35 */
%   | | else return 0.21255598164778822;  // std dev = 0.068, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.05479030628835702;  // std dev = 0.082, 89.000 (wgt'ed) examples reached here.  /* #neg=86 #pos=3 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(G, H) )
%   | | | then return -0.04799262549471224;  // std dev = 0.956, 21.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=4 */
%   | | | else return -0.08416658331152506;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return 0.027802449224367715;  // std dev = 0.323, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.180754847858271;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.06553181886037707;  // std dev = 0.490, 12.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=7 */
%   | | | else return -0.026064143004800016;  // std dev = 0.953, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '27.460', 'seconds']
Refined model CLL: -0.105701


******************************************
Best model found
******************************************
Results 

CLL : -0.099179 

AUC ROC : 0.993356 

AUC PR : 0.367826 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 7.865 

Total Inference Time : 15.725415229797363 

Total revision time: 29.616611223220826
Best scored revision CLL: -0.105701


Results 

CLL : -0.099179 

AUC ROC : 0.993356 

AUC PR : 0.367826 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 57.26737759590149 

Total Inference Time : 15.725415229797363 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.871
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8427643197148973;  // std dev = 0.992, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.94e-08, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else return -0.041851064900487754;  // std dev = 0.300, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.7672398441904213;  // std dev = 0.953, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return -0.1418510649004877;  // std dev = 2.58e-08, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else return 0.14386322081379807;  // std dev = 0.452, 49.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=14 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7277753892454589;  // std dev = 0.195, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04835258038571449;  // std dev = 0.244, 110.000 (wgt'ed) examples reached here.  /* #neg=100 #pos=10 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.016871193667098765;  // std dev = 1.741, 31.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.771540016294631;  // std dev = 0.084, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.12225345800185199;  // std dev = 3.745, 78.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=22 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5726739085436594;  // std dev = 0.334, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7250502672394729;  // std dev = 0.220, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6125487625794158;  // std dev = 0.117, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6550014271807194;  // std dev = 0.138, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5571146920446247;  // std dev = 2.11e-08, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.035775807720402696;  // std dev = 3.339, 159.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=17 */
%   | | | else return 0.0560338425615699;  // std dev = 3.216, 65.000 (wgt'ed) examples reached here.  /* #neg=51 #pos=14 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5378838774381919;  // std dev = 1.967, 94.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=93 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12085102970511913;  // std dev = 0.072, 96.000 (wgt'ed) examples reached here.  /* #neg=96 */
%   | | | else return -0.12893921728740612;  // std dev = 0.028, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1584774770616231;  // std dev = 0.178, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.24706196309728282;  // std dev = 1.881, 54.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=50 */
%   | else return 0.4628539502183232;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.203457125660183;  // std dev = 0.952, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.4803077839973693;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6042929239413892;  // std dev = 1.056, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return -0.10503206829176827;  // std dev = 1.251, 167.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=2 */
%   | | else return 0.00831918543558435;  // std dev = 0.318, 38.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.01939556800068178;  // std dev = 2.454, 162.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=51 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1947314419783671;  // std dev = 0.985, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5491420340227994;  // std dev = 0.728, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.12222083762344917;  // std dev = 0.116, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | | | else return -0.1299856203716528;  // std dev = 0.122, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28800348381725965;  // std dev = 1.146, 74.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=73 */
%   | else return -0.08349281337329988;  // std dev = 1.248, 134.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=4 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.026077551542231472;  // std dev = 1.723, 53.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=16 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19593888591712727;  // std dev = 0.084, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | else if ( follows(A, E) )
%   | | then return 0.2557872409204526;  // std dev = 0.007, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03956120449948693;  // std dev = 0.146, 91.000 (wgt'ed) examples reached here.  /* #neg=81 #pos=10 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.03370910948896838;  // std dev = 1.909, 68.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=14 */
%   | | | else return 0.06422835839010227;  // std dev = 1.873, 44.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=15 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16398119913964454;  // std dev = 0.155, 52.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=51 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.21634029928495108;  // std dev = 1.529, 22.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=20 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0913382239317332;  // std dev = 0.087, 121.000 (wgt'ed) examples reached here.  /* #neg=121 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.33381782365913465;  // std dev = 1.224, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10913308450282698;  // std dev = 0.183, 48.000 (wgt'ed) examples reached here.  /* #neg=48 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.13409258711758487;  // std dev = 1.520, 55.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=52 */
%   | | else return 0.13331545179595986;  // std dev = 0.847, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( follows(A, C) )
%   | | then return -0.08082464632005845;  // std dev = 0.024, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09590686288528544;  // std dev = 0.017, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.006741325146199656;  // std dev = 0.943, 22.000 (wgt'ed) examples reached here.  /* #neg=18 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return -0.03127179096016347;  // std dev = 1.149, 50.000 (wgt'ed) examples reached here.  /* #neg=39 #pos=11 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.17104305410527676;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.024862655490606535;  // std dev = 1.539, 43.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=13 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.110', 'seconds']
Parameter learned model CLL:-0.111984 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [0.992, 1, 64], 'true,false,true': [8.94e-08, 99, 0], 'true,false,false': [0.3, 36, 4], 'false,true,true,true': [0.953, 1, 10], 'false,true,true,false': [0.0, 0, 1], 'false,true,false': [2.58e-08, 29, 0], 'false,false': [0.452, 35, 14]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.195, 0, 54], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.244, 100, 10], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.741, 27, 4], 'false,false,false,true': [0.084, 0, 3], 'false,false,false,false': [3.745, 56, 22]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.334, 0, 45], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.22, 0, 3], 'true,false,false': [0.117, 0, 3], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.138, 0, 2], 'false,false,true,false': [2.11e-08, 0, 9], 'false,false,false,true': [3.339, 142, 17], 'false,false,false,false': [3.216, 51, 14]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.967, 1, 93], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.072, 96, 0], 'false,true,false,false': [0.028, 23, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.178, 50, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.881, 4, 50], 'true,false': [0.0, 0, 1], 'false,true,true': [0.952, 1, 10], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.056, 1, 22], 'false,false,true,false': [1.251, 165, 2], 'false,false,false': [0.318, 31, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.454, 111, 51], 'false,true': [0.985, 1, 13], 'false,false,true': [0.728, 0, 29], 'false,false,false,true': [0.116, 36, 0], 'false,false,false,false': [0.122, 40, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.146, 1, 73], 'true,false': [1.248, 130, 4], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.723, 37, 16]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.084, 0, 52], 'true,false,true': [0.007, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.146, 81, 10], 'false,false,false,true': [1.909, 54, 14], 'false,false,false,false': [1.873, 29, 15]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.155, 1, 51], 'false,true,true,true': [1.529, 2, 20], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.087, 121, 0], 'false,false,true': [1.224, 1, 22], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.183, 48, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.52, 3, 52], 'true,true,false': [0.847, 1, 12], 'true,false,true': [0.024, 99, 0], 'true,false,false,true': [0.017, 27, 0], 'true,false,false,false': [0.943, 18, 4], 'false,true': [1.149, 39, 11], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.539, 30, 13]}]
{'': [0.22222222222222235, 0.20061728395061834], 'true': [0.015147928994082021, 0.027948863930438283], 'false': [0.1963117192147526, 0.20408163265306073], 'false,true': [0.07638888888888877, 2.2970131543968756e-17], 'false,true,true': [0.0826446280991734, 0.0], 'true,false': [8.074349270001139e-17, 0.08999999999999984]}
{'': [0.0007050391896953951, 0.12008384208344768], 'false': [0.059431854286739104, 0.1685798028357945], 'false,false': [0.09777503893835356, 0.18830844731551483], 'false,false,false': [0.002324168483185026, 0.17984787270611421], 'false,false,true': [nan, 0.09777503893835356], 'false,true': [nan, 0.059431854286739104]}
{'': [0.004740652568168183, 0.1084885548749461], 'false': [nan, 0.10848855487494609], 'false,false': [0.0031675414597038616, 0.09769368157041015], 'false,false,false': [0.0701276622554229, 0.15914131248333355], 'true': [0.0024814144851544504, 0.013531880367955607], 'true,false': [0.016201555264222955, 0.004533911196299867], 'false,false,true': [0.009581812915603949, 4.9343245538895844e-17], 'true,true': [0.0024814144851544504, nan]}
{'': [0.04115856694987002, 0.0005006376431967697], 'false': [5.994424315776555e-05, 0.0006337137495423262], 'false,false': [nan, 0.0006337137495423262], 'false,false,false': [nan, 0.0006337137495423262], 'false,true': [nan, 5.994424315776928e-05], 'false,true,false': [5.367346454993038e-05, 3.334311498201394e-05]}
{'': [0.06519258195245033, 0.07645845311932202], 'false': [0.0813398875415813, 0.07329474970736402], 'false,true': [0.08234723218748968, 0.0], 'false,false': [0.06763944626209763, 0.10094171857539573], 'false,false,true': [0.04847340719942727, 0.009372423932127344], 'true': [0.06555319413941327, 0.0]}
{'': [0.037180020709474584, 0.09521828813066102], 'false': [0.0693466548269737, 0.09654000931307782], 'false,false': [0.018300075968763523, 0.00038774282658170743], 'true': [nan, 0.037180020709474515], 'true,false': [nan, 0.037180020709474584], 'false,false,false': [0.00037344652915416443, 0.000372050196364318]}
{'': [0.0454347003210157, 0.0560284190391779], 'false': [nan, 0.05602841903917794], 'false,false': [nan, 0.0560284190391779], 'false,false,false': [nan, 0.0560284190391779], 'true': [0.017747755844963704, 0.011624972243153403]}
{'': [0.0002597981471972815, 0.04658000041752998], 'false': [nan, 0.04658000041753016], 'false,false': [0.021410735795750823, 0.0661491973176594], 'false,false,false': [0.0535770822624049, 0.07975526862408033], 'true': [0.00013616652089619964, 2.505504170327577e-05], 'true,false': [2.505504170327577e-05, nan]}
{'': [0.023952570950736028, 0.04196780240514361], 'false': [0.028718016633514924, 0.06455078251005472], 'false,false': [0.0651622441716499, 0.000698260013808287], 'false,true': [0.10622179795823694, 6.240869843538577e-05], 'false,true,true': [0.10622179795823694, nan], 'false,false,false': [nan, 0.000698260013808287]}
{'': [0.02788593273758608, 0.04036602958042976], 'false': [0.026426768464631167, 0.05432572534259248], 'false,false': [0.0, 0.05510346182815851], 'false,false,false': [nan, 0.0551034618281585], 'true': [0.04454264134982179, 0.006807428970305633], 'true,true': [0.04202239087678895, 0.055204751024637726], 'true,false': [6.014705689906937e-06, 0.020132615107033226], 'true,false,false': [1.1269207790773237e-05, 0.04044611020094723]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 7.107
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8581489350995123;  // std dev = 8.43e-08, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.6581489350995122;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.7470378239884011;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return -0.11637335789411853;  // std dev = 0.158, 157.000 (wgt'ed) examples reached here.  /* #neg=153 #pos=4 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B), follows(J, I) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else return 0.3581489350995123;  // std dev = 0.500, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D) )
%   | then return 0.7263943239236113;  // std dev = 0.210, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else return 0.6285643213018633;  // std dev = 0.287, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.5580193346218546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.06540316799678499;  // std dev = 2.052, 83.000 (wgt'ed) examples reached here.  /* #neg=77 #pos=6 */
%   | | | else return -0.1282665301106093;  // std dev = 1.49e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( tweets(A, J), follows(A, K) )
%   | | | then return 0.2717334698893906;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return -0.07857453910634817;  // std dev = 1.194, 35.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=2 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7194734122109544;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.10259843965153341;  // std dev = 3.532, 79.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=22 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5663110468639497;  // std dev = 0.171, 45.000 (wgt'ed) examples reached here.  /* #pos=45 */
%   | else if ( follows(E, A) )
%   | | then return 0.7195197966746109;  // std dev = 0.209, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.3053664367462845;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.6601970453147574;  // std dev = 0.151, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5563268359995759;  // std dev = 0.023, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10658878996044939;  // std dev = 0.867, 66.000 (wgt'ed) examples reached here.  /* #neg=65 #pos=1 */
%   | | | else return -0.023662606322267528;  // std dev = 2.374, 70.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=8 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.046251206101223845;  // std dev = 2.214, 41.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=9 */
%   | | | else return 0.09429808934914725;  // std dev = 2.749, 45.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=13 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.4060265699306516;  // std dev = 0.928, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | | | else return 0.5693876558860884;  // std dev = 0.247, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.07926470319138659;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.43494242607653727;  // std dev = 0.062, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(A, G), follows(G, H) )
%   | | | then return 0.6638503197352171;  // std dev = 0.925, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | | | else return 0.7703188499918093;  // std dev = 0.110, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(I, A) )
%   | then return -0.11259150353416744;  // std dev = 0.007, 128.000 (wgt'ed) examples reached here.  /* #neg=128 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then return -0.145069152596798;  // std dev = 0.019, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.19049172834118655;  // std dev = 0.040, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A) )
%   | | then return 0.3350213022723731;  // std dev = 0.046, 47.000 (wgt'ed) examples reached here.  /* #pos=47 */
%   | | else return 0.1072183862505397;  // std dev = 0.979, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return -0.13498227265700874;  // std dev = 0.863, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(G, F), follows(F, G) )
%   | | then return 0.31517399381553707;  // std dev = 0.031, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return 0.5236921349798604;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.6248810549286259;  // std dev = 0.098, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return -0.10490007384182813;  // std dev = 0.135, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0428924225638855;  // std dev = 2.251, 61.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=16 */
%   | | | else return -0.02016559863009971;  // std dev = 1.712, 31.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.2095935884508693;  // std dev = 0.979, 24.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=23 */
%   | | | else return 0.25126025511753586;  // std dev = 1.49e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.2849074081367643;  // std dev = 0.027, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( tweets(A, G) )
%   | | then return -0.05629134874155061;  // std dev = 0.139, 91.000 (wgt'ed) examples reached here.  /* #neg=85 #pos=6 */
%   | | else return -0.08954047902155063;  // std dev = 0.014, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.27800222855562806;  // std dev = 0.079, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(J, A), tweets(A, K) )
%   | | | then return 0.24353254273758757;  // std dev = 0.908, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.5232736852741594;  // std dev = 0.285, 26.000 (wgt'ed) examples reached here.  /* #pos=26 */
%   | | else return -0.1268746328400542;  // std dev = 0.027, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.21991440589257125;  // std dev = 0.039, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | else if ( follows(A, E) )
%   | | then return -0.3046176815480258;  // std dev = 1.003, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | else return 0.20459168816297216;  // std dev = 0.015, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), follows(G, A) )
%   | | then return -0.08118294207763518;  // std dev = 0.098, 92.000 (wgt'ed) examples reached here.  /* #neg=90 #pos=2 */
%   | | else return 0.0038206380203798487;  // std dev = 0.234, 54.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=12 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.21915093529219226;  // std dev = 1.338, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return -0.11482769649640723;  // std dev = 0.024, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.1042019238722153;  // std dev = 1.212, 22.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=10 */
%   | | | else return 0.12436793484609383;  // std dev = 0.989, 9.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.18527543249481196;  // std dev = 0.035, 54.000 (wgt'ed) examples reached here.  /* #pos=54 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.2707747039039368;  // std dev = 0.015, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.44979214302513826;  // std dev = 0.175, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.08609791771695481;  // std dev = 0.720, 103.000 (wgt'ed) examples reached here.  /* #neg=102 #pos=1 */
%   | | | else return -0.054032827245841505;  // std dev = 0.575, 23.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=1 */
%   | else if ( tweets(A, H) )
%   | | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.16393483431513683;  // std dev = 1.383, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | | else return -0.10334768577857019;  // std dev = 0.023, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.017760219724304666;  // std dev = 1.318, 32.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=10 */
%   | | | else return 0.07149249717289333;  // std dev = 1.008, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.15868576639198975;  // std dev = 0.036, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return -0.010122508959879132;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.15654415770678753;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.26318693570438395;  // std dev = 0.079, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.2530552390187529;  // std dev = 0.115, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return -0.07761219749185116;  // std dev = 0.102, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.2717990194934595;  // std dev = 0.952, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.42261194087622206;  // std dev = 0.139, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.12574068586699905;  // std dev = 0.041, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.12023943448594661;  // std dev = 0.139, 47.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=46 */
%   | | else return 0.19779899897052886;  // std dev = 0.090, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return -0.05944179707331882;  // std dev = 0.073, 134.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.23934804678186827;  // std dev = 0.075, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return -0.08580482480691382;  // std dev = 0.000, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return -0.044982380751214204;  // std dev = 0.092, 9.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=1 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.23543095705058525;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.0365312397200666;  // std dev = 0.923, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
%   | | | else return -0.014366701658671082;  // std dev = 0.975, 16.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.438', 'seconds']
Refined model CLL: -0.108523


******************************************
Best model found
******************************************
Results 

CLL : -0.105421 

AUC ROC : 0.993041 

AUC PR : 0.392122 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 7.107 

Total Inference Time : 9.30554747581482 

Total revision time: 24.76267130661011
Best scored revision CLL: -0.108523


Results 

CLL : -0.105421 

AUC ROC : 0.993041 

AUC PR : 0.392122 

Precision : 0.33871 

Recall : 1.0 

F1 : 0.506024 

Total Learning Time : 52.41343767929077 

Total Inference Time : 9.30554747581482 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.241
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8337586911970732;  // std dev = 1.397, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004878;  // std dev = 0.000, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
%   | | else return -0.05094197399139684;  // std dev = 0.287, 44.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.14185106490048766;  // std dev = 5.58e-08, 54.000 (wgt'ed) examples reached here.  /* #neg=54 */
%   | else return 0.2110901115701006;  // std dev = 0.478, 51.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=18 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7136194679595951;  // std dev = 1.016, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04282380226490182;  // std dev = 0.252, 144.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=14 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.03242166897507604;  // std dev = 1.759, 36.000 (wgt'ed) examples reached here.  /* #neg=32 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7353290214274162;  // std dev = 0.103, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1189369226839528;  // std dev = 4.507, 116.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=33 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5450052212229123;  // std dev = 1.215, 55.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=53 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A) )
%   | | then return 0.7293354774729269;  // std dev = 0.218, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.4451815297050085;  // std dev = 0.965, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.6276103827444784;  // std dev = 0.159, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5628217197256816;  // std dev = 4.21e-08, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.00367633373717712;  // std dev = 4.150, 193.000 (wgt'ed) examples reached here.  /* #neg=165 #pos=28 */
%   | | | else return 0.1274682114703106;  // std dev = 3.460, 60.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=18 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5432246088536961;  // std dev = 2.224, 126.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=124 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12279941291972969;  // std dev = 0.065, 152.000 (wgt'ed) examples reached here.  /* #neg=152 */
%   | | | else return -0.13775701184147202;  // std dev = 0.031, 36.000 (wgt'ed) examples reached here.  /* #neg=36 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.17287170005300914;  // std dev = 0.274, 64.000 (wgt'ed) examples reached here.  /* #neg=64 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.24917163231429518;  // std dev = 2.182, 67.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=62 */
%   | else return 0.04032041375549886;  // std dev = 0.602, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29680171971676883;  // std dev = 0.018, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.49162266263340515;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5393253948386424;  // std dev = 1.645, 36.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=33 */
%   | | | else return -0.1069833553941853;  // std dev = 1.423, 191.000 (wgt'ed) examples reached here.  /* #neg=188 #pos=3 */
%   | | else return 0.013755535135753094;  // std dev = 0.311, 54.000 (wgt'ed) examples reached here.  /* #neg=44 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.04766033601516363;  // std dev = 2.614, 171.000 (wgt'ed) examples reached here.  /* #neg=108 #pos=63 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.258252227589361;  // std dev = 0.243, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4899372547953397;  // std dev = 1.413, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.13479583829637373;  // std dev = 0.196, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | | else return -0.13676776858415915;  // std dev = 0.174, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.29155536838027685;  // std dev = 1.391, 98.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=97 */
%   | else return -0.09322467013517147;  // std dev = 1.398, 213.000 (wgt'ed) examples reached here.  /* #neg=208 #pos=5 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.002184214301280698;  // std dev = 2.268, 78.000 (wgt'ed) examples reached here.  /* #neg=56 #pos=22 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17769821961540194;  // std dev = 0.994, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | else if ( follows(A, E) )
%   | | then return 0.2903383936826777;  // std dev = 0.051, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.05377250040412843;  // std dev = 0.149, 145.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=14 */
%   | | else if ( tweets(A, G) )
%   | | | then return 6.688132310351181E-4;  // std dev = 1.883, 105.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=25 */
%   | | | else return 0.04507330307965003;  // std dev = 2.165, 61.000 (wgt'ed) examples reached here.  /* #neg=42 #pos=19 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1265332893940695;  // std dev = 0.235, 67.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=63 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2979578602444238;  // std dev = 0.797, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09407929491467143;  // std dev = 0.106, 163.000 (wgt'ed) examples reached here.  /* #neg=163 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.34788026093347796;  // std dev = 1.310, 34.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=33 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11700025663181157;  // std dev = 0.282, 79.000 (wgt'ed) examples reached here.  /* #neg=79 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.134686598169757;  // std dev = 1.960, 68.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=64 */
%   | | else return 0.16291098113352145;  // std dev = 0.353, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else if ( follows(A, C) )
%   | | then return -0.08368521486260663;  // std dev = 0.037, 126.000 (wgt'ed) examples reached here.  /* #neg=126 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09648281035081717;  // std dev = 0.017, 23.000 (wgt'ed) examples reached here.  /* #neg=23 */
%   | | | else return -0.005116332949963381;  // std dev = 0.951, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return -7.100734702281214E-4;  // std dev = 1.589, 63.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=22 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.27376342505543394;  // std dev = 0.681, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.006660371275862934;  // std dev = 1.842, 65.000 (wgt'ed) examples reached here.  /* #neg=48 #pos=17 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.631', 'seconds']
Parameter learned model CLL:-0.112567 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.397, 2, 80], 'true,false,true': [0.0, 123, 0], 'true,false,false': [0.287, 40, 4], 'false,true,true,true': [0.0, 0, 20], 'false,true,true,false': [0.816, 1, 2], 'false,true,false': [5.58e-08, 54, 0], 'false,false': [0.478, 33, 18]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.016, 1, 66], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.252, 130, 14], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.759, 32, 4], 'false,false,false,true': [0.103, 0, 7], 'false,false,false,false': [4.507, 83, 33]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.215, 2, 53], 'true,true,false': [0.0, 0, 0], 'true,false,true': [0.218, 0, 3], 'true,false,false': [0.965, 1, 7], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.159, 0, 3], 'false,false,true,false': [4.21e-08, 0, 12], 'false,false,false,true': [4.15, 165, 28], 'false,false,false,false': [3.46, 42, 18]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.224, 2, 124], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.065, 152, 0], 'false,true,false,false': [0.031, 36, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.274, 64, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [2.182, 5, 62], 'true,false': [0.602, 1, 1], 'false,true,true': [0.018, 0, 14], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.645, 3, 33], 'false,false,true,false': [1.423, 188, 3], 'false,false,false': [0.311, 44, 10]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.614, 108, 63], 'false,true': [0.243, 0, 17], 'false,false,true': [1.413, 1, 44], 'false,false,false,true': [0.196, 51, 0], 'false,false,false,false': [0.174, 43, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.391, 1, 97], 'true,false': [1.398, 208, 5], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.268, 56, 22]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.994, 1, 64], 'true,false,true': [0.051, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.149, 131, 14], 'false,false,false,true': [1.883, 80, 25], 'false,false,false,false': [2.165, 42, 19]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.235, 4, 63], 'false,true,true,true': [0.797, 0, 28], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.106, 163, 0], 'false,false,true': [1.31, 1, 33], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.282, 79, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.96, 4, 64], 'true,true,false': [0.353, 0, 16], 'true,false,true': [0.037, 126, 0], 'true,false,false,true': [0.017, 23, 0], 'true,false,false,false': [0.951, 19, 4], 'false,true': [1.589, 41, 22], 'false,false,true': [0.681, 1, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.842, 48, 17]}]
{'': [0.22354478153578236, 0.21484375000000128], 'true': [0.023795359904817976, 0.02337839291476917], 'false': [0.20408163265306214, 0.2283737024221448], 'false,true': [0.04158790170132359, 5.756711979537848e-17], 'false,true,true': [-8.881784197001253e-17, 0.22222222222222224], 'true,false': [-3.6104813808948184e-18, 0.0826446280991734]}
{'': [0.015393777881694338, 0.12486359362511264], 'false': [0.06338616685958404, 0.1691782378459976], 'false,false': [0.08597776651311947, 0.18565961956670332], 'false,false,false': [0.001508402061751227, 0.17514963583558063], 'false,false,true': [nan, 0.08597776651311947], 'false,true': [nan, 0.06338616685958404]}
{'': [0.03994695281118483, 0.1278966750542326], 'false': [nan, 0.1278966750542334], 'false,false': [0.0023506396792275434, 0.11851031444250283], 'false,false,false': [0.08924810354317433, 0.19951698965205553], 'true': [0.026834749796767324, 0.10509254947707043], 'true,false': [0.015909865740716993, 0.11651511059672312], 'true,true': [0.026834749796767324, nan], 'false,false,true': [0.008395141711526296, 1.4802973661668753e-16]}
{'': [0.03926036437866586, 0.0007661427666141907], 'false': [6.216475275832897e-05, 0.0011714707129998544], 'false,false': [nan, 0.0011714707129998544], 'false,false,false': [nan, 0.0011714707129998544], 'false,true': [nan, 6.216475275833606e-05], 'false,true,false': [2.787691738157107e-05, 2.6047717724843784e-05]}
{'': [0.07548215549374476, 0.08118370393277456], 'false': [0.002382156186357894, 0.08049605214547031], 'false,false': [0.07659179151823499, 0.09663962688947418], 'false,false,true': [0.07520697262192606, 0.010607253743615071], 'true': [0.07105583926846698, 0.1814092315033892], 'false,true': [2.19635464073458e-05, 0.0]}
{'': [0.039968718399715684, 0.09353242150882607], 'false': [0.0034763402122827986, 0.10055404671556814], 'false,false': [0.04436596279896092, 0.0007341073588050333], 'true': [nan, 0.039968718399715615], 'true,false': [nan, 0.039968718399715684], 'false,false,false': [0.0007546919356425102, 0.0007075833702529394]}
{'': [0.04445524626915164, 0.06596560931759271], 'false': [nan, 0.06596560931759267], 'false,false': [nan, 0.06596560931759271], 'false,false,false': [nan, 0.06596560931759271], 'true': [0.01974552614747349, 0.009169836889482662]}
{'': [0.015152839164406316, 0.03838206211248386], 'false': [nan, 0.0383820621124835], 'false,false': [0.022341972721670097, 0.05005863128300838], 'false,false,false': [0.03376576938875291, 0.07685652464894735], 'true': [0.01520074121280312, 0.0012869543392130117], 'true,false': [0.0012869543392130117, nan]}
{'': [0.05541720800847173, 0.03783550480616782], 'false': [0.022612690213220786, 0.06134305874548214], 'false,false': [0.0504470587323606, 0.00100705655406235], 'false,true': [0.022686514115469132, 6.907860404707227e-05], 'false,true,true': [0.022686514115469132, nan], 'false,false,false': [nan, 0.00100705655406235]}
{'': [0.029770479996779717, 0.050222051053424144], 'false': [0.04010260938767404, 0.05964339722844115], 'false,false': [0.232084441568719, 0.052207846065275766], 'false,false,false': [nan, 0.05220784606527568], 'true': [0.04732358212197735, 0.006037103075470397], 'true,true': [0.056471358137768816, 0.0078006546028327635], 'true,false': [1.0865772106156901e-05, 0.021751516704089775], 'true,false,false': [1.2116175199366305e-05, 0.03931700063665982]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true


Refining candidate
***************************
Model training time 20.68
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8458032560871667;  // std dev = 0.110, 81.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=80 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048788;  // std dev = 0.000, 130.000 (wgt'ed) examples reached here.  /* #neg=130 */
%   | | else return -0.041851064900487754;  // std dev = 0.300, 40.000 (wgt'ed) examples reached here.  /* #neg=36 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8105298874804645;  // std dev = 0.976, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return -0.14185106490048768;  // std dev = 3.94e-08, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(I, H), recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.1418510649004877;  // std dev = 1.83e-08, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
%   | | else return 0.40360348055405776;  // std dev = 0.498, 11.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then return 0.7019583934142873;  // std dev = 0.140, 50.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=49 */
%   | else return 0.7385712274314213;  // std dev = 0.188, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.7219583934142875;  // std dev = 5.16e-08, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.12544463852839108;  // std dev = 7.60e-08, 98.000 (wgt'ed) examples reached here.  /* #neg=98 */
%   | | else return -0.13070660294416106;  // std dev = 0.150, 29.000 (wgt'ed) examples reached here.  /* #neg=29 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( tweets(A, J) )
%   | | | then return -0.0527504318267114;  // std dev = 1.580, 34.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=3 */
%   | | | else return 0.1494311195113792;  // std dev = 0.701, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7276246991268841;  // std dev = 0.009, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return 0.1213937719696468;  // std dev = 4.222, 113.000 (wgt'ed) examples reached here.  /* #neg=80 #pos=33 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.5701997558654925;  // std dev = 0.355, 63.000 (wgt'ed) examples reached here.  /* #pos=63 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then return 0.6194237037719396;  // std dev = 0.161, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.47677540684184433;  // std dev = 0.266, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else if ( follows(F, A) )
%   | | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | | then return 0.6054380697903112;  // std dev = 0.340, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | | else return -0.11817834685575167;  // std dev = 0.157, 173.000 (wgt'ed) examples reached here.  /* #neg=173 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.09321785375102552;  // std dev = 3.423, 83.000 (wgt'ed) examples reached here.  /* #neg=60 #pos=23 */
%   | | | else return 0.18067977162270807;  // std dev = 2.323, 25.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( tweets(D, F), recursion_accounttype(E, B) )
%   | | then if ( follows(A, G) )
%   | | | then return 0.4183543605530988;  // std dev = 0.043, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.3377388568506231;  // std dev = 1.260, 16.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=14 */
%   | | else return 0.6581062645863452;  // std dev = 0.316, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, H) )
%   | | | then return 0.13614764265560794;  // std dev = 1.193, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | | else return 0.49241138567677006;  // std dev = 0.169, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.6877864301461614;  // std dev = 0.182, 34.000 (wgt'ed) examples reached here.  /* #pos=34 */
%   else if ( follows(J, A) )
%   | then if ( tweets(A, K) )
%   | | then return -0.10563796497021401;  // std dev = 0.105, 135.000 (wgt'ed) examples reached here.  /* #neg=135 */
%   | | else return -0.1112469132610895;  // std dev = 0.097, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | else return -0.17010576215546186;  // std dev = 0.346, 86.000 (wgt'ed) examples reached here.  /* #neg=86 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, D) )
%   | | then return 0.3234809791454429;  // std dev = 0.008, 53.000 (wgt'ed) examples reached here.  /* #pos=53 */
%   | | else return 0.49556162122098807;  // std dev = 0.244, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.24405766619396582;  // std dev = 0.324, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.34410201921106776;  // std dev = 0.027, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | else return 0.4491933809327554;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(G, A) )
%   | | then if ( follows(H, G), follows(H, A) )
%   | | | then return -0.09057485792153257;  // std dev = 0.410, 88.000 (wgt'ed) examples reached here.  /* #neg=87 #pos=1 */
%   | | | else return -0.024716912209717334;  // std dev = 1.533, 79.000 (wgt'ed) examples reached here.  /* #neg=67 #pos=12 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return 0.05833103631347605;  // std dev = 2.647, 77.000 (wgt'ed) examples reached here.  /* #neg=54 #pos=23 */
%   | | | else return 0.005476082550968331;  // std dev = 2.039, 39.000 (wgt'ed) examples reached here.  /* #neg=29 #pos=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.2569944555282239;  // std dev = 0.007, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else if ( follows(D, F), follows(F, A) )
%   | | | then return 0.0906816322286806;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.25734829889534727;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( tweets(A, G) )
%   | | then return -0.052644596876336956;  // std dev = 0.111, 121.000 (wgt'ed) examples reached here.  /* #neg=111 #pos=10 */
%   | | else return -0.08633883290512538;  // std dev = 0.010, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.27929156560416457;  // std dev = 0.041, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.34053442880887186;  // std dev = 0.233, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.49792657248804534;  // std dev = 0.878, 37.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=36 */
%   | | else return -0.13646663558492503;  // std dev = 0.034, 123.000 (wgt'ed) examples reached here.  /* #neg=123 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(E, C) )
%   | then if ( follows(E, A), tweets(C, F) )
%   | | then return 0.16006458609848234;  // std dev = 0.227, 36.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=34 */
%   | | else return 0.20628608872461535;  // std dev = 0.015, 18.000 (wgt'ed) examples reached here.  /* #pos=18 */
%   | else return 0.23836662404867365;  // std dev = 0.028, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return 0.18562354774428694;  // std dev = 1.344, 17.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=15 */
%   | | | else return 0.35669215632884504;  // std dev = 0.372, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | else return -0.09362767636531194;  // std dev = 0.017, 185.000 (wgt'ed) examples reached here.  /* #neg=185 */
%   | else if ( follows(A, J), follows(K, A) )
%   | | then return -0.08038096123365074;  // std dev = 0.007, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | else if ( follows(A, L) )
%   | | | then return 0.013135281620607531;  // std dev = 1.432, 43.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=12 */
%   | | | else return 0.04005025811228925;  // std dev = 1.381, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then if ( tweets(F, G), recursion_accounttype(F, B) )
%   | | | then return 0.13417930790671845;  // std dev = 1.376, 40.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=38 */
%   | | | else return -0.07231639046841976;  // std dev = 0.821, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.18905413670837098;  // std dev = 0.017, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | else return 0.25554299511731227;  // std dev = 0.027, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(H, A) )
%   | then return -0.04720646101222513;  // std dev = 0.113, 196.000 (wgt'ed) examples reached here.  /* #neg=178 #pos=18 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.3004704333348977;  // std dev = 0.371, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return -0.11811770744963164;  // std dev = 0.039, 50.000 (wgt'ed) examples reached here.  /* #neg=50 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.08107706339707464;  // std dev = 0.911, 18.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=3 */
%   | | | else return 0.050139327062184554;  // std dev = 1.360, 18.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then return 0.17211954002818236;  // std dev = 0.031, 56.000 (wgt'ed) examples reached here.  /* #pos=56 */
%   | else return 0.15057893846862397;  // std dev = 0.027, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(G, A), recursion_accounttype(G, B) )
%   | | | then return 0.09856969920684461;  // std dev = 0.970, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return 0.24635694031587407;  // std dev = 1.033, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return -0.07428604619105064;  // std dev = 0.007, 165.000 (wgt'ed) examples reached here.  /* #neg=165 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then if ( follows(A, I) )
%   | | | then return 0.27535541601311836;  // std dev = 0.165, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | | else return 0.41609750077181035;  // std dev = 0.183, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.10664971629457198;  // std dev = 0.052, 55.000 (wgt'ed) examples reached here.  /* #neg=55 */
%   | | | else return -0.17100845355837568;  // std dev = 0.259, 25.000 (wgt'ed) examples reached here.  /* #neg=25 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.12855205226037095;  // std dev = 0.123, 65.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=64 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.16147042847256932;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.18345316103771617;  // std dev = 0.961, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | else return -0.06211204540103751;  // std dev = 0.054, 181.000 (wgt'ed) examples reached here.  /* #neg=177 #pos=4 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return -0.08436853128822297;  // std dev = 0.406, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return -0.0352292729807445;  // std dev = 0.705, 32.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=6 */
%   | | | else return 0.03428158950010468;  // std dev = 0.999, 41.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=17 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.03736257698425385;  // std dev = 0.434, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.015481744617090027;  // std dev = 1.107, 22.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '15.270', 'seconds']
Refined model CLL: -0.105417


******************************************
Best model found
******************************************
Results 

CLL : -0.100825 

AUC ROC : 0.992694 

AUC PR : 0.350358 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 20.68 

Total Inference Time : 16.731404304504395 

Total revision time: 47.79198836898804
Best scored revision CLL: -0.105417


Results 

CLL : -0.100825 

AUC ROC : 0.992694 

AUC PR : 0.350358 

Precision : 0.341463 

Recall : 1.0 

F1 : 0.509091 

Total Learning Time : 75.4427547416687 

Total Inference Time : 16.731404304504395 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.619
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.830111551921941;  // std dev = 1.708, 107.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=104 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048818;  // std dev = 0.000, 164.000 (wgt'ed) examples reached here.  /* #neg=164 */
%   | | else return -0.06777699082641366;  // std dev = 0.262, 54.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=4 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8126943896449667;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.8581489350995122;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.14185106490048768;  // std dev = 4.94e-08, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   | else return 0.2232283001788766;  // std dev = 0.481, 63.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=23 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7284173469110135;  // std dev = 0.197, 85.000 (wgt'ed) examples reached here.  /* #pos=85 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.026301717541786902;  // std dev = 0.273, 163.000 (wgt'ed) examples reached here.  /* #neg=144 #pos=19 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.06365211827827541;  // std dev = 1.793, 53.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=4 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.5586128288748153;  // std dev = 1.241, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | | else return 0.10290814872969738;  // std dev = 5.024, 149.000 (wgt'ed) examples reached here.  /* #neg=109 #pos=40 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5727800809620054;  // std dev = 0.366, 67.000 (wgt'ed) examples reached here.  /* #pos=67 */
%   | | else return -0.12258743461523902;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.5161133072812;  // std dev = 0.775, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.6378245588501734;  // std dev = 0.158, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5929904641722129;  // std dev = 0.180, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.5600761471153025;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.025028913091565106;  // std dev = 4.646, 281.000 (wgt'ed) examples reached here.  /* #neg=247 #pos=34 */
%   | | | else return 0.07525638163442169;  // std dev = 4.040, 95.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=23 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5313445320759497;  // std dev = 2.798, 160.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=156 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12161428514760741;  // std dev = 0.065, 186.000 (wgt'ed) examples reached here.  /* #neg=186 */
%   | | | else return -0.13197337612354462;  // std dev = 0.010, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.16582317592794094;  // std dev = 0.321, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.30693733780788984;  // std dev = 1.173, 78.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=77 */
%   | else return 0.5229592940089419;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.29772874139537403;  // std dev = 0.013, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5037560912587268;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5855719140357194;  // std dev = 1.468, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | | else return -0.09970356059771913;  // std dev = 1.795, 222.000 (wgt'ed) examples reached here.  /* #neg=217 #pos=5 */
%   | | else return 0.025233605970858598;  // std dev = 0.316, 65.000 (wgt'ed) examples reached here.  /* #neg=52 #pos=13 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.028564637683632963;  // std dev = 3.074, 242.000 (wgt'ed) examples reached here.  /* #neg=160 #pos=82 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.20938215281892972;  // std dev = 1.010, 23.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=22 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5301009480545106;  // std dev = 0.997, 52.000 (wgt'ed) examples reached here.  /* #pos=52 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.1246492451392794;  // std dev = 0.223, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | | else return -0.1363612943653681;  // std dev = 0.217, 53.000 (wgt'ed) examples reached here.  /* #neg=53 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.2639286699622166;  // std dev = 2.180, 125.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=121 */
%   | else return -0.08968027882841345;  // std dev = 1.701, 249.000 (wgt'ed) examples reached here.  /* #neg=242 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.027576852754945126;  // std dev = 2.297, 87.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=28 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.17749525130769986;  // std dev = 0.998, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | else if ( follows(A, E) )
%   | | then return 0.2823115606253889;  // std dev = 0.008, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04944477558630584;  // std dev = 0.140, 201.000 (wgt'ed) examples reached here.  /* #neg=182 #pos=19 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.00886876407956828;  // std dev = 2.037, 112.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=28 */
%   | | | else return 0.051317839466195926;  // std dev = 2.415, 74.000 (wgt'ed) examples reached here.  /* #neg=50 #pos=24 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1432466451637879;  // std dev = 0.191, 81.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=78 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2687242211139009;  // std dev = 1.240, 39.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=38 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09213469191823245;  // std dev = 0.085, 183.000 (wgt'ed) examples reached here.  /* #neg=183 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.39294799352854975;  // std dev = 0.736, 40.000 (wgt'ed) examples reached here.  /* #pos=40 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11889402959981081;  // std dev = 0.331, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.13977165948459366;  // std dev = 2.177, 89.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=85 */
%   | | else return 0.16475013587434145;  // std dev = 0.354, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, C) )
%   | | then return -0.08317237245021991;  // std dev = 0.034, 151.000 (wgt'ed) examples reached here.  /* #neg=151 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.09617404459298476;  // std dev = 0.036, 27.000 (wgt'ed) examples reached here.  /* #neg=27 */
%   | | | else return -0.02924803130666751;  // std dev = 1.001, 32.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=4 */
%   else if ( tweets(A, G) )
%   | then return 0.004978911286365964;  // std dev = 1.348, 86.000 (wgt'ed) examples reached here.  /* #neg=61 #pos=25 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.1905343785187591;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.01805591491605687;  // std dev = 1.948, 68.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=21 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '8.127', 'seconds']
Parameter learned model CLL:-0.111782 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.708, 3, 104], 'true,false,true': [0.0, 164, 0], 'true,false,false': [0.262, 50, 4], 'false,true,true,true': [0.977, 1, 21], 'false,true,true,false': [0.0, 0, 4], 'false,true,false': [4.94e-08, 46, 0], 'false,false': [0.481, 40, 23]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.197, 0, 85], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.273, 144, 19], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [1.793, 49, 4], 'false,false,false,true': [1.241, 2, 8], 'false,false,false,false': [5.024, 109, 40]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.366, 0, 67], 'true,true,false': [0.0, 1, 0], 'true,false,true': [0.775, 1, 3], 'true,false,false': [0.158, 0, 8], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.18, 0, 6], 'false,false,true,false': [4.21e-08, 0, 15], 'false,false,false,true': [4.646, 247, 34], 'false,false,false,false': [4.04, 72, 23]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.798, 4, 156], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.065, 186, 0], 'false,true,false,false': [0.01, 32, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.321, 101, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.173, 1, 77], 'true,false': [0.0, 0, 1], 'false,true,true': [0.013, 0, 20], 'false,true,false': [0.0, 0, 1], 'false,false,true,true': [1.468, 2, 39], 'false,false,true,false': [1.795, 217, 5], 'false,false,false': [0.316, 52, 13]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.074, 160, 82], 'false,true': [1.01, 1, 22], 'false,false,true': [0.997, 0, 52], 'false,false,false,true': [0.223, 80, 0], 'false,false,false,false': [0.217, 53, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.18, 4, 121], 'true,false': [1.701, 242, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [2.297, 59, 28]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.998, 1, 83], 'true,false,true': [0.008, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.14, 182, 19], 'false,false,false,true': [2.037, 84, 28], 'false,false,false,false': [2.415, 50, 24]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.191, 3, 78], 'false,true,true,true': [1.24, 1, 38], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.085, 183, 0], 'false,false,true': [0.736, 0, 40], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.331, 106, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [2.177, 4, 85], 'true,true,false': [0.354, 0, 19], 'true,false,true': [0.034, 151, 0], 'true,false,false,true': [0.036, 27, 0], 'true,false,false,false': [1.001, 28, 4], 'false,true': [1.348, 61, 25], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.948, 47, 21]}]
{'': [0.22187928994083064, 0.22913580246913645], 'false': [0.2266589506172851, 0.2317964222726138], 'false,true': [0.03698224852071082, 5.3097622916855314e-17], 'true': [0.02725128832212642, 0.018011951855904283], 'false,true,true': [0.04338842975206614, 0.0], 'true,false': [-1.5705594006892458e-16, 0.06858710562414251]}
{'': [0.0004574528420757046, 0.12453420229179855], 'false': [0.074495889714361, 0.15783659134324127], 'false,false': [0.06065309363415442, 0.1807032868513912], 'false,false,false': [0.15409273356952183, 0.16942842779157882], 'false,true': [nan, 0.074495889714361], 'false,false,true': [nan, 0.06065309363415442]}
{'': [0.01610293193320711, 0.11360366504303876], 'false': [nan, 0.11360366504303902], 'false,false': [0.0017687383956289607, 0.10271356612243387], 'false,false,false': [0.07682397839001205, 0.17177613387513432], 'true': [0.008978057597178669, 0.05545374017699641], 'true,false': [0.15024002798926794, 0.0031227200180319326], 'true,true': [0.0020012351962487842, 0.0], 'false,false,true': [0.005416761336614062, 1.1842378929335003e-16]}
{'': [0.048940573258011086, 0.0007393154309028367], 'false': [3.3516116283130933e-05, 0.0010173970578601283], 'false,false': [nan, 0.0010173970578601283], 'false,false,false': [nan, 0.0010173970578601283], 'false,true': [nan, 3.3516116283132966e-05], 'false,true,false': [2.2951680664183167e-05, 3.363171494200068e-06]}
{'': [0.017990025733668927, 0.08572195342973384], 'false': [0.001933446703807515, 0.08578501663616998], 'false,false': [0.08224171583905103, 0.0998588619307751], 'false,false,true': [0.052535624795066516, 0.01451998532068835], 'true': [0.01762996474035625, 0.0], 'false,true': [8.820520344743344e-06, 0.0]}
{'': [0.039044355021162255, 0.0906361994406187], 'false': [0.044352698905429165, 0.09379005185834939], 'false,false': [0.019122554058403633, 0.0007605050013726563], 'true': [nan, 0.03904435502116191], 'true,false': [nan, 0.039044355021162255], 'false,false,false': [0.0006228598413898723, 0.0008857617485172153]}
{'': [0.0482661951906852, 0.06063241079090468], 'false': [nan, 0.060632410790904506], 'false,false': [nan, 0.06063241079090468], 'false,false,false': [nan, 0.06063241079090468], 'true': [0.038018491631130684, 0.01161941858390319]}
{'': [0.011831254380234461, 0.037619053032305935], 'false': [nan, 0.03761905303230593], 'false,false': [0.01966850026077168, 0.05407997025526629], 'false,false,false': [0.03703932554812411, 0.07878618679242182], 'true': [0.011856639258306797, 3.41298417257524e-05], 'true,false': [3.41298417257524e-05, nan]}
{'': [0.03648620142625413, 0.03862013187230312], 'false': [0.025820973196676224, 0.056569052132289466], 'false,false': [0.013539870779529872, 0.0010305183345349648], 'false,true': [0.03945498186110162, 3.902673208569473e-05], 'false,true,true': [0.03945498186110162, nan], 'false,false,false': [nan, 0.0010305183345349648]}
{'': [0.029700995898158687, 0.03642878771354759], 'false': [0.021117015016587828, 0.05506168034001927], 'false,false': [0.0, 0.05583117522915479], 'false,false,false': [nan, 0.05583117522915476], 'true': [0.0451382537920941, 0.005205384949454272], 'true,true': [0.05325397184321372, 0.006608362042826332], 'true,false': [7.440973682798686e-06, 0.018118328137015523], 'true,false,false': [4.8331119818156646e-05, 0.0313151344953807]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,true;follows(F, E), follows(E, F).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 33.234
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.8462441731947502;  // std dev = 0.108, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else return 0.733148935099512;  // std dev = 0.331, 24.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=21 */
%   | else return -0.12262029566971905;  // std dev = 0.137, 208.000 (wgt'ed) examples reached here.  /* #neg=204 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.858148935099512;  // std dev = 2.36e-08, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | | else return -0.14185106490048766;  // std dev = 5.37e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.1438632208137979;  // std dev = 1.195, 7.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=2 */
%   | | | else return 0.1914822684328457;  // std dev = 2.160, 21.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, A) )
%   | then if ( tweets(A, E), recursion_accounttype(D, B) )
%   | | then return 0.680203210823814;  // std dev = 0.200, 48.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=46 */
%   | | else return 0.721869877490481;  // std dev = 5.96e-08, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.7355571927969293;  // std dev = 0.203, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   else if ( follows(A, F), recursion_accounttype(F, B) )
%   | then if ( tweets(A, G) )
%   | | then return 0.7424382409042702;  // std dev = 0.142, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.12928309306450098;  // std dev = 1.078, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.1204256601346239;  // std dev = 0.868, 122.000 (wgt'ed) examples reached here.  /* #neg=121 #pos=1 */
%   | | | else return 0.014587002702334012;  // std dev = 3.224, 99.000 (wgt'ed) examples reached here.  /* #neg=83 #pos=16 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.12539040778485216;  // std dev = 3.088, 64.000 (wgt'ed) examples reached here.  /* #neg=45 #pos=19 */
%   | | | else return 0.18772586146127762;  // std dev = 3.346, 58.000 (wgt'ed) examples reached here.  /* #neg=37 #pos=21 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5277865067617853;  // std dev = 0.185, 70.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=67 */
%   | else if ( follows(E, A) )
%   | | then return 0.6951767274983299;  // std dev = 0.172, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, F) )
%   | | | then return 0.5496886572717763;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.41499495245955953;  // std dev = 0.680, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5645847310666967;  // std dev = 0.045, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.7014439495912845;  // std dev = 0.864, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | | else return -0.12045721612221556;  // std dev = 0.105, 223.000 (wgt'ed) examples reached here.  /* #neg=223 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.1285057889054553;  // std dev = 2.991, 59.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=19 */
%   | | | else return 0.07563200119550689;  // std dev = 3.548, 78.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=21 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.40251112725515104;  // std dev = 1.396, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | | | else return 0.13484199143057593;  // std dev = 1.462, 9.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=6 */
%   | | else if ( follows(A, D), recursion_accounttype(E, B) )
%   | | | then return 0.5776881388774611;  // std dev = 0.169, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.3673052236671777;  // std dev = 1.348, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then if ( tweets(A, H), follows(G, I) )
%   | | | then return 0.2704583909732387;  // std dev = 0.926, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | | else return 0.6055865128139394;  // std dev = 0.018, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.6171913552015034;  // std dev = 0.975, 21.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=20 */
%   | | | else return 0.7198218653088032;  // std dev = 0.299, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   else return -0.12804298899310376;  // std dev = 0.030, 336.000 (wgt'ed) examples reached here.  /* #neg=336 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.2756612394767822;  // std dev = 1.673, 47.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=44 */
%   | | | else return 0.3359960309024505;  // std dev = 0.048, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | else return 0.40442325892095876;  // std dev = 0.063, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else return 0.019955341511184027;  // std dev = 0.639, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.33500632618835496;  // std dev = 0.038, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.4666440885194852;  // std dev = 0.250, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return -0.09659544802276941;  // std dev = 0.085, 212.000 (wgt'ed) examples reached here.  /* #neg=212 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.02924999560180244;  // std dev = 2.768, 95.000 (wgt'ed) examples reached here.  /* #neg=70 #pos=25 */
%   | | | else return 0.11421971629102587;  // std dev = 2.376, 41.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.25170328028432243;  // std dev = 0.985, 35.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=34 */
%   | | | else return 0.270371009260411;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.2713675651208739;  // std dev = 0.030, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.09188769232284323;  // std dev = 0.365, 7.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=5 */
%   | | else return -0.053605588887288246;  // std dev = 0.117, 169.000 (wgt'ed) examples reached here.  /* #neg=155 #pos=14 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2747139414028177;  // std dev = 0.054, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.21250929946482627;  // std dev = 0.933, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | | | else return 0.5200232999984902;  // std dev = 0.414, 43.000 (wgt'ed) examples reached here.  /* #pos=43 */
%   | | else return -0.12898625683717296;  // std dev = 0.035, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(C, D), follows(E, C) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.22537317604435936;  // std dev = 0.079, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else if ( tweets(A, D), follows(E, A) )
%   | | | then return 0.09407116738842977;  // std dev = 1.307, 15.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=13 */
%   | | | else return 0.21740477543391717;  // std dev = 0.043, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return 0.2834358957202391;  // std dev = 0.173, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A) )
%   | then return -0.04516916710044605;  // std dev = 0.133, 238.000 (wgt'ed) examples reached here.  /* #neg=215 #pos=23 */
%   | else if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(H, B) )
%   | | | then return 0.33970599428023346;  // std dev = 0.330, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.13298413897456646;  // std dev = 0.326, 77.000 (wgt'ed) examples reached here.  /* #neg=77 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.0930327583263598;  // std dev = 0.900, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | | else return 0.1415631946500079;  // std dev = 1.484, 19.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=9 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then return 0.1632333366980425;  // std dev = 0.169, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.03540666634347391;  // std dev = 0.909, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.1211638199737523;  // std dev = 0.976, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | else return -0.05465832118353894;  // std dev = 0.900, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(H, A) )
%   | then return -0.03990012398358159;  // std dev = 0.135, 234.000 (wgt'ed) examples reached here.  /* #neg=211 #pos=23 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.2689955496653077;  // std dev = 0.282, 33.000 (wgt'ed) examples reached here.  /* #pos=33 */
%   | | | else return -0.12593348283471203;  // std dev = 0.631, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
%   | | else if ( follows(A, K) )
%   | | | then return 0.0030333045460232667;  // std dev = 0.985, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return -0.00683611564189226;  // std dev = 1.699, 37.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=11 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17225620604920897;  // std dev = 0.195, 62.000 (wgt'ed) examples reached here.  /* #pos=62 */
%   | | else return -0.17328035321018917;  // std dev = 0.814, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else return 0.23301846398334733;  // std dev = 0.103, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.32264065820522436;  // std dev = 0.415, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0.1281544988923754;  // std dev = 0.883, 18.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=17 */
%   | | else return -0.07634029011164264;  // std dev = 0.069, 199.000 (wgt'ed) examples reached here.  /* #neg=199 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.20420009447247373;  // std dev = 0.972, 26.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=25 */
%   | | | else return 0.416674449041003;  // std dev = 0.235, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.12662098140344766;  // std dev = 0.409, 103.000 (wgt'ed) examples reached here.  /* #neg=103 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then return 0.13453178937099808;  // std dev = 0.109, 84.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=83 */
%   | | else return 0.2867845141184768;  // std dev = 0.066, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else return -0.06416382745646834;  // std dev = 0.056, 217.000 (wgt'ed) examples reached here.  /* #neg=213 #pos=4 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G) )
%   | | then if ( follows(H, G), recursion_accounttype(H, B) )
%   | | | then return 0.14042008036074866;  // std dev = 1.079, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return -0.09472243848179232;  // std dev = 0.083, 47.000 (wgt'ed) examples reached here.  /* #neg=47 */
%   | | else return -0.04175671688101747;  // std dev = 0.165, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.15886918598273947;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(A, J) )
%   | | | then return -0.02306131265447799;  // std dev = 1.108, 55.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=14 */
%   | | | else return 0.01678731221850132;  // std dev = 1.154, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '13.744', 'seconds']
Refined model CLL: -0.103983


******************************************
Best model found
******************************************
Results 

CLL : -0.104675 

AUC ROC : 0.993755 

AUC PR : 0.385999 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 33.234 

Total Inference Time : 13.92774224281311 

Total revision time: 59.91374023246765
Best scored revision CLL: -0.103983


Results 

CLL : -0.104675 

AUC ROC : 0.993755 

AUC PR : 0.385999 

Precision : 0.339623 

Recall : 1.0 

F1 : 0.507042 

Total Learning Time : 87.56450660514832 

Total Inference Time : 13.92774224281311 


 Starting fold 2 of 2 folds 

Start transfer learning experiment

Target train facts examples: 1580
Target train pos examples: 126
Target train neg examples: 16128

Target test facts examples: 1562
Target test pos examples: 156
Target test neg examples: 24648

Amount of data: 0.2
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.136
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8581489350995121;  // std dev = 5.96e-08, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048768;  // std dev = 4.47e-08, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995121;  // std dev = 2.11e-08, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7194734122109543;  // std dev = 4.21e-08, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.03440472242229559;  // std dev = 0.331, 37.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=7 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.21947341221095448;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | | | else return 0.015375036594832933;  // std dev = 1.091, 12.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=2 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5867886136634799;  // std dev = 0.243, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return 0.2124773213322608;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6731303773666395;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | | else return 0.5553664367462845;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.044970244095965235;  // std dev = 1.787, 51.000 (wgt'ed) examples reached here.  /* #neg=46 #pos=5 */
%   | | | else return -0.1288426401062093;  // std dev = 0.003, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5081879918939165;  // std dev = 0.642, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11973424926431342;  // std dev = 0.046, 40.000 (wgt'ed) examples reached here.  /* #neg=40 */
%   | | | else return -0.1154451516480761;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.11932777236733945;  // std dev = 0.014, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.32642191118336683;  // std dev = 0.246, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | else return 0.46689855963705784;  // std dev = 0.113, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3012869992795211;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6110744328541472;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.109599316080106;  // std dev = 0.024, 44.000 (wgt'ed) examples reached here.  /* #neg=44 */
%   | | else return -0.09691344011507164;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #neg=2 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.030538346753720403;  // std dev = 1.513, 61.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=20 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.24186829612723626;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.40333193313012233;  // std dev = 0.146, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.09368436400236754;  // std dev = 0.017, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.09351649715226286;  // std dev = 0.014, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.1721416442210036;  // std dev = 1.792, 27.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=24 */
%   | else return -0.09827820802481288;  // std dev = 0.058, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.041222150140804235;  // std dev = 0.261, 7.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.19655060917721562;  // std dev = 0.025, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | else if ( follows(A, E) )
%   | | then return 0.20666544067881376;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.01442841753590015;  // std dev = 0.175, 41.000 (wgt'ed) examples reached here.  /* #neg=34 #pos=7 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.05254270318107506;  // std dev = 0.950, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | | else return -0.07754899076156044;  // std dev = 1.20e-05, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.2110516667755179;  // std dev = 0.075, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2892527456825969;  // std dev = 0.302, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.0890546141823198;  // std dev = 0.054, 41.000 (wgt'ed) examples reached here.  /* #neg=41 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.3383295892487733;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.07599828119507862;  // std dev = 0.009, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.19850541896440776;  // std dev = 0.396, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.3616322161852138;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else if ( follows(A, C) )
%   | | then return -0.08534446083510235;  // std dev = 0.016, 37.000 (wgt'ed) examples reached here.  /* #neg=37 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.06880132814223251;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.0632518197881364;  // std dev = 0.005, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( tweets(A, G) )
%   | then return 0.04025723851403057;  // std dev = 0.428, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0672547992293535;  // std dev = 8.60e-06, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.590', 'seconds']
Parameter learned model CLL:-0.105026 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [5.96e-08, 0, 22], 'true,false,true': [4.47e-08, 43, 0], 'true,false,false': [0.0, 6, 0], 'false,true,true,true': [2.11e-08, 0, 3], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 3, 0], 'false,false': [0.0, 6, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [4.21e-08, 0, 15], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.331, 30, 7], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.0, 8, 0], 'false,false,false,true': [0.707, 1, 1], 'false,false,false,false': [1.091, 10, 2]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.243, 0, 15], 'true,true,false': [0.707, 1, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.0, 0, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 2], 'false,false,true,false': [0.0, 0, 1], 'false,false,false,true': [1.787, 46, 5], 'false,false,false,false': [0.003, 10, 0]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.642, 0, 25], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.046, 40, 0], 'false,true,false,false': [0.0, 3, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.014, 12, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.246, 0, 15], 'true,false': [0.113, 0, 2], 'false,true,true': [0.0, 0, 3], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.005, 0, 5], 'false,false,true,false': [0.024, 44, 0], 'false,false,false': [0.0, 2, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [1.513, 41, 20], 'false,true': [0.0, 0, 2], 'false,false,true': [0.146, 0, 3], 'false,false,false,true': [0.017, 5, 0], 'false,false,false,false': [0.014, 10, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.792, 3, 24], 'true,false': [0.058, 46, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.261, 6, 1]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.025, 0, 14], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.175, 34, 7], 'false,false,false,true': [0.95, 10, 3], 'false,false,false,false': [1.2e-05, 4, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.075, 0, 17], 'false,true,true,true': [0.302, 0, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.054, 41, 0], 'false,false,true': [0.0, 0, 2], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.009, 6, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.396, 0, 21], 'true,true,false': [0.707, 1, 1], 'true,false,true': [0.016, 37, 0], 'true,false,false,true': [1.86e-09, 5, 0], 'true,false,false,false': [0.005, 5, 0], 'false,true': [0.428, 5, 3], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [8.6e-06, 3, 0]}]
{'': [0.2138464590359065, 0.1874999999999999], 'true': [1.6148698540002277e-16, 5.437827059388522e-17], 'false': [0.24999999999999992, -6.938893903907228e-18], 'false,true': [1.4802973661668753e-16, 0.0], 'false,true,true': [1.4802973661668753e-16, nan], 'true,false': [4.6474452193611206e-17, -6.938893903907228e-18]}
{'': [1.1842378929335003e-16, 0.10164319037938407], 'false': [0.10950779227004173, 0.08674127907205825], 'false,true': [nan, 0.10950779227004173], 'false,false': [0.0, 0.12580152797867403], 'false,false,false': [0.25, 0.09915090450905213], 'false,false,true': [nan, 0.0]}
{'': [0.04569702390077449, 0.06768194481753466], 'false': [nan, 0.06768194481753453], 'false,false': [3.700743415417188e-17, 0.05333391221222783], 'false,false,false': [0.06263819050020614, 7.23772432625891e-07], 'true': [0.047440721706781375, 0.0], 'true,true': [0.003949412808861829, 0.25], 'false,false,true': [0.0, 0.0], 'true,false': [nan, 0.0]}
{'': [0.01648499110561211, 4.32611356563846e-05], 'false': [5.0618573953175374e-05, 1.6887990938380115e-05], 'false,true': [nan, 5.0618573953175374e-05], 'false,true,false': [5.313150013722401e-05, 0.0], 'false,false': [nan, 1.6887990938380115e-05], 'false,false,false': [nan, 1.6887990938380115e-05]}
{'': [0.006343546481119155, 0.04938154453595397], 'false': [0.0, 0.04587414359048955], 'false,false': [0.04760134201648416, 0.0], 'false,false,true': [4.9047887390685215e-06, 1.302271785160534e-05], 'true': [0.004021616780328093, 0.006345940918715154], 'false,true': [0.0, nan]}
{'': [0.03752807585842945, 0.03770399846238944], 'false': [0.0, 0.03551147586538334], 'true': [nan, 0.03752807585842934], 'true,false': [nan, 0.03752807585842945], 'false,false': [0.0071475761065548276, 3.19276961909661e-05], 'false,false,false': [5.8168482903302174e-05, 1.8797909741667673e-05]}
{'': [0.06106576414069978, 0.009723297477396314], 'true': [0.11890109019626013, 7.200800775995473e-05], 'false': [nan, 0.009723297477396314], 'false,false': [nan, 0.009723297477396314], 'false,false,false': [nan, 0.009723297477396314]}
{'': [4.788005050765006e-05, 0.037707480495525296], 'false': [nan, 0.03770748049552525], 'false,false': [0.030718769393780015, 0.05319417261599953], 'false,false,false': [0.06941447752854041, 3.605029295916662e-11], 'true': [4.447939969495377e-05, 0.0], 'true,false': [0.0, nan]}
{'': [0.005652851691975315, 0.020593300190135236], 'false': [0.017938524620550452, 0.0321986382015977], 'false,false': [0.0, 1.4621545495926749e-05], 'false,true': [0.015190573615879463, 7.047759690651983e-05], 'false,true,true': [0.015190573615879463, nan], 'false,false,false': [nan, 1.4621545495926749e-05]}
{'': [0.02938950332227886, 0.01892903206212462], 'true': [0.05346488174736615, 7.016649328677348e-05], 'true,true': [0.007464280106199272, 0.25000000000000006], 'false': [0.02287500864170761, 2.4641601837719722e-11], 'true,false': [6.86336231664175e-06, 1.0607484995388272e-05], 'true,false,false': [6.938893903907229e-19, 5.81644850468771e-06], 'false,false': [nan, 2.4641601837719722e-11], 'false,false,false': [nan, 2.4641601837719722e-11]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
2;false,false;tweets(A, I).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
6;;accounttype(A, B) :- follows(A, C).;true;true
6;true;follows(C, D), recursion_accounttype(D, B).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
7;false;follows(F, A), follows(A, F).;true;true
7;false,false;tweets(A, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true


Refining candidate
***************************
Model training time 4.601
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.8581489350995122;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.5248156017661788;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.1418510649004877;  // std dev = 2.79e-08, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( tweets(A, F) )
%   | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | then return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.6083623010998434;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.7609104304538484;  // std dev = 0.051, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.5194734122109546;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.05089304581609616;  // std dev = 1.397, 34.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=3 */
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.209249086758526;  // std dev = 1.222, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return -0.12544463852839138;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then return 0.5811586263956138;  // std dev = 0.017, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.7276242004767801;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(A, F) )
%   | | then return 0.5854600015910937;  // std dev = 0.057, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.6258078566068166;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( tweets(A, G) )
%   | | then if ( follows(H, A) )
%   | | | then return -0.049158434011427235;  // std dev = 1.409, 36.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=3 */
%   | | | else return 0.2160721167684549;  // std dev = 0.934, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | else if ( follows(I, A) )
%   | | | then return -0.11231637819360636;  // std dev = 9.13e-09, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.13128571945883974;  // std dev = 0.038, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( follows(F, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, D), recursion_accounttype(F, B) )
%   | | | then return 0.43839710819186856;  // std dev = 2.11e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.4440101929862867;  // std dev = 0.040, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( follows(A, G), follows(E, G) )
%   | | | then return 0.631011549010342;  // std dev = 0.224, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.7015854824817399;  // std dev = 0.046, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.4309079917233207;  // std dev = 0.054, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.22744603998654533;  // std dev = 0.514, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.11340008019266822;  // std dev = 0.003, 30.000 (wgt'ed) examples reached here.  /* #neg=30 */
%   | | else return -0.10159632948783634;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | else return -0.12517758829684847;  // std dev = 0.072, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), tweets(D, E) )
%   | | then return 0.33490856553153586;  // std dev = 6.45e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.3115337883696183;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.36558141244888265;  // std dev = 0.046, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.36481582760992587;  // std dev = 0.064, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5638662654584812;  // std dev = 0.088, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.10417677153257568;  // std dev = 0.093, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
%   | | else return -0.09710142137469538;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, A) )
%   | | then if ( tweets(A, E), tweets(D, E) )
%   | | | then return 0.2648374214474915;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.24889950866045468;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2765155715629149;  // std dev = 0.003, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( tweets(A, F) )
%   | | then return -0.0333641729714194;  // std dev = 0.173, 27.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=3 */
%   | | else return -0.05480490170349243;  // std dev = 0.098, 12.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=1 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return -0.027362046301273257;  // std dev = 0.788, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( recursion_accounttype(H, B) )
%   | | then return 0.1534080480936531;  // std dev = 0.569, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else if ( follows(A, I), follows(I, J) )
%   | | | then return -0.14856707035472283;  // std dev = 3.73e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.08695300898024871;  // std dev = 0.010, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( follows(A, E) )
%   | | | then return 0.21281389407175966;  // std dev = 0.018, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.08505787684216996;  // std dev = 0.872, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.23779696920355614;  // std dev = 0.058, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.4155583119800771;  // std dev = 0.134, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(G, A) )
%   | | then if ( tweets(A, H), follows(A, G) )
%   | | | then return -0.09171739031902829;  // std dev = 1.18e-08, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | | | else return -0.07999448185051558;  // std dev = 0.003, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.11872344548613963;  // std dev = 0.037, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | | else return -0.08190010566174206;  // std dev = 0.017, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   else return -0.012255564763408224;  // std dev = 0.383, 6.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=1 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.09936299748478677;  // std dev = 0.291, 11.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=10 */
%   | | else return 0.21486971713872258;  // std dev = 0.144, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.29798357028403766;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), follows(A, G) )
%   | then if ( tweets(A, H) )
%   | | then if ( tweets(I, H), follows(I, A) )
%   | | | then return -0.029364617159428282;  // std dev = 0.681, 26.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=4 */
%   | | | else return 0.0668656033487567;  // std dev = 0.370, 3.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=1 */
%   | | else return -0.026916817777102083;  // std dev = 0.101, 11.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=2 */
%   | else if ( tweets(A, J) )
%   | | then if ( follows(A, K), follows(K, L) )
%   | | | then return 0.02654492635591569;  // std dev = 0.495, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return -0.08304394707716156;  // std dev = 0.010, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | else return -0.07705871479880515;  // std dev = 0.022, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(E, A) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.1682627486831395;  // std dev = 5.27e-09, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.17889583088687822;  // std dev = 0.026, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(F, A), recursion_accounttype(F, B) )
%   | | then return 0.14457427574042125;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.035042254495607716;  // std dev = 0.839, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.31354301062110307;  // std dev = 0.129, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.07818269824101384;  // std dev = 0.005, 42.000 (wgt'ed) examples reached here.  /* #neg=42 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.25078440257409285;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, J) )
%   | | | then return -0.11359989718183261;  // std dev = 0.031, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.07072758521895535;  // std dev = 0.015, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.14051917436462832;  // std dev = 0.028, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0.1800680403048987;  // std dev = 0.033, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.2509811592602586;  // std dev = 0.112, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.07641327440044347;  // std dev = 0.000, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | | else return -0.06752880066486701;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | | else return -0.06877594047203953;  // std dev = 0.002, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then return 0.08807360022764991;  // std dev = 0.361, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return -0.07706580676273578;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | else return -0.060393754788652165;  // std dev = 1.86e-09, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.078', 'seconds']
Refined model CLL: -0.10224


******************************************
Best model found
******************************************
Results 

CLL : -0.096896 

AUC ROC : 0.994553 

AUC PR : 0.413151 

Precision : 0.338753 

Recall : 0.801282 

F1 : 0.47619 

Total Learning Time : 4.601 

Total Inference Time : 3.433990478515625 

Total revision time: 11.359972011566162
Best scored revision CLL: -0.10224


Results 

CLL : -0.096896 

AUC ROC : 0.994553 

AUC PR : 0.413151 

Precision : 0.338753 

Recall : 0.801282 

F1 : 0.47619 

Total Learning Time : 39.01073838424683 

Total Inference Time : 3.433990478515625 

Amount of data: 0.4
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.481
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.7943191478654695;  // std dev = 1.676, 47.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=44 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 6.99e-08, 70.000 (wgt'ed) examples reached here.  /* #neg=70 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048777;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #neg=3 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.732174034792305;  // std dev = 1.79e-07, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.014167703640094072;  // std dev = 0.317, 86.000 (wgt'ed) examples reached here.  /* #neg=72 #pos=14 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.03102166716408006;  // std dev = 1.705, 27.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5902202509815319;  // std dev = 0.300, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.7293866938845189;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.05536643674628447;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5679536201170539;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return 0.5679536201170539;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else if ( tweets(A, I) )
%   | | | then return 0.010791403742710778;  // std dev = 2.804, 81.000 (wgt'ed) examples reached here.  /* #neg=68 #pos=13 */
%   | | | else return -0.08484569237733693;  // std dev = 0.835, 20.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=1 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5258582167124112;  // std dev = 0.943, 50.000 (wgt'ed) examples reached here.  /* #pos=50 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.1263843520277474;  // std dev = 0.044, 76.000 (wgt'ed) examples reached here.  /* #neg=76 */
%   | | | else return -0.11789371514660682;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.123836324611907;  // std dev = 0.016, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.2695625491794351;  // std dev = 1.225, 31.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=29 */
%   | else return 0.4228426419323576;  // std dev = 0.016, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.1390322498905045;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6103225940145317;  // std dev = 0.035, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.08944573968312163;  // std dev = 1.201, 97.000 (wgt'ed) examples reached here.  /* #neg=94 #pos=3 */
%   | | else return -0.10129765230050422;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.05853061224949364;  // std dev = 2.153, 103.000 (wgt'ed) examples reached here.  /* #neg=63 #pos=40 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.07701090420615504;  // std dev = 0.894, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.506341959022062;  // std dev = 0.283, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.10585279360047417;  // std dev = 0.015, 12.000 (wgt'ed) examples reached here.  /* #neg=12 */
%   | | | else return -0.09845263902722393;  // std dev = 0.030, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.28164983862842025;  // std dev = 1.012, 46.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=45 */
%   | else return -0.08668017034199585;  // std dev = 1.017, 100.000 (wgt'ed) examples reached here.  /* #neg=97 #pos=3 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0075369778080716055;  // std dev = 0.432, 9.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=2 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.16265726259650126;  // std dev = 0.995, 30.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=29 */
%   | else if ( follows(A, E) )
%   | | then return 0.21424619503768783;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03668071576610763;  // std dev = 0.161, 98.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=14 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.005383556669959701;  // std dev = 1.078, 34.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=6 */
%   | | | else return -0.08341247548625488;  // std dev = 0.000774, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.1349050696661816;  // std dev = 0.229, 33.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=31 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.32321785276470777;  // std dev = 0.339, 14.000 (wgt'ed) examples reached here.  /* #pos=14 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09652551354583715;  // std dev = 0.056, 75.000 (wgt'ed) examples reached here.  /* #neg=75 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4135088912992163;  // std dev = 0.271, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08345568053525201;  // std dev = 0.026, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17611485600600674;  // std dev = 1.152, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | else return 0.18024532025710427;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.09018110480778284;  // std dev = 0.026, 83.000 (wgt'ed) examples reached here.  /* #neg=83 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07641491767387291;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | | else return -0.07697158027469794;  // std dev = 0.011, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   else if ( tweets(A, G) )
%   | then return 0.030772179348266822;  // std dev = 1.026, 15.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=6 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.0715598542299775;  // std dev = 0.000725, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '11.376', 'seconds']
Parameter learned model CLL:-0.108206 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.676, 3, 44], 'true,false,true': [6.99e-08, 70, 0], 'true,false,false': [0.0, 12, 0], 'false,true,true,true': [0.0, 0, 6], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 3, 0], 'false,false': [0.0, 7, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.79e-07, 0, 30], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.317, 72, 14], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [7.45e-09, 13, 0], 'false,false,false,true': [0.0, 0, 1], 'false,false,false,false': [1.705, 22, 5]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [0.3, 0, 29], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.707, 1, 1], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 3], 'false,false,true,false': [0.0, 0, 2], 'false,false,false,true': [2.804, 68, 13], 'false,false,false,false': [0.835, 19, 1]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [0.943, 0, 50], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.044, 76, 0], 'false,true,false,false': [0.0, 17, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.016, 10, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.225, 2, 29], 'true,false': [0.016, 0, 2], 'false,true,true': [0.913, 1, 5], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.035, 0, 11], 'false,false,true,false': [1.201, 94, 3], 'false,false,false': [0.0, 7, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.153, 63, 40], 'false,true': [0.894, 1, 4], 'false,false,true': [0.283, 0, 6], 'false,false,false,true': [0.015, 12, 0], 'false,false,false,false': [0.03, 22, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.012, 1, 45], 'true,false': [1.017, 97, 3], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.432, 7, 2]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.995, 1, 29], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.161, 84, 14], 'false,false,false,true': [1.078, 28, 6], 'false,false,false,false': [0.000774, 8, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.229, 2, 31], 'false,true,true,true': [0.339, 0, 14], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.056, 75, 0], 'false,false,true': [0.271, 0, 5], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.026, 15, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.152, 1, 42], 'true,true,false': [0.0, 0, 2], 'true,false,true': [0.026, 83, 0], 'true,false,false,true': [0.0, 5, 0], 'true,false,false,false': [0.011, 4, 0], 'false,true': [1.026, 9, 6], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.000725, 11, 0]}]
{'': [0.22474610900787315, 0.23437500000000006], 'false': [0.22222222222222218, -7.93016446160826e-18], 'true': [0.05975554549570045, 7.311224796312007e-17], 'false,true': [-1.4802973661668753e-16, 0.0], 'true,false': [6.97854472621527e-17, -1.1564823173178714e-17], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [1.0658141036401502e-15, 0.09672777942562359], 'false': [0.10024254558396123, 0.08918272910034923], 'false,true': [nan, 0.10024254558396123], 'false,false': [4.270088556250602e-18, 0.12019517811913683], 'false,false,false': [0.0, 0.10771950119501977], 'false,false,true': [nan, 4.270088556250602e-18]}
{'': [0.03607216187634554, 0.09704208950819863], 'false': [nan, 0.09704208950819868], 'false,false': [0.0, 0.08619089372009536], 'false,false,false': [0.097045572375907, 0.034894170050233535], 'true': [0.003619532959168777, 0.25], 'true,false': [nan, 0.25], 'true,true': [0.0030987678128435265, 0.0], 'false,false,true': [0.0, 0.0]}
{'': [0.017773699772520822, 3.1372072274974956e-05], 'false': [3.18329095292415e-05, 2.6190626085356717e-05], 'false,true': [nan, 3.183290952923673e-05], 'false,true,false': [2.577551963694732e-05, -4.89804275569922e-18], 'false,false': [nan, 2.6190626085356717e-05], 'false,false,false': [nan, 2.6190626085356717e-05]}
{'': [0.046783163763609935, 0.06042185782927293], 'false': [0.1388888888888889, 0.0550223086269538], 'false,true': [0.1388888888888889, nan], 'false,false': [0.058167978855458144, -3.96508223080413e-18], 'false,false,true': [0.00011158896603110949, 0.014877314197761041], 'true': [0.04836881873194734, 0.00013465139484442057]}
{'': [0.04500669413354187, 0.06215422127178924], 'false': [0.15999999999999998, 0.04908318705858373], 'false,false': [0.013363175425514129, 4.533515475864636e-05], 'true': [nan, 0.04500669413354177], 'true,false': [nan, 0.04500669413354187], 'false,false,false': [1.992488023520404e-05, 3.9867438248835194e-05]}
{'': [0.04337829212166908, 0.02073490342030667], 'true': [0.022279656384826853, 0.010339268715584198], 'false': [nan, 0.02073490342030667], 'false,false': [nan, 0.02073490342030667], 'false,false,false': [nan, 0.02073490342030667]}
{'': [0.03201624950946318, 0.026802300764367036], 'true': [0.032997605634496205, 0.0], 'false': [nan, 0.026802300764367043], 'false,false': [0.025957919082712996, 0.028583459553445878], 'false,false,false': [0.03414924521874757, 7.490839567039775e-08], 'true,false': [0.0, nan]}
{'': [0.052463718740810954, 0.030089981692993185], 'false': [0.024682769020972013, 0.05000304618533931], 'false,false': [0.014649697545447204, 4.4049317315894566e-05], 'false,true': [0.008217894376811499, 4.179757030983093e-05], 'false,true,true': [0.008217894376811499, nan], 'false,false,false': [nan, 4.4049317315894566e-05]}
{'': [0.02520902422349204, 0.04306705056664157], 'false': [0.07021912325409724, 4.780793378917802e-08], 'true': [0.029482849301802005, 2.4612342215241595e-05], 'true,true': [0.030853386363279115, 0.0], 'true,false': [7.978114867922588e-06, 1.3137875757311833e-05], 'true,false,false': [0.0, 2.9388068647755e-05], 'false,false': [nan, 4.780793378917802e-08], 'false,false,false': [nan, 4.780793378917802e-08]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;true;follows(C, D).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
7;false;follows(F, A), follows(A, F).;true;true
7;false,false;tweets(A, G).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true


Refining candidate
***************************
Model training time 4.929
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.858148935099512;  // std dev = 2.38e-07, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048766;  // std dev = 7.60e-08, 78.000 (wgt'ed) examples reached here.  /* #neg=78 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
%   | else return -0.1418510649004878;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( tweets(A, D), follows(A, E) )
%   | then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | | then return 0.6606498827991896;  // std dev = 0.235, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | else return 0.7194734122109545;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.7194734122109545;  // std dev = 0.000, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   else if ( follows(A, F), follows(F, A) )
%   | then if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.5528067455442879;  // std dev = 0.913, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.02145472459124121;  // std dev = 2.238, 65.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=8 */
%   | | | else return -0.048633906642996313;  // std dev = 0.806, 11.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=1 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.12544463852839138;  // std dev = 0.000, 7.000 (wgt'ed) examples reached here.  /* #neg=7 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7194734122109544;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | | else return 0.0665821911850963;  // std dev = 1.661, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.568964115939975;  // std dev = 0.013, 29.000 (wgt'ed) examples reached here.  /* #pos=29 */
%   | | else return 0.5960526174841312;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.16392406909680593;  // std dev = 0.554, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.1553664367462845;  // std dev = 1.095, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | | else return 0.5553664367462845;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( follows(A, J), follows(I, J) )
%   | | | then return -0.0425630078604111;  // std dev = 1.974, 63.000 (wgt'ed) examples reached here.  /* #neg=57 #pos=6 */
%   | | | else return 0.1800455671320946;  // std dev = 1.768, 19.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=7 */
%   | | else if ( follows(K, A), follows(A, K) )
%   | | | then return -0.06711873509502168;  // std dev = 0.822, 16.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=1 */
%   | | | else return -0.12468649900785843;  // std dev = 0.039, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), follows(F, A) )
%   | | then if ( recursion_accounttype(F, B) )
%   | | | then return 0.4237712302215073;  // std dev = 0.033, 24.000 (wgt'ed) examples reached here.  /* #pos=24 */
%   | | | else return 0.4537991867053191;  // std dev = 0.006, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else return 0.2237381958227597;  // std dev = 0.594, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.4770533563172338;  // std dev = 0.109, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( follows(H, A) )
%   | | | then return 0.7231402617655898;  // std dev = 0.060, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.6671278682540933;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   else if ( follows(I, A) )
%   | then if ( tweets(A, J) )
%   | | then return -0.1199527777025516;  // std dev = 0.010, 51.000 (wgt'ed) examples reached here.  /* #neg=51 */
%   | | else return -0.11212145567385255;  // std dev = 0.004, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | else return -0.14411774484330056;  // std dev = 0.016, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then if ( follows(E, A), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), tweets(A, F) )
%   | | | then return 0.2704364052681202;  // std dev = 0.970, 17.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=16 */
%   | | | else return 0.3213750883710438;  // std dev = 0.042, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.34666774855959503;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else return 0.39966545316623264;  // std dev = 0.084, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.3624938163991708;  // std dev = 0.100, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5498393571994025;  // std dev = 0.098, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | | else return -0.09080302015865864;  // std dev = 1.056, 99.000 (wgt'ed) examples reached here.  /* #neg=96 #pos=3 */
%   | | else return -0.09013932289808337;  // std dev = 3.73e-09, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E) )
%   | | then return 0.2714456304988771;  // std dev = 0.007, 22.000 (wgt'ed) examples reached here.  /* #pos=22 */
%   | | else return 0.25472336109064286;  // std dev = 0.007, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.4202023090737229;  // std dev = 0.066, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.10015917569943586;  // std dev = 0.046, 57.000 (wgt'ed) examples reached here.  /* #neg=57 */
%   | | else return -0.056599591002307166;  // std dev = 0.224, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.27616384373539155;  // std dev = 0.080, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.4493934833191237;  // std dev = 0.197, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.10039664882841325;  // std dev = 0.056, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | | | else return -0.09632991618999884;  // std dev = 0.063, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.21961880932449268;  // std dev = 0.012, 31.000 (wgt'ed) examples reached here.  /* #pos=31 */
%   else if ( follows(D, A), follows(A, D) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.3227272499894369;  // std dev = 0.058, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.08302221682460853;  // std dev = 0.768, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else if ( follows(A, G), follows(D, G) )
%   | | | then return -0.08973737588543958;  // std dev = 8.44e-05, 61.000 (wgt'ed) examples reached here.  /* #neg=61 */
%   | | | else return -0.11122742744877875;  // std dev = 0.083, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | else if ( tweets(A, H), follows(A, I) )
%   | | then if ( tweets(J, H), recursion_accounttype(J, B) )
%   | | | then return 0.3438571832227228;  // std dev = 0.182, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return -0.10555436076733726;  // std dev = 0.044, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | else if ( follows(K, A), recursion_accounttype(K, B) )
%   | | | then return 0.21329278341089405;  // std dev = 0.057, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.08068868798335284;  // std dev = 0.024, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( tweets(A, E), follows(A, F) )
%   | | then return 0.18620363024758751;  // std dev = 0.007, 20.000 (wgt'ed) examples reached here.  /* #pos=20 */
%   | | else return 0.17514226848654346;  // std dev = 0.017, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else return 0.310248332215207;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A), follows(A, G) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.18534630993663306;  // std dev = 0.009, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.043149556053873356;  // std dev = 0.906, 67.000 (wgt'ed) examples reached here.  /* #neg=59 #pos=8 */
%   | | | else return -0.05353354100409961;  // std dev = 0.508, 18.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=1 */
%   | else if ( tweets(A, J) )
%   | | then if ( follows(K, A) )
%   | | | then return -0.07225642101784455;  // std dev = 0.006, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
%   | | | else return 0.07233765923984786;  // std dev = 0.699, 13.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=6 */
%   | | else return -0.08102113707787402;  // std dev = 0.003, 10.000 (wgt'ed) examples reached here.  /* #neg=10 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.1566589927349057;  // std dev = 0.006, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( tweets(A, E), follows(F, A) )
%   | | then return -0.0898076344984795;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.17580394852476666;  // std dev = 0.046, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), follows(A, I) )
%   | | | then return 0.2820791972063145;  // std dev = 0.188, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | | else return 0.1594353770601916;  // std dev = 0.047, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.08018937039795718;  // std dev = 0.008, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | else if ( recursion_accounttype(J, B) )
%   | | then return 0.27285938986479275;  // std dev = 0.133, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, K) )
%   | | | then return -0.10146581704596007;  // std dev = 0.031, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
%   | | | else return -0.07621313944731295;  // std dev = 0.000286, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.14049892818937904;  // std dev = 0.065, 30.000 (wgt'ed) examples reached here.  /* #pos=30 */
%   | | | else return 0.21770146065133603;  // std dev = 0.193, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return 0.1195634965011837;  // std dev = 0.000, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | else if ( follows(A, C) )
%   | | then return -0.07481541056585944;  // std dev = 0.004, 66.000 (wgt'ed) examples reached here.  /* #neg=66 */
%   | | else return -0.06460155689517715;  // std dev = 0.005, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.16819412864413477;  // std dev = 0.021, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | | else return -0.10291721339242524;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   | | else return 0.11775181251926634;  // std dev = 0.404, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else return -0.1332872460237645;  // std dev = 0.164, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.439', 'seconds']
Refined model CLL: -0.100798


******************************************
Best model found
******************************************
Results 

CLL : -0.093134 

AUC ROC : 0.994832 

AUC PR : 0.404555 

Precision : 0.323601 

Recall : 0.852564 

F1 : 0.469136 

Total Learning Time : 4.929 

Total Inference Time : 6.3941261768341064 

Total revision time: 16.691496286392212
Best scored revision CLL: -0.100798


Results 

CLL : -0.093134 

AUC ROC : 0.994832 

AUC PR : 0.404555 

Precision : 0.323601 

Recall : 0.852564 

F1 : 0.469136 

Total Learning Time : 44.34226265907287 

Total Inference Time : 6.3941261768341064 

Amount of data: 0.6
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 1.712
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8273797043302819;  // std dev = 1.392, 65.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=63 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.94e-08, 101.000 (wgt'ed) examples reached here.  /* #neg=101 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   | else return 0.10814893509951232;  // std dev = 0.433, 16.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.6830882786089083;  // std dev = 1.384, 47.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=45 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -6.748097544463248E-5;  // std dev = 0.304, 121.000 (wgt'ed) examples reached here.  /* #neg=103 #pos=18 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12544463852839138;  // std dev = 5.27e-09, 11.000 (wgt'ed) examples reached here.  /* #neg=11 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.4069724164817547;  // std dev = 1.196, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   | | | else return 0.07889425466927782;  // std dev = 2.242, 33.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5211739847042641;  // std dev = 1.642, 44.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=41 */
%   | | else return 0.7256549044062561;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.6687849654735056;  // std dev = 0.132, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5718815591014442;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.5718815591014442;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.01974022758926951;  // std dev = 3.158, 128.000 (wgt'ed) examples reached here.  /* #neg=112 #pos=16 */
%   | | | else return -0.005773556260287083;  // std dev = 1.925, 36.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=5 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.49840588259695895;  // std dev = 2.122, 78.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=75 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12212329932517894;  // std dev = 0.043, 107.000 (wgt'ed) examples reached here.  /* #neg=107 */
%   | | | else return -0.12480522908555153;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.14610071929281898;  // std dev = 0.072, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.32198147510773223;  // std dev = 0.899, 44.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=43 */
%   | else return 0.24649879169901445;  // std dev = 0.676, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.11415709759832526;  // std dev = 1.265, 10.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=8 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.5548736904175194;  // std dev = 0.965, 16.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=15 */
%   | | | else return -0.08175747607242483;  // std dev = 1.904, 149.000 (wgt'ed) examples reached here.  /* #neg=143 #pos=6 */
%   | | else return -0.09893099718907683;  // std dev = 1.32e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.043719928198703614;  // std dev = 2.753, 163.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=57 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.29009709657294036;  // std dev = 1.05e-08, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.46520612701578573;  // std dev = 1.041, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11059213004837434;  // std dev = 0.064, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
%   | | | else return -0.11069634581619771;  // std dev = 0.075, 14.000 (wgt'ed) examples reached here.  /* #neg=14 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.24684044275728598;  // std dev = 2.148, 69.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=65 */
%   | else return -0.07614617096145461;  // std dev = 1.740, 148.000 (wgt'ed) examples reached here.  /* #neg=141 #pos=7 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.023550017236662127;  // std dev = 0.447, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1860351246510994;  // std dev = 0.991, 45.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=44 */
%   | else if ( follows(A, E) )
%   | | then return 0.2340695827481224;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.043591822216641284;  // std dev = 0.194, 128.000 (wgt'ed) examples reached here.  /* #neg=110 #pos=18 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.006309851054392104;  // std dev = 1.145, 41.000 (wgt'ed) examples reached here.  /* #neg=33 #pos=8 */
%   | | | else return 0.04617906175800959;  // std dev = 1.315, 18.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=4 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.12316620936103632;  // std dev = 0.265, 50.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=46 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.33286772919920155;  // std dev = 0.529, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09470115985113611;  // std dev = 0.061, 158.000 (wgt'ed) examples reached here.  /* #neg=158 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.5248540858171868;  // std dev = 0.426, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10122694503126457;  // std dev = 0.063, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.21159283608853124;  // std dev = 0.642, 60.000 (wgt'ed) examples reached here.  /* #pos=60 */
%   | | else return 0.15091244296234108;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(A, C) )
%   | | then return -0.08836675177782284;  // std dev = 0.004, 99.000 (wgt'ed) examples reached here.  /* #neg=99 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07612165855312232;  // std dev = 2.63e-09, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.07052139150432499;  // std dev = 7.48e-06, 5.000 (wgt'ed) examples reached here.  /* #neg=5 */
%   else if ( tweets(A, G) )
%   | then return 0.05085217441653169;  // std dev = 0.796, 20.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.3346526251411378;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.07261883714239781;  // std dev = 0.990, 11.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.776', 'seconds']
Parameter learned model CLL:-0.111101 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [1.392, 2, 63], 'true,false,true': [8.94e-08, 101, 0], 'true,false,false': [0.0, 20, 0], 'false,true,true,true': [0.0, 0, 8], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.0, 13, 0], 'false,false': [0.433, 12, 4]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.384, 2, 45], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.304, 103, 18], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [5.27e-09, 11, 0], 'false,false,false,true': [1.196, 2, 4], 'false,false,false,false': [2.242, 25, 8]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.642, 3, 41], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.0, 0, 0], 'true,false,false': [0.132, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 5], 'false,false,true,false': [0.0, 0, 3], 'false,false,false,true': [3.158, 112, 16], 'false,false,false,false': [1.925, 31, 5]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.122, 3, 75], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.043, 107, 0], 'false,true,false,false': [0.0, 21, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.072, 19, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.899, 1, 43], 'true,false': [0.676, 1, 3], 'false,true,true': [1.265, 2, 8], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.965, 1, 15], 'false,false,true,false': [1.904, 143, 6], 'false,false,false': [1.32e-09, 9, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [2.753, 106, 57], 'false,true': [1.05e-08, 0, 6], 'false,false,true': [1.041, 1, 12], 'false,false,false,true': [0.064, 20, 0], 'false,false,false,false': [0.075, 14, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [2.148, 4, 65], 'true,false': [1.74, 141, 7], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.447, 6, 3]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [0.991, 1, 44], 'true,false,true': [0.0, 0, 1], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.194, 110, 18], 'false,false,false,true': [1.145, 33, 8], 'false,false,false,false': [1.315, 14, 4]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.265, 4, 46], 'false,true,true,true': [0.529, 0, 21], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.061, 158, 0], 'false,false,true': [0.426, 0, 8], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.063, 20, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [0.642, 0, 60], 'true,true,false': [0.0, 0, 3], 'true,false,true': [0.004, 99, 0], 'true,false,false,true': [2.63e-09, 6, 0], 'true,false,false,false': [7.48e-06, 5, 0], 'false,true': [0.796, 12, 8], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.99, 8, 3]}]
{'': [0.2239854318418316, 0.2191380569758943], 'true': [0.02982248520709983, 1.8350793795457133e-17], 'false': [0.23582766439909303, 0.18749999999999983], 'false,true': [-2.220446049250313e-16, -1.2810265668751807e-17], 'true,false': [7.91446116564468e-17, 2.7755575615628915e-18], 'false,true,true': [-2.220446049250313e-16, nan]}
{'': [0.04074241738343076, 0.11057075094349647], 'false': [0.09221801881348718, 0.1511745472545127], 'false,false': [2.523234146875356e-18, 0.179529056757915], 'false,false,false': [0.23828037874190752, 0.15228772432948576], 'false,true': [nan, 0.09221801881348718], 'false,false,true': [nan, 2.523234146875356e-18]}
{'': [0.05777755351198835, 0.0949323082715131], 'false': [nan, 0.09493230827151312], 'false,false': [0.0, 0.08345161373545588], 'false,false,false': [0.07793002549944841, 0.10293167934015461], 'true': [0.060854054280235714, 0.004369634537956302], 'true,true': [0.06130793549015243, 0.0], 'true,false': [nan, 0.004369634537956302], 'false,false,true': [0.0, -3.700743415417188e-17]}
{'': [0.057717314737240635, 0.00011071432702935073], 'false': [1.5415883188464596e-05, 0.0002703216780689317], 'false,false': [nan, 0.0002703216780689317], 'false,false,false': [nan, 0.0002703216780689317], 'false,true': [nan, 1.541588318846633e-05], 'false,true,false': [1.7261370262287064e-05, -5.28677630773884e-18]}
{'': [0.026764464391052917, 0.06655928485229837], 'false': [0.16, 0.06015019414199305], 'false,true': [0.16, nan], 'false,false': [0.06310905937179667, 1.5419764230904951e-18], 'false,false,true': [0.058207040694535195, 0.024333705946174882], 'true': [0.018347937962941593, 0.11412342256357835]}
{'': [0.04648390936551703, 0.08530675250182308], 'false': [1.850371707708594e-17, 0.08959681262449934], 'false,false': [0.08329701744772647, 0.00028833057375271694], 'true': [nan, 0.04648390936551704], 'true,false': [nan, 0.04648390936551703], 'false,false,false': [0.00020544060260175995, 0.0004067384294739502]}
{'': [0.05784433809458117, 0.022176734312023123], 'true': [0.06689383398389674, 0.02045432865611762], 'false': [nan, 0.022176734312023123], 'false,false': [nan, 0.022176734312023123], 'false,false,false': [nan, 0.022176734312023123]}
{'': [0.02141798812905925, 0.04281429258268333], 'false': [nan, 0.042814292582683315], 'false,false': [0.03763715974994096, 0.05210179755246649], 'false,false,false': [0.03198223659623467, 0.09601513513115986], 'true': [0.02184378452593191, 0.0], 'true,false': [0.0, nan]}
{'': [0.07021316744280441, 0.03120515987571571], 'false': [0.020516697429439325, 0.08662355686778614], 'false,false': [0.022695869037748007, 0.0002010728031558065], 'false,true': [0.013337550338787977, 2.329986241815852e-05], 'false,true,true': [0.013337550338787977, nan], 'false,false,false': [nan, 0.0002010728031558065]}
{'': [0.02268850876422863, 0.05284442797191534], 'false': [0.031657466828103595, 0.08696777663427308], 'false,false': [0.0, 0.08915212930873229], 'false,false,false': [nan, 0.08915212930873229], 'true': [0.006711665419953903, 2.0595563965181645e-05], 'true,true': [0.006871910114287361, 0.0], 'true,false': [1.4357574462552357e-07, 7.77595327683211e-06], 'true,false,false': [1.1564823173178713e-18, 1.1199300514741495e-11]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 7.393
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | | then return 0.8116373071925351;  // std dev = 1.381, 43.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=41 */
%   | | | else return 0.1081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.8581489350995123;  // std dev = 0.000, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048763;  // std dev = 8.69e-08, 105.000 (wgt'ed) examples reached here.  /* #neg=105 */
%   | | else return -0.1418510649004878;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #neg=13 */
%   else if ( tweets(A, G) )
%   | then if ( tweets(H, G), recursion_accounttype(H, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 19.000 (wgt'ed) examples reached here.  /* #neg=19 */
%   | else return 0.09344305274657114;  // std dev = 0.424, 17.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=4 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then return 0.7287644022461034;  // std dev = 2.58e-08, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else return 0.7194734122109544;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then return 0.7519050093640343;  // std dev = 0.103, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.02761202212699362;  // std dev = 2.635, 95.000 (wgt'ed) examples reached here.  /* #neg=84 #pos=11 */
%   | | | else return -0.07423748393812801;  // std dev = 1.158, 33.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=2 */
%   | else if ( follows(H, A), follows(I, H) )
%   | | then if ( follows(A, J), tweets(A, K) )
%   | | | then return -0.14974313173264217;  // std dev = 0.133, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
%   | | | else return -0.12544463852839138;  // std dev = 7.45e-09, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( follows(A, L), recursion_accounttype(L, B) )
%   | | | then return 0.7512023519065563;  // std dev = 0.110, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.09064167892273421;  // std dev = 2.217, 32.000 (wgt'ed) examples reached here.  /* #neg=24 #pos=8 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.5645375401624761;  // std dev = 9.42e-08, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | | | else return 0.5588405172607842;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.21908876075733488;  // std dev = 0.707, 2.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=1 */
%   | else return 0.41738730367817406;  // std dev = 0.792, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5553664367462846;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7230132453885918;  // std dev = 0.036, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.12393372577078264;  // std dev = 0.102, 119.000 (wgt'ed) examples reached here.  /* #neg=119 */
%   | | else if ( follows(A, J) )
%   | | | then return 0.17423086746975738;  // std dev = 1.815, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
%   | | | else return -0.11231637819360639;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(D, E) )
%   | | then if ( follows(F, A) )
%   | | | then return 0.42393533313439075;  // std dev = 0.008, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.17281778287534624;  // std dev = 0.663, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.5825640537651772;  // std dev = 0.173, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0.41751358415830986;  // std dev = 1.05e-08, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( follows(A, H), follows(H, I) )
%   | | | then return 0.5589223710275015;  // std dev = 0.044, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return 0.7358896779031291;  // std dev = 0.178, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(J, A) )
%   | then return -0.10734181452928925;  // std dev = 0.003, 125.000 (wgt'ed) examples reached here.  /* #neg=125 */
%   | else if ( follows(A, K), follows(K, L) )
%   | | then return -0.12733645359139276;  // std dev = 0.011, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else return -0.16805493607276278;  // std dev = 0.016, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(A, E), follows(E, D) )
%   | | then if ( follows(E, A) )
%   | | | then return 0.32544174105841295;  // std dev = 6.32e-08, 35.000 (wgt'ed) examples reached here.  /* #pos=35 */
%   | | | else return 0.32162408250675767;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return 0.39513393209191755;  // std dev = 0.171, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | else return 0.13005040961747608;  // std dev = 0.944, 6.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then return 0.3207118471601497;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | else if ( follows(A, G) )
%   | | then if ( follows(A, H), follows(H, I) )
%   | | | then return -0.04818145680060743;  // std dev = 1.915, 149.000 (wgt'ed) examples reached here.  /* #neg=134 #pos=15 */
%   | | | else return 0.05407302460010078;  // std dev = 1.535, 21.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=6 */
%   | | else return -0.0922092126199182;  // std dev = 0.000, 6.000 (wgt'ed) examples reached here.  /* #neg=6 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(A, D), recursion_accounttype(D, B) )
%   | then if ( follows(E, A), follows(D, E) )
%   | | then return 0.2581301867184389;  // std dev = 0.000790, 39.000 (wgt'ed) examples reached here.  /* #pos=39 */
%   | | else return 0.046451713518727455;  // std dev = 0.922, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else if ( tweets(A, F) )
%   | | then if ( tweets(G, F), recursion_accounttype(G, B) )
%   | | | then return 0.4193810850275659;  // std dev = 0.172, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.09544265693718051;  // std dev = 4.47e-08, 80.000 (wgt'ed) examples reached here.  /* #neg=80 */
%   | | else return -0.029699299390898822;  // std dev = 0.163, 23.000 (wgt'ed) examples reached here.  /* #neg=20 #pos=3 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.2551722425694894;  // std dev = 7.45e-09, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.4060783363829119;  // std dev = 0.176, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.6071609662060953;  // std dev = 0.174, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else return -0.11728932337668986;  // std dev = 0.031, 45.000 (wgt'ed) examples reached here.  /* #neg=45 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(D, C) )
%   | then return 0.21115128368001979;  // std dev = 0.005, 38.000 (wgt'ed) examples reached here.  /* #pos=38 */
%   | else return 0.09855858424612354;  // std dev = 0.335, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), recursion_accounttype(F, B) )
%   | | then if ( follows(E, G), follows(G, A) )
%   | | | then return -0.02759080765964128;  // std dev = 0.889, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return 0.3243290233897633;  // std dev = 0.311, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else return -0.0876382495931584;  // std dev = 0.008, 124.000 (wgt'ed) examples reached here.  /* #neg=124 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.27901851448109555;  // std dev = 0.087, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return -0.09656285240035045;  // std dev = 0.021, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.2475092026801536;  // std dev = 0.435, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.19617911444199979;  // std dev = 0.829, 7.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E) )
%   | | then if ( follows(F, A), follows(F, E) )
%   | | | then return 0.13149476300293886;  // std dev = 1.369, 41.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=39 */
%   | | | else return -0.11390807187494296;  // std dev = 0.816, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return -0.07310650018491416;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return 0.242306866521104;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   else if ( follows(G, A) )
%   | then if ( follows(H, G), follows(H, A) )
%   | | then return -0.07137200040396358;  // std dev = 0.059, 100.000 (wgt'ed) examples reached here.  /* #neg=98 #pos=2 */
%   | | else return 0.00433920914070657;  // std dev = 0.153, 63.000 (wgt'ed) examples reached here.  /* #neg=47 #pos=16 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.22390578449118687;  // std dev = 0.078, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.08862847548322343;  // std dev = 0.654, 10.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=5 */
%   | | | else return -0.017982115407623053;  // std dev = 0.955, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.16512511241646338;  // std dev = 0.018, 37.000 (wgt'ed) examples reached here.  /* #pos=37 */
%   | else if ( follows(E, A) )
%   | | then if ( tweets(A, F) )
%   | | | then return -0.0731432598083121;  // std dev = 0.809, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return -0.07576362858047321;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.18768156534104408;  // std dev = 0.068, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(G, A) )
%   | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | then return 0.25171440970064857;  // std dev = 0.069, 21.000 (wgt'ed) examples reached here.  /* #pos=21 */
%   | | else return -0.07565835371166565;  // std dev = 0.004, 106.000 (wgt'ed) examples reached here.  /* #neg=106 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( tweets(A, J) )
%   | | | then return 0.27474415690309073;  // std dev = 0.065, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.46664056472033105;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return -0.13032071326772496;  // std dev = 0.042, 20.000 (wgt'ed) examples reached here.  /* #neg=20 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.15603610021135988;  // std dev = 0.130, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | else return -0.02411558729988239;  // std dev = 0.611, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | else return -0.07151588637689378;  // std dev = 0.005, 138.000 (wgt'ed) examples reached here.  /* #neg=138 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( follows(A, H) )
%   | | | then return -0.005783921553530217;  // std dev = 0.329, 9.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=3 */
%   | | | else return -0.10286845693435762;  // std dev = 0.845, 10.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=2 */
%   | | else return 0.04501178705123404;  // std dev = 0.488, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.19947567786913578;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return -0.09300177543640815;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #neg=4 */
%   | | | else return -0.03480907695040777;  // std dev = 0.778, 12.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=3 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '16.406', 'seconds']
Refined model CLL: -0.104054


******************************************
Best model found
******************************************
Results 

CLL : -0.096963 

AUC ROC : 0.995539 

AUC PR : 0.435055 

Precision : 0.34763 

Recall : 0.987179 

F1 : 0.51419 

Total Learning Time : 7.393 

Total Inference Time : 8.450441360473633 

Total revision time: 23.085793714523316
Best scored revision CLL: -0.104054


Results 

CLL : -0.096963 

AUC ROC : 0.995539 

AUC PR : 0.435055 

Precision : 0.34763 

Recall : 0.987179 

F1 : 0.51419 

Total Learning Time : 50.73656008720398 

Total Inference Time : 8.450441360473633 

Amount of data: 0.8
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.051
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8013307532813301;  // std dev = 2.172, 88.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=83 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048804;  // std dev = 0.000, 147.000 (wgt'ed) examples reached here.  /* #neg=147 */
%   | | else return -0.05851773156715447;  // std dev = 0.276, 24.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.14185106490048777;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #neg=1 */
%   | | else return -0.14185106490048774;  // std dev = 1.49e-08, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else return 0.14981560176617903;  // std dev = 0.455, 24.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=7 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7172707191529247;  // std dev = 1.003, 64.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=63 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.015546785241582635;  // std dev = 0.289, 161.000 (wgt'ed) examples reached here.  /* #neg=140 #pos=21 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.08942137051732874;  // std dev = 0.977, 22.000 (wgt'ed) examples reached here.  /* #neg=21 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.7493340518617103;  // std dev = 0.103, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.10012863125185108;  // std dev = 2.651, 42.000 (wgt'ed) examples reached here.  /* #neg=31 #pos=11 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5380769832564851;  // std dev = 1.553, 57.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=54 */
%   | | else return 0.7338444224777043;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.8165651331757182;  // std dev = 0.083, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.588766918228219;  // std dev = 0.141, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5698890582034534;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return 0.5698890582034533;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.03319387805466029;  // std dev = 3.307, 156.000 (wgt'ed) examples reached here.  /* #neg=139 #pos=17 */
%   | | | else return 0.002746928589842149;  // std dev = 2.593, 58.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.5172146307460347;  // std dev = 1.808, 102.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=100 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.12058157629167127;  // std dev = 0.023, 113.000 (wgt'ed) examples reached here.  /* #neg=113 */
%   | | | else return -0.12421901450067029;  // std dev = 0.002, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1555527609242152;  // std dev = 0.120, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.3211397820768383;  // std dev = 0.972, 58.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=57 */
%   | else return 0.4070667791104897;  // std dev = 0.140, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.3088064541039412;  // std dev = 0.000, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6351844534046119;  // std dev = 0.161, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.08444390095422642;  // std dev = 2.055, 200.000 (wgt'ed) examples reached here.  /* #neg=193 #pos=7 */
%   | | else return -0.10893028704569635;  // std dev = 2.63e-09, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.030515545865430885;  // std dev = 3.000, 230.000 (wgt'ed) examples reached here.  /* #neg=156 #pos=74 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.25777119898773315;  // std dev = 0.102, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.5300658520748391;  // std dev = 0.753, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11822510768188353;  // std dev = 0.081, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | | | else return -0.11161054539458708;  // std dev = 0.106, 32.000 (wgt'ed) examples reached here.  /* #neg=32 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.26409756291805997;  // std dev = 1.928, 89.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=86 */
%   | else return -0.07784731377466327;  // std dev = 1.824, 208.000 (wgt'ed) examples reached here.  /* #neg=199 #pos=9 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.05523799823298833;  // std dev = 0.949, 22.000 (wgt'ed) examples reached here.  /* #neg=17 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.15208804046179109;  // std dev = 1.685, 64.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=61 */
%   | else if ( follows(A, E) )
%   | | then return 0.22105558948807935;  // std dev = 0.035, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.03154761078843517;  // std dev = 0.164, 154.000 (wgt'ed) examples reached here.  /* #neg=133 #pos=21 */
%   | | else if ( tweets(A, G) )
%   | | | then return 0.001809934226050075;  // std dev = 1.135, 39.000 (wgt'ed) examples reached here.  /* #neg=30 #pos=9 */
%   | | | else return 0.10771760158980732;  // std dev = 1.443, 20.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=7 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.16554441316116883;  // std dev = 0.167, 63.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=61 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.2981824014871459;  // std dev = 0.623, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09277311554015306;  // std dev = 0.043, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.4811998899442045;  // std dev = 0.469, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.10299257771490461;  // std dev = 0.108, 31.000 (wgt'ed) examples reached here.  /* #neg=31 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17381328224510859;  // std dev = 1.526, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | | else return 0.14634979689032698;  // std dev = 0.003, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else if ( follows(A, C) )
%   | | then return -0.08629341813037;  // std dev = 0.013, 139.000 (wgt'ed) examples reached here.  /* #neg=139 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.07809928954204114;  // std dev = 2.63e-09, 8.000 (wgt'ed) examples reached here.  /* #neg=8 */
%   | | | else return 0.00394224483104165;  // std dev = 0.433, 8.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.02360458520299828;  // std dev = 0.781, 23.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=8 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.20789208189271247;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.11719128086432552;  // std dev = 1.072, 14.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=6 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.606', 'seconds']
Parameter learned model CLL:-0.112843 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.172, 5, 83], 'true,false,true': [0.0, 147, 0], 'true,false,false': [0.276, 22, 2], 'false,true,true,true': [0.0, 0, 8], 'false,true,true,false': [0.0, 1, 0], 'false,true,false': [1.49e-08, 24, 0], 'false,false': [0.455, 17, 7]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [1.003, 1, 63], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.289, 140, 21], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.977, 21, 1], 'false,false,false,true': [0.103, 0, 4], 'false,false,false,false': [2.651, 31, 11]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.553, 3, 54], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.083, 0, 2], 'true,false,false': [0.141, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 8], 'false,false,true,false': [0.0, 0, 5], 'false,false,false,true': [3.307, 139, 17], 'false,false,false,false': [2.593, 49, 9]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [1.808, 2, 100], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.023, 113, 0], 'false,true,false,false': [0.002, 24, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.12, 32, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [0.972, 1, 57], 'true,false': [0.14, 0, 4], 'false,true,true': [0.0, 0, 13], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.161, 0, 19], 'false,false,true,false': [2.055, 193, 7], 'false,false,false': [2.63e-09, 15, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.0, 156, 74], 'false,true': [0.102, 0, 10], 'false,false,true': [0.753, 0, 16], 'false,false,false,true': [0.081, 22, 0], 'false,false,false,false': [0.106, 32, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.928, 3, 86], 'true,false': [1.824, 199, 9], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.949, 17, 5]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.685, 3, 61], 'true,false,true': [0.035, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.164, 133, 21], 'false,false,false,true': [1.135, 30, 9], 'false,false,false,false': [1.443, 13, 7]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.167, 2, 61], 'false,true,true,true': [0.623, 0, 28], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.043, 150, 0], 'false,false,true': [0.469, 0, 11], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.108, 31, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.526, 2, 77], 'true,true,false': [0.003, 0, 6], 'true,false,true': [0.013, 139, 0], 'true,false,false,true': [2.63e-09, 8, 0], 'true,false,false,false': [0.433, 6, 2], 'false,true': [0.781, 15, 8], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.072, 8, 6]}]
{'': [0.22047971854921738, 0.1939058171745147], 'true': [0.0535898760330578, 0.011559112205464756], 'false': [0.1836547291092747, 0.20659722222222232], 'false,true': [0.09876543209876527, 9.25185853854297e-18], 'false,true,true': [-2.220446049250313e-16, 0.0], 'true,false': [-1.0573552615477681e-16, 0.07638888888888894]}
{'': [0.01572397805563497, 0.10627933805428906], 'false': [0.08380738395174447, 0.153464394885185], 'false,false': [0.04338842975206607, 0.18653029445693953], 'false,false,false': [0.002674973401056824, 0.16739096171636705], 'false,true': [nan, 0.08380738395174447], 'false,false,true': [nan, 0.04338842975206607]}
{'': [0.041050409014805334, 0.09703881710801046], 'false': [nan, 0.09703881710801052], 'false,false': [-2.049642507000289e-16, 0.08277197599564123], 'false,false,false': [0.07008315820635264, 0.11595887699800576], 'true': [0.04221721903529403, 0.016005385145523965], 'true,true': [0.04229709803083861, 0.0], 'true,false': [0.003440598455949573, 0.004990436245888907], 'false,false,true': [-1.1102230246251565e-16, 0.0]}
{'': [0.03205813773850841, 0.0002707595889393244], 'false': [5.72451205480016e-06, 0.0004498283655121546], 'false,false': [nan, 0.0004498283655121546], 'false,false,false': [nan, 0.0004498283655121546], 'false,true': [nan, 5.72451205480016e-06], 'false,true,false': [4.5911231003025215e-06, 1.4776015945748103e-07]}
{'': [0.015997232102929516, 0.0596619019358964], 'false': [-5.124106267500723e-17, 0.057020804018731046], 'false,false': [0.060442039286040194, 7.401486830834377e-18], 'false,false,true': [0.001370850493562664, 0.021124878022480607], 'true': [0.016287714186319854, 0.004878144611271729], 'false,true': [-5.124106267500723e-17, nan]}
{'': [0.0391199185349388, 0.07703865274194596], 'false': [0.001038216925548474, 0.08157944341274526], 'false,false': [0.035459555509859686, 0.00033847697057984397], 'true': [nan, 0.03911991853493852], 'true,false': [nan, 0.0391199185349388], 'false,false,false': [0.0002987556480736115, 0.00034796031399634067]}
{'': [0.04824865234295735, 0.04097206749449973], 'true': [0.04175573465961198, 0.01598835144383978], 'false': [nan, 0.04097206749449973], 'false,false': [nan, 0.04097206749449973], 'false,false,false': [nan, 0.04097206749449973]}
{'': [0.043154786623646475, 0.03693848756948861], 'true': [0.044340196890164815, 0.0006092723314780613], 'false': [nan, 0.0369384875694886], 'false,false': [0.02691785959755186, 0.059625964663351336], 'false,false,false': [0.033019835660815275, 0.10409366323099396], 'true,false': [0.0006092723314780613, nan]}
{'': [0.027763919411270897, 0.03283843991398412], 'false': [0.022455276920643193, 0.0714974452812632], 'false,false': [0.02003236313303375, 0.00037617167261114464], 'false,true': [0.013883637084258502, 1.2091321744012914e-05], 'false,true,true': [0.013883637084258502, nan], 'false,false,false': [nan, 0.00037617167261114464]}
{'': [0.025407456959979542, 0.04884597445066951], 'false': [0.026514623366819538, 0.07707904251985082], 'false,false': [0.0, 0.08203624606031314], 'false,false,false': [nan, 0.08203624606031314], 'true': [0.027438122243927103, 0.0016082652326902776], 'true,true': [0.029468704518474956, 1.1199521989709489e-06], 'true,false': [1.1662491998319198e-06, 0.013397855527297322], 'true,false,false': [8.673617379884035e-19, 0.023430304373449787]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
0;false,true,true;follows(F, G), follows(A, G).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 15.362
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( tweets(E, F), follows(E, G) )
%   | | | then return 0.8392810105712104;  // std dev = 0.991, 53.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=52 */
%   | | | else return 0.6081489350995122;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return 0.8581489350995121;  // std dev = 8.43e-08, 28.000 (wgt'ed) examples reached here.  /* #pos=28 */
%   | else return -0.12669954974897263;  // std dev = 0.122, 132.000 (wgt'ed) examples reached here.  /* #neg=130 #pos=2 */
%   else if ( tweets(A, H) )
%   | then if ( tweets(I, H), recursion_accounttype(I, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return -0.14185106490048777;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | else if ( follows(A, J), follows(J, K) )
%   | | then if ( follows(A, K) )
%   | | | then return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | | else return 0.10814893509951219;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=1 */
%   | | else return 0.274815601766179;  // std dev = 0.493, 12.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=5 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(C, D) )
%   | then return 0.7080491095586429;  // std dev = 0.136, 55.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=54 */
%   | else return 0.6257501966053864;  // std dev = 0.301, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   else if ( follows(E, A) )
%   | then if ( follows(E, F), follows(F, A) )
%   | | then return -0.1038157048861039;  // std dev = 0.139, 109.000 (wgt'ed) examples reached here.  /* #neg=106 #pos=3 */
%   | | else if ( follows(E, G), recursion_accounttype(G, B) )
%   | | | then return 0.7310508024708152;  // std dev = 0.153, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.12711634027564328;  // std dev = 4.47e-08, 52.000 (wgt'ed) examples reached here.  /* #neg=52 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.7551859909608977;  // std dev = 0.149, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   | | | else return -0.1374798079827326;  // std dev = 0.057, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.12803077669341234;  // std dev = 1.224, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | | else return 0.2059160259323393;  // std dev = 1.754, 13.000 (wgt'ed) examples reached here.  /* #neg=8 #pos=5 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( follows(F, A), recursion_accounttype(F, B) )
%   | | | then return 0.4909702216639191;  // std dev = 1.933, 53.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=49 */
%   | | | else return 0.4215643522239441;  // std dev = 0.743, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.613204003453439;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.5266649960086127;  // std dev = 0.347, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5659503060896414;  // std dev = 0.010, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.5899930082780701;  // std dev = 0.290, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | | else return -0.11511759069305603;  // std dev = 0.016, 196.000 (wgt'ed) examples reached here.  /* #neg=196 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.011105171882508542;  // std dev = 1.379, 23.000 (wgt'ed) examples reached here.  /* #neg=19 #pos=4 */
%   | | | else return 0.09317478694430786;  // std dev = 2.084, 23.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=7 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(E, D) )
%   | then if ( follows(A, F), follows(D, F) )
%   | | then if ( follows(F, E), recursion_accounttype(E, B) )
%   | | | then return 0.4453950001222701;  // std dev = 0.318, 65.000 (wgt'ed) examples reached here.  /* #pos=65 */
%   | | | else return 0.26589448543428607;  // std dev = 1.156, 9.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=7 */
%   | | else if ( follows(A, D), tweets(A, G) )
%   | | | then return 0.4288120556707972;  // std dev = 0.101, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | | | else return 0.138459669778155;  // std dev = 1.441, 10.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=7 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return 0.5002320212117196;  // std dev = 0.230, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.672749145006077;  // std dev = 0.000, 3.000 (wgt'ed) examples reached here.  /* #pos=3 */
%   | | else return 0.7447534007740568;  // std dev = 0.090, 7.000 (wgt'ed) examples reached here.  /* #pos=7 */
%   else if ( follows(K, A) )
%   | then return -0.1040652631730288;  // std dev = 0.001, 154.000 (wgt'ed) examples reached here.  /* #neg=154 */
%   | else return -0.16843373550505714;  // std dev = 0.293, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( recursion_accounttype(D, B) )
%   | | then if ( follows(D, E), follows(E, A) )
%   | | | then return 0.33896110658144585;  // std dev = 0.088, 44.000 (wgt'ed) examples reached here.  /* #pos=44 */
%   | | | else return 0.19995624031513057;  // std dev = 0.951, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | else return 0.23935049731168048;  // std dev = 0.282, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | else return 0.4272732814523881;  // std dev = 0.314, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.32483509105359115;  // std dev = 0.017, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else return 0.4041244148142663;  // std dev = 0.000, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.37981305402269977;  // std dev = 0.398, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return -0.08036121756739491;  // std dev = 1.801, 207.000 (wgt'ed) examples reached here.  /* #neg=200 #pos=7 */
%   | | else return -0.09537550862056171;  // std dev = 3.73e-09, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(D, F), follows(F, A) )
%   | | | then return 0.2063784681958475;  // std dev = 1.374, 34.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=32 */
%   | | | else return -0.01950023507266792;  // std dev = 0.796, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2814920448603279;  // std dev = 0.034, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.15778759179185314;  // std dev = 0.353, 7.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=6 */
%   | | else return -0.053530321731383744;  // std dev = 0.108, 157.000 (wgt'ed) examples reached here.  /* #neg=142 #pos=15 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.3031878018490864;  // std dev = 0.053, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), recursion_accounttype(J, B) )
%   | | | then return 0.14442566619755715;  // std dev = 0.953, 6.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=5 */
%   | | | else return 0.5187188136104383;  // std dev = 0.369, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | | else return -0.11115624623431411;  // std dev = 0.037, 56.000 (wgt'ed) examples reached here.  /* #neg=56 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(A, D), follows(D, C) )
%   | then return 0.23845835617558211;  // std dev = 0.042, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | else if ( follows(C, A), tweets(C, E) )
%   | | then return -0.0458641499813817;  // std dev = 0.836, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.2665933848264309;  // std dev = 0.150, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(G, F), recursion_accounttype(G, B) )
%   | | then return 0.2218360448642308;  // std dev = 0.193, 29.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=28 */
%   | | else return -0.08308214556577381;  // std dev = 0.027, 187.000 (wgt'ed) examples reached here.  /* #neg=187 */
%   | else if ( tweets(A, H) )
%   | | then if ( follows(A, I), follows(I, J) )
%   | | | then return -0.03698882715979135;  // std dev = 0.404, 14.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=2 */
%   | | | else return -0.005155734932811429;  // std dev = 0.958, 10.000 (wgt'ed) examples reached here.  /* #neg=7 #pos=3 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.07012118778284568;  // std dev = 0.471, 5.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=2 */
%   | | | else return 0.10233293967375405;  // std dev = 1.055, 10.000 (wgt'ed) examples reached here.  /* #neg=6 #pos=4 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then if ( tweets(G, F), follows(G, A) )
%   | | | then return 0.16808298535362165;  // std dev = 1.015, 43.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=42 */
%   | | | else return -0.13275651644590358;  // std dev = 0.848, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.1952507815549032;  // std dev = 0.037, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else return 0.2543107573494809;  // std dev = 0.086, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(H, A) )
%   | then return -0.0451356624589892;  // std dev = 0.134, 173.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=22 */
%   | else if ( follows(A, I), follows(I, J) )
%   | | then if ( recursion_accounttype(J, B) )
%   | | | then return 0.09075810474774423;  // std dev = 1.012, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | | else return -0.08433250901990069;  // std dev = 0.046, 15.000 (wgt'ed) examples reached here.  /* #neg=15 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.1471792864035993;  // std dev = 0.631, 6.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=3 */
%   | | | else return 0.04206671178629661;  // std dev = 1.150, 14.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=5 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then return 0.16630470698919544;  // std dev = 0.021, 46.000 (wgt'ed) examples reached here.  /* #pos=46 */
%   | | else return 0.2545906168402508;  // std dev = 0.058, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   | else return -0.01080139845771817;  // std dev = 0.890, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H), follows(H, A) )
%   | | | then return 0.2293794032478418;  // std dev = 0.310, 19.000 (wgt'ed) examples reached here.  /* #pos=19 */
%   | | | else return 0.16581857927331212;  // std dev = 0.054, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return -0.07411082362332273;  // std dev = 0.020, 168.000 (wgt'ed) examples reached here.  /* #neg=168 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.06330655932839238;  // std dev = 0.864, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.2973024900838039;  // std dev = 1.001, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return -0.10520415291258804;  // std dev = 0.040, 24.000 (wgt'ed) examples reached here.  /* #neg=24 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.13950391967530892;  // std dev = 0.142, 79.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=77 */
%   | | else return 0.1550889774324699;  // std dev = 0.012, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | else return -0.06446540623656884;  // std dev = 0.041, 154.000 (wgt'ed) examples reached here.  /* #neg=152 #pos=2 */
%   else if ( tweets(A, F) )
%   | then if ( follows(A, G), follows(G, H) )
%   | | then if ( recursion_accounttype(G, B) )
%   | | | then return -0.18516509660489788;  // std dev = 0.818, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | | else return -0.007314533227333271;  // std dev = 0.387, 13.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=3 */
%   | | else return 0.1363409653953299;  // std dev = 0.458, 5.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=3 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.30540128917140186;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.09459594560620682;  // std dev = 0.372, 4.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=2 */
%   | | | else return -0.010638419380108535;  // std dev = 0.976, 14.000 (wgt'ed) examples reached here.  /* #neg=10 #pos=4 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '14.480', 'seconds']
Refined model CLL: -0.101406


******************************************
Best model found
******************************************
Results 

CLL : -0.098844 

AUC ROC : 0.995618 

AUC PR : 0.486415 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 15.362 

Total Inference Time : 9.942480087280273 

Total revision time: 33.79775060462951
Best scored revision CLL: -0.101406


Results 

CLL : -0.098844 

AUC ROC : 0.995618 

AUC PR : 0.486415 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 61.44851697731018 

Total Inference Time : 9.942480087280273 

Amount of data: 1.0
Training using transfer 

******************************************
Performing Parameter Learning
******************************************
Refine
0;;proteinclass(A, B) :- interaction(C, A).;true;true
0;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
0;true,false;interaction(A, C).;false;true
0;true,false,false;interaction(E, C), complex(E, F).;false;false
0;false;location(A, G).;true;true
0;false,true;location(H, G), recursion_proteinclass(H, B).;true;false
0;false,true,true;interaction(H, I), interaction(A, I).;false;false
0;false,false;enzyme(A, J).;false;false
1;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;false;true
1;false;interaction(A, D), interaction(D, A).;true;true
1;false,true;interaction(A, A).;false;true
1;false,true,false;complex(D, E).;false;false
1;false,false;interaction(F, A), interaction(G, F).;true;true
1;false,false,true;interaction(F, F), complex(G, H).;false;false
1;false,false,false;interaction(A, I), recursion_proteinclass(I, B).;false;false
2;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
2;true;interaction(D, A), interaction(A, D).;true;true
2;true,true;interaction(C, E).;false;false
2;true,false;interaction(F, A).;false;false
2;false;interaction(A, A).;false;true
2;false,false;interaction(G, A), recursion_proteinclass(G, B).;true;true
2;false,false,true;interaction(A, H), enzyme(A, I).;false;false
2;false,false,false;location(A, J), complex(A, K).;false;false
3;;proteinclass(A, B) :- complex(A, C).;true;true
3;true;complex(D, C), recursion_proteinclass(D, B).;false;false
3;false;interaction(E, A), complex(E, F).;true;true
3;false,true;interaction(G, E), recursion_proteinclass(G, B).;true;true
3;false,true,true;enzyme(A, H), phenotype(E, I).;false;false
3;false,true,false;location(A, J).;false;false
3;false,false;interaction(K, A), recursion_proteinclass(K, B).;false;true
3;false,false,false;interaction(A, A).;false;false
4;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
4;true;interaction(C, D), complex(D, E).;false;false
4;false;interaction(F, A), recursion_proteinclass(F, B).;true;true
4;false,true;phenotype(F, G), phenotype(A, H).;false;true
4;false,true,false;interaction(I, F), interaction(F, I).;false;false
4;false,false;complex(A, J), interaction(A, K).;true;true
4;false,false,true;interaction(K, L), recursion_proteinclass(L, B).;false;false
4;false,false,false;phenotype(A, M), enzyme(A, N).;false;false
5;;proteinclass(A, B) :- interaction(C, A), interaction(A, C).;true;true
5;true;enzyme(C, D).;false;true
5;true,false;recursion_proteinclass(C, B), interaction(C, C).;false;true
5;true,false,false;interaction(C, C).;false;false
5;false;interaction(E, A), recursion_proteinclass(E, B).;false;true
5;false,false;phenotype(A, F), enzyme(A, G).;true;true
5;false,false,true;enzyme(H, G), recursion_proteinclass(H, B).;false;false
5;false,false,false;interaction(A, I), interaction(I, J).;false;false
6;;proteinclass(A, B) :- interaction(A, C), enzyme(C, D).;true;true
6;true;interaction(C, E), recursion_proteinclass(E, B).;false;false
6;false;interaction(F, A), interaction(F, F).;true;true
6;false,true;recursion_proteinclass(F, B).;false;true
6;false,true,false;interaction(F, G), recursion_proteinclass(G, B).;false;false
6;false,false;phenotype(A, H), interaction(A, I).;true;true
6;false,false,true;complex(I, J), enzyme(A, K).;false;false
6;false,false,false;interaction(A, L), recursion_proteinclass(L, B).;false;false
7;;proteinclass(A, B) :- interaction(C, A), recursion_proteinclass(C, B).;true;true
7;true;interaction(D, C), recursion_proteinclass(D, B).;false;true
7;true,false;interaction(A, E), complex(E, F).;false;true
7;true,false,false;phenotype(A, G), complex(C, H).;false;false
7;false;interaction(A, A).;false;true
7;false,false;interaction(I, A), interaction(A, I).;true;true
7;false,false,true;complex(A, J).;false;false
7;false,false,false;complex(A, K), location(A, L).;false;false
8;;proteinclass(A, B) :- interaction(A, C), recursion_proteinclass(C, B).;true;true
8;true;enzyme(C, D), phenotype(C, E).;false;false
8;false;interaction(F, A), enzyme(F, G).;true;true
8;false,true;interaction(F, H), recursion_proteinclass(H, B).;true;false
8;false,true,true;complex(H, I), interaction(H, J).;false;false
8;false,false;complex(A, K), enzyme(A, L).;true;true
8;false,false,true;enzyme(M, L), recursion_proteinclass(M, B).;false;false
8;false,false,false;interaction(N, A), phenotype(A, P).;false;false
9;;proteinclass(A, B) :- interaction(C, A), phenotype(C, D).;true;true
9;true;interaction(E, C), recursion_proteinclass(E, B).;true;true
9;true,true;interaction(A, F), interaction(E, F).;false;false
9;true,false;interaction(A, C).;false;true
9;true,false,false;interaction(G, C), interaction(G, A).;false;false
9;false;location(A, H), enzyme(A, I).;false;true
9;false,false;interaction(A, J), recursion_proteinclass(J, B).;false;true
9;false,false,false;interaction(K, A), interaction(K, K).;false;false


Model training time 2.342
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.8118526388032147;  // std dev = 2.184, 108.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=103 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048807;  // std dev = 0.000, 150.000 (wgt'ed) examples reached here.  /* #neg=150 */
%   | | else return -0.07518439823382113;  // std dev = 0.249, 30.000 (wgt'ed) examples reached here.  /* #neg=28 #pos=2 */
%   else if ( tweets(A, E) )
%   | then if ( tweets(F, E), recursion_accounttype(F, B) )
%   | | then if ( follows(F, G), follows(A, G) )
%   | | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 22.000 (wgt'ed) examples reached here.  /* #neg=22 */
%   | else return 0.30814893509951236;  // std dev = 0.497, 20.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then return 0.7304088506242442;  // std dev = 0.137, 82.000 (wgt'ed) examples reached here.  /* #pos=82 */
%   else if ( follows(A, D), follows(D, A) )
%   | then if ( follows(A, A) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.04058227433495619;  // std dev = 0.258, 218.000 (wgt'ed) examples reached here.  /* #neg=196 #pos=22 */
%   | else if ( follows(E, A), follows(F, E) )
%   | | then if ( follows(E, E) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.09722869761780853;  // std dev = 0.982, 28.000 (wgt'ed) examples reached here.  /* #neg=27 #pos=1 */
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0.743694045345338;  // std dev = 0.084, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.21020130978295792;  // std dev = 2.953, 43.000 (wgt'ed) examples reached here.  /* #neg=26 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then return 0.5554790919620134;  // std dev = 1.242, 72.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=70 */
%   | | else return 0.7366695350696505;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else if ( follows(F, A) )
%   | | then return 0.818212711675487;  // std dev = 0.084, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0.5817275881097339;  // std dev = 0.112, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then if ( follows(A, H) )
%   | | | then return 0.5640802865735585;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | | else return 0.5640802865735585;  // std dev = 0.000, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | else if ( tweets(A, I) )
%   | | | then return -0.040554151445771264;  // std dev = 3.639, 204.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=21 */
%   | | | else return -0.0013048837371287686;  // std dev = 2.811, 69.000 (wgt'ed) examples reached here.  /* #neg=58 #pos=11 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then return 0.4910140415174934;  // std dev = 2.394, 130.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=126 */
%   else if ( follows(D, A) )
%   | then if ( follows(E, D), recursion_accounttype(E, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( tweets(A, F) )
%   | | | then return -0.11723938273903649;  // std dev = 0.037, 149.000 (wgt'ed) examples reached here.  /* #neg=149 */
%   | | | else return -0.12101255019084578;  // std dev = 0.002, 35.000 (wgt'ed) examples reached here.  /* #neg=35 */
%   | else if ( follows(G, A), recursion_accounttype(G, B) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.1736023733500943;  // std dev = 0.216, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(C, D) )
%   | then return 0.28117810707304847;  // std dev = 1.979, 77.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=73 */
%   | else return 0.17963121531351836;  // std dev = 1.020, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(E, A), recursion_accounttype(E, B) )
%   | then if ( follows(F, E), follows(E, F) )
%   | | then return 0.310591419081895;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, G) )
%   | | then if ( follows(G, H), recursion_accounttype(H, B) )
%   | | | then return 0.6302920371478145;  // std dev = 0.172, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08764406297136289;  // std dev = 2.245, 249.000 (wgt'ed) examples reached here.  /* #neg=240 #pos=9 */
%   | | else return -0.10619537718610589;  // std dev = 0.000, 17.000 (wgt'ed) examples reached here.  /* #neg=17 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( recursion_accounttype(C, B), follows(C, C) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(C, C) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return 0.0396532303281698;  // std dev = 3.246, 267.000 (wgt'ed) examples reached here.  /* #neg=176 #pos=91 */
%   else if ( follows(D, A), recursion_accounttype(D, B) )
%   | then return 0.26106642862388146;  // std dev = 0.160, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(E, B) )
%   | | then return 0.4459738625652854;  // std dev = 1.306, 24.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=22 */
%   | | else if ( follows(A, F), follows(F, G) )
%   | | | then return -0.11942746281573889;  // std dev = 0.091, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   | | | else return -0.12779862899248956;  // std dev = 0.236, 43.000 (wgt'ed) examples reached here.  /* #neg=43 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(A, C) )
%   then if ( follows(C, D), recursion_accounttype(D, B) )
%   | then return 0.27887285701070563;  // std dev = 1.752, 109.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=107 */
%   | else return -0.08079300696801797;  // std dev = 2.025, 237.000 (wgt'ed) examples reached here.  /* #neg=226 #pos=11 */
%   else if ( follows(E, A), follows(E, E) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(A, F) )
%   | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.024046039156350237;  // std dev = 0.643, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then return 0.1737006066655784;  // std dev = 1.396, 82.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=80 */
%   | else if ( follows(A, E) )
%   | | then return 0.24299692613925594;  // std dev = 0.070, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   else if ( follows(A, A) )
%   | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | else if ( follows(F, A), follows(A, F) )
%   | | then return -0.04226440691164873;  // std dev = 0.160, 193.000 (wgt'ed) examples reached here.  /* #neg=171 #pos=22 */
%   | | else if ( tweets(A, G) )
%   | | | then return -0.006373859997988236;  // std dev = 1.403, 62.000 (wgt'ed) examples reached here.  /* #neg=49 #pos=13 */
%   | | | else return 0.0446363882906698;  // std dev = 1.683, 31.000 (wgt'ed) examples reached here.  /* #neg=22 #pos=9 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then return 0.15826585354256953;  // std dev = 0.192, 80.000 (wgt'ed) examples reached here.  /* #neg=3 #pos=77 */
%   else if ( follows(D, A) )
%   | then if ( follows(D, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, F) )
%   | | | then return 0.28340526148509;  // std dev = 0.711, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | | | else return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | else return -0.09014991212984427;  // std dev = 0.039, 214.000 (wgt'ed) examples reached here.  /* #neg=214 */
%   | else if ( recursion_accounttype(G, B) )
%   | | then return 0.43668546756754195;  // std dev = 0.601, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else if ( follows(H, A) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return -0.12635088454100019;  // std dev = 0.178, 38.000 (wgt'ed) examples reached here.  /* #neg=38 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then return 0.17178558509657163;  // std dev = 1.667, 96.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=94 */
%   | | else return 0.13727392158715046;  // std dev = 0.012, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, C) )
%   | | then return -0.08359145905906401;  // std dev = 0.015, 182.000 (wgt'ed) examples reached here.  /* #neg=182 */
%   | | else if ( follows(F, C), follows(F, A) )
%   | | | then return -0.08041820839836007;  // std dev = 0.000, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | | else return -0.03398676759198309;  // std dev = 0.516, 16.000 (wgt'ed) examples reached here.  /* #neg=14 #pos=2 */
%   else if ( tweets(A, G) )
%   | then return 0.019097397211362274;  // std dev = 1.001, 37.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=12 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return 0.2549661385120555;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(I, A), follows(I, I) )
%   | | | then return 0;  // std dev = 0.000, 0.000 (wgt'ed) examples reached here.
%   | | | else return 0.055954152826032756;  // std dev = 1.378, 21.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=8 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '9.970', 'seconds']
Parameter learned model CLL:-0.1118 

Strucuture after Parameter Learning 

Structure after Parameter Learning
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, C)', 'false': 'tweets(A, E)', 'false,true': 'tweets(F, E), recursion_accounttype(F, B)', 'false,true,true': 'follows(F, G), follows(A, G)'}, {'true,true': [2.184, 5, 103], 'true,false,true': [0.0, 150, 0], 'true,false,false': [0.249, 28, 2], 'false,true,true,true': [0.0, 0, 12], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [1.05e-08, 22, 0], 'false,false': [0.497, 11, 9]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'false': 'follows(A, D), follows(D, A)', 'false,true': 'follows(A, A)', 'false,false': 'follows(E, A), follows(F, E)', 'false,false,true': 'follows(E, E)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true': [0.137, 0, 82], 'false,true,true': [0.0, 0, 0], 'false,true,false': [0.258, 196, 22], 'false,false,true,true': [0.0, 0, 0], 'false,false,true,false': [0.982, 27, 1], 'false,false,false,true': [0.084, 0, 4], 'false,false,false,false': [2.953, 26, 17]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(D, A), follows(A, D)', 'true,true': 'follows(C, E)', 'true,false': 'follows(F, A)', 'false': 'follows(A, A)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,true': 'follows(A, H)', 'false,false,false': 'tweets(A, I)'}, {'true,true,true': [1.242, 2, 70], 'true,true,false': [0.0, 0, 1], 'true,false,true': [0.084, 0, 2], 'true,false,false': [0.112, 0, 4], 'false,true': [0.0, 0, 0], 'false,false,true,true': [0.0, 0, 9], 'false,false,true,false': [0.0, 0, 8], 'false,false,false,true': [3.639, 183, 21], 'false,false,false,false': [2.811, 58, 11]}]
['accounttype(A, B)', {'': 'recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(E, D), recursion_accounttype(E, B)', 'false,true,false': 'tweets(A, F)', 'false,false': 'follows(G, A), recursion_accounttype(G, B)', 'false,false,false': 'follows(A, A)'}, {'true': [2.394, 4, 126], 'false,true,true': [0.0, 0, 0], 'false,true,false,true': [0.037, 149, 0], 'false,true,false,false': [0.002, 35, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.216, 38, 0]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'true': 'follows(C, D)', 'false': 'follows(E, A), recursion_accounttype(E, B)', 'false,true': 'follows(F, E), follows(E, F)', 'false,false': 'follows(A, G)', 'false,false,true': 'follows(G, H), recursion_accounttype(H, B)'}, {'true,true': [1.979, 4, 73], 'true,false': [1.02, 1, 4], 'false,true,true': [0.0, 0, 17], 'false,true,false': [0.0, 0, 0], 'false,false,true,true': [0.172, 0, 23], 'false,false,true,false': [2.245, 240, 9], 'false,false,false': [0.0, 17, 0]}]
['accounttype(A, B)', {'': 'follows(C, A), follows(A, C)', 'true': 'recursion_accounttype(C, B), follows(C, C)', 'true,false': 'follows(C, C)', 'false': 'follows(D, A), recursion_accounttype(D, B)', 'false,false': 'recursion_accounttype(E, B)', 'false,false,false': 'follows(A, F), follows(F, G)'}, {'true,true': [0.0, 0, 0], 'true,false,true': [0.0, 0, 0], 'true,false,false': [3.246, 176, 91], 'false,true': [0.16, 0, 13], 'false,false,true': [1.306, 2, 22], 'false,false,false,true': [0.091, 18, 0], 'false,false,false,false': [0.236, 43, 0]}]
['accounttype(A, B)', {'': 'follows(A, C)', 'true': 'follows(C, D), recursion_accounttype(D, B)', 'false': 'follows(E, A), follows(E, E)', 'false,false': 'follows(A, F)', 'false,false,false': 'follows(A, G), recursion_accounttype(G, B)'}, {'true,true': [1.752, 2, 107], 'true,false': [2.025, 226, 11], 'false,true': [0.0, 0, 0], 'false,false,true': [0.0, 0, 0], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.643, 13, 8]}]
['accounttype(A, B)', {'': 'follows(C, A), recursion_accounttype(C, B)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,false': 'follows(A, E)', 'false': 'follows(A, A)', 'false,false': 'follows(F, A), follows(A, F)', 'false,false,false': 'tweets(A, G)'}, {'true,true': [1.396, 2, 80], 'true,false,true': [0.07, 0, 2], 'true,false,false': [0.0, 0, 0], 'false,true': [0.0, 0, 0], 'false,false,true': [0.16, 171, 22], 'false,false,false,true': [1.403, 49, 13], 'false,false,false,false': [1.683, 22, 9]}]
['accounttype(A, B)', {'': 'follows(A, C), recursion_accounttype(C, B)', 'false': 'follows(D, A)', 'false,true': 'follows(D, E), recursion_accounttype(E, B)', 'false,true,true': 'follows(E, F)', 'false,false': 'recursion_accounttype(G, B)', 'false,false,false': 'follows(H, A)'}, {'true': [0.192, 3, 77], 'false,true,true,true': [0.711, 0, 32], 'false,true,true,false': [0.0, 0, 0], 'false,true,false': [0.039, 214, 0], 'false,false,true': [0.601, 0, 17], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [0.178, 38, 0]}]
['accounttype(A, B)', {'': 'follows(C, A)', 'true': 'follows(D, C), recursion_accounttype(D, B)', 'true,true': 'follows(A, E), follows(D, E)', 'true,false': 'follows(A, C)', 'true,false,false': 'follows(F, C), follows(F, A)', 'false': 'tweets(A, G)', 'false,false': 'follows(A, H), recursion_accounttype(H, B)', 'false,false,false': 'follows(I, A), follows(I, I)'}, {'true,true,true': [1.667, 2, 94], 'true,true,false': [0.012, 0, 9], 'true,false,true': [0.015, 182, 0], 'true,false,false,true': [0.0, 16, 0], 'true,false,false,false': [0.516, 14, 2], 'false,true': [1.001, 25, 12], 'false,false,true': [0.0, 0, 1], 'false,false,false,true': [0.0, 0, 0], 'false,false,false,false': [1.378, 13, 8]}]
{'': [0.2316623263888914, 0.2376543209876543], 'false': [0.22837370242214483, 0.2475], 'true': [0.04415294924554408, 0.01098765432098749], 'false,true': [-1.4802973661668753e-16, 5.046468293750712e-18], 'true,false': [-1.1546319456101628e-16, 0.062222222222222255], 'false,true,true': [-1.4802973661668753e-16, nan]}
{'': [0.00023052742324801455, 0.09879765183966227], 'false': [0.06662288785608952, 0.17219454006289175], 'false,false': [0.034438775510204085, 0.20778494726829175], 'false,false,false': [0.0017599172082911618, 0.2027275557991444], 'false,true': [nan, 0.06662288785608952], 'false,false,true': [nan, 0.034438775510204085]}
{'': [0.0218682755043608, 0.09270110666370843], 'false': [nan, 0.0927011066637084], 'false,false': [-1.0449157878825003e-16, 0.07774043910507657], 'false,false,false': [0.06491843392164802, 0.11449782956401378], 'true': [0.02157524721976997, 0.015707177841262965], 'true,true': [0.021425177723298897, 0.0], 'true,false': [0.003559000085587405, 0.003139528829797511], 'false,false,true': [0.0, 0.0]}
{'': [0.044087540941380225, 0.0006579769186921694], 'false': [9.626472836602499e-06, 0.0012309758283968128], 'false,false': [nan, 0.0012309758283968128], 'false,false,false': [nan, 0.0012309758283968128], 'false,true': [nan, 9.626472836607327e-06], 'false,true,false': [9.158595188832759e-06, 8.958775603901919e-08]}
{'': [0.06102131937667235, 0.058504539797092324], 'true': [0.05084025820500442, 0.20812665673250877], 'false': [-1.3061447348531253e-17, 0.0554407631045167], 'false,false': [0.05853628066572796, 0.0], 'false,false,true': [0.001289016175344377, 0.020239836449127132], 'false,true': [-1.3061447348531253e-17, nan]}
{'': [0.039454354894352055, 0.08151020389606116], 'false': [0.001969965993629914, 0.08695448620464376], 'false,false': [0.07103942812323145, 0.0010600078880972053], 'true': [nan, 0.03945435489435202], 'true,false': [nan, 0.039454354894352055], 'false,false,false': [0.00046157763597071133, 0.001289835286232907]}
{'': [0.04863855309471414, 0.019658806646110565], 'true': [0.028176259387592478, 0.017297489590160992], 'false': [nan, 0.019658806646110565], 'false,false': [nan, 0.019658806646110565], 'false,false,false': [nan, 0.019658806646110565]}
{'': [0.023378866636111863, 0.034776029522788444], 'false': [nan, 0.034776029522788535], 'false,false': [0.025476827018379417, 0.0521863679829662], 'false,false,false': [0.0317479712204084, 0.09132846455443479], 'true': [0.023775353945347945, 0.0024352399194201013], 'true,false': [0.0024352399194201013, nan]}
{'': [0.037023924225256674, 0.029455327085370294], 'false': [0.01785128861105944, 0.0748490218148405], 'false,false': [0.021271323862457153, 0.0008331033236729585], 'false,true': [0.015792538988801355, 7.143219004749128e-06], 'false,true,true': [0.015792538988801355, nan], 'false,false,false': [nan, 0.0008331033236729585]}
{'': [0.0233225120376176, 0.0503042242489477], 'false': [0.027073720936758194, 0.08805232865502886], 'false,false': [0.0, 0.09044503439318917], 'false,false,false': [nan, 0.09044503439318917], 'true': [0.02655945327773375, 0.0014127526219393925], 'true,true': [0.02894579831350896, 1.6141732836489402e-05], 'true,false': [1.1680730818142138e-06, 0.008848893208643554], 'true,false,false': [-2.6020852139652106e-18, 0.016619847069609037]}


******************************************
Performing Theory Revision
******************************************
Refining iteration 1
********************************
Candidate for revision
0;;accounttype(A, B) :- follows(C, A).;true;true
0;true;follows(D, C), recursion_accounttype(D, B).;true;true
0;true,false;follows(A, C).;true;true
0;false;tweets(A, E).;true;true
0;false,true;tweets(F, E), recursion_accounttype(F, B).;true;true
1;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
1;false;follows(A, D), follows(D, A).;true;true
1;false,false;follows(E, A), follows(F, E).;true;true
1;false,false,false;follows(A, G), recursion_accounttype(G, B).;true;true
2;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
2;true;follows(D, A), follows(A, D).;true;true
2;true,true;follows(C, E).;true;true
2;false;follows(G, A), recursion_accounttype(G, B).;true;true
2;false,true;follows(A, H).;true;true
3;;accounttype(A, B) :- recursion_accounttype(C, B).;true;true
3;false;follows(D, A).;true;true
3;false,true;tweets(A, F).;true;true
4;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
4;false;follows(E, A), recursion_accounttype(E, B).;true;true
4;false,false;follows(A, G).;true;true
4;false,false,true;follows(G, H), recursion_accounttype(H, B).;true;true
5;;accounttype(A, B) :- follows(C, A), follows(A, C).;true;true
5;false;follows(D, A), recursion_accounttype(D, B).;true;true
5;false,false;recursion_accounttype(E, B).;true;true
5;false,false,false;follows(A, F), follows(F, G).;true;true
7;;accounttype(A, B) :- follows(C, A), recursion_accounttype(C, B).;true;true
7;true;follows(D, C), recursion_accounttype(D, B).;true;true
8;;accounttype(A, B) :- follows(A, C), recursion_accounttype(C, B).;true;true
8;false;follows(D, A).;true;true
8;false,true;follows(D, E), recursion_accounttype(E, B).;true;true
8;false,false;recursion_accounttype(G, B).;true;true
9;;accounttype(A, B) :- follows(C, A).;true;true
9;true;follows(D, C), recursion_accounttype(D, B).;true;true
9;true,true;follows(A, E), follows(D, E).;true;true
9;true,false;follows(A, C).;true;true
9;true,false,false;follows(F, C), follows(F, A).;true;true
9;false;tweets(A, G).;true;true
9;false,false;follows(A, H), recursion_accounttype(H, B).;true;true


Refining candidate
***************************
Model training time 24.248
WILL Produced-Tree #1
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), recursion_accounttype(E, B) )
%   | | then if ( follows(E, A), tweets(E, F) )
%   | | | then return 0.8417554924765617;  // std dev = 0.992, 61.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=60 */
%   | | | else return 0.7043027812533584;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=11 */
%   | | else return 0.8581489350995121;  // std dev = 8.43e-08, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else if ( follows(A, C) )
%   | | then return -0.14185106490048827;  // std dev = 0.000, 177.000 (wgt'ed) examples reached here.  /* #neg=177 */
%   | | else if ( follows(A, G), tweets(A, H) )
%   | | | then return 0.011995088945666036;  // std dev = 1.301, 13.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=2 */
%   | | | else return -0.1418510649004878;  // std dev = 0.000, 18.000 (wgt'ed) examples reached here.  /* #neg=18 */
%   else if ( tweets(A, I) )
%   | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | then return 0.8581489350995123;  // std dev = 0.000, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | else return -0.14185106490048774;  // std dev = 1.05e-08, 21.000 (wgt'ed) examples reached here.  /* #neg=21 */
%   | else return 0.26723984419042146;  // std dev = 0.492, 22.000 (wgt'ed) examples reached here.  /* #neg=13 #pos=9 */
WILL Produced-Tree #2
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(A, D) )
%   | then return 0.6992303553869585;  // std dev = 0.161, 76.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=74 */
%   | else return 0.6083623010998434;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   else if ( follows(A, E), follows(E, A) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( tweets(A, G), tweets(F, G) )
%   | | | then return 0.4994530261603097;  // std dev = 0.866, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | | else return 0.7494530261603096;  // std dev = 0.000, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | else if ( tweets(A, H) )
%   | | | then return -0.05454242448033419;  // std dev = 2.801, 143.000 (wgt'ed) examples reached here.  /* #neg=131 #pos=12 */
%   | | | else return -0.06649686754657655;  // std dev = 1.411, 43.000 (wgt'ed) examples reached here.  /* #neg=40 #pos=3 */
%   | else if ( follows(I, A), follows(J, I) )
%   | | then return -0.10412095013342242;  // std dev = 0.163, 36.000 (wgt'ed) examples reached here.  /* #neg=35 #pos=1 */
%   | | else if ( follows(A, K), recursion_accounttype(K, B) )
%   | | | then return 0.7452075089279165;  // std dev = 0.089, 4.000 (wgt'ed) examples reached here.  /* #pos=4 */
%   | | | else return 0.11330903684883346;  // std dev = 3.221, 58.000 (wgt'ed) examples reached here.  /* #neg=41 #pos=17 */
WILL Produced-Tree #3
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A), follows(A, D) )
%   | then if ( follows(C, E) )
%   | | then if ( tweets(A, F) )
%   | | | then return 0.5717204469535629;  // std dev = 0.147, 57.000 (wgt'ed) examples reached here.  /* #pos=57 */
%   | | | else return 0.4944876886343275;  // std dev = 0.965, 14.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=13 */
%   | | else return 0.5857065100863263;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | else return 0.6585772446522162;  // std dev = 0.299, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   else if ( follows(G, A), recursion_accounttype(G, B) )
%   | then return 0.5708293209250042;  // std dev = 0.011, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | else if ( follows(H, A) )
%   | | then if ( follows(H, I), follows(I, A) )
%   | | | then return -0.10247130611446183;  // std dev = 1.457, 154.000 (wgt'ed) examples reached here.  /* #neg=151 #pos=3 */
%   | | | else return 0.014708528706071472;  // std dev = 2.712, 74.000 (wgt'ed) examples reached here.  /* #neg=62 #pos=12 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.07659674631256486;  // std dev = 2.177, 31.000 (wgt'ed) examples reached here.  /* #neg=23 #pos=8 */
%   | | | else return 0.17613528777212317;  // std dev = 2.212, 24.000 (wgt'ed) examples reached here.  /* #neg=15 #pos=9 */
WILL Produced-Tree #4
% FOR accounttype(A, B):
%   if ( recursion_accounttype(C, B) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(E, A) )
%   | | then return 0.42743780220805794;  // std dev = 0.085, 69.000 (wgt'ed) examples reached here.  /* #pos=69 */
%   | | else if ( follows(A, F), follows(G, D) )
%   | | | then return 0.2219102475987058;  // std dev = 0.880, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   | | | else return 0.4592728269046614;  // std dev = 0.156, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | else if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then if ( follows(I, A), tweets(A, J) )
%   | | | then return 0.530094672603473;  // std dev = 0.276, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | | else return 0.4325344221711384;  // std dev = 0.131, 6.000 (wgt'ed) examples reached here.  /* #pos=6 */
%   | | else if ( tweets(A, K) )
%   | | | then return 0.6625178953251373;  // std dev = 0.946, 22.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=21 */
%   | | | else return 0.768090785991291;  // std dev = 0.081, 11.000 (wgt'ed) examples reached here.  /* #pos=11 */
%   else if ( follows(L, A) )
%   | then return -0.11262050846360436;  // std dev = 0.008, 204.000 (wgt'ed) examples reached here.  /* #neg=204 */
%   | else return -0.18988673608466078;  // std dev = 0.189, 33.000 (wgt'ed) examples reached here.  /* #neg=33 */
WILL Produced-Tree #5
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(E, D), follows(E, A) )
%   | | then if ( recursion_accounttype(E, B), recursion_accounttype(D, B) )
%   | | | then return 0.3254770182298943;  // std dev = 0.039, 41.000 (wgt'ed) examples reached here.  /* #pos=41 */
%   | | | else return 0.13042250589688975;  // std dev = 1.777, 20.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=16 */
%   | | else return 0.3760734592514132;  // std dev = 0.085, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return 0.11708843853593717;  // std dev = 0.932, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A), recursion_accounttype(F, B) )
%   | then if ( follows(A, G) )
%   | | then return 0.34014538271854594;  // std dev = 0.023, 9.000 (wgt'ed) examples reached here.  /* #pos=9 */
%   | | else return 0.2214524002819861;  // std dev = 0.314, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else if ( follows(A, H) )
%   | | then if ( follows(H, I), recursion_accounttype(I, B) )
%   | | | then return 0.575391239522856;  // std dev = 0.176, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | | else return -0.08797505279482286;  // std dev = 2.032, 255.000 (wgt'ed) examples reached here.  /* #neg=246 #pos=9 */
%   | | else return -0.0943993848841431;  // std dev = 0.000, 9.000 (wgt'ed) examples reached here.  /* #neg=9 */
WILL Produced-Tree #6
% FOR accounttype(A, B):
%   if ( follows(C, A), follows(A, C) )
%   then if ( follows(D, A), recursion_accounttype(D, B) )
%   | then if ( tweets(D, E), tweets(A, E) )
%   | | then if ( follows(F, A), follows(F, D) )
%   | | | then return 0.21834978168896535;  // std dev = 1.368, 44.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=42 */
%   | | | else return -0.07047881962487972;  // std dev = 0.837, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.27609541537074184;  // std dev = 0.022, 25.000 (wgt'ed) examples reached here.  /* #pos=25 */
%   | else if ( follows(A, G), recursion_accounttype(G, B) )
%   | | then return 0.15618557759089394;  // std dev = 0.307, 8.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=7 */
%   | | else return -0.054882775980990776;  // std dev = 0.138, 207.000 (wgt'ed) examples reached here.  /* #neg=192 #pos=15 */
%   else if ( follows(H, A), recursion_accounttype(H, B) )
%   | then return 0.29593187836953716;  // std dev = 0.030, 13.000 (wgt'ed) examples reached here.  /* #pos=13 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then if ( follows(A, J), follows(J, K) )
%   | | | then return 0.32044201555427115;  // std dev = 1.036, 13.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=12 */
%   | | | else return 0.5660149698611237;  // std dev = 0.251, 10.000 (wgt'ed) examples reached here.  /* #pos=10 */
%   | | else return -0.12160623939757306;  // std dev = 0.033, 63.000 (wgt'ed) examples reached here.  /* #neg=63 */
WILL Produced-Tree #7
% FOR accounttype(A, B):
%   if ( follows(C, A), tweets(C, D) )
%   then if ( tweets(E, D), recursion_accounttype(E, B) )
%   | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | then if ( follows(F, E), follows(E, F) )
%   | | | then return 0.21734805348597494;  // std dev = 1.023, 67.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=66 */
%   | | | else return 0.011425279113846137;  // std dev = 1.183, 8.000 (wgt'ed) examples reached here.  /* #neg=2 #pos=6 */
%   | | else return 0.33042256185505003;  // std dev = 0.114, 32.000 (wgt'ed) examples reached here.  /* #pos=32 */
%   | else return -0.08894912754466588;  // std dev = 0.094, 220.000 (wgt'ed) examples reached here.  /* #neg=220 */
%   else if ( follows(A, G), recursion_accounttype(G, B) )
%   | then return 0.2239837333525895;  // std dev = 0.054, 5.000 (wgt'ed) examples reached here.  /* #pos=5 */
%   | else if ( follows(A, H), follows(H, I) )
%   | | then if ( recursion_accounttype(I, B) )
%   | | | then return 0.35056622613820143;  // std dev = 0.153, 8.000 (wgt'ed) examples reached here.  /* #pos=8 */
%   | | | else return -0.11820515290310923;  // std dev = 0.083, 16.000 (wgt'ed) examples reached here.  /* #neg=16 */
%   | | else if ( tweets(A, J) )
%   | | | then return 0.03819608826124386;  // std dev = 0.822, 13.000 (wgt'ed) examples reached here.  /* #neg=9 #pos=4 */
%   | | | else return -0.00461449899441876;  // std dev = 1.291, 21.000 (wgt'ed) examples reached here.  /* #neg=16 #pos=5 */
WILL Produced-Tree #8
% FOR accounttype(A, B):
%   if ( follows(C, A), recursion_accounttype(C, B) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), tweets(A, F) )
%   | | then return 0.17437609879978236;  // std dev = 0.122, 59.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=58 */
%   | | else if ( follows(A, G) )
%   | | | then return 0.12233766582667274;  // std dev = 0.981, 15.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=14 */
%   | | | else return 0.06478251157132114;  // std dev = 0.943, 9.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=8 */
%   | else return 0.24160457462713703;  // std dev = 0.124, 2.000 (wgt'ed) examples reached here.  /* #pos=2 */
%   else if ( follows(H, A) )
%   | then return -0.043344903571423954;  // std dev = 0.131, 226.000 (wgt'ed) examples reached here.  /* #neg=203 #pos=23 */
%   | else if ( tweets(A, I) )
%   | | then if ( tweets(J, I), recursion_accounttype(J, B) )
%   | | | then return 0.26701985940790723;  // std dev = 0.271, 12.000 (wgt'ed) examples reached here.  /* #pos=12 */
%   | | | else return -0.1040007186881755;  // std dev = 0.063, 28.000 (wgt'ed) examples reached here.  /* #neg=28 */
%   | | else if ( follows(A, K), follows(K, L) )
%   | | | then return 0.0426480043592449;  // std dev = 0.647, 8.000 (wgt'ed) examples reached here.  /* #neg=5 #pos=3 */
%   | | | else return 0.056221564995129425;  // std dev = 1.240, 17.000 (wgt'ed) examples reached here.  /* #neg=11 #pos=6 */
WILL Produced-Tree #9
% FOR accounttype(A, B):
%   if ( follows(A, C), recursion_accounttype(C, B) )
%   then if ( follows(D, A) )
%   | then if ( follows(D, E), follows(E, A) )
%   | | then if ( recursion_accounttype(D, B) )
%   | | | then return 0.16725553801876433;  // std dev = 0.132, 55.000 (wgt'ed) examples reached here.  /* #pos=55 */
%   | | | else return -0.12567242161363;  // std dev = 0.751, 3.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=2 */
%   | | else return 0.21923241401642302;  // std dev = 0.071, 16.000 (wgt'ed) examples reached here.  /* #pos=16 */
%   | else return -0.050159023468717215;  // std dev = 0.939, 5.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=4 */
%   else if ( follows(F, A) )
%   | then if ( follows(F, G), recursion_accounttype(G, B) )
%   | | then if ( follows(H, A), recursion_accounttype(H, B) )
%   | | | then return 0.15564210745788631;  // std dev = 0.055, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | | else return 0.381500743877962;  // std dev = 0.061, 15.000 (wgt'ed) examples reached here.  /* #pos=15 */
%   | | else return -0.07853526351645951;  // std dev = 0.065, 192.000 (wgt'ed) examples reached here.  /* #neg=192 */
%   | else if ( recursion_accounttype(I, B) )
%   | | then return 0.33140679549027796;  // std dev = 0.113, 17.000 (wgt'ed) examples reached here.  /* #pos=17 */
%   | | else return -0.12125753073741435;  // std dev = 0.036, 46.000 (wgt'ed) examples reached here.  /* #neg=46 */
WILL Produced-Tree #10
% FOR accounttype(A, B):
%   if ( follows(C, A) )
%   then if ( follows(D, C), recursion_accounttype(D, B) )
%   | then if ( follows(A, E), follows(D, E) )
%   | | then if ( follows(A, F), recursion_accounttype(F, B) )
%   | | | then return 0.10157436783394654;  // std dev = 1.810, 75.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=71 */
%   | | | else return 0.23729524158117696;  // std dev = 0.393, 23.000 (wgt'ed) examples reached here.  /* #pos=23 */
%   | | else return 0.0451929604812301;  // std dev = 0.300, 10.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=9 */
%   | else return -0.06919174853779318;  // std dev = 0.042, 185.000 (wgt'ed) examples reached here.  /* #neg=183 #pos=2 */
%   else if ( tweets(A, G) )
%   | then if ( follows(A, H), recursion_accounttype(H, B) )
%   | | then return -0.11178744725339193;  // std dev = 0.890, 4.000 (wgt'ed) examples reached here.  /* #neg=1 #pos=3 */
%   | | else return -0.009668740285016294;  // std dev = 0.123, 34.000 (wgt'ed) examples reached here.  /* #neg=25 #pos=9 */
%   | else if ( follows(A, I), recursion_accounttype(I, B) )
%   | | then return 0.22851617625862575;  // std dev = 0.000, 1.000 (wgt'ed) examples reached here.  /* #pos=1 */
%   | | else if ( follows(A, J), follows(J, K) )
%   | | | then return 0.03959852003642207;  // std dev = 0.505, 7.000 (wgt'ed) examples reached here.  /* #neg=4 #pos=3 */
%   | | | else return 0.011142963532017677;  // std dev = 1.047, 17.000 (wgt'ed) examples reached here.  /* #neg=12 #pos=5 */
Inference time using transfer learning ['%', 'Total', 'inference', 'time', '(10', 'trees):', '43.044', 'seconds']
Refined model CLL: -0.104016


******************************************
Best model found
******************************************
Results 

CLL : -0.104124 

AUC ROC : 0.995823 

AUC PR : 0.509277 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 24.248 

Total Inference Time : 39.55757665634155 

Total revision time: 74.15916284561158
Best scored revision CLL: -0.104016


Results 

CLL : -0.104124 

AUC ROC : 0.995823 

AUC PR : 0.509277 

Precision : 0.336957 

Recall : 0.99359 

F1 : 0.503247 

Total Learning Time : 101.80992921829224 

Total Inference Time : 39.55757665634155 

